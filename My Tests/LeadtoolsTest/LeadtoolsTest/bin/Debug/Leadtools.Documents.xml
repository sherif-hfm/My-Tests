<?xml version="1.0"?>
<doc processed="true">
  <assembly>
    <name>Leadtools.Documents</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Documents.DocumentAnnotations">
      <summary>
            Manages the global annotations settings for the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentAnnotations" /> manages the global annotations settings of the document. It can be accessed through the
            <see cref="P:Leadtools.Documents.Document.Annotations" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentAnnotations" /> contains the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.DocumentAnnotations.AnnotationsUri" />: The location of the external annotation file used when this document was loaded.</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentAnnotations.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentAnnotations" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentAnnotations" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentAnnotations.AnnotationsUri">
      <summary>
            Gets the location of the external annotation file used when this document was loaded.
            </summary>
      <value>The location of the external annotation file used when this document was loaded.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentAnnotations.AnnotationsUri" /> is set by the <see cref="T:Leadtools.Documents.Document" /> object when the document was loaded. It will hold the same value passed
            to <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri">LoadDocumentOptions.AnnotationsUri</see> passed to
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>,
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)">DocumentPage.GetAnnotations</see> is used to get the annotations for a page from the original source.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.Constants">
      <summary>
            Contains constant values used by this framework.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PDFMimeType">
      <summary>
            PDF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XPSMimeType">
      <summary>
            XPS MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PCXMimeType">
      <summary>
            PCX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.GIFMimeType">
      <summary>
            GIF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.TIFMimeType">
      <summary>
            TIFF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.TGAMimeType">
      <summary>
            TGA MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.JPEGMimeType">
      <summary>
            JPEG MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.CMPMimeType">
      <summary>
            LEAD CMP MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.BMPMimeType">
      <summary>
            BMP MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.MetafileMimeType">
      <summary>
            WMF/EMF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PostscriptMimeType">
      <summary>
            Postscrtpt MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.FAXMimeType">
      <summary>
            FAX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.ABCMimeType">
      <summary>
            ABC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.CALSMimeType">
      <summary>
            CALS MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.RASMimeType">
      <summary>
            Sun Raster MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.IOCAMimeType">
      <summary>
            IOCA MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PNGMimeType">
      <summary>
            PNG MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PSDMimeType">
      <summary>
            PCD MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.FPXMimeType">
      <summary>
            FPX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DICOMMimeType">
      <summary>
            DICOM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.WinIconMimeType">
      <summary>
            Windows Icon MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.WinCursorMimeType">
      <summary>
            Windows Cursor MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PBMMimeType">
      <summary>
            PBM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PGMMimeType">
      <summary>
            PGM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PPMMimeType">
      <summary>
            PPM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XPMMimeType">
      <summary>
            XPM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XBMMimeType">
      <summary>
            XBM MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.IFFMimeType">
      <summary>
            IFF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XWDMimeType">
      <summary>
            XWD MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.JBIGMimeType">
      <summary>
            JBIG MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.JBIG2MimeType">
      <summary>
            JBIG 2 MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.KDCMimeType">
      <summary>
            KDC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.SGIMimeType">
      <summary>
            SGI MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.RAWMimeType">
      <summary>
            RAW MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.J2KMimeType">
      <summary>
            J2K MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.CMWMimeType">
      <summary>
            CMW MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.MRCMimeType">
      <summary>
            MRC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.LEADMRCMimeType">
      <summary>
            LEAD MRC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.WBMPMimeType">
      <summary>
            WBMP MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.ABICMimeType">
      <summary>
            ABIC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.SCTMimeType">
      <summary>
            SCT MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.SMPMimeType">
      <summary>
            SMP MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DCSMimeType">
      <summary>
            DCS MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DCRMimeType">
      <summary>
            DCR MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.ECWMimeType">
      <summary>
            ECW MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.RTFMimeType">
      <summary>
            RTF MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.TXTMimeType">
      <summary>
            TXT MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.JXRMimeType">
      <summary>
            JXR MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XLSMimeType">
      <summary>
            XLS MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DOCMimeType">
      <summary>
            DOC MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PPTMimeType">
      <summary>
            PPT MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DOCXMimeType">
      <summary>
            DOCX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.XLSXMimeType">
      <summary>
            XLSX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.PPTXMimeType">
      <summary>
            PPTX MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.Constants.DefaultMimeType">
      <summary>
            Default binary MIME type
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.CreateDocumentOptions">
      <summary>
            Options to use when creating a new document.
            </summary>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see> to specify the options to use when creating new documents.</para>
        <para>For more information on creating documents, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.CreateDocumentOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.CreateDocumentOptions" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.CreateDocumentOptions.CachePolicy">
      <summary>
            The cache policy to use with the new document.
            </summary>
      <value>The cache policy to use for the new document that determine when the document and its parts are purged. Default value is
            a default <see cref="T:Leadtools.Caching.CacheItemPolicy" /> that never expires.</value>
      <remarks>
        <para>The policy must contain the desired absolute or sliding expiration date for the document and its part.</para>
        <para>Using a a cache policy does not mean the document will be stored in the cache forever, refer to
            <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> for more information on how the cache policy is used.</para>
        <para>For more information on creating documents, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.CreateDocumentOptions.MimeType">
      <summary>
            Gets or sets the MIME type of the new document.
            </summary>
      <value>The MIME type of the new document. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>This value will be set as is into the <see cref="P:Leadtools.Documents.Document.MimeType">Document.MimeType</see> property.</para>
        <para>For more information on creating documents, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.Document">
      <summary>
             Encapsulates a multi-page document with support for raster and SVG images, bookmarks, annotations and text data.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.Document" /> class provides uniform support for any type of document. The actual data behind can be
             a PDF document, Microsoft Word document, TIFF image, an AutoCAD DWG drawing or any other of the hundreds of different raster, document or vector file
             formats supported by LEADTOOLS. <see cref="T:Leadtools.Documents.Document" /> encapsulates the common functionality needed to access this data in a uniform manner with
             the same properties, methods and data structures.</para>
        <para>
          <h2>Document Viewer</h2>
        </para>
        <para>
          <see cref="N:Leadtools.Documents" /> is used as an input to <see cref="T:DOXUI.Topics.DocumentViewer_Using">DocumentViewer</see> which can be used to view the document and its pages
             with thumbnails, virtualization, text search and annotation support.</para>
        <para>
          <h2>Document Converter</h2>
        </para>
        <para>
          <see cref="N:Leadtools.Documents" /> can also used as an input to <see cref="T:DOXC.Topics.DocumentConverters_Using">DocumentConverter</see> to convert the document to any other file format
             with or without using OCR technology.</para>
        <para>
          <h2>Creating a Document Class</h2>
        </para>
        <para>A <see cref="T:Leadtools.Documents.Document" /> instance be obtained using the following:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            </term>
            <description>
              <para>Create a new instance from an existing document file on disk or network share.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>
            </term>
            <description>
              <para>Create a new instance from a document stored in a remote URL.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>
            </term>
            <description>
              <para>Create a new instance asynchronously from a document stored in a remote URL or disk.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>
            </term>
            <description>
              <para>Create a new instance asynchronously from a document stored in a remote URL.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>
            </term>
            <description>
              <para>Loads a previously saved document from the cache.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>
            </term>
            <description>
              <para>Creates a new empty document.</para>
            </description>
          </item>
        </list>
        <para>After the document is obtained, <see cref="P:Leadtools.Documents.Document.InternalObject" /> will be to the internal LEADTOOLS object used with the document.</para>
        <para>
          <h2>Encryption</h2>
        </para>
        <para>In most cases, the <see cref="T:Leadtools.Documents.Document" /> is ready to use after it has been obtained. However, some documents such as PDF can be encrypted
             and required a password before it can be parsed and used. Most of the properties and methods of <see cref="T:Leadtools.Documents.Document" /> will throw an error
             if the document has not been decrypted. <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> can be used to check if the document is encrypted and if so, <see cref="M:Leadtools.Documents.Document.Decrypt(System.String)" />
             must be called with a password obtained from the user to unlock the document. When that happens, the value of <see cref="P:Leadtools.Documents.Document.IsDecrypted" /> becomes
             <strong>true</strong> and the document is ready to be used. Note that <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> will stay <strong>true</strong> to indicate
             the original state of the document.</para>
        <para>
          <h2>Saving a Document Class</h2>
        </para>
        <para>The <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)" /> and <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)" /> methods can be used to save the document to a disk file or remote URL. These methods
             support saving the document to a raster image format, not a document. In most cases, converting a document should be performed with more options and
             control using the <see cref="T:DOXC.Topics.DocumentConverters_Using">DocumentConverter</see> class.</para>
        <para>
          <h2>Document Identifier</h2>
        </para>
        <para>Each document has a unique identifier that is set at creation time by the framework. This is stored in the <see cref="P:Leadtools.Documents.Document.DocumentId" /> property.</para>
        <para>The ID is important when using the document with the cache system and is the only value needed to re-construct completely the document from the cache.</para>
        <para>
          <h2>Caching</h2>
        </para>
        <para>Documents can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in
             most situations. Therefore, the <see cref="T:Leadtools.Documents.Document" /> class was designed to use an external caching system to store the modified. Refer to
             <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.Document.HasCache" /> determines if this document is using the cache system. <see cref="M:Leadtools.Documents.Document.SaveToCache" /> can be used to save a document to the
             cache and re-loading it using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>.
             <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> and <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> can be used to determine what happens to the cache data associated with the document
             when it is disposed.</para>
        <para>
          <h2>Structure and Table of Content</h2>
        </para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentStructure" /> manages the structure of the document. This includes the bookmarks that represents the table of content. It
             can be accessed through the <see cref="P:Leadtools.Documents.Document.Structure" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>
          <h2>Pages</h2>
        </para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> manages the pages of the document. It can be accessed through the <see cref="P:Leadtools.Documents.Document.Pages" /> property of
             <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> derives from <see cref="T:Leadtools.LeadCollection`1" /> and thus can implement <see cref="T:System.Collections.ObjectModel.Collection`1" />. You can use any
             of the collection methods to add, remove, insert, get, set and iterate through the pages.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> contains a collection of <see cref="T:Leadtools.Documents.DocumentPage" /> that contains the data for a single page in the document.
             The page item is the main entry point for using the documents in a viewer or converter application. It contains functions to retrieve or update
             the raster or XVG image of the page, text data, annotations and hyperlinks. Refer to <see cref="T:Leadtools.Documents.DocumentPage" /> for more information.</para>
        <para>
          <h2>Metadata</h2>
        </para>
        <para>The metadata includes default values added by the <see cref="T:Leadtools.Documents.DocumentFactory" /> when the document is loaded or created as well as any other data
             extracted from the document file itself, such as author, subject and any keywords stored by other applications.</para>
        <para>
          <h2>Properties</h2>
        </para>
        <para>The following properties are part of <see cref="T:Leadtools.Documents.Document" /> and contains useful information:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.DocumentId" />: The unique identifier of this document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.DocumentType" />: The document type.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.MimeType" />: The MIME type of the document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.Uri" />: The URL to the original document physical location.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.IsDownloaded" />: Determines if the document was downloaded into the cache or a temp file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.IsReadOnly" />: Determines if the document is read-only and cannot be changed.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.UserData" />: User-defined data associated with this document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" />: Gets the path to the file holding the original document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.Document.GetAnnotationsFileName" />: Gets the path to the file holding the original annotations.</para>
            </description>
          </item>
        </list>
        <para>
          <h2>Global Document Settings</h2>
        </para>
        <para>The <see cref="T:Leadtools.Documents.Document" /> class contains the following to manage global settings used throughout the document.</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.Images" />: Manages the raster and SVG image settings of the document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.RasterCodecs" />: The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to use when loading and
             saving <see cref="T:Leadtools.RasterImage" /> and <see cref="T:Leadtools.Svg.SvgDocument" /> objects.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.Annotations" />: Manages the annotations settings of the document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.Text" />: Manages the text and OCR recognition settings of the document.</para>
            </description>
          </item>
        </list>
        <para>
          <h2>Document Units</h2>
        </para>
        <para>
          <see cref="T:Leadtools.Documents.Document" /> uses independent units of 1/720 of an inch for all items. This value is stored in <see cref="F:Leadtools.Documents.Document.UnitsPerInch" />
             constant (720). Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
        <para>
          <h2>Disposing</h2>
        </para>
        <para>
          <see cref="T:Leadtools.Documents.Document" /> implements <see cref="T:System.IDisposable" /> and must be disposed after it has been used. Refer to <see cref="T:System.IDisposable" />
             in .NET for more information.</para>
        <para>The document can be re-constructed as is after it has been disposed it is saved into the cache if <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> was set
             to <strong>true</strong> or if <see cref="M:Leadtools.Documents.Document.SaveToCache" /> was used.</para>
      </remarks>
      <seealso cref="T:DOX.Topics.Documents_Features">Documents Library Features</seealso>
      <seealso cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</seealso>
      <seealso cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</seealso>
      <seealso cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</seealso>
      <seealso cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</seealso>
      <seealso cref="T:DOXUI.Topics.DocumentViewer_Using">Using LEADTOOLS Document Viewer</seealso>
      <seealso cref="T:DOXC.Topics.DocumentConverters_Using">Using LEADTOOLS Document Converters</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Private Sub New()
      End Sub
      Public Shared Function CreateCache() As FileCache
         Dim cacheDir As String = Path.Combine(ImagesPath.Path, "cache")
         If Directory.Exists(cacheDir) Then
            Directory.Delete(cacheDir, True)
         End If
         Directory.CreateDirectory(cacheDir)

         Dim cache As New FileCache()
         cache.CacheDirectory = cacheDir

         Return cache
      End Function

      Public Shared Sub PrintOutDocumentInfo(ByVal document As Document)
         Console.WriteLine("General")
         Console.WriteLine("  DocumentId:" &amp; document.DocumentId)
         Console.WriteLine("  Uri:" &amp; document.Uri.ToString())
         Console.WriteLine("  IsDownloaded:" &amp; document.IsDownloaded)
         Console.WriteLine("  DocumentFileName:" &amp; document.GetDocumentFileName())
         Console.WriteLine("  IsReadOnly:" &amp; document.IsReadOnly)
         Console.WriteLine("  MimeType:" &amp; document.MimeType)
         Console.WriteLine("  IsEncrypted:" &amp; document.IsEncrypted)
         Console.WriteLine("  IsDecrypted:" &amp; document.IsDecrypted)
         Console.WriteLine("Cache")
         Console.WriteLine("  HasCache:" &amp; document.HasCache)
         Console.WriteLine("  AutoDeleteFromCache:" &amp; document.AutoDeleteFromCache)
         If document.HasCache Then
            Dim policy As CacheItemPolicy = document.CreateCacheItemPolicy()
            Console.WriteLine("  CacheItemPolicy:{0} {1}", policy.AbsoluteExpiration, policy.SlidingExpiration)
         Else
            Console.WriteLine("  CacheItemPolicy: none")
         End If
         Console.WriteLine("Metadata")
         For Each item As KeyValuePair(Of String, String) In document.Metadata
            Console.WriteLine("  {0} {1}", item.Key, item.Value)
         Next item
         Console.WriteLine("Annotations")
         Console.WriteLine("  AnnotationsUri:" &amp; document.Annotations.AnnotationsUri.ToString())

         Console.WriteLine("Images")
         Console.WriteLine("  DefaultBitsPerPixel:{0}", document.Images.DefaultBitsPerPixel)
         Console.WriteLine("  ThumbnailPixelSize:{0}", document.Images.ThumbnailPixelSize)

         Console.WriteLine("Pages")
         Console.WriteLine("  DefaultPageSize:{0}", document.Pages.DefaultPageSize)
         Console.WriteLine("  DefaultResolution:{0}", document.Pages.DefaultResolution)
         Console.WriteLine("  Count:" &amp; document.Pages.Count)

         For Each page As Leadtools.Documents.DocumentPage In document.Pages
            Console.WriteLine("    PageNumber:" &amp; page.PageNumber)
            Console.WriteLine("      OriginalPageNumber:" &amp; page.OriginalPageNumber)
            Console.WriteLine("      Size:{0}", page.Size)
            Console.WriteLine("      Resolution:{0}", page.Resolution)
            Console.WriteLine("      IsDeleted:" &amp; page.IsDeleted)
            Console.WriteLine("      IsImageModified:" &amp; page.IsImageModified)

            Using rasterImage As RasterImage = page.GetImage()
               If Not rasterImage Is Nothing Then
                  Console.WriteLine("Image {0} by {1} {2}bpp", rasterImage.Width, rasterImage.Height, rasterImage.BitsPerPixel)
               Else
                  Console.WriteLine("null")
               End If
            End Using

            Using thumbnail As RasterImage = page.GetThumbnailImage()
               If Not thumbnail Is Nothing Then
                  Console.WriteLine("Thumbnail {0} by {1} {2}bpp", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel)
               Else
                  Console.WriteLine("null")
               End If
            End Using

            Console.WriteLine("     Annotations")
            Console.WriteLine("       IsAnnotationsModified:" &amp; page.IsAnnotationsModified)
            Console.WriteLine("       HasEmbeddedAnnotations:" &amp; page.HasEmbeddedAnnotations)
            Dim container As AnnContainer = page.GetAnnotations(False)
            If Not container Is Nothing Then
               Console.WriteLine("       Size:" &amp; container.Size.ToString())
               Console.WriteLine("       Objects:" &amp; container.Children.Count)
               For Each child As AnnObject In container.Children
                  Console.WriteLine("        FriendlyName:" &amp; child.FriendlyName)
                  Console.WriteLine("        Bounds:" &amp; child.Bounds.ToString())
               Next child
            Else
               Console.WriteLine("       NULL")
            End If
         Next page

         Console.WriteLine("--------")
      End Sub
      Public Shared Sub DocumentExample()
         DocumentFactory.Cache = CreateCache()

         Dim policy As New CacheItemPolicy()
         policy.AbsoluteExpiration = DateTime.Now + New TimeSpan(0, 0, 1)
         policy.SlidingExpiration = New TimeSpan(0, 0, 1)

         Dim options As New LoadDocumentOptions()
         options.CachePolicy = policy

         Dim documentId As String = Nothing

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            document.AutoDeleteFromCache = False

            PrintOutDocumentInfo(document)

            documentId = document.DocumentId
            document.SaveToCache()
         End Using

         System.Threading.Thread.Sleep(2000)

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromCache(documentId)
            If Nothing Is document Then
               Console.WriteLine("Cached document was expired and deleted!")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static FileCache CreateCache()
      {
         var cacheDir = Path.Combine(ImagesPath.Path, "cache");
         if (Directory.Exists(cacheDir))
            Directory.Delete(cacheDir, true);
         Directory.CreateDirectory(cacheDir);

         var cache = new FileCache();
         cache.CacheDirectory = cacheDir;

         return cache;
      }

      public static void PrintOutDocumentInfo(Document document)
      {
         Console.WriteLine("General");
         Console.WriteLine("  DocumentId:" + document.DocumentId);
         Console.WriteLine("  Uri:" + document.Uri);
         Console.WriteLine("  IsDownloaded:" + document.IsDownloaded);
         Console.WriteLine("  DocumentFileName:" + document.GetDocumentFileName());
         Console.WriteLine("  IsReadOnly:" + document.IsReadOnly);
         Console.WriteLine("  MimeType:" + document.MimeType);
         Console.WriteLine("  IsEncrypted:" + document.IsEncrypted);
         Console.WriteLine("  IsDecrypted:" + document.IsDecrypted);
         Console.WriteLine("  UserData:" + document.UserData);
         Console.WriteLine("Cache");
         Console.WriteLine("  HasCache:" + document.HasCache);
         Console.WriteLine("  AutoDeleteFromCache:" + document.AutoDeleteFromCache);
         if (document.HasCache)
         {
            var policy = document.CreateCacheItemPolicy();
            Console.WriteLine("  CacheItemPolicy:{0} {1}", policy.AbsoluteExpiration, policy.SlidingExpiration);
         }
         else
         {
            Console.WriteLine("  CacheItemPolicy: none");
         }
         Console.WriteLine("Metadata");
         foreach (var item in document.Metadata)
            Console.WriteLine("  {0} {1}", item.Key, item.Value);
         Console.WriteLine("Annotations");
         Console.WriteLine("  AnnotationsUri:" + document.Annotations.AnnotationsUri);

         Console.WriteLine("Images");
         Console.WriteLine("  DefaultBitsPerPixel:{0}", document.Images.DefaultBitsPerPixel);
         Console.WriteLine("  ThumbnailPixelSize:{0}", document.Images.ThumbnailPixelSize);

         Console.WriteLine("Pages");
         Console.WriteLine("  DefaultPageSize:{0}", document.Pages.DefaultPageSize);
         Console.WriteLine("  DefaultResolution:{0}", document.Pages.DefaultResolution);
         Console.WriteLine("  Count:" + document.Pages.Count);

         foreach (var page in document.Pages)
         {
            Console.WriteLine("    PageNumber:" + page.PageNumber);
            Console.WriteLine("      OriginalPageNumber:" + page.OriginalPageNumber);
            Console.WriteLine("      Size:{0}", page.Size);
            Console.WriteLine("      Resolution:{0}", page.Resolution);
            Console.WriteLine("      UserData:" + page.UserData);
            Console.WriteLine("      IsDeleted:" + page.IsDeleted);
            Console.WriteLine("      IsImageModified:" + page.IsImageModified);

            using (var rasterImage = page.GetImage())
            {
               if (rasterImage != null)
                  Console.WriteLine("Image {0} by {1} {2}bpp", rasterImage.Width, rasterImage.Height, rasterImage.BitsPerPixel);
               else
                  Console.WriteLine("null");
            }

            using (var thumbnail = page.GetThumbnailImage())
            {
               if (thumbnail != null)
                  Console.WriteLine("Thumbnail {0} by {1} {2}bpp", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel);
               else
                  Console.WriteLine("null");
            }

            Console.WriteLine("     Annotations");
            Console.WriteLine("       IsAnnotationsModified:" + page.IsAnnotationsModified);
            Console.WriteLine("       HasEmbeddedAnnotations:" + page.HasEmbeddedAnnotations);
            var container = page.GetAnnotations(false);
            if (container != null)
            {
               Console.WriteLine("       Size:" + container.Size);
               Console.WriteLine("       Objects:" + container.Children.Count);
               foreach (var child in container.Children)
               {
                  Console.WriteLine("        FriendlyName:" + child.FriendlyName);
                  Console.WriteLine("        Bounds:" + child.Bounds);
               }
            }
            else
            {
               Console.WriteLine("       NULL");
            }
         }

         Console.WriteLine("--------");
      }
      public static void DocumentExample()
      {
         DocumentFactory.Cache = CreateCache();

         var policy = new CacheItemPolicy();
         policy.AbsoluteExpiration = DateTime.Now + new TimeSpan(0, 0, 1);
         policy.SlidingExpiration = new TimeSpan(0, 0, 1);

         var options = new LoadDocumentOptions();
         options.CachePolicy = policy;

         string documentId = null;

         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            document.AutoDeleteFromCache = false;

            PrintOutDocumentInfo(document);

            documentId = document.DocumentId;
            document.SaveToCache();
         }

         System.Threading.Thread.Sleep(2000);

         using (var document = DocumentFactory.LoadFromCache(documentId))
         {
            if (null == document)
            {
               Console.WriteLine("Cached document was expired and deleted!");
            }
         }
      }</code>
        <!--Document-->
      </example>
    </member>
    <member name="F:Leadtools.Documents.Document.UnitsPerInch">
      <summary>
            Number of units per inch used for document coordinates.
            </summary>
      <remarks>
        <para>The value of <see cref="F:Leadtools.Documents.Document.UnitsPerInch" /> is 720.0. Meaning, the document uses 1/720 of an inch of each unit. For more information,
            refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.DocumentToPixels(System.Double,System.Double)">
      <summary>
            Converts a value from document units to pixels.
            </summary>
      <param name="resolution">The resolution to use.</param>
      <param name="value">Source value to convert in document units.</param>
      <returns>The converted value in pixels.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.PixelsToDocument(System.Double,System.Int32)">
      <summary>
            Converts a value from pixels to document units.
            </summary>
      <param name="resolution">The resolution to use.</param>
      <param name="value">Source value to convert in pixels.</param>
      <returns>The converted value in document units.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.PointToPixels(Leadtools.LeadPointD)">
      <summary>
            Converts a point from document units to pixels.
            </summary>
      <param name="value">Source value in document units.</param>
      <returns>The converted value in pixels.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.DocumentToPixels(System.Double,System.Double)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.PointToDocument(Leadtools.LeadPoint)">
      <summary>
            Converts a point from pixels to document units.
            </summary>
      <param name="value">Source value in pixels.</param>
      <returns>The converted value in document units.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.PixelsToDocument(System.Double,System.Int32)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.SizeToPixels(Leadtools.LeadSizeD)">
      <summary>
            Converts a size from document units to pixels.
            </summary>
      <param name="value">Source value in document units.</param>
      <returns>The converted value in pixels.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.DocumentToPixels(System.Double,System.Double)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.SizeToDocument(Leadtools.LeadSize)">
      <summary>
            Converts a size from pixels to document units.
            </summary>
      <param name="value">Source value in pixels.</param>
      <returns>The converted value in document units.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.PixelsToDocument(System.Double,System.Int32)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.RectToPixels(Leadtools.LeadRectD)">
      <summary>
            Converts a rectangle from document units to pixels.
            </summary>
      <param name="value">Source value in document units.</param>
      <returns>The converted value in pixels.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.DocumentToPixels(System.Double,System.Double)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.RectToDocument(Leadtools.LeadRect)">
      <summary>
            Converts a rectangle from pixels to document units.
            </summary>
      <param name="value">Source value in pixels.</param>
      <returns>The converted value in document units.</returns>
      <remarks>
        <para>This method <see cref="M:Leadtools.Documents.Document.PixelsToDocument(System.Double,System.Int32)" /> with the resolution value stored in <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.Document" />.
            </summary>
      <remarks>
        <para>This constructor is inaccessible from outside of LEADTOOLS and is used internally by the framework.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.Dispose">
      <summary>
            Releases all resources used by this <see cref="T:Leadtools.Documents.Document" />.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.Document" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the
            standard .NET dispose pattern when using the <see cref="T:Leadtools.Documents.Document" /> class. For more information, refer to the <see cref="T:System.IDisposable" />
            interface documentation in MSDN.</para>
        <para>The document can be re-constructed as is after it has been disposed it is saved into the cache if <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> was set
            to <strong>true</strong> or if <see cref="M:Leadtools.Documents.Document.SaveToCache" /> was used.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.Finalize">
      <summary>
            This method overrides <see cref="M:System.Object.Finalize" /></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.Document" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the
            standard .NET dispose pattern when using the <see cref="T:Leadtools.Documents.Document" /> class. For more information, refer to the <see cref="T:System.IDisposable" />
            interface documentation in MSDN.</para>
        <para>The document can be re-constructed as is after it has been disposed it is saved into the cache if <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> was set
            to <strong>true</strong> or if <see cref="M:Leadtools.Documents.Document.SaveToCache" /> was used.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this <see cref="T:Leadtools.Documents.Document" />.
            </summary>
      <param name="disposing">
        <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.Document" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the
            standard .NET dispose pattern when using the <see cref="T:Leadtools.Documents.Document" /> class. For more information, refer to the <see cref="T:System.IDisposable" />
            interface documentation in MSDN.</para>
        <para>The document can be re-constructed as is after it has been disposed it is saved into the cache if <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> was set
            to <strong>true</strong> or if <see cref="M:Leadtools.Documents.Document.SaveToCache" /> was used.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.Decrypt(System.String)">
      <summary>
            Decrypt this document using the specified password.
            </summary>
      <param name="password">String containing the password phrase to decrypt this document.</param>
      <remarks>
        <para>In most cases, the <see cref="T:Leadtools.Documents.Document" /> is ready to use after it has been obtained. However, some documents such as PDF can be encrypted
            and required a password before it can be parsed and used. Most of the properties and methods of <see cref="T:Leadtools.Documents.Document" /> will throw an error
            if the document has not been decrypted. <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> can be used to check if the document is encrypted and if so, <see cref="M:Leadtools.Documents.Document.Decrypt(System.String)" />
            must be called with a password obtained from the user to unlock the document. When that happens, the value of <see cref="P:Leadtools.Documents.Document.IsDecrypted" /> becomes
            <strong>true</strong> and the document is ready to be used. Note that <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> will stay <strong>true</strong> to indicate
            the original state of the document.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.Document.IsEncrypted" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.Document.GetDocumentFileName">
      <summary>
            Gets the path to the file holding the original document.
            </summary>
      <returns>The path to the file holding the original document.</returns>
      <remarks>
        <para>When a document is created using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>, the framework will download the original file and store
            it in the cache if it is used or a temporary file on the system otherwise. In these cases, the value of <see cref="P:Leadtools.Documents.Document.IsDownloaded" /> will be
            <strong>true</strong> and <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> will return the path to this file (in the cache directly or the temporary one created).
            <see cref="P:Leadtools.Documents.Document.Uri" /> will point to the original file or URL used to download the document.</para>
        <para>If the document is created using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see> then the framework will
            not download the original file, instead, use it as is. In this case, the value of <see cref="P:Leadtools.Documents.Document.IsDownloaded" /> will be <strong>false</strong> and
            <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> will return the path to the original file used to load the document. <see cref="P:Leadtools.Documents.Document.Uri" /> will return the same
            value as <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> in this situation.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.Document.GetAnnotationsFileName">
      <summary>
            Gets the path to the file holding the original annotations.
            </summary>
      <returns>The path to the file holding the original annotations.</returns>
      <remarks>
        <para>The document can be loaded with the annotations stored into an external file. This is done through passing the URL to the location
            of the annotations in the <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri">LoadDocumentOptions.AnnotationsUri</see>.</para>
        <para>When the <see cref="T:Leadtools.Documents.DocumentFactory" /> is loading the documents and this value is not <strong>null</strong>, then depending on the
            type of the URI, it can be used as is (if the URL has a file scheme) or downloaded to the cache or a temp file (if the URL has any other scheme).
            and <see cref="M:Leadtools.Documents.Document.GetAnnotationsFileName" /> can be used to get the path to this file.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.CreateCacheItemPolicy">
      <summary>
            Create a new policy to be used when items of this document is cached.
            </summary>
      <returns>The new cache policy.</returns>
      <remarks>
        <para>This will return a copy of the policy used in <see cref="P:Leadtools.Documents.CreateDocumentOptions.CachePolicy">CreateDocumentOptions.CachePolicy</see>,
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.CachePolicy">LoadDocumentOptions.CachePolicy</see> or <see cref="P:Leadtools.Documents.UploadDocumentOptions.CachePolicy">UploadDocumentOptions.CachePolicy</see>
            used when this document was original created.</para>
        <para>This <see cref="T:Leadtools.Documents.Document" /> will use this method to create the policy when saving items to the cache. The user should use the same method
            when creating similar items if needed.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.Document.SaveToCache">
      <summary>
            Saves the document to the cache.
            </summary>
      <remarks>
        <para>Documents can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in
            most situations. Therefore, the <see cref="T:Leadtools.Documents.Document" /> class was designed to use an external caching system to store the modified. Refer to
            <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.Document.HasCache" /> determines if this document is using the cache system. <see cref="M:Leadtools.Documents.Document.SaveToCache" /> can be used to save a document to the
            cache and re-loading it using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>true</strong> if your application uses cache to speed up processing the document and the object
            will not be used after it is disposed.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>false</strong> if your application will save the document ID before disposing the document
            and use it to re-load the document using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />.</para>
        <para>To save the document to the cache, use <see cref="M:Leadtools.Documents.Document.SaveToCache" /> or set the value of <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> to
            <strong>true</strong> before disposing the document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.Document.DocumentId" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">
      <summary>
            Exports this document to the specified file using the specified format.
            </summary>
      <param name="fileName">Target file name. This cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when saving the document. If this is <strong>null</strong>, then the document will be saved
            using default options.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)" /> or <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)" /> to export this document to an external file or remote URL.</para>
        <para>These methods support saving the document to a raster image format, not a document. In most cases, converting a document
            should be performed with more options and control using the <see cref="T:DOXC.Topics.DocumentConverters_Using">DocumentConverter</see> class.</para>
        <para>The document will be saved with the latest changed if it has been modified, for example, if the original file has 4 pages and the user
            deleted page number 1, then the saved file will contain 3 pages. Similarly, if the user called <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> to replace
            the raster image for any of the pages, then the saved file will contain the new version for this page.</para>
        <para>
          <see cref="T:Leadtools.Documents.SaveDocumentOptions" /> is used as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.Format" />
            </term>
            <description>
              <para>Any of the LEADTOOLS supported <see cref="T:Leadtools.RasterImageFormat" /> values can be used.</para>
              <para>If this value is the default (<see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>), then this document will be saved
            using the format of the original document.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.BitsPerPixel" />
            </term>
            <description>
              <para>Bits per pixel value to use. Use 0 for the default value supported by <see cref="P:Leadtools.Documents.SaveDocumentOptions.Format" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.AnnotationsUri" />
            </term>
            <description>
              <para>If not <strong>null</strong>, then it should contain the path to where the annotations file will be saved.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.WebClient" />
            </term>
            <description>
              <para>The .NET <see cref="T:System.Net.WebClient" /> object to use when uploading the data to the remote URL.</para>
              <para>Only used with <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)" />.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentSaveToFileExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.tif"), options)
            Dim page As Leadtools.Documents.DocumentPage = document.Pages(1)
            Dim container As AnnContainer = page.GetAnnotations(True)
            Dim obj As New AnnEllipseObject()
            obj.Rect = LeadRectD.Create(0, 0, 1 * 720, 1 * 720)
            obj.Stroke = AnnStroke.Create(AnnSolidColorBrush.Create("red"), LeadLengthD.Create(1))
            container.Children.Add(obj)
            page.SetAnnotations(container)

            Dim outName As String = Path.GetFileName(document.Uri.AbsolutePath).Replace(".", "_") &amp; ".tif"

            Dim outFileName As String = Path.Combine(ImagesPath.Path, outName)
            If File.Exists(outFileName) Then
               File.Delete(outFileName)
            End If

            Dim saveOptions As New SaveDocumentOptions()
            saveOptions.Format = RasterImageFormat.CcittGroup4
            saveOptions.BitsPerPixel = 1
            Dim annFileName As String = Path.ChangeExtension(outFileName, ".xml")
            If File.Exists(annFileName) Then
               File.Delete(annFileName)
            End If
            saveOptions.AnnotationsUri = New Uri(annFileName)
            document.SaveToFile(outFileName, saveOptions)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentSaveToFileExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.tif"), options))
         {
            var page = document.Pages[1];
            var container = page.GetAnnotations(true);
            var obj = new AnnEllipseObject();
            obj.Rect = LeadRectD.Create(0, 0, 1 * 720, 1 * 720);
            obj.Stroke = AnnStroke.Create(AnnSolidColorBrush.Create("red"), LeadLengthD.Create(1));
            container.Children.Add(obj);
            page.SetAnnotations(container);

            var outName = Path.GetFileName(document.Uri.AbsolutePath).Replace(".", "_") + ".tif";

            var outFileName = Path.Combine(ImagesPath.Path, outName);
            if (File.Exists(outFileName)) 
               File.Delete(outFileName);

            var saveOptions = new SaveDocumentOptions();
            saveOptions.Format = RasterImageFormat.CcittGroup4;
            saveOptions.BitsPerPixel = 1;
            var annFileName = Path.ChangeExtension(outFileName, ".xml");
            if (File.Exists(annFileName)) File.Delete(annFileName);
            saveOptions.AnnotationsUri = new Uri(annFileName);
            document.SaveToFile(outFileName, saveOptions);
         }
      }</code>
        <!--Document.SaveToFile-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)">
      <summary>
            Exports this document to the specified remote URL using the specified format.
            </summary>
      <param name="uri">Target URL. This cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when saving the document. If this is <strong>null</strong>, then the document will be saved
            using default options.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)" /> or <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)" /> to export this document to an external file or remote URL.</para>
        <para>These methods support saving the document to a raster image format, not a document. In most cases, converting a document
            should be performed with more options and control using the <see cref="T:DOXC.Topics.DocumentConverters_Using">DocumentConverter</see> class.</para>
        <para>The document will be saved with the latest changed if it has been modified, for example, if the original file has 4 pages and the user
            deleted page number 1, then the saved file will contain 3 pages. Similarly, if the user called <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> to replace
            the raster image for any of the pages, then the saved file will contain the new version for this page.</para>
        <para>
          <see cref="T:Leadtools.Documents.SaveDocumentOptions" /> is used as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.Format" />
            </term>
            <description>
              <para>Any of the LEADTOOLS supported <see cref="T:Leadtools.RasterImageFormat" /> values can be used.</para>
              <para>If this value is the default (<see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>), then this document will be saved
            using the format of the original document.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.BitsPerPixel" />
            </term>
            <description>
              <para>Bits per pixel value to use. Use 0 for the default value supported by <see cref="P:Leadtools.Documents.SaveDocumentOptions.Format" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.AnnotationsUri" />
            </term>
            <description>
              <para>If not <strong>null</strong>, then it should contain the path to where the annotations file will be saved.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.SaveDocumentOptions.WebClient" />
            </term>
            <description>
              <para>The .NET <see cref="T:System.Net.WebClient" /> object to use when uploading the data to the remote URL.</para>
              <para>Only used with <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)" />.</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.IsStructureSupported">
      <summary>
            Gets a value that determines if the document structure is supported.
            </summary>
      <value>
        <strong>true</strong> if the document structure is supported, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>Some document formats (such as PDF) supports reading the structure of the document. This includes the bookmarks and table of content.</para>
        <para>If this is supported, then the value of <see cref="P:Leadtools.Documents.Document.IsStructureSupported" /> will be <strong>true</strong> and the <see cref="P:Leadtools.Documents.Document.Structure" />
            property is not <strong>null</strong> and can be used.</para>
        <para>If document structure is not supported, then the value of <see cref="P:Leadtools.Documents.Document.IsStructureSupported" /> is <strong>false</strong> and the
            <see cref="P:Leadtools.Documents.Document.Structure" /> property is <strong>null</strong> and cannot be used.</para>
        <para>For more information and example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.DocumentType">
      <summary>
            Gets the document type.
            </summary>
      <value>The document type.</value>
      <remarks>
        <para>This value is set by the framework when the document is loaded using <see cref="T:Leadtools.Documents.DocumentFactory" />. If this document was created, then it is
            the same value passed to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.DocumentId">
      <summary>
            Gets the unique identifier of this document.
            </summary>
      <value>The unique identifier of this document.</value>
      <remarks>
        <para>This value is set by the framework when the document is initialized. The ID is important when using the document with the cache system and
            is the only value needed to re-construct completely the document from the cache.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentIdExample()
         DocumentFactory.Cache = CreateCache()
         Dim policy As New CacheItemPolicy()
         policy.AbsoluteExpiration = DateTime.Now + New TimeSpan(0, 0, 10)
         policy.SlidingExpiration = New TimeSpan(0, 0, 10)

         Dim options As New LoadDocumentOptions()
         options.CachePolicy = policy

         Dim documentId As String = Nothing

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            document.AutoDeleteFromCache = False
            documentId = document.DocumentId
            document.SaveToCache()
         End Using

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromCache(documentId)
            If Not Nothing Is document Then
               document.AutoDeleteFromCache = True 'will be deleted
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentIdExample()
      {
         DocumentFactory.Cache = CreateCache();
         var policy = new CacheItemPolicy();
         policy.AbsoluteExpiration = DateTime.Now + new TimeSpan(0, 0, 10);
         policy.SlidingExpiration = new TimeSpan(0, 0, 10);

         var options = new LoadDocumentOptions();
         options.CachePolicy = policy;

         string documentId = null;

         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            document.AutoDeleteFromCache = false;
            documentId = document.DocumentId;
            document.SaveToCache();
         }

         using (var document = DocumentFactory.LoadFromCache(documentId))
         {
            if (null != document)
            {
               document.AutoDeleteFromCache = true;//will be deleted
            }
         }
      }</code>
        <!--Document.DocumentId-->
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Uri">
      <summary>
            Gets the URL to the original document physical location.
            </summary>
      <value>The URL to the original document physical location.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Documents.Document.Uri" /> depends on how this document was obtained as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If this document was loaded using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see> then <see cref="P:Leadtools.Documents.Document.Uri" /> is the same value passed to the
            method.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document was loaded using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>, then the
            value of <see cref="P:Leadtools.Documents.Document.Uri" /> is the same value passed as <i>fileName</i> formatted using file:/// protocol.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document was creating using <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>, then the
            value of <see cref="P:Leadtools.Documents.Document.Uri" /> is <strong>null</strong>.</para>
            </description>
          </item>
        </list>
        <para>When this document is saved and re-loaded from the cache using <see cref="M:Leadtools.Documents.Document.SaveToCache" /> and <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />,
            then <see cref="P:Leadtools.Documents.Document.Uri" /> will contain the original value before it was saved.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.IsDownloaded">
      <summary>
            Gets a value that indicate if this document was downloaded.
            </summary>
      <value>
        <strong>true</strong> if this document was downloaded, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>When a document is created using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>, the framework will download the original file and store
            it in the cache if it is used or a temporary file on the system otherwise. In these cases, the value of <see cref="P:Leadtools.Documents.Document.IsDownloaded" /> will be
            <strong>true</strong> and <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> will return the path to this file (in the cache directly or the temporary one created).
            <see cref="P:Leadtools.Documents.Document.Uri" /> will point to the original file or URL used to download the document.</para>
        <para>If the document is created using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see> then the framework will
            not download the original file, instead, use it as is. In this case, the value of <see cref="P:Leadtools.Documents.Document.IsDownloaded" /> will be <strong>false</strong> and
            <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> will return the path to the original file used to load the document. <see cref="P:Leadtools.Documents.Document.Uri" /> will return the same
            value as <see cref="M:Leadtools.Documents.Document.GetDocumentFileName" /> in this situation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.IsReadOnly">
      <summary>
            Gets or sets a value that indicate that this document is read-only and cannot be modified.
            </summary>
      <value>
        <strong>true</strong> if this document is read-only and cannot be modified, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Setting is <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> to <strong>true</strong> will turn this document into a read-only version. This a logical only operation that
            can be set by user applications for sanity checking, the <see cref="T:Leadtools.Documents.Document" /> itself will not behave any differently when any of the methods and
            properties are accessed except for the the following methods which will throw an exception:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" />
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" />
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" />
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" />
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" />
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Documents.DocumentPages" /> will be set as a read-only collection. You cannot add, insert or remove pages.</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.MimeType">
      <summary>
            Gets the MIME type of the document.
            </summary>
      <value>The MIME type of the document.</value>
      <remarks>
        <para>When this document is loaded using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>,
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>,
            then the value of <see cref="P:Leadtools.Documents.Document.MimeType" /> will be parsed by the framework and set automatically. It will be the MIME of the original document
            file. For example, "application/pdf" for PDF documents, "image/tiff" for TIFF files, etc.</para>
        <para>When this document is created using <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>, then the MIME type is passed
            by the user through <see cref="P:Leadtools.Documents.CreateDocumentOptions.MimeType">CreateDocumentOptions.MimeType</see> and the same value will be set in <see cref="P:Leadtools.Documents.Document.MimeType" />.</para>
        <para>The <see cref="P:Leadtools.Documents.Document.MimeType" /> is not used by the framework directly. The user can examine this value to determine the original format of the
            document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.IsEncrypted">
      <summary>
            Gets a value that indicate whether this document is encrypted.
            </summary>
      <value>
        <strong>true</strong> if this document is encrypted, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>In most cases, the <see cref="T:Leadtools.Documents.Document" /> is ready to use after it has been obtained. However, some documents such as PDF can be encrypted
            and required a password before it can be parsed and used. Most of the properties and methods of <see cref="T:Leadtools.Documents.Document" /> will throw an error
            if the document has not been decrypted. <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> can be used to check if the document is encrypted and if so, <see cref="M:Leadtools.Documents.Document.Decrypt(System.String)" />
            must be called with a password obtained from the user to unlock the document. When that happens, the value of <see cref="P:Leadtools.Documents.Document.IsDecrypted" /> becomes
            <strong>true</strong> and the document is ready to be used. Note that <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> will stay <strong>true</strong> to indicate
            the original state of the document.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentIsEncryptedExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.pdf"), options)
            If document.IsEncrypted AndAlso (Not document.IsDecrypted) Then
               Console.WriteLine("Encrypted Document")
            End If
         End Using

         options.Password = "lead"

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.pdf"), options)
            If document.IsEncrypted AndAlso document.IsDecrypted Then
               Console.WriteLine("Decrypted Document")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentIsEncryptedExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.pdf"), options))
         {
            if (document.IsEncrypted &amp;&amp; !document.IsDecrypted)
            {
               Console.WriteLine("Encrypted Document");
            }
         }

         options.Password = "lead";

         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Protected.pdf"), options))
         {
            if (document.IsEncrypted &amp;&amp; document.IsDecrypted)
            {
               Console.WriteLine("Decrypted Document");
            }
         }
      }</code>
        <!--Document.IsEncrypted-->
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.IsDecrypted">
      <summary>
            Gets a value that indicate whether this document has been decrypted.
            </summary>
      <value>
        <strong>true</strong> if this document has been decrypted, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>In most cases, the <see cref="T:Leadtools.Documents.Document" /> is ready to use after it has been obtained. However, some documents such as PDF can be encrypted
            and required a password before it can be parsed and used. Most of the properties and methods of <see cref="T:Leadtools.Documents.Document" /> will throw an error
            if the document has not been decrypted. <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> can be used to check if the document is encrypted and if so, <see cref="M:Leadtools.Documents.Document.Decrypt(System.String)" />
            must be called with a password obtained from the user to unlock the document. When that happens, the value of <see cref="P:Leadtools.Documents.Document.IsDecrypted" /> becomes
            <strong>true</strong> and the document is ready to be used. Note that <see cref="P:Leadtools.Documents.Document.IsEncrypted" /> will stay <strong>true</strong> to indicate
            the original state of the document.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.Document.IsEncrypted" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.UserData">
      <summary>
            The user-defined data associated with this document.
            </summary>
      <value>Any object that can be used as the user-defined data associated with this document. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.Document.UserData" /> is not used by the <see cref="T:Leadtools.Documents.Document" />, the user can set any application value to associated this document object
            with an external resource.</para>
        <para>If this document uses the cache, then <see cref="P:Leadtools.Documents.Document.UserData" /> will be saved and re-loaded from the cache as well. This is performed using
            standard .NET serialization. So for primitives values, nothing more needs to be done. If <see cref="P:Leadtools.Documents.Document.UserData" /> was set to a complex user-defined
            object, then the class must implement .NET <see cref="T:System.Runtime.Serialization.ISerializable" /> interface members.</para>
        <para>The cache currently uses <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> to perform serialization.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.Metadata">
      <summary>
            Gets the object that manages the metadata of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentMetadata" /> object that manages the metadata of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Documents.DocumentMetadata" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentMetadata" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Structure">
      <summary>
            Gets the object that manages the structure and table of content of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentStructure" /> object that manages the structure and table of content of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Documents.Document.Structure" /> is <strong>null</strong> and cannot be used if <see cref="P:Leadtools.Documents.Document.IsStructureSupported" /> is <strong>false</strong>.</para>
        <para>The document structure is not populated automatically and must be parsed by the user. Refer to <see cref="T:Leadtools.Documents.DocumentStructure" /> for more
            information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Images">
      <summary>
            Gets the object that manages the raster and SVG image settings of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentImages" /> object that manages the raster and SVG image settings of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Documents.DocumentImages" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentImages" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Text">
      <summary>
            Gets the object that manages the text and OCR recognition settings of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentText" /> object that manages the text and OCR recognition settings of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Documents.DocumentText" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Pages">
      <summary>
            Gets the object that manages the pages of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentPages" /> object that manages the pages of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> derives from <see cref="T:Leadtools.LeadCollection`1" /> and thus can implement <see cref="T:System.Collections.ObjectModel.Collection`1" />. You can use any
            of the collection methods to add, remove, insert, get, set and iterate through the pages.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> contains a collection of <see cref="T:Leadtools.Documents.DocumentPage" /> that contains the data for a single page in the document.
            The page item is the main entry point for using the documents in a viewer or converter application. It contains functions to retrieve or update
            the raster or XVG image of the page, text data, annotations and hyperlinks. Refer to <see cref="T:Leadtools.Documents.DocumentPage" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPages" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.Annotations">
      <summary>
            Gets the object that manages the annotations of the document.
            </summary>
      <value>The <see cref="T:Leadtools.Documents.DocumentAnnotations" /> object that manages the annotations of this <see cref="T:Leadtools.Documents.Document" />.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Documents.DocumentAnnotations" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentAnnotations" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.RasterCodecs">
      <summary>
            Get the object that is used to load or save raster images and SVG documents.
            </summary>
      <value>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to use when this <see cref="T:Leadtools.Documents.Document" /> loads or saves <see cref="T:Leadtools.RasterImage" /> and <see cref="T:Leadtools.Svg.SvgDocument" />
            objects.</value>
      <remarks>
        <para>A new <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is created by <see cref="T:Leadtools.Documents.DocumentFactory" /> and set in this property when the document
            is loaded or created. Refer to <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate">DocumentFactory.RasterCodecsTemplate</see> for more information.</para>
        <para>Note that if this document uses cache, then the options of <see cref="T:Leadtools.Codecs.RasterCodecs" /> is saved into the cache when the
            document is saved. When the document is re-loaded, a new instance of <see cref="T:Leadtools.Codecs.RasterCodecs" /> is created and the options are
            set from the cache.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.HasCache">
      <summary>
            Gets a value that indicate whether this <see cref="T:Leadtools.Documents.Document" /> is using the cache.
            </summary>
      <value>
        <strong>true</strong> if this document uses the cache system, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>Documents can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in
            most situations. Therefore, the <see cref="T:Leadtools.Documents.Document" /> class was designed to use an external caching system to store the modified. Refer to
            <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.Document.HasCache" /> determines if this document is using the cache system. <see cref="M:Leadtools.Documents.Document.SaveToCache" /> can be used to save a document to the
            cache and re-loading it using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>.
            <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> and <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> can be used to determine what happens to the cache data associated with the document
            when it is disposed.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.AutoDeleteFromCache">
      <summary>
            Gets or sets a value that indicate whether to delete all the entries that belong to this document from the cache when it is disposed.
            </summary>
      <value>
        <strong>true</strong> to delete all the entries that belong to this document from the cache when it is disposed, otherwise; <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Documents can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in
            most situations. Therefore, the <see cref="T:Leadtools.Documents.Document" /> class was designed to use an external caching system to store the modified. Refer to
            <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.Document.HasCache" /> determines if this document is using the cache system. <see cref="M:Leadtools.Documents.Document.SaveToCache" /> can be used to save a document to the
            cache and re-loading it using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>true</strong> if your application uses cache to speed up processing the document and the object
            will not be used after it is disposed.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>false</strong> if your application will save the document ID before disposing the document
            and use it to re-load the document using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />.</para>
        <para>To save the document to the cache, use <see cref="M:Leadtools.Documents.Document.SaveToCache" /> or set the value of <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> to
            <strong>true</strong> before disposing the document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.Document.DocumentId" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.Document.AutoSaveToCache">
      <summary>
            Gets or sets a value that indicate whether to automatically save the document to the cache before it is disposed.
            </summary>
      <value>
        <strong>true</strong> to automatically save the document to the cache before it is disposed, otherwise; <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Documents can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in
            most situations. Therefore, the <see cref="T:Leadtools.Documents.Document" /> class was designed to use an external caching system to store the modified. Refer to
            <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.Document.HasCache" /> determines if this document is using the cache system. <see cref="M:Leadtools.Documents.Document.SaveToCache" /> can be used to save a document to the
            cache and re-loading it using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">DocumentFactory.LoadFromCache</see>.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>true</strong> if your application uses cache to speed up processing the document and the object
            will not be used after it is disposed.</para>
        <para>Set <see cref="P:Leadtools.Documents.Document.AutoDeleteFromCache" /> to <strong>false</strong> if your application will save the document ID before disposing the document
            and use it to re-load the document using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />.</para>
        <para>To save the document to the cache, use <see cref="M:Leadtools.Documents.Document.SaveToCache" /> or set the value of <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> to
            <strong>true</strong> before disposing the document.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.Document.InternalObject">
      <summary>
            Gets the internal LEADTOOLS object used with the document.
            </summary>
      <value>The internal LEADTOOLS object used with the document.</value>
      <remarks>
        <para>The type of <see cref="P:Leadtools.Documents.Document.InternalObject" /> depends on the document as follows:</para>
        <list type="table">
          <listheader>
            <term>
              <see cref="P:Leadtools.Documents.Document.DocumentType" /> value</term>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.Document.InternalObject" />
              </para>
            </description>
          </listheader>
          <item>
            <term>"Raster"</term>
            <description>
              <para>The same value as <see cref="P:Leadtools.Documents.Document.RasterCodecs" />.</para>
            </description>
          </item>
          <item>
            <term>"Pdf"</term>
            <description>
              <para>The <see cref="T:Leadtools.Pdf.PDFDocument">Leadtools.Pdf.PDFDocument</see> object used internally by the document.</para>
            </description>
          </item>
        </list>
        <para>In all cases, you can cast this object to the correct value and use its own extra properties and methods if required.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.DocumentFactory">
      <summary>
            Provide supports to load and create Document objects as well as managing the global cache.
            </summary>
      <remarks>
        <para>The main class used for the LEADTOOLS Documents class library is <see cref="T:Leadtools.Documents.Document" />, this class abstracts the internal implementation to
            provide unified properties and methods to access the internal document. Users can created a new document to load existing from memory, disk file
            or a URL.</para>
        <para>Documents cannot be created directory, instead, use the static <see cref="T:Leadtools.Documents.DocumentFactory" /> methods to obtain a <see cref="T:Leadtools.Documents.Document" /> instance
            as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" />
            </term>
            <description>
              <para>Loads a document from existing data stored in a disk file</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" />
            </term>
            <description>
              <para>Loads a document from existing data stored in a remote URL</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" />
            </term>
            <description>
              <para>Loads a document asynchronously from an existing data stored in remote URL </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate" />
            </term>
            <description>
              <para>Global template used when loading and saving raster and SVG images</para>
            </description>
          </item>
        </list>
        <para>When combined with <see cref="T:Leadtools.Caching.FileCache">LEADTOOLS File Cache</see>, the <see cref="T:Leadtools.Documents.DocumentFactory" /> provide the following extra functionality:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentFactory.Cache" />
            </term>
            <description>
              <para>The LEADTOOLS <see cref="T:Leadtools.Caching.FileCache">File Cache</see> object responsible for managing cache items and
            expiration policies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)" />
            </term>
            <description>
              <para>Creates a new empty document</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />
            </term>
            <description>
              <para>Loads a previously saved document from the cache</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.AbortUploadDocument(System.Uri)" /></term>
            <description>
              <para>Provides support for uploading a document to the cache system used by the factory</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:DOX.Topics.Documents_Features">Documents Library Features</seealso>
      <seealso cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</seealso>
      <seealso cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</seealso>
      <seealso cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</seealso>
      <seealso cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</seealso>
      <seealso cref="T:DOXUI.Topics.DocumentViewer_Using">Using LEADTOOLS Document Viewer</seealso>
      <seealso cref="T:DOXC.Topics.DocumentConverters_Using">Using LEADTOOLS Document Converters</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            PrintOutDocumentInfo(document)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            PrintOutDocumentInfo(document);
         }
      }</code>
        <!--DocumentFactory-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">
      <summary>
            Creates a new empty document.
            </summary>
      <param name="documentType">Document type. Cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when creating the document. Cannot be <strong>null</strong>.</param>
      <returns>The newly created document.</returns>
      <remarks>
        <para>This method will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup.</para>
        <para>Use this method to create a new empty document. <paramref name="documentType" /> controls the type of the document created and the following
            values are currently supported:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>"Raster"</term>
            <description>Creates a new Raster document. Requires the <c>Leadtools.Documents.Raster.dll</c> assembly.</description>
          </item>
          <item>
            <term>"Pdf"</term>
            <description>Creates a new PDF document. Requires the <c>Leadtools.Documents.Pdf.dll</c> assembly.</description>
          </item>
          <item>
            <term>
              <i>Any other value</i>
            </term>
            <description>Will throw an exception.</description>
          </item>
        </list>
        <para>This method will add items with the key "Created", "Accessed" and "Modified" to <see cref="P:Leadtools.Documents.Document.Metadata" /> with values equal to the
            current date and time. The newly created <see cref="T:Leadtools.Documents.Document" /> object will have an empty list of <see cref="P:Leadtools.Documents.Document.Pages" />. It can then be populated by the user.</para>
        <para>The member of <paramref name="options" /> are used as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.CreateDocumentOptions.CachePolicy" />
            </term>
            <description>
              <para>This method requires a cache object and hence the policy is always used. Copied to the newly created document and
            is used to determine when the document and its item are purged from the cache. This value must not be <strong>null</strong>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.CreateDocumentOptions.MimeType" />
            </term>
            <description>
              <para>Copied as is into the newly created document <see cref="P:Leadtools.Documents.Document.MimeType" /> member. This value can be
            <strong>null</strong> but it is recommend you set it to the MIME type of the document since it will be used when saving the document. Use
            one of the MIME types constants defined in the <see cref="T:Leadtools.Documents.Constants" /> class.</para>
            </description>
          </item>
        </list>
        <para>After the document is obtained, <see cref="P:Leadtools.Documents.Document.InternalObject" /> will be to the internal LEADTOOLS object used with the document.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryCreateExample()
         DocumentFactory.Cache = CreateCache()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False

         Dim createOptions As New CreateDocumentOptions()
         createOptions.MimeType = "my mime type"

         Using document As Leadtools.Documents.Document = DocumentFactory.Create("Raster", createOptions)
            Dim pages As DocumentPages = document.Pages
            For i As Integer = 1 To 2
               Dim page As Leadtools.Documents.DocumentPage = pages.CreatePage(LeadSizeD.Create(i * 8.5 * document.UnitsPerInch, i * 11 * document.UnitsPerInch), 300)
               page.IsDeleted = (i = 2)
               pages.Add(page)
            Next i

            PrintOutDocumentInfo(document)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryCreateExample()
      {
         DocumentFactory.Cache = CreateCache();
         var options = new LoadDocumentOptions();
         options.UseCache = false;

         var createOptions = new CreateDocumentOptions();
         createOptions.MimeType = "my mime type";

         using (var document = DocumentFactory.Create("Raster", createOptions))
         {
            var pages = document.Pages;
            for (var i = 1; i &lt;= 2; i++)
            {
               var page = pages.CreatePage(LeadSizeD.Create(i * 8.5 * Document.UnitsPerInch, i * 11 * Document.UnitsPerInch), 300);
               page.IsDeleted = (i == 2);
               pages.Add(page);
            }

            PrintOutDocumentInfo(document);
         }
      }</code>
        <!--DocumentFactory.Create-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)">
      <summary>
            Loads a previously saved document from the cache.
            </summary>
      <param name="documentId">The document identifier. This value cannot be <strong>null</strong>.</param>
      <returns>The document object if found in the cache, otherwise; <strong>null</strong>.</returns>
      <remarks>
        <para>This method will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup.</para>
        <para>Use this method to load a document previously stored in the cache with <see cref="M:Leadtools.Documents.Document.SaveToCache" />. The document will be re-loaded
            and populated exactly as it was during the time it was saved. If the document was originally created by using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" /> then
            the original file must still exist and can be accessed. If the document was originally created by using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" />,
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /> or <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)" />, then the library had copied the original file into the cache and is no longer used. The
            document can be re-constructed even if the original file is deleted.</para>
        <para>This method may return <strong>null</strong> if the document was in the cache but is expired and purged.</para>
        <para>Saving and loading from the cache is useful if the document is to be re-used between sessions in your application. The document identifier
            (<paramref name="documentId" />) is all you need to store to re-construct the document after it was saved to the cache and disposed. This ID can
            be stored in a database or passed to the client side as in the case of the LEADTOOLS Documents Web Service.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.Document.DocumentId" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">
      <summary>
            Loads a document from existing data stored in a disk file.
            </summary>
      <param name="fileName">Path to the file name containing the original document data. This value cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when loading the document. This value cannot be <strong>null</strong>.</param>
      <returns>The newly created document object.</returns>
      <remarks>
        <para>This method might use the cache and will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup if certain options are used.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /> creates a <see cref="T:Leadtools.Documents.Document" /> class from any
            supported image or document file format stored in a disk file or remote URL. The returned object can then be used to retrieve any page as image
            or SVG, to obtain the text using SVG or OCR, use the annotations or the document structure such as links and bookmarks.</para>
        <para>After the document is obtained, <see cref="P:Leadtools.Documents.Document.InternalObject" /> will be to the internal LEADTOOLS object used with the document.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for detailed information on how to use this method and the various options used.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryLoadFromFileExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            PrintOutDocumentInfo(document)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryLoadFromFileExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            PrintOutDocumentInfo(document);
         }
      }</code>
        <!--DocumentFactory.LoadFromFile-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">
      <summary>
            Loads a document from existing data stored in a remote URL.
            </summary>
      <param name="uri">Path to the URL containing the original document data. This value cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when loading the document. This value cannot be <strong>null</strong>.</param>
      <returns>The newly created document object.</returns>
      <remarks>
        <para>This method might use the cache and will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup if certain options are used.</para>
        <para>Note that <paramref name="uri" /> can point to a document stored in HTTP, HTTPS, FTP, or Disk file (using the file protocol).</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /> creates a <see cref="T:Leadtools.Documents.Document" /> class from any
            supported image or document file format stored in a disk file or remote URL. The returned object can then be used to retrieve any page as image
            or SVG, to obtain the text using SVG or OCR, use the annotations or the document structure such as links and bookmarks.</para>
        <para>After the document is obtained, <see cref="P:Leadtools.Documents.Document.InternalObject" /> will be to the internal LEADTOOLS object used with the document.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for detailed information on how to use this method and the various options used.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryLoadFromUriExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromUri(New Uri("http://localhost/Leadtools.pdf"), options)
            PrintOutDocumentInfo(document)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryLoadFromUriExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromUri(new Uri("http://localhost/Leadtools.pdf"), options))
         {
            PrintOutDocumentInfo(document);
         }
      }</code>
        <!--DocumentFactory.LoadFromUri-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">
      <summary>
            Loads a document asynchronously from existing data stored in a remote URL.
            </summary>
      <param name="uri">Path to the URL containing the original document data. This value cannot be <strong>null</strong>.</param>
      <param name="options">Options to use when loading the document. This value cannot be <strong>null</strong>.</param>
      <remarks>
        <para>This method might use the cache and will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup if certain options are used.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /> will start loading the document in a separate thread and return control to the user immediately. The
            <see cref="T:Leadtools.Documents.LoadDocumentAsyncOptions" /> class contains the <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> and
            <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed" /> events that can be used to track the progress of the load and be notified when the operation
            is completed.</para>
        <para>Note that <paramref name="uri" /> can point to a document stored in HTTP, HTTPS, FTP, or Disk file (using the file protocol).</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /> creates a <see cref="T:Leadtools.Documents.Document" /> class from any
            supported image or document file format stored in a disk file or remote URL. The returned object can then be used to retrieve any page as image
            or SVG, to obtain the text using SVG or OCR, use the annotations or the document structure such as links and bookmarks.</para>
        <para>After the document is obtained, <see cref="P:Leadtools.Documents.Document.InternalObject" /> will be to the internal LEADTOOLS object used with the document.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for detailed information on how to use this method and the various options used.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryLoadFromUriAsyncExample()
         Dim finished As AutoResetEvent = Nothing
         Dim completed As EventHandler(Of LoadAsyncCompletedEventArgs) = Nothing
         completed =
            Sub(sender, e)
            'Assert((int)e.UserState == 1);

            If e.Cancelled Then
               Console.WriteLine("Canceled")
            End If
            If Not e.Error Is Nothing Then
               Console.WriteLine("Error:" &amp; e.Error.Message)
            End If
            If e.Document Is Nothing Then
               Console.WriteLine("Document is null")
            End If

            Dim thisOptions As LoadDocumentAsyncOptions = TryCast(sender, LoadDocumentAsyncOptions)
            RemoveHandler thisOptions.Completed, completed

            If Not e.Document Is Nothing Then
               PrintOutDocumentInfo(e.Document)
            End If

            finished.Set()
            Console.WriteLine("Done")
         End Sub

         Dim options As New LoadDocumentAsyncOptions()
         options.UseCache = False
         AddHandler options.Completed, completed

         finished = New AutoResetEvent(False)
         DocumentFactory.LoadFromUriAsync(New Uri("http://localhost/Leadtools.pdf"), options)
         finished.WaitOne()
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryLoadFromUriAsyncExample()
      {
         AutoResetEvent finished = null;
         EventHandler&lt;LoadAsyncCompletedEventArgs&gt; completed = null;
         completed = (sender, e) =&gt;
         {
            //Assert((int)e.UserState == 1);

            if (e.Cancelled)
               Console.WriteLine("Canceled");
            if (e.Error != null)
               Console.WriteLine("Error:" + e.Error.Message);
            if (e.Document == null)
               Console.WriteLine("Document is null");

            var thisOptions = sender as LoadDocumentAsyncOptions;
            thisOptions.Completed -= completed;

            if (e.Document != null)
            {
               PrintOutDocumentInfo(e.Document);
            }

            finished.Set();
            Console.WriteLine("Done");
         };

         var options = new LoadDocumentAsyncOptions();
         options.UseCache = false;
         options.Completed += completed;

         finished = new AutoResetEvent(false);
         DocumentFactory.LoadFromUriAsync(new Uri("http://localhost/Leadtools.pdf"), options);
         finished.WaitOne();
      }</code>
        <!--DocumentFactory.LoadFromUriAsync-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)">
      <summary>
            Start uploading a document to the cache.
            </summary>
      <param name="options">Options to use with the new document. This value cannot be <strong>null</strong>.</param>
      <returns>The temporary URL for the uploaded document.</returns>
      <remarks>
        <para>This method will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.AbortUploadDocument(System.Uri)" /> can be used to upload a document
            in chunks to the cache used by this <see cref="T:Leadtools.Documents.DocumentFactory" />. After the document is uploaded, you can use <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> to create
            a <see cref="T:Leadtools.Documents.Document" /> object from the data.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Uploading">Uploading Using the Documents Library</see> for detailed information on how to use these methods
            and the various options used.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryBeginUploadExample()
         Dim cache As FileCache = CreateCache()
         DocumentFactory.Cache = cache
         Const bufferSize As Integer = 1024 * 32
         Dim buffer() As Byte = New Byte(bufferSize - 1) {}

         Dim fileName As String = Path.Combine(ImagesPath.Path, "Leadtools.pdf")
         Dim uploadUri As Uri = Nothing
         Using reader As FileStream = File.OpenRead(fileName)
            Dim uploadOptions As New UploadDocumentOptions()
            uploadUri = DocumentFactory.BeginUpload(uploadOptions)

            Dim bytes As Integer
            Do
               bytes = reader.Read(buffer, 0, bufferSize)
               If bytes &gt; 0 Then
                  DocumentFactory.UploadDocument(uploadUri, buffer, 0, bytes)
               End If
            Loop While bytes &gt; 0
         End Using

         Dim options As New LoadDocumentOptions()

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromUri(uploadUri, options)
            PrintOutDocumentInfo(document)
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryBeginUploadExample()   
      {
         var cache = CreateCache();
         DocumentFactory.Cache = cache;
         const int bufferSize = 1024 * 32;
         var buffer = new byte[bufferSize];

         var fileName = Path.Combine(ImagesPath.Path, "Leadtools.pdf");
         Uri uploadUri = null;
         using (var reader = File.OpenRead(fileName))
         {
            var uploadOptions = new UploadDocumentOptions();
            uploadUri = DocumentFactory.BeginUpload(uploadOptions);

            int bytes;
            do
            {
               bytes = reader.Read(buffer, 0, bufferSize);
               if (bytes &gt; 0)
               {
                  DocumentFactory.UploadDocument(uploadUri, buffer, 0, bytes);
               }
            }
            while (bytes &gt; 0);
         }

         var options = new LoadDocumentOptions();

         using (var document = DocumentFactory.LoadFromUri(uploadUri, options))
         {
            PrintOutDocumentInfo(document);
         }
      }</code>
        <!--DocumentFactory.BeginUpload-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Upload a chunk of the document to the cache.
            </summary>
      <param name="uri">The temporary document URL. This must be the same value returned from <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" /> and cannot be
            <strong>null</strong>.</param>
      <param name="data">Current chunk of data. The factory will <paramref name="length" /> number of bytes from this chunk starting at <paramref name="offset" />.</param>
      <param name="offset">Offset into <paramref name="data" /> where to data begins.</param>
      <param name="length">Number of bytes to upload.</param>
      <remarks>
        <para>This method will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.AbortUploadDocument(System.Uri)" /> can be used to upload a document
            in chunks to the cache used by this <see cref="T:Leadtools.Documents.DocumentFactory" />. After the document is uploaded, you can use <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> to create
            a <see cref="T:Leadtools.Documents.Document" /> object from the data.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Uploading">Uploading Using the Documents Library</see> for detailed information on how to use these methods
            and the various options used.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentFactory.AbortUploadDocument(System.Uri)">
      <summary>
            Abort uploading a document and delete all the stored data.
            </summary>
      <param name="uri">The temporary document URL. This must be the same value returned from <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" /> and cannot be
            <strong>null</strong>.</param>
      <remarks>
        <para>This method will throw an exception if <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> was not setup.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Documents.DocumentFactory.AbortUploadDocument(System.Uri)" /> can be used to upload a document
            in chunks to the cache used by this <see cref="T:Leadtools.Documents.DocumentFactory" />. After the document is uploaded, you can use <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> to create
            a <see cref="T:Leadtools.Documents.Document" /> object from the data.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Uploading">Uploading Using the Documents Library</see> for detailed information on how to use these methods
            and the various options used.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentFactory.Cache">
      <summary>
            The LEADTOOLS <see cref="T:Leadtools.Caching.FileCache">File Cache</see> object responsible for managing cache items and expiration policies.
            </summary>
      <value>The cache object responsible for managing cache items and expiration policies. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>A large portion of the Documents class library requires the use of a cache system. This includes almost all of the write support. Documents
            can contain large number of pages and huge amount of data. Storing all this data in the physical memory is not feasible in most situations. Therefore,
            the Documents library was designed to use an external caching system to store the modified parts of the document.</para>
        <para>Using a large will also increase the performance when getting page data such as an image or text. The result will be parsed once from the
            physical file on disk, processed and then stored in the cache. Subsequent calls to the same data will simply retrieve it from the cache without any extra
            processing.</para>
        <para>The LEADTOOLS Documents Web Service requires the use of a cache. Web methods are sessionless by nature and with cache support, the service
            can use <see cref="M:Leadtools.Documents.Document.SaveToCache" /> and <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" /> to save/load the document state in between calls without the need for
            session state.</para>
        <para>In almost all cases, the cache object is initialized and set into <see cref="P:Leadtools.Documents.DocumentFactory.Cache" /> at the start of the application and then never touched.
            The <see cref="T:Leadtools.Documents.DocumentFactory" /> and <see cref="T:Leadtools.Documents.Document" /> classes will use this global value for all the caching needs.</para>
        <para>Setting up a <see cref="T:Leadtools.Caching.FileCache" /> object is easy. The only input required is the path to a directory on disk or network share where the
            cache items are stored.</para>
        <para>Generally, the cache is used in two ways depending on the type of the application:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application uses the cache to speed up getting data from existing documents or to create new documents. The data is not
            shared with other applications nor is required to persist between sessions.</para>
              <para>One such example is the LEADTOOLS Document Viewer Demo. It obtains a temporary folder and set it as the cache directory to use
            (<see cref="P:Leadtools.Caching.FileCache.CacheDirectory">FileCache.CacheDirectory</see>). It then uses default <see cref="T:Leadtools.Caching.CacheItemPolicy" /> objects that do not
            expire and the document parts are cached and used. The value of <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> is set to <strong>false</strong> and each
            document will delete its cache entry when it is disposed and no longer used.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The application requires the document state to persist between sessions.</para>
              <para>One such example is the LEADTOOLS Documents Web Service. It contains a global cache directory stored in the <c>web.config</c> file. The cache
            is constructed with each session (web method) by setting the same value in <see cref="P:Leadtools.Caching.FileCache.CacheDirectory" />. When a document is loaded, it is
            saved in the cache using <see cref="M:Leadtools.Documents.Document.SaveToCache" /> before the web method returns and then re-loaded when a new session (web method) starts
            using <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromCache(System.String)" />.</para>
              <para>These types of applications usually store a policy setting in the <c>web.config</c> as well. This will control how long to store items in the
            cache before they expire. The <see cref="M:Leadtools.Caching.FileCache.CheckPolicies">FileCache.CheckPolicies</see> method can be used by an external process in the
            application to periodically run and purge expired items.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentFactory" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate">
      <summary>
            Global template used when loading and saving raster and SVG images.
            </summary>
      <value>The global <see cref="T:Leadtools.Codecs.RasterCodecs" /> template to use when loading and saving raster and SVG images. Default is a <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object with the value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Resolution">CodecsRasterizeDocumentLoadOptions.Resolution</see> set to
            300.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class is used throughout the Documents library to load and save <see cref="T:Leadtools.RasterImage" /> and
            <see cref="T:Leadtools.Svg.SvgDocument" /> objects. This class contain various options to control how the data is loaded and processed. For example, setting the
            resolution (DPI) to use when rasterizing a text-based PDF file.</para>
        <para>When a new <see cref="T:Leadtools.Documents.Document" /> object is created by this factory, a new <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is created and set in
            <see cref="P:Leadtools.Documents.Document.RasterCodecs">Document.RasterCodecs</see>, <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate" /> is then checked and if it is not <strong>null</strong>,
            then the options are copied from and set to <see cref="P:Leadtools.Documents.Document.RasterCodecs">Document.RasterCodecs</see> using
            <see cref="M:Leadtools.Codecs.CodecsOptions.Clone">CodecsOptions.Clone</see>. This way, the library guarantees that the same global options set by the user in
            <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate" /> are used throughout the application.</para>
        <para>The Documents library is thread safe while a single <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is not and cannot be used by multiple threads at the
            same time, therefore, the library will internally create instances of <see cref="T:Leadtools.Codecs.RasterCodecs" /> and disposes them as needed (for example, when
            calling <see cref="M:Leadtools.Documents.DocumentPage.GetImage">DocumentPage.GetImage</see> to get the raster image representation of a page.</para>
        <para>Whenever this happens, the library will copy the options from <see cref="P:Leadtools.Documents.Document.RasterCodecs">Document.RasterCodecs</see> into the options
            of the temporarily created <see cref="T:Leadtools.Codecs.RasterCodecs" /> object using <see cref="M:Leadtools.Codecs.CodecsOptions.Clone">CodecsOptions.Clone</see>. This way, the library
            guarantees that the same global options set by the user in <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate" /> are used throughout the application if needed while
            the options can be changed for each <see cref="T:Leadtools.Documents.Document" /> individually.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentFactoryRasterCodecsTemplateExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         DocumentFactory.RasterCodecsTemplate.Options.RasterizeDocument.Load.XResolution = 100
         DocumentFactory.RasterCodecsTemplate.Options.RasterizeDocument.Load.YResolution = 100

         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            For Each page As Leadtools.Documents.DocumentPage In document.Pages
               Console.WriteLine("Page (" &amp; page.PageNumber &amp; ") - Resolution: " &amp; page.Resolution)
            Next page
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentFactoryRasterCodecsTemplateExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         DocumentFactory.RasterCodecsTemplate.Options.RasterizeDocument.Load.XResolution = 100;
         DocumentFactory.RasterCodecsTemplate.Options.RasterizeDocument.Load.YResolution = 100;

         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            foreach (var page in document.Pages)
            {
               Console.WriteLine("Page (" + page.PageNumber + ") - Resolution: " + page.Resolution);
            }
         }
      }</code>
        <!--DocumentFactory.RasterCodecsTemplate-->
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentLinkType">
      <summary>
            Type of a document link object.
            </summary>
      <remarks>
        <para>Used by <see cref="T:Leadtools.Documents.DocumentLink" /> as the value of the <see cref="P:Leadtools.Documents.DocumentLink.LinkType" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Documents.DocumentLinkType.Value">
      <summary>(0x00000000)Use <see cref="P:Leadtools.Documents.DocumentLink.Value">DocumentLink.Value</see>. The link target is an internal part in the same document.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentLinkType.TargetPage">
      <summary>(0x00000001)Use <see cref="P:Leadtools.Documents.DocumentLink.Target">DocumentLink.Target</see>. The link target is an external value.</summary>
    </member>
    <member name="T:Leadtools.Documents.DocumentLink">
      <summary>
            Holds the properties of a link inside the document.
            </summary>
      <remarks>
        <para>The links of a document page can be get and set using <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" /> and <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" /> and
            contain the following members:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentLink.Bounds" />
            </term>
            <description>
              <para>The location and size of the link in the page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentLink.LinkType" />
            </term>
            <description>
              <para>Type of the link target: An internal position in the same document or an external value (hyperlink)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentLink.Target" />
            </term>
            <description>
              <para>The target in the document if this is an internal link</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentLink.Value" />
            </term>
            <description>
              <para>The value (hyperlink) if this is an external link</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLink.Bounds">
      <summary>
            Gets or sets the link location and position in the page.
            </summary>
      <value>The link location and position in the page in document coordinates. Default value is empty rectangle.</value>
      <remarks>
        <para>Viewer applications can use this value to provide UI support for links. Typically, change the pointer when it hovers over the link <see cref="P:Leadtools.Documents.DocumentLink.Bounds" />
            and perform the action when the user clicks on this area: either go to <see cref="P:Leadtools.Documents.DocumentLink.Target" /> if this is an internal link or invoke the hyperlink in <see cref="P:Leadtools.Documents.DocumentLink.Value" /> if this is an external link
            depending on <see cref="P:Leadtools.Documents.DocumentLink.LinkType" />.</para>
        <para>This value is in document coordinates. Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLink.LinkType">
      <summary>
            Gets or sets the link type.
            </summary>
      <value>The link type. Default value is <see cref="T:Leadtools.Documents.DocumentLinkType">DocumentLinkType.Value</see>.</value>
      <remarks>
        <para>Viewer applications can use this value to provide UI support for links. Typically, change the pointer when it hovers over the link <see cref="P:Leadtools.Documents.DocumentLink.Bounds" />
            and perform the action when the user clicks on this area: either go to <see cref="P:Leadtools.Documents.DocumentLink.Target" /> if this is an internal link or invoke the hyperlink in <see cref="P:Leadtools.Documents.DocumentLink.Value" /> if this is an external link
            depending on <see cref="P:Leadtools.Documents.DocumentLink.LinkType" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLink.Value">
      <summary>
            Gets or sets the value if this is an external link.
            </summary>
      <value>The value of the external link. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>Typically, a URL to an external resource (hyperlink) is stored here. This value is user-defined and can be anything, it is up to the
            implementation of the document and the viewing application to determine the format and valid ranges for <see cref="P:Leadtools.Documents.DocumentLink.Value" />.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentLink.Value" /> should be used when <see cref="P:Leadtools.Documents.DocumentLink.LinkType" /> is <see cref="T:Leadtools.Documents.DocumentLinkType">DocumentLinkType.Value</see>.</para>
        <para>Viewer applications can use this value to provide UI support for links. Typically, change the pointer when it hovers over the link <see cref="P:Leadtools.Documents.DocumentLink.Bounds" />
            and perform the action when the user clicks on this area: either go to <see cref="P:Leadtools.Documents.DocumentLink.Target" /> if this is an internal link or invoke the hyperlink in <see cref="P:Leadtools.Documents.DocumentLink.Value" /> if this is an external link
            depending on <see cref="P:Leadtools.Documents.DocumentLink.LinkType" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLink.Target">
      <summary>
            Gets or sets the target properties if this is an internal link.
            </summary>
      <value>The target properties if this is an internal link. Default value is a default <see cref="T:Leadtools.Documents.DocumentLinkTarget" /> structure.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentLink.Target" /> should be used when <see cref="P:Leadtools.Documents.DocumentLink.LinkType" /> is <see cref="T:Leadtools.Documents.DocumentLinkType">DocumentLinkType.Target</see>.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentLinkTarget" /> contains the properties required for an internal link in the same document. Including: Target page number and
            position and optional zoom and page fit modes.</para>
        <para>Typically, a URL to an external resource (hyperlink) is stored here. This value is user-defined and can be anything, it is up to the
            implementation of the document and the viewing application to determine the format and valid ranges for <see cref="P:Leadtools.Documents.DocumentLink.Value" />.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentLink.Value" /> should be used when <see cref="P:Leadtools.Documents.DocumentLink.LinkType" /> is <see cref="T:Leadtools.Documents.DocumentLinkType">DocumentLinkType.Value</see>.</para>
        <para>Viewer applications can use this value to provide UI support for links. Typically, change the pointer when it hovers over the link <see cref="P:Leadtools.Documents.DocumentLink.Bounds" />
            and perform the action when the user clicks on this area: either go to <see cref="P:Leadtools.Documents.DocumentLink.Target" /> if this is an internal link or invoke the hyperlink in <see cref="P:Leadtools.Documents.DocumentLink.Value" /> if this is an external link
            depending on <see cref="P:Leadtools.Documents.DocumentLink.LinkType" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentPageFitType">
      <summary>
            Specifies how to fit the page when an internal link is invoked.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPageFitType" /> is used as the value for <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType">DocumentLinkTarget.PageFitType</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Documents.DocumentPageFitType.None">
      <summary>(0x00000000)No fitting. Use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> and <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> if they have valid values.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentPageFitType.Fit">
      <summary>(0x00000001)Show the whole page in the view. If the page is smaller, do not zoom in.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentPageFitType.FitAlways">
      <summary>(0x00000002)Show the whole page in the view. If the page is smaller, zoom in to fit.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentPageFitType.FitWidth">
      <summary>(0x00000003)Fit the view so the whole width of the page is visible.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentPageFitType.FitHeight">
      <summary>(0x00000004)Fit the view so the whole height of the page is visible.</summary>
    </member>
    <member name="T:Leadtools.Documents.DocumentLinkTarget">
      <summary>
            Defines the target of an internal link in the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentLinkTarget" /> contains the properties required for a link that targets other parts of the document. It is used
            as the value of <see cref="P:Leadtools.Documents.DocumentLink.Target">DocumentLink.Target</see> for internal page links and as the value of
            <see cref="P:Leadtools.Documents.DocumentBookmark.Target">DocumentBookmark.Target</see> used to define document bookmarks (table of content).</para>
        <para>Viewer applications would normally perform the following when a link target is invoked:</para>
        <list type="number">
          <item>
            <description>
              <para>Go to the page number specified in <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageNumber" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Check the value of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" />, if it is other than <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then fit the page as specified.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" /> is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> to scroll to a specific position in the page and optionally <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> to update
            the zoom value.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLinkTarget.PageFitType">
      <summary>
            Gets or sets a value that indicate how to fit the target page.
            </summary>
      <value>A value that indicate how to fit the target page. Default value is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>.</value>
      <remarks>
        <para>Viewer applications would normally perform the following when a link target is invoked:</para>
        <list type="number">
          <item>
            <description>
              <para>Go to the page number specified in <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageNumber" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Check the value of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" />, if it is other than <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then fit the page as specified.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" /> is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> to scroll to a specific position in the page and optionally <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> to update
            the zoom value.</para>
            </description>
          </item>
        </list>
        <para>Viewer application should verify these values and can chose to support only partial implementation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLinkTarget.PageNumber">
      <summary>
            Gets or sets the target page number.
            </summary>
      <value>The 1-based target page number. Default value is 0.</value>
      <remarks>
        <para>Viewer applications would normally perform the following when a link target is invoked:</para>
        <list type="number">
          <item>
            <description>
              <para>Go to the page number specified in <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageNumber" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Check the value of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" />, if it is other than <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then fit the page as specified.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" /> is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> to scroll to a specific position in the page and optionally <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> to update
            the zoom value.</para>
            </description>
          </item>
        </list>
        <para>Viewer application should verify these values and can chose to support only partial implementation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLinkTarget.Position">
      <summary>
            Gets or sets the target position to use after moving to the page.
            </summary>
      <value>The target position to use after moving to the page in document coordinates. Default value is 0,0.</value>
      <remarks>
        <para>This value is in document coordinates. Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
        <para>Viewer applications would normally perform the following when a link target is invoked:</para>
        <list type="number">
          <item>
            <description>
              <para>Go to the page number specified in <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageNumber" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Check the value of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" />, if it is other than <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then fit the page as specified.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" /> is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> to scroll to a specific position in the page and optionally <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> to update
            the zoom value.</para>
            </description>
          </item>
        </list>
        <para>Viewer application should verify these values and can chose to support only partial implementation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent">
      <summary>
            Gets or sets the zoom percentage to use after moving to the page.
            </summary>
      <value>The zoom percentage to use after moving to the page. Default value is 0.</value>
      <remarks>
        <para>Viewer applications would normally perform the following when a link target is invoked:</para>
        <list type="number">
          <item>
            <description>
              <para>Go to the page number specified in <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageNumber" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Check the value of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" />, if it is other than <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then fit the page as specified.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the of <see cref="P:Leadtools.Documents.DocumentLinkTarget.PageFitType" /> is <see cref="T:Leadtools.Documents.DocumentPageFitType">DocumentPageFitType.None</see>
            then use <see cref="P:Leadtools.Documents.DocumentLinkTarget.Position" /> to scroll to a specific position in the page and optionally <see cref="P:Leadtools.Documents.DocumentLinkTarget.ZoomPercent" /> to update
            the zoom value.</para>
            </description>
          </item>
        </list>
        <para>Viewer application should verify these values and can chose to support only partial implementation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see> and
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.LoadDocumentOptions">
      <summary>
            Options to use when loading a document.
            </summary>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> to specify the options to use when loading documents.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.LoadDocumentOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.LoadDocumentOptions" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.UseCache">
      <summary>
            Gets or sets a value to indicate whether the new document will use the cache system.
            </summary>
      <value>
        <strong>true</strong> if the new document will use the cache system, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.UseCache" /> is <strong>true</strong>, then <see cref="P:Leadtools.Documents.DocumentFactory.Cache">DocumentFactory.Cache</see> must be setup
            with a valid LEADTOOLS cache object. The policy to use with this new document to determine when to purge the cache items must be set in
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.CachePolicy" />.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.CachePolicy">
      <summary>
            The cache policy to use with the new document.
            </summary>
      <value>The cache policy to use for the new document that determine when the document and its parts are purged. Default value is
            a default <see cref="T:Leadtools.Caching.CacheItemPolicy" /> that never expires.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.LoadDocumentOptions.CachePolicy" /> is used when <see cref="P:Leadtools.Documents.LoadDocumentOptions.UseCache" /> is set to <strong>true</strong>.</para>
        <para>The policy must contain the desired absolute or sliding expiration date for the document and its part.</para>
        <para>Using a a cache policy does not mean the document will be stored in the cache forever, refer to
            <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> for more information on how the cache policy is used.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.Password">
      <summary>
            The password to use if the document is encrypted.
            </summary>
      <value>The password to use if the document is encrypted. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>Some documents such as PDF can be encrypted and required a password before it can be parsed. You can set the password here
            or call <see cref="M:Leadtools.Documents.Document.Decrypt(System.String)" /> after the document is created. For more information, refer to
            <see cref="T:DOX.Topics.Documents_Encryption">Loading Encrypted Files Using the Documents Library</see>.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.WebClient">
      <summary>
            The .NET <see cref="T:System.Net.WebClient" /> object to use when downloading or uploading data from a remote URL.
            </summary>
      <value>The .NET <see cref="T:System.Net.WebClient" /> object to use when downloading or uploading data from a remote URL. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>LEADTOOLS uses a <see cref="T:System.Net.WebClient" /> object when downloading or uploading data from a remote URL. This object contain
            many options for handling the credentials and proxy settings. If this value is <strong>null</strong>, LEADTOOLS will create a new
            <see cref="T:System.Net.WebClient" /> object with default options, use it for the operation and then disposes it.</para>
        <para>If the operation requires custom settings for the credentials and proxy, or to subscribe to the <see cref="T:System.Net.WebClient" /> events
            for debugging and logging purposes, then the user can create their own object and set it in this property. LEADTOOLS will then use this instance
            instead of creating a new one. In this mode, the user is responsible for disposing the object when it is no longer used.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri">
      <summary>
             The location to the external annotation file associated with the document.
            </summary>
      <value>The location to the external annotation file associated with the document. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>Documents can have annotations stored in an external file. To read these annotations when the document is loaded, set the value of
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri" /> to the file or remote URL location. The framework will load the annotation from this location and download it
            in the cache if needed.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri" /> is set (not <strong>null</strong>), then <see cref="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations" /> is ignored and
            the framework will not try to load any embedded annotations even if they exist.</para>
        <para>Use <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)">DocumentPage.GetAnnotations</see> to access the annotations after the document is loaded.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations">
      <summary>
            Gets or sets a value that indicate whether to try to load the annotations embedded in the document itself.
            </summary>
      <value>
        <strong>true</strong> to try to load the annotations embedded in the document, otherwise; <strong>false</strong>. Default
            value is <strong>false</strong>.</value>
      <remarks>
        <para>Some document formats such as PDF and TIF supports embedded annotations inside the document file itself. Set the value of
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations" /> to <strong>true</strong> to try and read these annotations when loading a document. This will not cause
            an error if the format does not support embedded annotations or if the file does not contain any.</para>
        <para>If the annotations are stored in an external file, then use <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri" /> instead. Note that if you set 
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri" /> to a value (not <strong>null</strong>) then <see cref="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations" /> will be ignored and the
            framework will not try to load any embedded annotations even if they exist.</para>
        <para>Use <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)">DocumentPage.GetAnnotations</see> to access the annotations after the document is loaded.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.MayHaveDifferentPageSizes">
      <summary>
            Gets or sets a hint to the loader that the document may contain pages with different size.
            </summary>
      <value>
        <strong>true</strong> if the document may contain pages with different size, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>The document factory tries to create a value <see cref="T:Leadtools.Documents.Document" /> object and return it to the user as quickly as possible. During the load
            operation, the <see cref="P:Leadtools.Documents.Document.Pages">Document.Pages</see> collection is initialized with each member containing a <see cref="T:Leadtools.Documents.DocumentPage" />
            instance that must be initialized with the page size and resolution. By default, the factory will parse the first page in the document, obtain the
            size and resolution and then re-use the the same value for all pages. This done to speed up the loading process and return control to the user
            as soon as possible.</para>
        <para>Some document formats such as TIF, Microsoft Office formats and PDF support having pages with different sizes. Although rare, the above
            approach may result in creating pages with a wrong size (equal to the size of the first page). Having pages with the wrong size will not effect
            generating the images or SVG data for page however it may be required in other scenarios such as when parsing text or using annotations. If you have
            documents that contain different page sizes then it is recommended to set the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MayHaveDifferentPageSizes" /> to <strong>true</strong>.
            The factory will then get the size and resolution information for each page individually which may result in a slower load operation.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>
            or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize">
      <summary>
            Gets or sets the maximum width or height in pixels to use when obtaining image data from the pages in this document.
            </summary>
      <value>The maximum width or height in pixels to use when obtaining image data from the pages in this document. Default value is 0 which means to use the original size.</value>
      <remarks>
        <para>This value will be used as the default for the created document <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize">DocumentImages.MaximumImagePixelSize</see>.</para>
        <para>The <see cref="M:Leadtools.Documents.DocumentPage.GetImage">DocumentPage.GetImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">DocumentPage.GetSvg</see> and
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">DocumentPage.GetSvgBackImage</see> methods are used to obtain a raster or SVG document representation of a
            page in the document.  When the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> is 0 (the default), then the image or SVG object return will have the
            same size as the page.</para>
        <para>This could not be the desired behavior when the pixel size of the original document is large. For example, if the Documents library is used
            by a mobile application where memory size is limited. Limiting the maximum size of the images returned can also increase the performance of any
            type of application. The size of the data transferred between the document and the application is smaller and therefore, it can be obtained
            sooner and rendered faster.</para>
        <para>To limit the maximum size of the image and SVG objects, set the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> to desired pixel size. After
            that, any calls to <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">GetSvg</see> or
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> will result in a raster or SVG image that is up to but not exceeding
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> in width or height. The framework performs this by resizing the data as it is being obtained while maintaining
            the aspect ratio.</para>
        <para>Example: The page has a size of 8.5 by 11 inches (<see cref="P:Leadtools.Documents.DocumentPage.Size">DocumentPage.Size</see> is 6120 by 7920). The pixel size at a
            typical resolution of 300 is 2550 by 3300.</para>
        <para>Calling <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> with the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> set to the default of 0 will
            result in no re-sizing. This the image object obtained will have a size of 2550 by 3300 pixels. The scale value used is 1.0.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> is set to 1024, then the image will be resized before it is returned resulting in a size
            of 792 by 1024 pixels. This is calculated as the best of the original size into the maximum allowed while keeping the aspect ratio. The scale
            value used is 3.223.</para>
        <para>However, if the value of <see cref="P:Leadtools.Documents.LoadDocumentOptions.MaximumImagePixelSize" /> is set to 4096, then the image will be not resized since the original size
            fits inside the maximum value. The scale value used is 1.0.</para>
        <para>In all cases, the scale value used will be set in <see cref="P:Leadtools.Documents.DocumentPage.ImageScale">DocumentPage.ImageScale</see>. The application can use
            this value to determine if the image was scaled and to use in calculations involving coordinate conversions between the result image pixels
            and page units. The LEADTOOLS Document Viewer sets this value in the image scale of each item for a page inside the image viewer control.</para>
        <para>The same behavior described above will occur for <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">GetSvg</see> (the result SVG document is resized) and
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see>. The page will typically have one <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> at all times.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.LoadAsyncProgressEventArgs">
      <summary>
            Data for the <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress">LoadDocumentAsyncOptions.Progress</see> event.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.LoadAsyncProgressEventArgs" /> derives from <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> and contains the following members:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">ProgressChangedEventArgs.ProgressPercentage</see>
            </term>
            <description>
              <para>Current progress percentage. This value goes from 0 to 100.</para>.</description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState">ProgressChangedEventArgs.UserState</see>
            </term>
            <description>
              <para>The same value originally set by the user in <see cref="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState">LoadDocumentAsyncOptions.UserState</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.Uri" />
            </term>
            <description>
              <para>The location of the document being loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.BytesReceived" />
            </term>
            <description>
              <para>Number of bytes received during this chunk of the operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.TotalBytesToReceive" />
            </term>
            <description>
              <para>Total number of bytes received so far for the whole load operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.IsCancelPending" />
            </term>
            <description>
              <para>Can be used to abort the load operation.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncProgressEventArgs.Uri">
      <summary>
            The location of the document being loaded
            </summary>
      <value>The location of the document being loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncProgressEventArgs.BytesReceived">
      <summary>
            Gets the number of bytes received during this chunk of the operation.
            </summary>
      <value>Number of bytes received during this chunk of the operation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncProgressEventArgs.TotalBytesToReceive">
      <summary>
            Gets the total number of bytes received so far for the whole load operation.
            </summary>
      <value>The total number of bytes received so far for the whole load operation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncProgressEventArgs.IsCancelPending">
      <summary>
            Gets or sets a value that can be used to abort the load operation.
            </summary>
      <value>
        <strong>true</strong> to abort the current load operation, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> can be used to show a progress bar indicator for the user while the factory is loading
            a document. In this scenario, it is sometimes preferable to allow the user to abort the load operation (for example, through
            a "Cancel" button in the UI). Set <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.IsCancelPending" /> to <strong>true</strong> to gracefully abort load thread and cancel the
            load operation.</para>
        <para>When the operation is aborted, the value of <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> of the
            <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed">LoadDocumentAsyncOptions.Completed</see> event data will be set to <strong>true</strong> and
            the value of <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document" /> will be <strong>null</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.LoadAsyncCompletedEventArgs">
      <summary>
            Data for the <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed">LoadDocumentAsyncOptions.Completed</see> event.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.LoadAsyncCompletedEventArgs" /> derives from <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> and contains the following members:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">AsyncCompletedEventArgs.Cancelled</see>
            </term>
            <description>
              <para>
                <strong>true</strong> if the user has aborted the current operation, <strong>false</strong> otherwise.</para>.</description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">AsyncCompletedEventArgs.UserState</see>
            </term>
            <description>
              <para>The same value originally set by the user in <see cref="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState">LoadDocumentAsyncOptions.UserState</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">AsyncCompletedEventArgs.Error</see>
            </term>
            <description>
              <para>The error object thrown if any.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Uri" />
            </term>
            <description>
              <para>The location of the document loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document" />
            </term>
            <description>
              <para>The result <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document" /> object if the load operation was successful, <strong>null</strong> otherwise</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Uri">
      <summary>
            The location of the document loaded.
            </summary>
      <value>The location of the document loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document">
      <summary>
            The loaded <see cref="T:Leadtools.Documents.Document" /> object.
            </summary>
      <value>The result loaded <see cref="T:Leadtools.Documents.Document" /> object if the load operation was successful, otherwise; <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document" /> will contain the ready to use loaded document if the operation was successful. The value will be <strong>null</strong>
            if:</para>
        <list type="bullet">
          <item>
            <description>
              <para>When the value of <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">LoadAsyncCompletedEventArgs.Cancelled</see> is <strong>true</strong> indicating
            that the operation was canceled by the user. This happens if the user had set the value of
            <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.IsCancelPending" /> to <strong>true</strong> while monitoring the
            <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> event.</para>
            </description>
          </item>
          <item>
            <description>
              <para>When the value of <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">LoadAsyncCompletedEventArgs.Error</see> is not <strong>null</strong>. This
            happens when an error occurs while the document is being loaded. This could range from network errors thrown by the operation system to invalid file
            formats thrown by LEADTOOLS framework as any user errors thrown by the user while monitoring the
            <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> event.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.LoadDocumentAsyncOptions">
      <summary>
            Options to use when loading a document asynchronously.
            </summary>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see> to specify extra options to use when loading
            documents asynchronously.</para>
        <para>
          <see cref="T:Leadtools.Documents.LoadDocumentAsyncOptions" /> derives from <see cref="T:Leadtools.Documents.LoadDocumentOptions" /> and should be setup in the same way. Loading a document
            asynchronously will return control to the user right away and the document is loaded in a separate thread. Therefore,
            <see cref="T:Leadtools.Documents.LoadDocumentAsyncOptions" /> adds the following members to easily track the status of the load operation:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" />: Event that indicate the current load progress.</description>
          </item>
          <item>
            <description>
              <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed" />: Event that indicate when the load operation is completed.</description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState" />: User-define data that can be associated with the load operation.</description>
          </item>
        </list>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Documents using Leadtools.Documents</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.LoadDocumentAsyncOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.LoadDocumentAsyncOptions" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState">
      <summary>
            The user-defined state object associated with this operation.
            </summary>
      <value>Optional user-defined state object associated with this operation. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>This value can be set to anything by the user and is not used by <see cref="T:Leadtools.Documents.DocumentFactory" />. The same value will be
            set in <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState">LoadAsyncProgressEventArgs.UserState</see> of the <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" />
            event data and in <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">LoadAsyncCompletedEventArgs.UserState</see> of the <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed" />
            event data.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress">
      <summary>
            Event that occurs one or more times while the factory is loading the document to indicate the current progress.
            </summary>
      <remarks>
        <para>
          <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> will occur one or more times while the document is being loaded and it can be used to show a progress bar
            indicator for the user (and optionally, support for aborting the load). <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Progress" /> uses the <see cref="T:Leadtools.Documents.LoadAsyncProgressEventArgs" />
            event data class that is populated with the following for each "chunk":</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage" />
            </term>
            <description>
              <para>Current progress percentage. This value goes from 0 to 100.</para>.</description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState" />
            </term>
            <description>
              <para>The same value originally set by the user in <see cref="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState">LoadDocumentAsyncOptions.UserState</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.Uri" />
            </term>
            <description>
              <para>The location of the document being loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.BytesReceived" />
            </term>
            <description>
              <para>Number of bytes received during this chunk of the operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.TotalBytesToReceive" />
            </term>
            <description>
              <para>Total number of bytes received so far for the whole load operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncProgressEventArgs.IsCancelPending" />
            </term>
            <description>
              <para>Can be used to abort the load operation.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed">
      <summary>
            Event that occurs when the factory finishes loading the document successfully or otherwise.
            </summary>
      <remarks>
        <para>
          <see cref="E:Leadtools.Documents.LoadDocumentAsyncOptions.Completed" /> will occur once when the factory finishes loading the document successfully or otherwise. It uses the
            <see cref="T:Leadtools.Documents.LoadAsyncCompletedEventArgs" /> event data class that is populated with the following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
            </term>
            <description>
              <para>
                <strong>true</strong> if the user has aborted the current operation, <strong>false</strong> otherwise.</para>.</description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
            </term>
            <description>
              <para>The same value originally set by the user in <see cref="P:Leadtools.Documents.LoadDocumentAsyncOptions.UserState">LoadDocumentAsyncOptions.UserState</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
            </term>
            <description>
              <para>The error object thrown if any.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Uri" />
            </term>
            <description>
              <para>The location of the document loaded. This is the <i>uri</i> value passed to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.LoadAsyncCompletedEventArgs.Document" />
            </term>
            <description>
              <para>The result <see cref="T:Leadtools.Documents.Document" /> object if the load operation was successful, <strong>null</strong> otherwise</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.SaveDocumentOptions">
      <summary>
            Options to use when saving a document.
            </summary>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see> and <see cref="M:Leadtools.Documents.Document.SaveToUri(System.Uri,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToUri</see> to specify the
            options to use when saving a document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.SaveDocumentOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.SaveDocumentOptions" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.SaveDocumentOptions.WebClient">
      <summary>
            The .NET <see cref="T:System.Net.WebClient" /> object to use when downloading or uploading data from a remote URL.
            </summary>
      <value>The .NET <see cref="T:System.Net.WebClient" /> object to use when downloading or uploading data from a remote URL. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>LEADTOOLS uses a <see cref="T:System.Net.WebClient" /> object when downloading or uploading data from a remote URL. This object contain
            many options for handling the credentials and proxy settings. If this value is <strong>null</strong>, LEADTOOLS will create a new
            <see cref="T:System.Net.WebClient" /> object with default options, use it for the operation and then disposes it.</para>
        <para>If the operation requires custom settings for the credentials and proxy, or to subscribe to the <see cref="T:System.Net.WebClient" /> events
            for debugging and logging purposes, then the user can create their own object and set it in this property. LEADTOOLS will then use this instance
            instead of creating a new one. In this mode, the user is responsible for disposing the object when it is no longer used.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.SaveDocumentOptions.AnnotationsUri">
      <summary>
            Gets or sets the path to where the annotations file will be saved.
            </summary>
      <value>The path to where the annotations file will be saved. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>When saving documents, the current annotation containers can be exported to a separate file. Set <see cref="P:Leadtools.Documents.SaveDocumentOptions.AnnotationsUri" /> to
            the location of this file if exporting the annotations is required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.SaveDocumentOptions.Format">
      <summary>
            Gets or sets the raster image format to use when saving the document.
            </summary>
      <value>The raster image format to use when saving the document. Default value is <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>.</value>
      <remarks>
        <para>If the value of <see cref="P:Leadtools.Documents.SaveDocumentOptions.Format" /> is the default <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>, then the document will
            be saved using the format of the original document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.SaveDocumentOptions.BitsPerPixel">
      <summary>
            Gets or sets the bits per pixel to use when saving the document.
            </summary>
      <value>The bits per pixel to use when saving the document. Default value is 0.</value>
      <remarks>
        <para>If the value of <see cref="P:Leadtools.Documents.SaveDocumentOptions.BitsPerPixel" /> is the default 0, then the document will be saved using the bits per pixel of the original document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.Document.SaveToFile(System.String,Leadtools.Documents.SaveDocumentOptions)">Document.SaveToFile</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.UploadDocumentOptions">
      <summary>
            Options to use when uploading a document to the cache.
            </summary>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Documents.DocumentFactory.BeginUpload(Leadtools.Documents.UploadDocumentOptions)">DocumentFactory.BeginUpload</see> to specify the options to use when uploading a document
            to the cache.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Uploading">Uploading Using the Documents Library</see> for detailed information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)">DocumentFactory.UploadDocument</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.UploadDocumentOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.UploadDocumentOptions" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)">DocumentFactory.UploadDocument</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.UploadDocumentOptions.CachePolicy">
      <summary>
            The cache policy to use with the new document.
            </summary>
      <value>The cache policy to use for the new document that determine when the document and its parts are purged. Default value is
            a default <see cref="T:Leadtools.Caching.CacheItemPolicy" /> that never expires.</value>
      <remarks>
        <para>The policy must contain the desired absolute or sliding expiration date for the document and its part.</para>
        <para>Using a a cache policy does not mean the document will be stored in the cache forever, refer to
            <see cref="P:Leadtools.Documents.Document.AutoSaveToCache" /> for more information on how the cache policy is used.</para>
        <para>For more information on uploading documents, refer to <see cref="T:DOX.Topics.Documents_Uploading">Uploading Using the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.UploadDocument(System.Uri,System.Byte[],System.Int32,System.Int32)">DocumentFactory.UploadDocument</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentImages">
      <summary>
            Manages the global image settings for the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentImages" /> manages the global image settings of the document. It can be accessed through the
            <see cref="P:Leadtools.Documents.Document.Images" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentImages" /> can be used to obtain information and change the behavior used when <see cref="T:Leadtools.Documents.Document" /> gets or sets the raster images or SVG
            documents data of a page. It contains the following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" />
            </term>
            <description>
              <para>Indicates whether this document supports getting a page as SVG</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" />
            </term>
            <description>
              <para>Indicates whether the pages of this document is best viewed using SVG instead of raster images</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported" />
            </term>
            <description>
              <para>Indictates whether this document supports loading images using different resolutions.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.DefaultBitsPerPixel" />
            </term>
            <description>
              <para>The bits per pixel to use when getting the raster image of a page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize" />
            </term>
            <description>
              <para>Size to use when obtaining the thumbnail image of a page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentImages.RasterCodecs" />
            </term>
            <description>
              <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object used when loading and saving raster images and SVG documents.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentAnnotations" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentAnnotations" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.IsSvgSupported">
      <summary>
            Gets a value that indicate whether this document supports getting a page as SVG.
            </summary>
      <value>
        <strong>true</strong> if this document supports getting a page as SVG, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> to determine whether an SVG (Scalable Vector Graphics) representation of a page can be obtained through
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">DocumentPage.GetSvg</see>. If <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>true</strong>, then the method will return an SVG
            document ready to be used. If <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>false</strong>, the the method will return <strong>null</strong>.</para>
        <para>The <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> method is used to parse the text from a page within the document. <see cref="T:Leadtools.Documents.Document" />
            uses <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> to determine how this method works as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>true</strong>, then <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">DocumentPage.GetSvg</see> is called
            internally and the text is parsed from the SVG document directly. OCR is not used.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>false</strong>, then <see cref="M:Leadtools.Documents.DocumentPage.GetImage">DocumentPage.GetImage</see> is called
            instead and the text is parsed using the OCR engine instance set in <see cref="P:Leadtools.Documents.DocumentText.OcrEngine">DocumentPageText.OcrEngine</see>. SVG is not used</para>
            </description>
          </item>
        </list>
        <para>You can override this behavior using the <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode">DocumentText.TextExtractionMode</see> property.</para>
        <para>The framework uses similar logic to <see cref="M:Leadtools.Codecs.RasterCodecs.CanLoadSvg(System.String)">RasterCodecs.CanLoadSvg</see> to determine SVG support. Currently, these support is
            provided by these types of documents:</para>
        <list type="bullet">
          <item>
            <description>
              <para>All document formats supported by LEADTOOLS. This includes the likes of Microsoft Office formats (DOC/DOCX, XLSX/XLS, PPT/PPTX), HTML,
            Text, RTF, IOCA/MODCA, ePub and many more. Any format that returns <strong>true</strong> for the value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile">CodecsImageInfo.Document.IsDocumentFile</see>.
            The value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be <strong>true</strong> as well.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Vector file formats such DXF, DWG, DWF. Any format that returns <strong>true</strong> for the value of
            <see cref="P:Leadtools.Codecs.CodecsVectorImageInfo.IsVectorFile">CodecsImageInfo.Vector.IsVectorFile</see>. The value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be
            <strong>true</strong> as well.</para>
            </description>
          </item>
          <item>
            <description>
              <para>SVG files naturally. The value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be <strong>true</strong> as well.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Acrobat PDF document using <see cref="M:Leadtools.Pdf.PDFDocument.GetContentType(System.Int32)">PDFDocument.GetContentType</see>
            and <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> will be determined if the document has any text data that can be parsed:</para>
              <list type="bullet">
                <item>
                  <description>
                    <para>If the return value is <see cref="T:Leadtools.Pdf.PDFContentType">PDFContentType.Text</see>, then the PDF document is "searchable" that contain
            any type of data and <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> will be <strong>true</strong> and the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be set
            to <strong>true</strong> as well.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>If the return value is <see cref="T:Leadtools.Pdf.PDFContentType">PDFContentType.ImageOverText</see>, then the PDF document is a searchable with
            an overlay image on top of each page. <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> will be <strong>true</strong> since the document has text than can be parsed. The
            value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be set to <strong>false</strong> however since viewing a page from this document as SVG
            will not have any benefits because the SVG data is hidden behind an overlay image.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>If the return value is <see cref="T:Leadtools.Pdf.PDFContentType">PDFContentType.Image</see>, then the PDF document is pure raster with no other content
            besides an image for each page (for example, a scanned document). <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> will be <strong>false</strong> since the document does not have any
            text than can be parsed. The value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will be set to <strong>false</strong> as well.</para>
                  </description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that when the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>false</strong>, then the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will
            always be <strong>false</strong> too.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentImages" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred">
      <summary>
            Gets a value that indicate whether the pages in this document is best viewed using SVG instead of raster images.
            </summary>
      <value>
        <strong>true</strong> if the pages in this document is best viewed using SVG instead of raster images, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>Refer to <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> for more information on how this valeu is calculated by the document.</para>
        <para>The LEADTOOLS Document Viewer uses <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> to enable or disable viewing the pages as SVG.</para>
        <para>Note that when the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported" /> is <strong>false</strong>, then the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgViewingPreferred" /> will
            always be <strong>false</strong> too.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported">
      <summary>
            Gets a value that determine whether this document supports loading images using different resolutions.
            </summary>
      <value>
        <strong>true</strong> if this document supports loading images using different resolutions (DPI), otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>You can use the <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">DocumentPage.GetImage(resolution)</see> method to obtain the raster image version of a page.
            This method accepts a <i>resolution</i> property that can be used to get the image at any resolution if supported.</para>
        <para>Document format types such as Microsoft Word and Adobe Acrobat do not contain a physical pixel size and can be loaded at any resolution value such as
            72, 96, 150, 200, 300, 600 etc. You can use <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">DocumentPage.GetImage(resolution)</see> to load the raster image
            at any desired value.</para>
        <para>Raster format types such as TIFF, PNG and JPEG have physical size and can only be loaded at that specific size (user can re-size them later or change
            the resolution value if desired using the <see cref="P:Leadtools.Documents.DocumentImages.RasterCodecs" /> object).</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported" /> determine whether the current <see cref="T:Leadtools.Documents.Document" /> supports loading the image at different resolutions (is a document
            format type) and will return <strong>true</strong> for Word or PDF documents and <strong>false</strong> for TIFF, PNG and JPEG images.</para>
        <para>If <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported" /> is <strong>false</strong>, then the value of <i>resolution</i> passed to
            <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">DocumentPage.GetImage(resolution)</see> is ignored.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">DocumentPage.GetImage(resolution)</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.DefaultBitsPerPixel">
      <summary>
            Gets or sets the bits per pixel to use when getting the raster image of a page.
            </summary>
      <value>The bits per pixel to use when getting the raster image of a page. This value is determind by the document type.</value>
      <remarks>
        <para>Document format types such as Microsoft Word and Adobe Acrobat do not contain a physical bits per pixel and can be loaded at any value such as
            1, 8, 24 or 32 etc. You can use use <see cref="P:Leadtools.Documents.DocumentImages.DefaultBitsPerPixel" /> to set the value used when loading such a page as a raster image. The default
            value is set depending on the <see cref="P:Leadtools.Documents.DocumentImages.RasterCodecs" /> options and the format of the document and is usually set to 24 bits per pixel.</para>
        <para>Raster format types such as TIFF, PNG and JPEG have physical size but can also be loaded at any bits per pixel and <see cref="P:Leadtools.Documents.DocumentImages.DefaultBitsPerPixel" /> can also
            be used to change the value used when loading the raster image of a page. The default value is determined from the original image data.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">DocumentPage.GetImage(resolution)</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize">
      <summary>
            Gets or sets size to use when getting the thumbnail image of a page.
            </summary>
      <value>The size to use in pixels when getting the thumbnail image of a page. Default value is 128 by 128 pixels.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize" /> is used by <see cref="M:Leadtools.Documents.DocumentPage.GetThumbnailImage">DocumentPage.GetThumbnailImage</see> to calculate the size of the raster image
            returned as a thumbnail of the page.</para>
        <para>The actual size is calculated to be the maximum value that fits inside <see cref="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize" /> while keeping the aspect ratio, for example,
            if <see cref="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize" /> is 128 by 128 and the page size is 2000 by 1000 pixels then the returned thumbnail image size is 128 by 64 pixels.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetThumbnailImage">DocumentPage.GetThumbnailImage</see></para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize">
      <summary>
            Gets or sets the maximum width or height in pixels to use when obtaining image data from the pages in this document.
            </summary>
      <value>The maximum width or height in pixels to use when obtaining image data from the pages in this document. Default value is 0 which means to use the original size.</value>
      <remarks>
        <para>The <see cref="M:Leadtools.Documents.DocumentPage.GetImage">DocumentPage.GetImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">DocumentPage.GetSvg</see> and
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">DocumentPage.GetSvgBackImage</see> methods are used to obtain a raster or SVG document representation of a
            page in the document.  When the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> is 0 (the default), then the image or SVG object return will have the
            same size as the page.</para>
        <para>This could not be the desired behavior when the pixel size of the original document is large. For example, if the Documents library is used
            by a mobile application where memory size is limited. Limiting the maximum size of the images returned can also increase the performance of any
            type of application. The size of the data transferred between the document and the application is smaller and therefore, it can be obtained
            sooner and rendered faster.</para>
        <para>To limit the maximum size of the image and SVG objects, set the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> to desired pixel size. After
            that, any calls to <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">GetSvg</see> or
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> will result in a raster or SVG image that is up to but not exceeding
            <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> in width or height. The framework performs this by resizing the data as it is being obtained while maintaining
            the aspect ratio.</para>
        <para>Example: The page has a size of 8.5 by 11 inches (<see cref="P:Leadtools.Documents.DocumentPage.Size">DocumentPage.Size</see> is 6120 by 7920). The pixel size at a
            typical resolution of 300 is 2550 by 3300.</para>
        <para>Calling <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> with the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> set to the default of 0 will
            result in no re-sizing. This the image object obtained will have a size of 2550 by 3300 pixels. The scale value used is 1.0.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> is set to 1024, then the image will be resized before it is returned resulting in a size
            of 792 by 1024 pixels. This is calculated as the best of the original size into the maximum allowed while keeping the aspect ratio. The scale
            value used is 3.223.</para>
        <para>However, if the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> is set to 4096, then the image will be not resized since the original size
            fits inside the maximum value. The scale value used is 1.0.</para>
        <para>In all cases, the scale value used will be set in <see cref="P:Leadtools.Documents.DocumentPage.ImageScale">DocumentPage.ImageScale</see>. The application can use
            this value to determine if the image was scaled and to use in calculations involving coordinate conversions between the result image pixels
            and page units. The LEADTOOLS Document Viewer sets this value in the image scale of each item for a page inside the image viewer control.</para>
        <para>The same behavior described above will occur for <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">GetSvg</see> (the result SVG document is resized) and
            <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see>. The page will typically have one <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> at all times.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentImages.RasterCodecs">
      <summary>
            Gets the raster codecs object used by this <see cref="T:Leadtools.Documents.Document" /> to load raster images and SVG documents.
            </summary>
      <value>The raster codecs object used by this <see cref="T:Leadtools.Documents.Document" /> to load raster images and SVG documents.</value>
      <remarks>
        <para>For more information, refer to <see cref="P:Leadtools.Documents.DocumentFactory.RasterCodecsTemplate">DocumentFactory.RasterCodecsTemplate</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.DocumentMetadata">
      <summary>
            Manages the metadata of the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentMetadata" /> manages the metadata of the document and can be accessed through the
            <see cref="P:Leadtools.Documents.Document.Metadata" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>The metadata includes default values added by the <see cref="T:Leadtools.Documents.DocumentFactory" /> when the document is loaded or created as well as any other data
            extracted from the document file itself, such as author, subject and any keywords stored by other applications.</para>
        <para>Each metadata item is a key/value pair of type string/string. It is up to the user to read the value string and convert to any other data
            type if required. <see cref="T:Leadtools.Documents.DocumentMetadata" /> derives from <see cref="T:System.Collections.Generic.Dictionary`2">Dictionary&lt;string, string&gt;</see> and items
            can be added to it directly.</para>
        <para>When <see cref="T:Leadtools.Documents.DocumentFactory" /> creates a new document using <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)" /> or loads a document using
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)" />, <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)" /> or <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)" />,
            the following metadata are automatically added:</para>
        <list type="table">
          <listheader>
            <term>Key</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>Created</term>
            <description>
              <para>Current time as string (<see cref="M:System.DateTime.ToString">DateTime.Now.ToString</see>.</para>
            </description>
          </item>
          <item>
            <term>Accessed</term>
            <description>
              <para>Current time as string (<see cref="M:System.DateTime.ToString">DateTime.Now.ToString</see>.</para>
            </description>
          </item>
          <item>
            <term>Modified</term>
            <description>
              <para>Current time as string (<see cref="M:System.DateTime.ToString">DateTime.Now.ToString</see>.</para>
            </description>
          </item>
        </list>
        <para>When the document type is PDF, the <see cref="T:Leadtools.Documents.DocumentFactory" /> will add the values found in <see cref="P:Leadtools.Pdf.PDFDocument.DocumentProperties">PDFDocument.DocumentProperties</see>
            into <see cref="T:Leadtools.Documents.DocumentMetadata" />. These values are then used when the document is converted as PDF.</para>
        <para>When the document type supports file comments (<see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)">RasterCodecs.CommentsSupported</see>) such as EXIF, the <see cref="T:Leadtools.Documents.DocumentFactory" /> will
            add the value of the comments found into <see cref="T:Leadtools.Documents.DocumentMetadata" />. These values are then used when the document is converted to another type
            that supports the same comments.</para>
        <para>The user can add, modify or delete any values at any time and they will be saved and cached.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentMetadata.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Documents.DocumentMetadata" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the object transmitted over a stream.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentMetadata.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Overrides <see cref="T:System.Collections.Generic.Dictionary`2">Dictionary.GetObjectData</see>.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data for the object.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <normarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentMetadata.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentMetadata" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentMetadata" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.DocumentPage">
      <summary>
            Represents a page in the current <see cref="T:Leadtools.Documents.Document" />.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPage" /> represents a page in the current <see cref="T:Leadtools.Documents.Document" />. It can be accessed through the <see cref="P:Leadtools.Documents.Document.Pages" /> collection.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> is populated with an item for each page in the original document. Each <see cref="T:Leadtools.Documents.DocumentPage" /> will have the value of
            <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> initialized to their correspoding value in the document. The other parts of the page are obtained on demand
            when the user calls the various methods.</para>
        <para>Use <see cref="M:Leadtools.Documents.DocumentPages.CreatePage(Leadtools.LeadSizeD,System.Double)">DocumentPages.CreatePage</see> to create a new page when modifying or creating documents.</para>
        <para>The page uses the cache system if available, most of the page data are not kept in memory and is either read from the original document or obtained from the cache
            on demand. This is done to reduce the memory footprint of <see cref="T:Leadtools.Documents.Document" /> and to be able to support document with a large number of pages and data.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPage" /> has the following features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /></term>
            <description>The size in document units and resolution in DPI of the page.</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> and <see cref="P:Leadtools.Documents.DocumentPage.PageNumber" /></term>
            <description>The page number of the page in the original document (if any) and the current page number in the collection.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" />.</term>
            <description>Get and sets a <see cref="T:Leadtools.RasterImage" /> of this page.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" />, <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" />.</term>
            <description>Get and sets a <see cref="T:Leadtools.Svg.SvgDocument" /> of this page.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see>, <see cref="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" />.</term>
            <description>Get and sets the background <see cref="T:Leadtools.RasterImage" /> for the SVG image of this page.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetText" />, <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" />.</term>
            <description>Get and sets a <see cref="T:Leadtools.Documents.DocumentPageText" /> of this page.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)" />, <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" />.</term>
            <description>Get and sets a <see cref="T:Leadtools.Annotations.Core.AnnContainer" /> of this page.</description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" />, <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" /> and <see cref="P:Leadtools.Documents.DocumentPage.IsLinksModified" />.</term>
            <description>Get and sets an array of <see cref="T:Leadtools.Documents.DocumentLink" /> objects of this page.</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentPage.UserData" />
            </term>
            <description>Any user-defined data that can be associated with the page (and saved to the cache if needed).</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetImage">
      <summary>
            Gets this page as a raster image.
            </summary>
      <returns>This page as a <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> and <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">GetImage(resolution)</see> are used to get a raster image representation of this
            page. All document types support this method and it will always return a value object.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> is used to replace the raster image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> is used to as flag that indicates that the image of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is a raster image with the specified resolution):</para>
        <list type="number">
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.RasterImage" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not -1), then
            <see cref="P:Leadtools.Documents.Document.RasterCodecs" /> is used to load the <see cref="T:Leadtools.RasterImage" /> object from the original page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is not an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not 1), then
            a new <see cref="T:Leadtools.RasterImage" /> object is created based on the page size and resolution and the default values in <see cref="T:Leadtools.Documents.DocumentImages" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then
            the <see cref="T:Leadtools.RasterImage" /> object is saved to the cache before it is returned. Next time this method is called, the image will be returned from the cache
            directly without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>Note that if <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> has been previously called with a <strong>null</strong> object for the <i>image</i> parameter, then this method will
            return <strong>null</strong> as well.</para>
        <para>In all cases, the returned <see cref="T:Leadtools.RasterImage" /> object is not used by this <see cref="T:Leadtools.Documents.Document" />, the user is responsible for deleting it using
            <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after it has been used.</para>
        <para>If this document type supports loading raster images at any resolution (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported">DocumentImages.IsResolutionsSupported</see>
            is <strong>true</strong>, then this method will return the image using the current page <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> value.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the result raster image will have a size that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the raster image for the page when the view mode is "Raster Image".</para>
        <para>The LEADTOOLS Document Converter uses this method to obtain the raster image for the page when converting using OCR or when adding the overlay image of a page
            if needed.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">
      <summary>
            Gets this page as a raster image at the specified resolution.
            </summary>
      <param name="resolution">Resolution to use in dots per inch. If this value is 0, then the current page <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> value is used.</param>
      <returns>This page as a <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> and <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">GetImage(resolution)</see> are used to get a raster image representation of this
            page. All document types support this method and it will always return a value object.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> is used to replace the raster image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> is used to as flag that indicates that the image of this page has been replaced by the user.</para>
        <para>If this document type supports loading raster images at any resolution (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported">DocumentImages.IsResolutionsSupported</see>
            is <strong>true</strong>), then this method will use the <paramref name="resolution" /> parameter instead of the <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> property when loading the image.</para>
        <para>If this document type does not support loading raster images at any resolution (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsResolutionsSupported">DocumentImages.IsResolutionsSupported</see>
            is <strong>false</strong>), then <paramref name="resolution" /> is ignored and the original page <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> value is used.</para>
        <para>This method works as follows (the "item" is a raster image with the specified resolution):</para>
        <list type="number">
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.RasterImage" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not -1), then
            <see cref="P:Leadtools.Documents.Document.RasterCodecs" /> is used to load the <see cref="T:Leadtools.RasterImage" /> object from the original page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is not an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not 1), then
            a new <see cref="T:Leadtools.RasterImage" /> object is created based on the page size and resolution and the default values in <see cref="T:Leadtools.Documents.DocumentImages" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.RasterImage" /> object is saved to the cache before it is returned. Next time this method is called, the image will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>Note that if <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> has been previously called with a <strong>null</strong> object for the <i>image</i> parameter, then this method will
            return <strong>null</strong> as well.</para>
        <para>In all cases, the returned <see cref="T:Leadtools.RasterImage" /> object is not used by this <see cref="T:Leadtools.Documents.Document" />, the user is responsible for deleting it using
            <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after it has been used.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the result raster image will have a size that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the raster image for the page when the view mode is "Raster Image".</para>
        <para>The LEADTOOLS Document Converter uses this method to obtain the raster image for the page when converting using OCR or when adding the overlay image of a page
            if needed.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)">
      <summary>
            Replaces the raster image for this page.
            </summary>
      <param name="image">New raster image to use for this page. This value can be <strong>null</strong>.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> and <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">GetImage(resolution)</see> are used to get a raster image representation of this
            page. All document types support this method and it will always return a value object.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> is used to replace the raster image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> is used to as flag that indicates that the image of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is a raster image with the specified resolution):</para>
        <list type="number">
          <item>
            <description>
              <para>This method requires that the owner document uses a cache system
            (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), otherwise; an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the value of the <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> property of <see cref="T:Leadtools.Documents.Document" /> is <strong>true</strong>, then
            the user cannot modify this document and an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>All previously saved raster image objects for this page are purged from the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <paramref name="image" /> is added to the cache by serializing the <see cref="T:Leadtools.RasterImage" /> object. The original object is not disposed
            and is still owned by the user. If <paramref name="image" /> is <strong>null</strong>, then a "null" item is added to the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The page <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> properties are updated to be the same value as the image. If the image
            set is <strong>null</strong>, then these values are set to <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize">DocumentPages.DefaultPageSize</see> and
            <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetImage" /> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetThumbnailImage">
      <summary>
            Gets a thumbnail representation of this page.
            </summary>
      <returns>The thumbnail representation of this page.</returns>
      <remarks>
        <para>This method uses the value set in <see cref="P:Leadtools.Documents.DocumentImages.ThumbnailPixelSize">DocumentImages.ThumbnailPixelSize</see> to determine the size of the
            thumbnail image. The returned image data will have 24 bits per pixel.</para>
        <para>This method works as follows (the "item" is a thumbnail image with the specified size):</para>
        <list type="number">
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.RasterImage" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPage.GetImage" /> is used to create the thumbnail image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.RasterImage" /> object is saved to the cache before it is returned. Next time this method is called, the image will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>The returned <see cref="T:Leadtools.RasterImage" /> object is not used by this <see cref="T:Leadtools.Documents.Document" />, the user is responsible for deleting it using
            <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after it has been used.</para>
        <para>The LEADTOOLS Document Viewer uses this method for generating the thumbnails list of a document.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetText">
      <summary>
            Gets the text content of this page.
            </summary>
      <returns>The text content of this <see cref="T:Leadtools.Documents.DocumentPage" /> as a <see cref="T:Leadtools.Documents.DocumentPageText" /> object.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetText" /> is used to parse the text content of a page. All document types support this method and internally will use the LEADTOOLS SVG or OCR
            engines to obtain the text from the document.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" /> is used to replace the text content of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" /> is used to as flag that indicates that the text of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the text content):</para>
        <list type="number">
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.Documents.DocumentPageText" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see> and <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode">DocumentText.TextExtractionMode</see>
            will determine if the text is parsed from the page using LEADTOOLS SVG or OCR engines.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If SVG is supported, then <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" /> is called and the text is parsed from the SVG content directly without the use of OCR.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Otherwise, and if OCR is supported, then <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> is called and the text is parsed from the the raster image using OCR.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then
            the <see cref="T:Leadtools.Documents.DocumentPageText" /> object is saved to the cache before it is returned. Next time this method is called, the text will be returned from the cache
            directly without parsing it again.</para>
            </description>
          </item>
        </list>
        <para>Note that if <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" /> has been previously called with a <strong>null</strong> object for the <i>text</i> parameter, then this method will
            return <strong>null</strong> as well.</para>
        <para>In all cases, the returned <see cref="T:Leadtools.Documents.DocumentPageText" /> object is not used by this <see cref="T:Leadtools.Documents.Document" /> after it has been returned.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the text used with all text operations such Find, Select Text and Text Review annotations objects.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentPageGetTextExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.tif"), options)
            'for the TIF file we need an OCR engine
            Dim ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            Dim rasterCodecs As New RasterCodecs()
            Dim documentWriter As New DocumentWriter()
            ocrEngine.Startup(rasterCodecs, documentWriter, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            document.Text.OcrEngine = ocrEngine

            ' get text 
            Dim page As Leadtools.Documents.DocumentPage = document.Pages(0)
            Dim pageText As DocumentPageText = page.GetText()
            If Not pageText Is Nothing Then
               pageText.BuildText()
               Dim text As String = pageText.Text

               Console.WriteLine(text)
            Else
               Console.WriteLine("Failed!")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentPageGetTextExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.tif"), options))
         {
            //for the TIF file we need an OCR engine
            var ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            var rasterCodecs = new RasterCodecs();
            var documentWriter = new DocumentWriter();
            ocrEngine.Startup(rasterCodecs, documentWriter, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            document.Text.OcrEngine = ocrEngine;

            // get text 
            var page = document.Pages[0];
            var pageText = page.GetText();
            if (pageText != null)
            {
               pageText.BuildText();
               var text = pageText.Text;

               Console.WriteLine(text);
            }
            else
            {
               Console.WriteLine("Failed!");
            }
         }
      }</code>
        <!--DocumentPage.GetText-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)">
      <summary>
            Replaces the text content for this page.
            </summary>
      <param name="text">New text content to use for this page. This value can be <strong>null</strong>.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetText" /> is used to parse the text content of a page. All document types support this method and internally will use the LEADTOOLS SVG or OCR
            engines to obtain the text from the document.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" /> is used to replace the text content of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" /> is used to as flag that indicates that the text of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the text content):</para>
        <list type="number">
          <item>
            <description>
              <para>This method requires that the owner document uses a cache system
            (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), otherwise; an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the value of the <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> property of <see cref="T:Leadtools.Documents.Document" /> is <strong>true</strong>, then
            the user cannot modify this document and an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>All previously saved text objects for this page are purged from the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <paramref name="text" /> is added to the cache by serializing the <see cref="T:Leadtools.Documents.DocumentPageText" /> object. If
            <paramref name="text" /> is <strong>null</strong>, then a "null" item is added to the cache.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetText" /> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)">
      <summary>
            Gets this page as an SVG document with the specified options.
            </summary>
      <param name="options">Options to use when creating the SVG document. It can be used to drop images, text or shapes from the returned document 
            if they are not needed. If this value can is <strong>null</strong>, then the SVG document is returned as is without modifications.</param>
      <returns>The SVG document of this page if found or <strong>null</strong>.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to get an SVG document representation of this page. Not all document types support this method, this depends on the value
            of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to replace the SVG document of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" /> is used to as flag that indicates that the SVG document of this page has been replaced by the user.</para>
        <para>The <paramref name="options" /> parameter controls how the SVG document is generated. A common use is to load the SVG without any image elements
            that may contain large embedded data. This data is Base64 encoded which result in even bigger memory size for the SVG data. One workaround for this
            is to use <see cref="P:Leadtools.Codecs.CodecsLoadSvgOptions.DropImages" /> in <paramref name="options" />. The result SVG document will only contain the text and vector
            shapes and will a small memory footprint. Then, <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> can be called to return a raster image that contain the dropped
            image elements separately.</para>
        <para>This method works as follows (the "item" is an SVG document with the specified options):</para>
        <list type="number">
          <item>
            <description>
              <para>If this document does not support SVG (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>
            is <strong>false</strong>), then this method will return <strong>null</strong>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.Svg.SvgDocument" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not -1), then
            <see cref="P:Leadtools.Documents.Document.RasterCodecs" /> is used to load the <see cref="T:Leadtools.Svg.SvgDocument" /> object from the original page using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadSvg(System.String,System.Int32,Leadtools.Codecs.CodecsLoadSvgOptions)">RasterCodecs.LoadSvg</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is not an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not 1), then
            a new <see cref="T:Leadtools.Svg.SvgDocument" /> object is created based on the page size and resolution and the default values in <see cref="T:Leadtools.Documents.DocumentImages" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.Svg.SvgDocument" /> object is saved to the cache before it is returned. Next time this method is called, the SVG will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>Note that if <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" /> has been previously called with a <strong>null</strong> object for the <i>svg</i> parameter, then this method will
            return <strong>null</strong> as well.</para>
        <para>In all cases, the returned <see cref="T:Leadtools.Svg.SvgDocument" /> object is not used by this <see cref="T:Leadtools.Documents.Document" />, the user is responsible for deleting it using
            <see cref="M:Leadtools.Svg.SvgDocument.Dispose">SvgDocument.Dispose</see> after it has been used.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the result SVG document will have a size that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the SVG document for the page when the view mode is "SVG".</para>
        <para>The LEADTOOLS Document Converter uses this method to obtain the SVG document for the page when converting without using OCR.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)">
      <summary>
            Replaces the SVG document for this page.
            </summary>
      <param name="svg">New SVG document to use for this page. This value can be <strong>null</strong>.</param>
      <param name="options">Options to use when caching this SVG document. It can be used to drop images, text or shapes before the document is saved
            if they are not needed. If this value can is <strong>null</strong>, then the SVG document is saved as is without modifications.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to get an SVG document representation of this page. Not all document types support this method, this depends on the value
            of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to replace the SVG document of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" /> is used to as flag that indicates that the SVG document of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the SVG document passed by the user):</para>
        <list type="number">
          <item>
            <description>
              <para>If this document does not support SVG (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>
            is <strong>false</strong>), then an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>This method requires that the owner document uses a cache system
            (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), otherwise; an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the value of the <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> property of <see cref="T:Leadtools.Documents.Document" /> is <strong>true</strong>, then
            the user cannot modify this document and an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>SVG documents with the same <paramref name="options" /> previously saved for this page are purged from the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <paramref name="svg" /> is added to the cache by serializing the <see cref="T:Leadtools.Svg.SvgDocument" /> object. The original object is not disposed
            and is still owned by the user. If <paramref name="svg" /> is <strong>null</strong>, then a "null" item is added to the cache.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" /> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor,System.Int32)">
      <summary>
            Gets a raster image that represents contains only the image elements of the SVG document for this page.
            </summary>
      <param name="backColor">Color to use to fill the background of the image.</param>
      <param name="resolution">Resolution to use in dots per inch. If this value is 0, then the current page <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> value is used.</param>
      <returns>Raster image that represents contains only the image elements of the SVG document for this page if this page supportes SVG and the SVG
            data contains image elements, otherwise; <strong>null</strong>.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor,System.Int32)">GetSvgBackImage</see> is used to get a raster image that represents contains only the image elements of the SVG document for this page.
            Not all document types support this method, this depends on the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)" /> is used to replace the SVG background image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> is used to as flag
            that indicates that the SVG background image of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the raster image passed by the user):</para>
        <list type="number">
          <item>
            <description>
              <para>If this document does not support SVG (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>
            is <strong>false</strong>), then an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.RasterImage" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The SVG data for this page is loaded with everything dropped except the image elements. If the result document is empty (the
            page does not contain any image elements in its SVG), then <strong>null</strong> is returned.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Otherwise, a new <see cref="T:Leadtools.RasterImage" /> is created and filled with <paramref name="backColor" /> (if its not a transparent color)
            then the SVG data containing only the image elements is rendered on the surface of this image. The size of the result raster image is the same size
            as this page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.RasterImage" /> object is saved to the cache before it is returned. Next time this method is called, the image will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor,System.Int32)">GetSvgBackImage</see> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the result image will have a size that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">
      <summary>
            Gets a raster image that represents contains only the image elements of the SVG document for this page using the default resolution.
            </summary>
      <param name="backColor">Color to use to fill the background of the image.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> is used to get a raster image that represents contains only the image elements of the SVG document for this page.
            Not all document types support this method, this depends on the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)" /> is used to replace the SVG background image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> is used to as flag
            that indicates that the SVG background image of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the raster image passed by the user):</para>
        <list type="number">
          <item>
            <description>
              <para>If this document does not support SVG (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>
            is <strong>false</strong>), then an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            .NET serialization is used to create the <see cref="T:Leadtools.RasterImage" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The SVG data for this page is loaded with everything dropped except the image elements. If the result document is empty (the
            page does not contain any image elements in its SVG), then <strong>null</strong> is returned.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Otherwise, a new <see cref="T:Leadtools.RasterImage" /> is created and filled with <paramref name="backColor" /> (if its not a transparent color)
            then the SVG data containing only the image elements is rendered on the surface of this image. The size of the result raster image is the same size
            as this page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.RasterImage" /> object is saved to the cache before it is returned. Next time this method is called, the image will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the result image will have a size that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)">
      <summary>
            Replaces the SVG background image for this page.
            </summary>
      <param name="image">New SVG background image to use for this page. This value can be <strong>null</strong>.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> is used to get a raster image that represents contains only the image elements of the SVG document for this page.
            Not all document types support this method, this depends on the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)" /> is used to replace the SVG background image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> is used to as flag
            that indicates that the SVG background image of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the raster image passed by the user):</para>
        <list type="number">
          <item>
            <description>
              <para>If this document does not support SVG (the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>
            is <strong>false</strong>), then an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>This method requires that the owner document uses a cache system
            (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), otherwise; an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the value of the <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> property of <see cref="T:Leadtools.Documents.Document" /> is <strong>true</strong>, then
            the user cannot modify this document and an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The SVG background image previously saved for this page are purged from the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <paramref name="image" /> is added to the cache by serializing the <see cref="T:Leadtools.RasterImage" /> object. The original object is not disposed
            and is still owned by the user. If <paramref name="image" /> is <strong>null</strong>, then a "null" item is added to the cache.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)">
      <summary>
            Gets the annotations container of this page.
            </summary>
      <param name="createEmpty">
        <strong>true</strong> to create and return an empty LEADTOOLS annotations container if the page does not have one originally, otherwise;
            <strong>false</strong> to return <strong>null</strong> if the page does not have an original container.</param>
      <returns>The annotation container for this page if available, or <strong>null</strong>.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)" /> is used to get the annotations container of this page. All document types support this method.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" /> is used to replace the annotation container of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" /> is used to as flag that indicates that the annotations container of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is an annotation container):</para>
        <list type="number">
          <item>
            <description>
              <para>If an item was found in the cache, it is returned right away. This is available if the document was created using the cache system.
            <see cref="T:Leadtools.Annotations.Core.AnnCodecs" /> is used to load the <see cref="T:Leadtools.Annotations.Core.AnnContainer" /> object from the data found in the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not -1), then
            the annotation is container is loaded from the original document. See below for more information.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this is not an original page in the source document file (the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is not 1), then
            depending on the value of <paramref name="createEmpty" /> a new <see cref="T:Leadtools.Annotations.Core.AnnContainer" /> object is created based on the page size and resolution or <strong>null</strong>
            is used.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            <see cref="T:Leadtools.Annotations.Core.AnnContainer" /> object is saved to the cache before it is returned. Next time this method is called, the container will be returned from the cache directly
            without loading it from the file or creating a new instance.</para>
            </description>
          </item>
        </list>
        <para>Note that if <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" /> has been previously called with a <strong>null</strong> object for the <i>container</i> parameter, then this method will
            return <strong>null</strong> as well.</para>
        <para>In all cases, the returned <see cref="T:Leadtools.Annotations.Core.AnnContainer" /> object is not used by this <see cref="T:Leadtools.Documents.Document" />, the user is responsible for deleting it after it
            has been used.</para>
        <para>The original annotation of the document is obtained in one of two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If the user passed the location of an external LEADTOOLS annotations file to use with the document using <see cref="P:Leadtools.Documents.LoadDocumentOptions.AnnotationsUri">LoadDocumentOptions.AnnotationsUri</see>,
            then this file is checked against <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> and if an item is found, it is loaded and used by this method.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this document type supports embedded annotations (such as PDF or TIFF documents) and the user set the value of
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations">LoadDocumentOptions.LoadEmbeddedAnnotations</see> to <strong>true</strong>, then this method will try
            to load the annotations from the document file itself if found. The value of <see cref="P:Leadtools.Documents.DocumentPage.HasEmbeddedAnnotations" /> will be <strong>true</strong>
            if the original document file contain an annotation container for this page.</para>
            </description>
          </item>
        </list>
        <para>In either case, if the original document or annotation file did not have an annotation container for this page, the <paramref name="createEmpty" /> will
            be used to either return <strong>null</strong> or create an empty container for the page.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the annotation container for the page when.</para>
        <para>The LEADTOOLS Document Converter uses this method to obtain annotation container for the page when annotations options are used during convertions.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)">
      <summary>
            Replaces the annotations container for this page.
            </summary>
      <param name="container">New annotations container to use for this page. This value can be <strong>null</strong>.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)" /> is used to get the annotations container of this page. All document types support this method.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" /> is used to replace the annotation container of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" /> is used to as flag that indicates that the annotations container of this page has been replaced by the user.</para>
        <para>This method works as follows (the "item" is the new annotations container):</para>
        <list type="number">
          <item>
            <description>
              <para>This method requires that the owner document uses a cache system
            (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), otherwise; an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the value of the <see cref="P:Leadtools.Documents.Document.IsReadOnly" /> property of <see cref="T:Leadtools.Documents.Document" /> is <strong>true</strong>, then
            the user cannot modify this document and an exception will be thrown.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Any previously saved annotations container object for this page are purged from the cache.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <paramref name="container" /> is added to the cache by saving it using <see cref="T:Leadtools.Annotations.Core.AnnCodecs" />. The original object is not deleted.
            If <paramref name="container" /> is <strong>null</strong>, then a "null" item is added to the cache.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)" /> will check the cache first, hence, subsequent calls will return the value set by this method.</para>
        <para>The value of <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" /> will be set to <strong>true</strong> after this method returns.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.GetLinks">
      <summary>
            Gets the links of this page.
            </summary>
      <returns>An array containing the links for this page if available, or <strong>null</strong>.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" /> is used to get the links found in this page. All document types support this method however, the links are not read from the original
            document till <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed">DocumentStructure.IsParsed</see> has been called.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" /> is used to replace the links of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsLinksModified" /> is used to as flag that indicates that the links of this page has been replaced by the user.</para>
        <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            links are stored in the cache only when <see cref="M:Leadtools.Documents.Document.SaveToCache">Document.SaveToCache</see> is called.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the links of a page uses an interactive modes to modify the mouse cursor when the user to hover over
            a link as well as invoking the link target when the user clicks on a link.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentPageGetLinksExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options)
            For Each page As Leadtools.Documents.DocumentPage In document.Pages
               Dim links() As DocumentLink = page.GetLinks()
               If Not links Is Nothing Then
                  Dim index As Integer = 0
                  Console.WriteLine("  Page " &amp; page.PageNumber)
                  For Each link As DocumentLink In links
                     Console.WriteLine(index)
                     index = index + 1
                     Console.WriteLine("    Bounds:" &amp; link.Bounds.ToString())
                     Console.WriteLine("    LinkType:" &amp; link.LinkType)
                     If link.LinkType = DocumentLinkType.Value Then
                        Console.WriteLine("    Value:" &amp; link.Value)
                     Else
                        Console.WriteLine("    Target.PageFitType:" &amp; link.Target.PageFitType)
                        Console.WriteLine("    Target.PageNumber:" &amp; link.Target.PageNumber)
                        Console.WriteLine("    Target.Position:" &amp; link.Target.Position.ToString())
                        Console.WriteLine("    Target.ZoomPercent:" &amp; link.Target.ZoomPercent)
                     End If
                     Console.WriteLine()
                  Next link
               End If
            Next page
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentPageGetLinksExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.pdf"), options))
         {
            foreach (var page in document.Pages)
            {
               var links = page.GetLinks();
               if (links != null)
               {
                  int index = 0;
                  Console.WriteLine("  Page " + page.PageNumber);
                  foreach (var link in links)
                  {
                     Console.WriteLine(index++);
                     Console.WriteLine("    Bounds:" + link.Bounds);
                     Console.WriteLine("    LinkType:" + link.LinkType);
                     if (link.LinkType == DocumentLinkType.Value)
                        Console.WriteLine("    Value:" + link.Value);
                     else
                     {
                        Console.WriteLine("    Target.PageFitType:" + link.Target.PageFitType);
                        Console.WriteLine("    Target.PageNumber:" + link.Target.PageNumber);
                        Console.WriteLine("    Target.Position:" + link.Target.Position);
                        Console.WriteLine("    Target.ZoomPercent:" + link.Target.ZoomPercent);
                     }
                     Console.WriteLine();
                  }
               }
            }
         }
      }</code>
        <!--DocumentPage.GetLinks-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])">
      <summary>
            Replaces the links of this page.
            </summary>
      <param name="links">An array containing the new links for this page. A value of <strong>null</strong> is supported.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" /> is used to get the links found in this page. All document types support this method however, the links are not read from the original
            document till <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed">DocumentStructure.IsParsed</see> has been called.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" /> is used to replace the links of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsLinksModified" /> is used to as flag that indicates that the links of this page has been replaced by the user.</para>
        <para>If this document uses the cache system (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then the
            links are stored in the cache only when <see cref="M:Leadtools.Documents.Document.SaveToCache">Document.SaveToCache</see> is called.</para>
        <para>The LEADTOOLS Document Viewer uses this method to obtain the links of a page uses an interactive modes to modify the mouse cursor when the user to hover over
            a link as well as invoking the link target when the user clicks on a link.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentPage" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentPage" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.Size">
      <summary>
            Size of this page.
            </summary>
      <value>The size of this <see cref="T:Leadtools.Documents.DocumentPage" /> in document units.</value>
      <remarks>
        <para>If this <see cref="T:Leadtools.Documents.DocumentPage" /> corresponds to an original page in the document, then the size of the page is determined from the original physical size
            and resolution when the <see cref="T:Leadtools.Documents.Document" /> was loaded. If this page was added to the document by the user, then the size is the value passed to
            <see cref="M:Leadtools.Documents.DocumentPages.CreatePage(Leadtools.LeadSizeD,System.Double)">DocumentPages.CreatePage</see>.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is the page number of this <see cref="T:Leadtools.Documents.DocumentPage" /> in the original document. It is -1 if this page
            was added by the user.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will always contain a value and is populated for all pages of the document upon initialization. The LEADTOOLS Document Viewer relies on this
            to create empty items for each page in the image viewer control. Each item will have the correct size but no image data. It will then loads the
            raster image or SVG objects for the page in a background thread.</para>
        <para>The raster image returned from <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage()</see> or <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">GetImage(resolution)</see> will have the same size in
            value as <see cref="P:Leadtools.Documents.DocumentPage.Size" /> (the size will be in pixels and if transformed using <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will result in the same value as <see cref="P:Leadtools.Documents.DocumentPage.Size" />).</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> is a value greater than 1, then the raster or SVG objects returned will have a size
            that is equal to <see cref="P:Leadtools.Documents.DocumentPage.Size" /> / <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" />.</para>
        <para>When the user sets a new raster image using <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" />, the <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> values of the page are updated from
            the <see cref="T:Leadtools.RasterImage" /> object. If the value passed is <strong>null</strong>, then <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will be updated
            using <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize">DocumentPages.DefaultPageSize</see> and <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.Size" /> is in document units, refer to
            <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.Resolution">
      <summary>
            Resolution of this page.
            </summary>
      <value>The resolution of this <see cref="T:Leadtools.Documents.DocumentPage" /> in dots per inch (DPI).</value>
      <remarks>
        <para>If this <see cref="T:Leadtools.Documents.DocumentPage" /> corresponds to an original page in the document, then the resolution of the page is determined from the original
            document when <see cref="T:Leadtools.Documents.Document" /> was loaded. If this page was added to the document by the user, then the size is the value passed to
            <see cref="M:Leadtools.Documents.DocumentPages.CreatePage(Leadtools.LeadSizeD,System.Double)">DocumentPages.CreatePage</see>.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is the page number of this <see cref="T:Leadtools.Documents.DocumentPage" /> in the original document. It is -1 if this page
            was added by the user.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
        <para>Some document types do not have a physical resolution, in this case, <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see> is used
            for all the initial values of the pages.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will always contain a value and is populated for all pages of the document upon initialization. The LEADTOOLS Document Viewer relies on this
            to create empty items for each page in the image viewer control. Each item will have the correct size but no image data. It will then loads the
            raster image or SVG objects for the page in a background thread.</para>
        <para>When the user sets a new raster image using <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" />, the <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> values of the page are updated from
            the <see cref="T:Leadtools.RasterImage" /> object. If the value passed is <strong>null</strong>, then <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will be updated
            using <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize">DocumentPages.DefaultPageSize</see> and <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution">DocumentPages.DefaultResolution</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.PageNumber">
      <summary>
            The current number of this page in the document.
            </summary>
      <value>The 1-based number of this <see cref="T:Leadtools.Documents.DocumentPage" /> in the document.</value>
      <remarks>
        <para>This value is the index of this page in <see cref="T:Leadtools.Documents.DocumentPages" /> plus 1. It corresponds to the current page number in the document.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is the number of this <see cref="T:Leadtools.Documents.DocumentPage" /> in the original document file. When the document is loaded,
            <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> and <see cref="P:Leadtools.Documents.DocumentPage.PageNumber" /> will contain the same value. If the user modifies the pages of the document by adding,
            removing or replacing pages, then the two values will differ. <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> will never change and will still holds the value in the original
            document while <see cref="P:Leadtools.Documents.DocumentPage.PageNumber" /> will return the current updated number of the page in the document.</para>
        <para>When a page is added to the document by the user, the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> will be -1 since it does not correspond to an item
            in the original document.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.OriginalPageNumber">
      <summary>
            The number of this page in the original document.
            </summary>
      <value>1-based number of this page in the original document.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> is the number of this <see cref="T:Leadtools.Documents.DocumentPage" /> in the original document file. When the document is loaded,
            <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> and <see cref="P:Leadtools.Documents.DocumentPage.PageNumber" /> will contain the same value. If the user modifies the pages of the document by adding,
            removing or replacing pages, then the two values will differ. <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> will never change and will still holds the value in the original
            document while <see cref="P:Leadtools.Documents.DocumentPage.PageNumber" /> will return the current updated number of the page in the document.</para>
        <para>When a page is added to the document by the user, the value of <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> will be -1 since it does not correspond to an item
            in the original document.</para>
        <para>This <see cref="T:Leadtools.Documents.DocumentPage" /> will use <see cref="P:Leadtools.Documents.DocumentPage.OriginalPageNumber" /> when the user calls the methods to obtain data from the original document such
            as <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see>.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.UserData">
      <summary>
            The user-defined data associated with this page.
            </summary>
      <value>Any object that can be used as the user-defined data associated with this page. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.UserData" /> is not used by the <see cref="T:Leadtools.Documents.DocumentPage" />, the user can set any application value to associated this page object
            with an external resource.</para>
        <para>If this document uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>), then <see cref="P:Leadtools.Documents.DocumentPage.UserData" /> will be saved and re-loaded from the cache as well. This is performed using
            standard .NET serialization. So for primitives values, nothing more needs to be done. If <see cref="P:Leadtools.Documents.DocumentPage.UserData" /> was set to a complex user-defined
            object, then the class must implement .NET <see cref="T:System.Runtime.Serialization.ISerializable" /> interface members.</para>
        <para>The cache currently uses <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> to perform serialization.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsDeleted">
      <summary>
            Gets or sets a value that determine whether this page is deleted.
            </summary>
      <value>
        <strong>true</strong> if this page is deleted, otherwise; <strong>false</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>Setting <see cref="P:Leadtools.Documents.DocumentPage.IsDeleted" /> to <strong>true</strong> will not removed any data from the page. It is just used to flag the page as being deleted.
            Everything works as normal except when the document is saved or converted when deleted pages are skipped.</para>
        <para>This gives the user the ability to remove certain pages from the document quickly during save as well as being able to undo this operation when the
            save operation is done.</para>
        <para>This value is saved and re-loaded when the owner <see cref="T:Leadtools.Documents.Document" /> uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>).</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsImageModified">
      <summary>
            Gets or sets a value that indicate whether the raster image for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the raster image for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetImage">GetImage</see> and <see cref="M:Leadtools.Documents.DocumentPage.GetImage(System.Int32)">GetImage(resolution)</see> are used to get a raster image representation of this
            page. All document types support this method and it will always return a value object.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> is used to replace the raster image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> is used to as flag that indicates that the image of this page has been replaced by the user.</para>
        <para>This value is saved and re-loaded when the owner <see cref="T:Leadtools.Documents.Document" /> uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>).</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.IsImageModified" /> is not used by the framework in any special way, it is a flag that can used to check if the current image is not the same
            as the original.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsTextModified">
      <summary>
            Gets or sets a value that indicate whether the text content for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the text content for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetText" /> is used to parse the text content of a page. All document types support this method and internally will use the LEADTOOLS SVG or OCR
            engines to obtain the text from the document.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" /> is used to replace the text content of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" /> is used to as flag that indicates that the text of this page has been replaced by the user.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.IsTextModified" /> is not used by the framework in any special way, it is a flag that can used to check if the current text is not the same
            as the original.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.SetText(Leadtools.Documents.DocumentPageText)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsSvgModified">
      <summary>
            Gets or sets a value that indicate whether the SVG document for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the SVG document for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvg(Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to get an SVG document representation of this page. Not all document types support this method, this depends on the value
            of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" /> is used to replace the SVG document of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" /> is used to as flag that indicates that the SVG document of this page has been replaced by the user.</para>
        <para>This value is saved and re-loaded when the owner <see cref="T:Leadtools.Documents.Document" /> uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>).</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.IsSvgModified" /> is not used by the framework in any special way, it is a flag that can used to check if the current SVG document is not the same
            as the original.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.SetSvg(Leadtools.Svg.SvgDocument,Leadtools.Codecs.CodecsLoadSvgOptions)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified">
      <summary>
            Gets or sets a value that indicate whether the SVG background image for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the SVG background image for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetSvgBackImage(Leadtools.RasterColor)">GetSvgBackImage</see> is used to get a raster image that represents contains only the image elements of the SVG document for this page.
            Not all document types support this method, this depends on the value of <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see>.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetSvgBackImage(Leadtools.RasterImage)" /> is used to replace the SVG background image of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsSvgBackImageModified" /> is used to as flag
            that indicates that the SVG background image of this page has been replaced by the user.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified">
      <summary>
            Gets or sets a value that indicate whether the annotations for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the annotations for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetAnnotations(System.Boolean)" /> is used to get the annotations container of this page. All document types support this method.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" /> is used to replace the annotation container of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" /> is used to as flag that indicates that the annotations container of this page has been replaced by the user.</para>
        <para>This value is saved and re-loaded when the owner <see cref="T:Leadtools.Documents.Document" /> uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>).</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.IsAnnotationsModified" /> is not used by the framework in any special way, it is a flag that can used to check if the current annotations is not the same
            as the original.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.HasEmbeddedAnnotations">
      <summary>
            Gets or sets a value that indicate whether the original document has embedded annotations for this page.
            </summary>
      <value>
        <strong>true</strong> if the original document has embedded annotations for this page, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>If this document type supports embedded annotations (such as PDF or TIFF documents) and the user set the value of
            <see cref="P:Leadtools.Documents.LoadDocumentOptions.LoadEmbeddedAnnotations">LoadDocumentOptions.LoadEmbeddedAnnotations</see> to <strong>true</strong>, then this method will try
            to load the annotations from the document file itself if found. The value of <see cref="P:Leadtools.Documents.DocumentPage.HasEmbeddedAnnotations" /> will be <strong>true</strong>
            if the original document file contain an annotation container for this page.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.IsLinksModified">
      <summary>
            Gets or sets a value that indicate whether the links for this page has been replaced.
            </summary>
      <value>
        <strong>true</strong> if the links for this page has been replaced, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.GetLinks" /> is used to get the links found in this page. Not all document types support this method. For more information, refer to
            <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" /> is used to replace the links of the page. <see cref="P:Leadtools.Documents.DocumentPage.IsLinksModified" /> is used to as flag that indicates that the links of this page has been replaced by the user.</para>
        <para>This value is saved and re-loaded when the owner <see cref="T:Leadtools.Documents.Document" /> uses the cache (<see cref="P:Leadtools.Documents.Document.HasCache">Document.HasCache</see> is <strong>true</strong>).</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPage.IsLinksModified" /> is not used by the framework in any special way, it is a flag that can used to check if the current links is not the same
            as the original.</para>
        <para>Refer to <see cref="T:DOX.Topics.Documents_Loading">Loading Using LEADTOOLS Documents Library</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentPage.SetLinks(Leadtools.Documents.DocumentLink[])" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPage.ImageScale">
      <summary>
            Gets the scale value used when retuning image objects of this page.
            </summary>
      <value>The scale value used when retuning image objects of this page.</value>
      <remarks>
        <para>This value is calculated for each page based on the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" />. The default value
            is 1 when the value of <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> is the default of 0 which means no scaling. If the value
            is any other, then <see cref="P:Leadtools.Documents.DocumentPage.ImageScale" /> can be a value equal to or greater than 1 depending on the original page pixel size. Refer
            to <see cref="P:Leadtools.Documents.DocumentImages.MaximumImagePixelSize" /> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.DocumentPages">
      <summary>
            Represents a collection of <see cref="T:Leadtools.Documents.DocumentPage" /> objects.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> manages the pages of the document. It can be accessed through the <see cref="P:Leadtools.Documents.Document.Pages" /> property of
            <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPages" /> derives from <see cref="T:Leadtools.LeadCollection`1" /> and thus can implement <see cref="T:System.Collections.ObjectModel.Collection`1" />. You can use any
            of the collection methods to add, remove, insert, get, set and iterate through the pages.</para>
        <para>As well as the collection support, <see cref="T:Leadtools.Documents.DocumentPages" /> has the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Documents.DocumentPages.CreatePage(Leadtools.LeadSizeD,System.Double)" />: The only way supported for creating new <see cref="T:Leadtools.Documents.DocumentPage" /> objects since the
            constructor of this class is not accessible.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" />: The default size of pages with no images.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" />: The default resolution (DPI) of new pages with no images.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPages.RemoveItem(System.Int32)">
      <summary>
            Overrides <see cref="M:Leadtools.LeadCollection`1.RemoveItem(System.Int32)">LeadCollection.RemoveItem</see>.
            </summary>
      <param name="index">Index of the item to remove</param>
      <noremarks />
      <example />
    </member>
    <member name="M:Leadtools.Documents.DocumentPages.InsertItem(System.Int32,Leadtools.Documents.DocumentPage)">
      <summary>
            Overrides <see cref="M:Leadtools.LeadCollection`1.InsertItem(System.Int32,`0)">LeadCollection.InsertItem</see>.
            </summary>
      <param name="index">Index of new the item.</param>
      <param name="item">Page to insert to the collection.</param>
      <noremarks />
      <example />
    </member>
    <member name="M:Leadtools.Documents.DocumentPages.MoveItem(System.Int32,System.Int32)">
      <summary>
            Overrides <see cref="M:Leadtools.LeadCollection`1.MoveItem(System.Int32,System.Int32)">LeadCollection.MoveItem</see>.
            </summary>
      <param name="oldIndex">Old item new index.</param>
      <param name="newIndex">New item index.</param>
      <noremarks />
      <example />
    </member>
    <member name="M:Leadtools.Documents.DocumentPages.CreatePage(Leadtools.LeadSizeD,System.Double)">
      <summary>
            Creates a new <see cref="T:Leadtools.Documents.DocumentPage" /></summary>
      <param name="size">Size of the new page in document units. Cannot be empty (<see cref="P:Leadtools.LeadSizeD.Empty" />).</param>
      <param name="resolution">The resolution of the new page in dots per inch (DPI). Must be greater than or equal 0. A value of 0 means
            default resolution of 96.</param>
      <returns>The newly created page.</returns>
      <remarks>
        <para>Use this method to create new pages to be add in this <see cref="T:Leadtools.Documents.Document" />. The constructor of <see cref="T:Leadtools.Documents.DocumentPage" /> is not
            accessible and this is the only method that allows you to create a <see cref="T:Leadtools.Documents.DocumentPage" />.</para>
        <para>The created page is not added automatically, to the document you must use <see cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)">Add</see> or
            <see cref="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">Insert</see> to add the page.</para>
        <para>The returned <see cref="T:Leadtools.Documents.DocumentPage" /> does not have any data. It will only have <paramref name="size" /> set as its
            <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <paramref name="resolution" /> as its <see cref="P:Leadtools.Documents.DocumentPage.Resolution" />. You must add the page
            to the collection before updating its data such as setting the image using <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)" /> or annotations using
            <see cref="M:Leadtools.Documents.DocumentPage.SetAnnotations(Leadtools.Annotations.Core.AnnContainer)" />.</para>
        <para>
          <paramref name="size" /> is in document units, refer to
            <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPages.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentPages" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentPages" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPages.DefaultPageSize">
      <summary>
            Gets or sets the default page size of this document.
            </summary>
      <value>The default page size of this document. Default value depends on how this document was created.
            This value cannot be <see cref="P:Leadtools.LeadSizeD.Empty" />.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> is in document units, refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)">DocumentPage.SetImage</see> can be called to set a new raster image for the page. The page
            <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will be updated from the image parameter passed. If the image
            passed was <strong>null</strong>, then the document uses the values of <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> and
            <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> as the new <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> respectively.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is also used by the methods used to convert between document units and pixels, refer to
            <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
        <para>The initial values of <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> and <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If this <see cref="T:Leadtools.Documents.Document" /> was originally created from an existing document file or URL using
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>,
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>, then the values are updating based on the original document.
            The internal parsing code will usually use the size and resolution of the first page found in the document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this <see cref="T:Leadtools.Documents.Document" /> was created using
            <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>, then the values are uninitialized (<see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> is 0,0 and
            <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is 0) and the user must update them to the desired values after the document is created.</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentPages.DefaultResolution">
      <summary>
            Gets or sets the default resolution in dots per inch of this document.
            </summary>
      <value>The default resolution in dots per inch (DPI) of this document. Default value depends on how this document was created.
            This value cannot be less than 0.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPage.SetImage(Leadtools.RasterImage)">DocumentPage.SetImage</see> can be called to set a new raster image for the page. The page
            <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> will be updated from the image parameter passed. If the image
            passed was <strong>null</strong>, then the document uses the values of <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> and
            <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> as the new <see cref="P:Leadtools.Documents.DocumentPage.Size" /> and <see cref="P:Leadtools.Documents.DocumentPage.Resolution" /> respectively.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is also used by the methods used to convert between document units and pixels, refer to
            <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
        <para>The initial values of <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> and <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If this <see cref="T:Leadtools.Documents.Document" /> was originally created from an existing document file or URL using
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromFile(System.String,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromFile</see>,
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUri(System.Uri,Leadtools.Documents.LoadDocumentOptions)">DocumentFactory.LoadFromUri</see> or
            <see cref="M:Leadtools.Documents.DocumentFactory.LoadFromUriAsync(System.Uri,Leadtools.Documents.LoadDocumentAsyncOptions)">DocumentFactory.LoadFromUriAsync</see>, then the values are updating based on the original document.
            The internal parsing code will usually use the size and resolution of the first page found in the document.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If this <see cref="T:Leadtools.Documents.Document" /> was created using
            <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see>, then the values are uninitialized (<see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" /> is 0,0 and
            <see cref="P:Leadtools.Documents.DocumentPages.DefaultResolution" /> is 0) and the user must update them to the desired values after the document is created.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.DocumentPages.DefaultPageSize" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentCharacter">
      <summary>
            Contains the properties of a text character found in the page.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.DocumentCharacter" /> structure is used as the type for the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentCharacter.Code">
      <summary>
            The character code value of this <see cref="T:Leadtools.Documents.DocumentCharacter" />.
            </summary>
      <value>The character code value of this <see cref="T:Leadtools.Documents.DocumentCharacter" />. Default value is 0.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentCharacter.Bounds">
      <summary>
            The bounding rectangle of the character.
            </summary>
      <value>The bounding rectangle of the character in document coordinates. Default value is empty rectangle.</value>
      <remarks>
        <para>This value is in document coordinates. Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord">
      <summary>
            Gets or sets a value that indicates if this the last character in a word.
            </summary>
      <value>
        <strong>true</strong> if this is the last character in a word; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPageText" /> uses the <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> and <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfLine" /> properties to construct the words and lines of the
            text found in a document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentCharacter.IsEndOfLine">
      <summary>
            Gets or sets a value that indicates if this the last character in a line.
            </summary>
      <value>
        <strong>true</strong> if this is the last character in a line; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentPageText" /> uses the <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> and <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfLine" /> properties to construct the words and lines of the
            text found in a document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentCharacter.IsRightToLeft">
      <summary>
            Gets or sets a value that indicate if this character is part of a right to left flow of text.
            </summary>
      <value>
        <strong>true</strong> if this character is part of a right to left flow of text, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>Set this value to <strong>true</strong> if this part of the text flow should be right to left, for example, Arabic or Hebrew text.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentWord">
      <summary>
            Contains the properties of a text word found in the page.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Documents.DocumentWord" /> structure is used as the type for the <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentWord.Value">
      <summary>
            The string value of the word.
            </summary>
      <value>The string value of the word. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>This value is set when <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> is called.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentWord.Bounds">
      <summary>
            The bounding rectangle of the word.
            </summary>
      <value>The bounding word of the character in document coordinates. Default value is empty rectangle.</value>
      <remarks>
        <para>This value is set when <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> is called.</para>
        <para>This value is in document coordinates. Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex">
      <summary>
            The index of the first character that forms this word in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.
            </summary>
      <value>The 0-based index of the first character that forms this word in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list. Default value is <strong>0</strong>.</value>
      <remarks>
        <para>This value is set when <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> is called. The characters that define this word are from
            <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex" /> to <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentWord.LastCharacterIndex">
      <summary>
            The index of the last character that forms this word in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.
            </summary>
      <value>The 0-based index of the last character that forms this word in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list. Default value is <strong>0</strong>.</value>
      <remarks>
        <para>This value is set when <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> is called. The characters that define this word are from
            <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex" /> to <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentPageText">
      <summary>
            Contains the text characters and words found in a document page.
            </summary>
      <remarks>
        <para>The text of a document page can be read by using the <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> method. The text characters
            found in the page will be set in the in <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> property of the returned <see cref="T:Leadtools.Documents.DocumentPageText" /> object.</para>
        <para>The text words are created from the characters found in the document based on the <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> returned by
            document parsing engine. Whenever an "end of word" is found, the last set of characters are grouped together and stored as an item in the
            <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list. This is not performed automatically, instead, you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> to populate
            the <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list from the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.</para>
        <para>The document page text can also be obtained as a simple string object through the <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> property. This is not performed
            automatically and you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> to populate this property with the text value from <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.
            Note that <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> will also build the words by calls <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> first if this has not
            been done by the user first.</para>
        <para>The <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex" /> and <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex" /> of the <see cref="T:Leadtools.Documents.DocumentWord" />
            object can be used to map the word back to the original characters in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list. Similarly, you can use <see cref="M:Leadtools.Documents.DocumentPageText.BuildTextWithMap" />
            to populate <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> as well the <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> list that can be used to map the text string all the way back to its part
            in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.</para>
        <para>At any time, you can update the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list and call any of the methods above to re-generate <see cref="P:Leadtools.Documents.DocumentPageText.Words" />, <see cref="P:Leadtools.Documents.DocumentPageText.Text" />
            and <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" />. To clear the generated values, use <see cref="M:Leadtools.Documents.DocumentPageText.ClearBuildData" />.</para>
        <para>The text is parsed from the original document using either SVG or OCR technologies, for more information, refer to 
            <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentPageTextExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.doc"), options)
            ' get text 
            Dim page As Leadtools.Documents.DocumentPage = document.Pages(0)
            Dim pageText As DocumentPageText = page.GetText()
            If Not pageText Is Nothing Then
               pageText.BuildText()
               Dim text As String = pageText.Text

               Console.WriteLine(text)
            Else
               Console.WriteLine("Failed!")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentPageTextExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.doc"), options))
         {
            // get text 
            var page = document.Pages[0];
            var pageText = page.GetText();
            if (pageText != null)
            {
               pageText.BuildText();
               var text = pageText.Text;

               Console.WriteLine(text);
            }
            else
            {
               Console.WriteLine("Failed!");
            }
         }
      }</code>
        <!--DocumentPageText-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Documents.DocumentPageText" />.
            </summary>
      <remarks>
        <para>This constructor initializes <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> to an empty list ready to be used. The rest of the members of this
            class are <strong>null</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.ClipText(Leadtools.LeadRectD)">
      <summary>
            Creates a new <see cref="T:Leadtools.Documents.DocumentPageText" /> from a portion of this text data.
            </summary>
      <param name="bounds">The area to clone. This value is in document coordinates.</param>
      <returns>New <see cref="T:Leadtools.Documents.DocumentPageText" /> that contains only the characters that are included in <paramref name="bounds" />.</returns>
      <remarks>
        <para>Use this method to create a copy of <see cref="T:Leadtools.Documents.DocumentPageText" /> that contains only the characters that intersect with a specified rectangle.
            For example, if your application contains functionality where the user can select a portion of the page using rubber band to extract text from,
            then you can use <see cref="M:Leadtools.Documents.DocumentPageText.ClipText(Leadtools.LeadRectD)" /> on the page object to return a new object that can be used with <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> or
            <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> to parse only the words and text of the area.</para>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPageText.ClipText(Leadtools.LeadRectD)" /> works by checking the value of <see cref="P:Leadtools.Documents.DocumentCharacter.Bounds">DocumentCharacter.Bounds</see> of each item in
            <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> by intersecting with <paramref name="bounds" />. If the value intersects, then it is added to the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />
            list of the new object.</para>
        <para>If the value of <paramref name="bounds" /> is empty (<see cref="P:Leadtools.LeadRectD.IsEmpty" />), then this method returns an exact copy of this
            <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
        <para>
          <paramref name="bounds" /> must be in document coordinates. Refer to <see cref="T:DOX.Topics.Documents_Coordinates">Documents Library Coordinate System</see> for more information.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentPageTextClipTextExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.doc"), options)
            Dim clipPixels As LeadRect = LeadRect.FromLTRB(1337, 300, 1545, 347)
            Dim clipDocument As LeadRectD = document.RectToDocument(clipPixels)

            ' get text 
            Dim page As Leadtools.Documents.DocumentPage = document.Pages(0)
            Dim pageText As DocumentPageText = page.GetText().ClipText(clipDocument)
            If Not pageText Is Nothing Then
               pageText.BuildText()
               Dim text As String = pageText.Text

               Console.WriteLine(text)
            Else
               Console.WriteLine("Failed!")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentPageTextClipTextExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.doc"), options))
         {
            LeadRect clipPixels = LeadRect.FromLTRB(1337, 300, 1545, 347);
            LeadRectD clipDocument = document.RectToDocument(clipPixels);

            // get text 
            var page = document.Pages[0];            
            var pageText = page.GetText().ClipText(clipDocument);
            if (pageText != null)
            {
               pageText.BuildText();
               var text = pageText.Text;

               Console.WriteLine(text);
            }
            else
            {
               Console.WriteLine("Failed!");
            }
         }
      }</code>
        <!--DocumentPageText.ClipText-->
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.ClearBuildData">
      <summary>
            Clears the generated words, text and map values.
            </summary>
      <remarks>
        <para>This method will set the values of <see cref="P:Leadtools.Documents.DocumentPageText.Words" />, <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> and <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> back to <strong>null</strong>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.BuildWords">
      <summary>
            Build a list of the words found in the document page.
            </summary>
      <remarks>
        <para>The text words are created from the characters found in the document based on the <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> returned by
            document parsing engine. Whenever an "end of word" is found, the last set of characters are grouped together and stored as an item in the
            <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list. This is not performed automatically, instead, you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> to populate
            the <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list from the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.</para>
        <para>The following explains how this method works. If the page text consists of the following string <c>Hello World</c>, then
            the text parser engine will populate <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> as follows (ignoring <see cref="P:Leadtools.Documents.DocumentCharacter.Bounds" />):</para>
        <table>
          <tr>
            <th>Index</th>
            <th>
              <see cref="P:Leadtools.Documents.DocumentCharacter.Code" />
            </th>
            <th>
              <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" />
            </th>
            <th>
              <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfLine" />
            </th>
          </tr>
          <tr>
            <td>0</td>
            <td>H</td>
            <td>false</td>
            <td>false</td>
            <td>1</td>
            <td>e</td>
            <td>false</td>
            <td>false</td>
            <td>2</td>
            <td>l</td>
            <td>false</td>
            <td>false</td>
            <td>3</td>
            <td>l</td>
            <td>false</td>
            <td>false</td>
            <td>4</td>
            <td>o</td>
            <td>
              <strong>true</strong>
            </td>
            <td>false</td>
            <td>5</td>
            <td>W</td>
            <td>false</td>
            <td>false</td>
            <td>6</td>
            <td>o</td>
            <td>false</td>
            <td>false</td>
            <td>7</td>
            <td>r</td>
            <td>false</td>
            <td>false</td>
            <td>8</td>
            <td>l</td>
            <td>false</td>
            <td>false</td>
            <td>9</td>
            <td>d</td>
            <td>
              <strong>true</strong>
            </td>
            <td>
              <strong>true</strong>
            </td>
          </tr>
        </table>
        <para>
          <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> will loop through each character till an item with <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> equals to <strong>true</strong>
            is reached, it will then create a word from the characters found so far, in this case from index 0 to 4. The characters are combined into
            <see cref="P:Leadtools.Documents.DocumentWord.Value">DocumentWord.Value</see> (The string <c>Hello</c>) and the union of these characters position and location
            (<see cref="P:Leadtools.Documents.DocumentCharacter.Bounds">DocumentCharacter.Bounds</see>) are set into <see cref="P:Leadtools.Documents.DocumentWord.Bounds">DocumentWord.Bounds</see>. The
            first index (0) and the last index (4) are set into <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex">DocumentWord.FirstCharacterIndex</see>
            and <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex">DocumentWord.LastCharacterIndex</see>.</para>
        <para>The method then continues to the next character (index 5) and repeat the operation, this time using indices 5 and 9 and the result
            is <see cref="T:Leadtools.Documents.DocumentWord" /> with <see cref="P:Leadtools.Documents.DocumentWord.Value">DocumentWord.Value</see> set to <c>World</c>, <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex" />
            set to 5 and <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex" /> set to 9.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.BuildText">
      <summary>
            Build the text found in the document page as a simple string object.
            </summary>
      <remarks>
        <para>The document page text can be obtained as a simple string object through the <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> property. This is not performed
            automatically and you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> to populate this property with the text value from <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.
            Note that <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> will also build the words by calls <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> first if this has not
            been done by the user first.</para>
        <para>After the words are set in <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" />, this method will create the text string by appending all the items in
            <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> separated by a white space character. The result is then set in <see cref="P:Leadtools.Documents.DocumentPageText.Text" />.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentPageText.BuildTextWithMap">
      <summary>
            Build the text found in the document page with extra map back into the characters list.
            </summary>
      <remarks>
        <para>The <see cref="P:Leadtools.Documents.DocumentWord.FirstCharacterIndex" /> and <see cref="P:Leadtools.Documents.DocumentWord.LastCharacterIndex" /> of the <see cref="T:Leadtools.Documents.DocumentWord" />
            object can be used to map the word back to the original characters in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list. Similarly, you can use
            <see cref="M:Leadtools.Documents.DocumentPageText.BuildTextWithMap" /> to populate <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> as well the <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> list that can be used to map the text string all
            the way back to its part in the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.</para>
        <para>For more information, refer to <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPageText.Characters">
      <summary>
            The list of text characters found in the document page.
            </summary>
      <value>List of text characters found in the document page. The default value is an empty list.</value>
      <remarks>
        <para>The text of a document page can be read by using the <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> method. The text characters
            found in the page will be set in the in <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> property of the returned <see cref="T:Leadtools.Documents.DocumentPageText" /> object.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPageText.Words">
      <summary>
            The list of text words found in the document page.
            </summary>
      <value>List of text words found in the document page. The default value is <strong>null</strong>.</value>
      <remarks>
        <para>The text words are created from the characters found in the document based on the <see cref="P:Leadtools.Documents.DocumentCharacter.IsEndOfWord" /> returned by
            document parsing engine. Whenever an "end of word" is found, the last set of characters are grouped together and stored as an item in the
            <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list. This is not performed automatically, instead, you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> to populate
            the <see cref="P:Leadtools.Documents.DocumentPageText.Words" /> list from the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPageText.Text">
      <summary>
            The text found in the document page.
            </summary>
      <value>The text found in the document page as a simple string object. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The document page text can be obtained as a simple string object through the <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> property. This is not performed
            automatically and you must call <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> to populate this property with the text value from <see cref="P:Leadtools.Documents.DocumentPageText.Characters" />.
            Note that <see cref="M:Leadtools.Documents.DocumentPageText.BuildText" /> will also build the words by calls <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" /> first if this has not
            been done by the user first.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentPageText.TextMap">
      <summary>
            List that contains the indices into <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> of each character in <see cref="P:Leadtools.Documents.DocumentPageText.Text" /></summary>
      <value>A list of integers that contain the indices into <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> of each character in <see cref="P:Leadtools.Documents.DocumentPageText.Text" />. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> is populated by this object when <see cref="M:Leadtools.Documents.DocumentPageText.BuildTextWithMap" /> is called. It will contain the indices into
            <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> of each character in the string <see cref="P:Leadtools.Documents.DocumentPageText.Text" />. This works similarly to <see cref="M:Leadtools.Documents.DocumentPageText.BuildWords" />, in the example
            if <c>HelloWorld</c>, <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" />, <see cref="P:Leadtools.Documents.DocumentPageText.Text" /> will contain the string "Hello World" while <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> will
            have 11 entries as follows:</para>
        <para>
          <pre>
            <code>
            0 1 2 3 4 -1 5 6 7 8 9
            H e l l o    W o r l d
            </code>
          </pre>
        </para>
        <para>In this example, <see cref="P:Leadtools.Documents.DocumentPageText.TextMap" /> contains 11 entries even through the length of <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> is 10. The extra entry is for the
            whitespace character inserted by <see cref="M:Leadtools.Documents.DocumentPageText.BuildTextWithMap" />. This character will have an entry value of -1 since it is not part of
            the <see cref="P:Leadtools.Documents.DocumentPageText.Characters" /> list.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Documents.DocumentBookmark">
      <summary>
            Represents a document bookmark (table of content) item.
            </summary>
      <remarks>
        <para>The document bookmark contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentBookmark.Title" />
            </term>
            <description>
              <para>The title (caption) of the bookmark</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentBookmark.Target" />
            </term>
            <description>
              <para>The target of the bookmark</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentBookmark.FontStyles" />
            </term>
            <description>
              <para>Optional font to use when rendering the title</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Documents.DocumentBookmark.Children" />
            </term>
            <description>
              <para>List of child bookmarks</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentBookmark.FontStyles">
      <summary>
            Gets or sets the optional font style to use when rendering the title.
            </summary>
      <value>The optional font style to use when rendering the title. Default value is <see cref="T:Leadtools.Documents.DocumentFontStyles">DocumentFontStyles.Normal</see>.</value>
      <remarks>
        <para>Viewer application will usually use this value to render the <see cref="P:Leadtools.Documents.DocumentBookmark.Title" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentBookmark.Children">
      <summary>
            Gets a list of the child bookmarks.
            </summary>
      <value>A list of the child bookmarks. Default value is an empty list.</value>
      <remarks>
        <para>The document bookmarks should be constructed as a tree with each item having its children underneath.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentBookmark.Target">
      <summary>
            Gets or sets the target for this bookmark.
            </summary>
      <value>The target for this bookmark. Default value is a default <see cref="T:Leadtools.Documents.DocumentLinkTarget" /> object.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentBookmark.Target" /> is used to determine what happens when the user clicks on a bookmark in a viewer application. <see cref="T:Leadtools.Documents.DocumentLinkTarget" />
            contains all the properties needed (target page, position, zoom, optional page fit styles).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentBookmark.Title">
      <summary>
            Gets or sets the title (caption) of this bookmark.
            </summary>
      <value>The title (caption) of this bookmark. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentBookmark.Title" /> can be used by viewer applications to set the text of the bookmark in a tree view. This value can optionally be rendered using
            <see cref="P:Leadtools.Documents.DocumentBookmark.FontStyles" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentStructure">
      <summary>
            Manages the structure of the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentStructure" /> manages the structure of the document. This includes the bookmarks that represents the table of content. It
            can be accessed through the <see cref="P:Leadtools.Documents.Document.Structure" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>Not all document types contain support for document structure. For these types of documents (such as TIF file or Text document), the value of
            <see cref="P:Leadtools.Documents.Document.IsStructureSupported" /> of <see cref="P:Leadtools.Documents.DocumentStructure.Document" /> will be <strong>false</strong> and the <see cref="P:Leadtools.Documents.Document.Structure" /> is
            <strong>null</strong> and should not be used. The rest of the discussion of this section is related to when <see cref="P:Leadtools.Documents.Document.IsStructureSupported" />
            is <strong>true</strong>.</para>
        <para>When the structure is supported (for example, PDF documents), the value of <see cref="P:Leadtools.Documents.Document.IsStructureSupported" /> is
            <strong>true</strong> and <see cref="P:Leadtools.Documents.Document.Structure" /> is a valid object can be used.</para>
        <para>Loading the document structure can take some time, therefore, it is not read automatically when a new <see cref="T:Leadtools.Documents.Document" /> is created from
            a disk or URL document. This is done so that the document is loaded as quick as possible and to not make the user wait if the bookmarks or table of
            content is not needed in your application.</para>
        <para>To parse the document for bookmarks and table of content, use the <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> method. Usually you can call this method once after the
            <see cref="T:Leadtools.Documents.Document" /> is loaded. The <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> property can be used to check if the structure has been parsed.</para>
        <para>If <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> is not called, then <see cref="P:Leadtools.Documents.DocumentStructure.Bookmarks" /> is an empty list. You can use it to add bookmarks if this is a brand document
            that was obtained through <see cref="M:Leadtools.Documents.DocumentFactory.Create(System.String,Leadtools.Documents.CreateDocumentOptions)">DocumentFactory.Create</see> in preparation to save.</para>
        <para>When <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> is called, the <see cref="P:Leadtools.Documents.DocumentStructure.Bookmarks" /> list will be updated with all the bookmarks and table of content items
            found in the original document. You can then read and modify these bookmarks if needed.</para>
        <para>Parse will also parse the document for any links found in the pages, these can be obtain through the <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>
            method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.Document" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Documents.DocumentStructure.Parse">
      <summary>
            Parse the structure of this document and read the bookmarks and table of content.
            </summary>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentStructure.Bookmarks" /> will contain an empty list if the structure of the document has not been parsed yet (the value of
            <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> is <strong>false</strong>). This list will be populated with the items found in the original document when
            <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> is called (<see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> will be set to <strong>true</strong>).</para>
        <para>Parse will also parse the document for any links found in the pages, these can be obtain through the <see cref="M:Leadtools.Documents.DocumentPage.GetLinks">DocumentPage.GetLinks</see>
            method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentStructure.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentStructure" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentStructure" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentStructure.Bookmarks">
      <summary>
            The list of bookmarks (table of content) in this document.
            </summary>
      <value>The list of bookmarks (table of content) in this document.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentStructure.Bookmarks" /> will contain an empty list if the structure of the document has not been parsed yet (the value of
            <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> is <strong>false</strong>). This list will be populated with the items found in the original document when
            <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> is called (<see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> will be set to <strong>true</strong>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentStructure.IsParsed">
      <summary>
            Gets a value that indicate whether the structure of this document has been parsed.
            </summary>
      <value>
        <strong>true</strong> if the structure of this document has been parsed, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentStructure.Bookmarks" /> will contain an empty list if the structure of the document has not been parsed yet (the value of
            <see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> is <strong>false</strong>). This list will be populated with the items found in the original document when
            <see cref="M:Leadtools.Documents.DocumentStructure.Parse" /> is called (<see cref="P:Leadtools.Documents.DocumentStructure.IsParsed" /> will be set to <strong>true</strong>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentStructure" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Documents.DocumentFontStyles">
      <summary>
            Font style.
            </summary>
      <remarks>
        <para>The members of this enumeration can be OR'ed together.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Documents.DocumentFontStyles.Normal">
      <summary>(0x00000000)Normal font</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentFontStyles.Bold">
      <summary>(0x00000001)Bold font</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentFontStyles.Italic">
      <summary>(0x00000002)Italic font</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentFontStyles.Underline">
      <summary>(0x00000004)Underline font</summary>
    </member>
    <member name="T:Leadtools.Documents.DocumentTextExtractionMode">
      <summary>
            Mode to use when extracting text from this document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentTextExtractionMode" /> is used as the type of the <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode">DocumentText.TextExtractionMode</see>
            to control how <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> extracts the text from the page.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Documents.DocumentTextExtractionMode.Auto">
      <summary>(0x00000000)Automatic. This depends on the document type, if it supports SVG, then SVG is used, otherwise, use OCR (if available).</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentTextExtractionMode.SvgOnly">
      <summary>(0x00000001)Use SVG only if the document supports it. Otherwise, do not extract text.</summary>
    </member>
    <member name="F:Leadtools.Documents.DocumentTextExtractionMode.OcrOnly">
      <summary>(0x00000002)Use OCR always even if the document supports SVG.</summary>
    </member>
    <member name="T:Leadtools.Documents.DocumentText">
      <summary>
            Manages the text options of the document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Documents.DocumentText" /> manages the text of the document and can be accessed through the
            <see cref="P:Leadtools.Documents.Document.Text" /> property of <see cref="T:Leadtools.Documents.Document" />.</para>
        <para>The text of a document page can be extracted using the <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> method. This will return
            a <see cref="T:Leadtools.Documents.DocumentPageText" /> instance that contains the text characters found in the page with location and size properties. Furthermore,
            <see cref="T:Leadtools.Documents.DocumentPageText" /> supports building the words or the text as string for easy processing.</para>
        <para>The framework can use either SVG or OCR technologies to extract the text data. Which method to use can be controlled using the
            <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode" /> property.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Svg
      Imports Leadtools.Documents
      Imports Leadtools.Caching
      Imports Leadtools.Annotations.Core
      Imports Leadtools.Forms.Ocr

      Public Shared Sub DocumentTextExample()
         Dim options As New LoadDocumentOptions()
         options.UseCache = False
         Using document As Leadtools.Documents.Document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.tif"), options)
            'for the TIF file we need an OCR engine
            Dim ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            Dim rasterCodecs As New RasterCodecs()
            Dim documentWriter As New DocumentWriter()
            ocrEngine.Startup(rasterCodecs, documentWriter, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            document.Text.OcrEngine = ocrEngine

            ' get text 
            Dim page As Leadtools.Documents.DocumentPage = document.Pages(0)
            Dim pageText As DocumentPageText = page.GetText()
            If Not pageText Is Nothing Then
               pageText.BuildText()
               Dim text As String = pageText.Text

               Console.WriteLine(text)
            Else
               Console.WriteLine("Failed!")
            End If
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Svg;
      using Leadtools.Documents;
      using Leadtools.Caching;
      using Leadtools.Annotations.Core;
      using Leadtools.Forms.Ocr;

      public static void DocumentTextExample()
      {
         var options = new LoadDocumentOptions();
         options.UseCache = false;
         using (var document = DocumentFactory.LoadFromFile(Path.Combine(ImagesPath.Path, "Leadtools.tif"), options))
         {
            //for the TIF file we need an OCR engine
            var ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            var rasterCodecs = new RasterCodecs();
            var documentWriter = new DocumentWriter();
            ocrEngine.Startup(rasterCodecs, documentWriter, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            document.Text.OcrEngine = ocrEngine;

            // get text 
            var page = document.Pages[0];
            var pageText = page.GetText();
            if (pageText != null)
            {
               pageText.BuildText();
               var text = pageText.Text;

               Console.WriteLine(text);
            }
            else
            {
               Console.WriteLine("Failed!");
            }
         }
      }</code>
        <!--DocumentText-->
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentText.Document">
      <summary>
            Gets the owner document of this <see cref="T:Leadtools.Documents.DocumentText" /></summary>
      <value>The owner <see cref="T:Leadtools.Documents.Document" /> object of this <see cref="T:Leadtools.Documents.DocumentText" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Documents.DocumentText.OcrEngine">
      <summary>
            Gets or sets the optional OCR engine instance to use when extracting text.
            </summary>
      <value>The optional OCR engine instance to use when extracting text. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>This property is not used if the value of <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode" /> is <see cref="T:Leadtools.Documents.DocumentTextExtractionMode">DocumentTextExtractionMode.SvgOnly</see>.</para>
        <para>The text of the document can be extracted using OCR technologies, in this mode, a valid <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance must be initialized
            (created and started) and set in the <see cref="P:Leadtools.Documents.DocumentText.OcrEngine" /> property before <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see>
            is called.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentText.OcrEngine" /> can be setup with any extra options from outside (such as enable languages, spell checker, accuracy trade offs, etc).
            The <see cref="P:Leadtools.Documents.DocumentText.Document" /> class will use the engine as is.</para>
        <para>The <see cref="P:Leadtools.Documents.DocumentText.Document" /> object will not delete the value of <see cref="P:Leadtools.Documents.DocumentText.OcrEngine" /> when it is disposed. <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is
            thread-safe by nature and the same instance can be set into multiple <see cref="P:Leadtools.Documents.DocumentText.Document" /> instances and used at the same time.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentText" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Documents.DocumentText.TextExtractionMode">
      <summary>
            Gets or sets the mode to use when extracting text from this document.
            </summary>
      <value>The mode to use when extracting text from this document. Default value is <see cref="T:Leadtools.Documents.DocumentTextExtractionMode">DocumentTextExtractionMode.Auto</see>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode" /> is used to control how <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see> extracts the text from the
            page.</para>
        <para>If the value of <see cref="P:Leadtools.Documents.DocumentText.TextExtractionMode" /> is <see cref="T:Leadtools.Documents.DocumentTextExtractionMode">DocumentTextExtractionMode.Auto</see> or
            <see cref="T:Leadtools.Documents.DocumentTextExtractionMode">DocumentTextExtractionMode.OcrOnly</see> then an OCR engine instance is required in order to extract the text
            correctly. This instance must be set in the <see cref="P:Leadtools.Documents.DocumentText.OcrEngine" /> property prior to calling <see cref="M:Leadtools.Documents.DocumentPage.GetText">DocumentPage.GetText</see>.</para>
        <para>
          <see cref="P:Leadtools.Documents.DocumentImages.IsSvgSupported">DocumentImages.IsSvgSupported</see> is used to determine whether the document supports extracting text using SVG.</para>
        <para>For more information, refer to <see cref="T:DOX.Topics.Documents_Text">Parsing Text with the Documents Library</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Documents.DocumentPageText" />.</para>
      </example>
    </member>
  </members>
</doc>