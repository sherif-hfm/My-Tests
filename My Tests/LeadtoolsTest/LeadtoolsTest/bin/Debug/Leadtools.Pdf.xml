<?xml version="1.0"?>
<doc processed="true">
  <assembly>
    <name>Leadtools.Pdf</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Pdf.PDFCoordinateType">
      <summary>
            Specifies the PDF coordinate type.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFCoordinateType" /> enumeration is used as the <i>sourceType</i> and <i>destinationType</i> parameters passed to the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> methods.</para>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFCoordinateType.Pdf">
      <summary>(0x00000000)<para>The point or rectangle is in PDF coordinates (1/72 of an inch)</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCoordinateType.Pixel">
      <summary>(0x00000001)<para>The point or rectangle is in pixels. The resolution of the document (<see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see> will be used to convert the value</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCoordinateType.Inch">
      <summary>(0x00000002)<para>The point or rectangle is in inches</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFDocumentPage">
      <summary>
             Contains information about a page in a PDF document.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> class is used as the type of the <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see> collection.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see> collection is automatically created when a new <see cref="T:Leadtools.Pdf.PDFDocument" /> object is created with the
             <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructurs.
             This collection is read-only and cannot be modified since the <see cref="T:Leadtools.Pdf.PDFDocument" /> object is a read-only view of a PDF file. Each item in the collection corresponding to a page in
             the PDF document.</para>
        <para>Each item in the <see cref="P:Leadtools.Pdf.PDFDocument.Pages" /> collection corresponds to a page in the PDF document. So item at index 0 is the properties of page 1, item at index 1 is the
             properties of page 2 and so on. Even though the <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> structure contains the <see cref="P:Leadtools.Pdf.PDFDocumentPage.PageNumber" /> property that specifies the number of the page,
             this information is for convenience only, the <see cref="T:Leadtools.Pdf.PDFDocument" /> constructors will always populate the collection in the correct order from first to last page.</para>
        <para>Each PDF document page contain two rectangular areas, the media box and the crop box. The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> will load and store these values in the
             <see cref="P:Leadtools.Pdf.PDFDocumentPage.MediaBox" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" /> properties. The various width and height values described below are of the crop box. For more
             information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> class contains the width and height of the page in PDF units which is read from the PDF file directly (the PDF crop box). PDF units are in 1/72 of an inch,
             so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72). The size of each page in PDF units (1/72 of an inch) will be automatically set in
             the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> properties. The size of each page in inches is also fixed and will be set in the
             <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> properties. The size of the page in pixels depends on the owner document <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" />.
             This value can be changed by the user at any time so the pixel size of the page changes accordingly. To get the size of the page in pixel using the current resolution,
             use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" /> properties.</para>
        <para>The total number of pages in the document is <see cref="P:Leadtools.Pdf.PDFDocument.Pages" />.Count.</para>
        <para>Each <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object can also be populated with the various PDF native objects located in the corresponding page in the original PDF document. When you first
             create a <see cref="T:Leadtools.Pdf.PDFDocument" /> object from a PDF file, all the collections described below will have a value of <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).
             You can populate the collections with the objects by using the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method. Each page parsed will have the collection
             described below populated with the objects found in the file depending on the value of <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed as the <i>options</i> parameter.</para>
        <para>After the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method returns, the following properties will be initialized as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />: (If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is used) will contain a list of
             <see cref="T:Leadtools.Pdf.PDFFont" /> objects for each font found in the page. If no font are found in the page, the property will be initialized with an empty list</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" />: (If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> is used) will contain a list of
             <see cref="T:Leadtools.Pdf.PDFObject" /> objects for each text item (character), image or rectangle found in the page. If no objects are found in the page, the property will be initialized with an
             empty list</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" />: (If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> is used) will contain a list of
             <see cref="T:Leadtools.Pdf.PDFHyperlink" /> objects for each hyperlink found in the page. If no hyperlinks are found in the page, the property will be initialized with an
             empty list</para>
            </description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
             or a rect from and to page/object to pixel/inch coordinates.</para>
      </remarks>
      <seealso cref="T:Leadtools.Pdf.PDFDocument" />
      <seealso cref="T:PDF.Topics.ProgrammingWithPDF">Programming with LEADTOOLS PDF</seealso>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      Public Sub PDFDocumentPageExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim txtFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_pdf.txt")
         ' Open the document
         Using document As New PDFDocument(pdfFileName)

            ' Parse everything and for all pages
            Dim options As PDFParsePagesOptions = PDFParsePagesOptions.All
            document.ParsePages(options, 1, -1)

            ' Save the results to the text file for examining
            Using writer As StreamWriter = File.CreateText(txtFileName)
               For Each page As PDFDocumentPage In document.Pages
                  writer.WriteLine("Page {0}", page.PageNumber)

                  Dim fonts As IList(Of PDFFont) = page.Fonts
                  ' Note, no need to check if fonts is Nothing since we passed .All
                  ' This will either get the fonts or an empty list. Same for all
                  ' the other objects
                  writer.WriteLine("Fonts: {0}", fonts.Count)
                  For Each font As PDFFont In fonts
                     writer.WriteLine("  FaceName: {0}", font.FaceName)
                     writer.WriteLine("  FontStyle: {0}", font.FontStyle.ToString())
                     writer.WriteLine("------")
                  Next
                  writer.WriteLine("---------------------")

                  Dim objects As IList(Of PDFObject) = page.Objects
                  writer.WriteLine("Objects: {0}", objects.Count)
                  For Each obj As PDFObject In objects
                     writer.WriteLine("  ObjectType: {0}", obj.ObjectType.ToString())
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", obj.Bounds.Left, obj.Bounds.Top, obj.Bounds.Right, obj.Bounds.Bottom)
                     WriteTextProperties(writer, obj.TextProperties)
                     writer.WriteLine("  Code: {0}", obj.Code)
                     writer.WriteLine("------")
                  Next
                  writer.WriteLine("---------------------")

                  Dim hyperlinks As IList(Of PDFHyperlink) = page.Hyperlinks
                  writer.WriteLine("Hyperlinks: {0}", hyperlinks.Count)
                  For Each hyperlink As PDFHyperlink In hyperlinks
                     writer.WriteLine("  Hyperlink: {0}", hyperlink.Hyperlink)
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", hyperlink.Bounds.Left, hyperlink.Bounds.Top, hyperlink.Bounds.Right, hyperlink.Bounds.Bottom)
                     WriteTextProperties(writer, hyperlink.TextProperties)
                  Next
                  writer.WriteLine("---------------------")
               Next
            End Using
         End Using
      End Sub

      Private Shared Sub WriteTextProperties(ByVal writer As StreamWriter, ByVal textProperties As PDFTextProperties)
         writer.WriteLine("  TextProperties.FontHeight: {0}", textProperties.FontHeight.ToString())
         writer.WriteLine("  TextProperties.FontWidth: {0}", textProperties.FontWidth.ToString())
         writer.WriteLine("  TextProperties.FontIndex: {0}", textProperties.FontIndex.ToString())
         writer.WriteLine("  TextProperties.IsEndOfWord: {0}", textProperties.IsEndOfWord.ToString())
         writer.WriteLine("  TextProperties.IsEndOfLine: {0}", textProperties.IsEndOfLine.ToString())
         writer.WriteLine("  TextProperties.Color: {0}", textProperties.Color.ToString())
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;

      public void PDFDocumentPageExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string txtFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdf.txt");
         // Open the document
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            // Parse everything and for all pages
            PDFParsePagesOptions options = PDFParsePagesOptions.All;
            document.ParsePages(options, 1, -1);

            // Save the results to the text file for examining
            using(StreamWriter writer = File.CreateText(txtFileName))
            {
               foreach(PDFDocumentPage page in document.Pages)
               {
                  writer.WriteLine("Page {0}", page.PageNumber);

                  IList&lt;PDFFont&gt; fonts = page.Fonts;
                  // Note, no need to check if fonts is null since we passed .All
                  // This will either get the fonts or an empty list. Same for all
                  // the other objects
                  writer.WriteLine("Fonts: {0}", fonts.Count);
                  foreach(PDFFont font in fonts)
                  {
                     writer.WriteLine("  FaceName: {0}", font.FaceName);
                     writer.WriteLine("  FontStyle: {0}", font.FontStyle.ToString());
                     writer.WriteLine("------");
                  }
                  writer.WriteLine("---------------------");

                  IList&lt;PDFObject&gt; objects = page.Objects;
                  writer.WriteLine("Objects: {0}", objects.Count);
                  foreach(PDFObject obj in objects)
                  {
                     writer.WriteLine("  ObjectType: {0}", obj.ObjectType.ToString());
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", obj.Bounds.Left, obj.Bounds.Top, obj.Bounds.Right, obj.Bounds.Bottom);
                     WriteTextProperties(writer, obj.TextProperties);
                     writer.WriteLine("  Code: {0}", obj.Code);
                     writer.WriteLine("------");
                  }
                  writer.WriteLine("---------------------");

                  IList&lt;PDFHyperlink&gt; hyperlinks = page.Hyperlinks;
                  writer.WriteLine("Hyperlinks: {0}", hyperlinks.Count);
                  foreach(PDFHyperlink hyperlink in hyperlinks)
                  {
                     writer.WriteLine("  Hyperlink: {0}", hyperlink.Hyperlink);
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", hyperlink.Bounds.Left, hyperlink.Bounds.Top, hyperlink.Bounds.Right, hyperlink.Bounds.Bottom);
                     WriteTextProperties(writer, hyperlink.TextProperties);
                  }
                  writer.WriteLine("---------------------");
               }
            }
         }
      }

      private static void WriteTextProperties(StreamWriter writer, PDFTextProperties textProperties)
      {
         writer.WriteLine("  TextProperties.FontHeight: {0}", textProperties.FontHeight.ToString());
         writer.WriteLine("  TextProperties.FontWidth: {0}", textProperties.FontWidth.ToString());
         writer.WriteLine("  TextProperties.FontIndex: {0}", textProperties.FontIndex.ToString());
         writer.WriteLine("  TextProperties.IsEndOfWord: {0}", textProperties.IsEndOfWord.ToString());
         writer.WriteLine("  TextProperties.IsEndOfLine: {0}", textProperties.IsEndOfLine.ToString());
         writer.WriteLine("  TextProperties.Color: {0}", textProperties.Color.ToString());
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocumentPage-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">
      <summary>
            Converts a point from one coordinate system type to another.
            </summary>
      <param name="sourceType">The current coordinate system type of <paramref name="point" />.</param>
      <param name="destinationType">The coordinate system type to convert to.</param>
      <param name="point">Coordinates to convert.</param>
      <returns>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that contains the converted point.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">
      <summary>
            Converts a rectangle from one coordinate system type to another.
            </summary>
      <param name="sourceType">The current coordinate system type of <paramref name="rect" />.</param>
      <param name="destinationType">The coordinate system type to convert to.</param>
      <param name="rect">Coordinates to convert.</param>
      <returns>A <see cref="T:Leadtools.Pdf.PDFRect" /> that contains the converted rectangle.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Width">
      <summary>
            Gets the width in PDF units.
            </summary>
      <value>The width in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is created by reading the
            values from the PDF file.</para>
        <para>This value is the width of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> to get the size of the page in inches and <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" />
            to get the size in pixels (depending on the current resolution set in the owner <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
        <para>This property returns the width of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Height">
      <summary>
            Gets the height in PDF units.
            </summary>
      <value>The height in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is created by reading the
            values from the PDF file.</para>
        <para>This value is the height of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> to get the size of the page in inches and <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" />
            to get the size in pixels (depending on the current resolution set in the owner <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
        <para>This property returns the height of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.WidthInches">
      <summary>
            Gets the width of the page in inches.
            </summary>
      <value>The width of the page in inches. The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> are properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" />
            is created by dividing the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> values read from PDF file by 72.</para>
        <para>This value is the width of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>PDF units are in 1/72 of an inch, so a page size (<see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" />) of 612 by 792 corresponds to 8.5 by 11 inches
            (612/72 by 792/72).</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" /> to get the size in pixels (depending on the current resolution set in the owner
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel/inch coordinates.</para>
        <para>This property returns the width of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.HeightInches">
      <summary>
            Gets the height of the page in inches.
            </summary>
      <value>The height of the page in inches. The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> are properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" />
            is created by dividing the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> values read from PDF file by 72.</para>
        <para>This value is the height of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>PDF units are in 1/72 of an inch, so a page size (<see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" />) of 612 by 792 corresponds to 8.5 by 11 inches
            (612/72 by 792/72).</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" /> to get the size in pixels (depending on the current resolution set in the owner
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
        <para>This property returns the height of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels">
      <summary>
            Gets the width of the page in pixels.
            </summary>
      <value>The width of the page in pixels. The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" /> are properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" />
            is created by using the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> values in PDF units read from the file and the current resolution set in the owner
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>PDF units are in 1/72 of an inch, so a page size (<see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" />) of 612 by 792 at a resolution of 300 corresponds to
            2550 by 3300 pixels ("612 * 300"/72 by "792 * 300"/72).</para>
        <para>This value is the width of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> to get the size of the page in inches.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
        <para>This property returns the width of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels">
      <summary>
            Gets the height of the page in pixels
            </summary>
      <value>The height of the page in pixels. The default value is 0.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthPixels" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightPixels" /> are properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" />
            is created by using the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" /> values in PDF units read from the file and the current resolution set in the owner
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>.</para>
        <para>This value is the height of crop box of this page stored in <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" />, For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>PDF units are in 1/72 of an inch, so a page size (<see cref="P:Leadtools.Pdf.PDFDocumentPage.Width" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height" />) of 612 by 792 at a resolution of 300 corresponds to
            2550 by 3300 pixels ("612 * 300"/72 by "792 * 300"/72).</para>
        <para>You can also use the <see cref="P:Leadtools.Pdf.PDFDocumentPage.WidthInches" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.HeightInches" /> to get the size of the page in inches.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rect from and to page/object to pixel/inch coordinates.</para>
        <para>This property returns the height of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.MediaBox">
      <summary>
            Gets the media box of this page.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that specifies the media box of this page. The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.MediaBox" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" /> properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is created by reading the
            values from the PDF file. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.CropBox">
      <summary>
            Gets the crop box of this page.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that specifies the crop box of this page. The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>This value is read-only. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.MediaBox" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.CropBox" /> properties are populated automatically when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is created by reading the
            values from the PDF file. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object also contains the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)" /> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)" /> helper methods that can be used to convert a point
            or a rectangle to and from page/object to pixel or inch coordinates.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.PageNumber">
      <summary>
            Gets the number of this PDF page.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the number of this page. The default value is 0.</value>
      <remarks>
        <para>Each item in the <see cref="P:Leadtools.Pdf.PDFDocument.Pages" /> collection corresponds to a page in the PDF file. So the item at index 0 contains the properties of page 1, the item at index 1 contains the
            properties of page 2 and so on. Even though the <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> structure contains the <see cref="P:Leadtools.Pdf.PDFDocumentPage.PageNumber" /> property that specifies the number of the page,
            this information is for convenience only, the <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will always populate the collection in the correct order from the first page to the last page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Fonts">
      <summary>
             Gets a list of the fonts found in this page.
             </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFFont" /> items that contain the fonts found in this page. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>By default, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> lists are not populated when a new <see cref="T:Leadtools.Pdf.PDFDocument" /> is created and the values
             of these properties are <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). You must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method to
             parse the items are you interested in (depending on the <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed as the <i>options</i> parameter to the method). This is done for performance
             reasons and to give the user the ability to parse only the objects and pages of interest.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" /> list will be populated if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is passed as part of the <i>options</i> parameter to
             <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>. After this method returns, all the pages parsed will have their <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" /> properties populated either with
             a list of the fonts found in the page or an empty list (with <see cref="P:System.Collections.Generic.ICollection`1.Count">IList&lt;PDFFont&gt;.Count</see> equals to 0).</para>
        <para>When parsing is finished, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> properties will contain a list of the <see cref="T:Leadtools.Pdf.PDFObject" /> and <see cref="T:Leadtools.Pdf.PDFHyperlink" />
             items found in the page (if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected).
             Each of these items contain a <see cref="T:Leadtools.Pdf.PDFTextProperties" /> object that contain the text properties of the item such its font information and color. One of these properties is
             <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> which is the 0-based integer index to the font of the item in the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" /> list.</para>
        <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is not passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>, but
             <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected, then the fonts are not
             parsed and the <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> value of any returned object will be 0.</para>
      </remarks>
      <example>
        <para>For an example on general parsing of PDF pages, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />, for an example on drawing the objects of a page on the surface of an image,
             refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Objects">
      <summary>
            Gets a list of the objects found in this page.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFObject" /> items that contain the objects found in the page. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>LEADTOOLS support parsing the following objects: text items (characters), images and rectangles. For more information, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
        <para>By default, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> lists are not populated when a new <see cref="T:Leadtools.Pdf.PDFDocument" /> is created and the values
            of these properties are <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). You must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method to
            parse the items are you interested in (depending on the <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed as the <i>options</i> parameter to the method). This is done for performance
            reasons and to give the user the ability to parse only the objects and pages of interest.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> list will be populated if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> is passed as part of the <i>options</i> parameter to
            <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>. After this method returns, all the pages parsed will have their <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> properties populated either with
            a list of the objects found in the page or an empty list (with <see cref="P:System.Collections.Generic.ICollection`1.Count">IList&lt;PDFObject&gt;.Count</see> equals to 0).</para>
        <para>When parsing is finished, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> properties will contain a list of the <see cref="T:Leadtools.Pdf.PDFObject" /> and <see cref="T:Leadtools.Pdf.PDFHyperlink" />
            items found in the page (if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected).
            Each of these items contain a <see cref="T:Leadtools.Pdf.PDFTextProperties" /> object that contain the text properties of the item such its font information and color. One of these properties is
            <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> which is the 0-based integer index to the font of the item in the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" /> list.</para>
        <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is not passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>, but
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected, then the fonts are not
            parsed and the <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> value of any returned object will be 0.</para>
      </remarks>
      <example>
        <para>For an example on general parsing of PDF pages, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />, for an example on drawing the objects of a page on the surface of an image,
            refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">
      <summary>
             Gets a list of the hyperlinks found in this page.
             </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFHyperlink" /> items that contain the hyperlinks found in the page. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>By default, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> lists are not populated when a new <see cref="T:Leadtools.Pdf.PDFDocument" /> is created and the values
             of these properties are <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). You must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method to
             parse the items are you interested in (depending on the <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed as the <i>options</i> parameter to the method). This is done for performance
             reasons and to give the user the ability to parse only the objects and pages of interest.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> list will be populated if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> is passed as part of the <i>options</i> parameter to
             <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>. After this method returns, all the pages parsed will have their <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> properties populated either with
             a list of the hyperlinks found in the page or an empty list (with <see cref="P:System.Collections.Generic.ICollection`1.Count">IList&lt;PDFObject&gt;.Count</see> equals to 0).</para>
        <para>When parsing is finished, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> properties will contain a list of the <see cref="T:Leadtools.Pdf.PDFObject" /> and <see cref="T:Leadtools.Pdf.PDFHyperlink" />
             items found in the page (if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected).
             Each of these items contain a <see cref="T:Leadtools.Pdf.PDFTextProperties" /> object that contain the text properties of the item such its font information and color. One of these properties is
             <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> which is the 0-based integer index to the font of the item in the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" /> list.</para>
        <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is not passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>, but
             <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> and <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> was selected, then the fonts are not
             parsed and the <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex">PDFTextProperties.FontIndex</see> value of any returned object will be 0.</para>
      </remarks>
      <example>
        <para>For an example on general parsing of PDF pages, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />, for an example on drawing the objects of a page on the surface of an image,
             refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentPage.Annotations">
      <summary>
             Gets a list of the annotations found in this page.
             </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFAnnotation" /> items that contain the annotations found in the page. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>By default, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> lists are not populated when a new <see cref="T:Leadtools.Pdf.PDFDocument" /> is created and the values
             of these properties are <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). You must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method to
             parse the items are you interested in (depending on the <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed as the <i>options</i> parameter to the method). This is done for performance
             reasons and to give the user the ability to parse only the objects and pages of interest.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" /> list will be populated if <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Annotations</see> is passed as part of the <i>options</i> parameter to
             <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>. After this method returns, all the pages parsed will have their <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" /> properties populated either with
             a list of the annotations found in the page or an empty list (with <see cref="P:System.Collections.Generic.ICollection`1.Count">IList&lt;PDFObject&gt;.Count</see> equal to 0).</para>
        <para>When parsing is finished, the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations" /> property will contain a list of the <see cref="T:Leadtools.Pdf.PDFAnnotation" />
             items found in the page.</para>
      </remarks>
      <example>
        <para>For an example on general parsing of PDF pages, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />, for an example on drawing the objects of a page on the surface of an image,
             refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFDocumentPageCollection">
      <summary>
            Defines a collection of PDF document pages.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPageCollection" /> is used as the type for the <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see> property.</para>
        <para>When a <see cref="T:Leadtools.Pdf.PDFDocument" /> object is constructed from a PDF file, <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see> is automatically created and populated
            with a <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> object for each page found in the PDF file.</para>
        <para>
          <see cref="T:Leadtools.Pdf.PDFDocument" /> is a read-only view of a PDF file. As a result, the <see cref="T:Leadtools.Pdf.PDFDocumentPageCollection" /> is created as a read-only collection to the pages.</para>s
            </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFParseDocumentStructureOptions">
      <summary>
            Specifies options to use when parsing a PDF document structure.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions" /> enumeration is used as the type of the <i>options</i> parameter passed to the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" />
            method.</para>
        <para>The structure of PDF document is its Table of Contents (TOC) which consists of the <see cref="T:Leadtools.Pdf.PDFBookmark" /> objects saved in the document and the collection of the internal links
            (or jumps) between the pages that are found in all the pages (<see cref="T:Leadtools.Pdf.PDFInternalLink" /> objects).</para>
        <para>When a <see cref="T:Leadtools.Pdf.PDFDocument" /> object is created, the value of <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> will be initialized to
            <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). You must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see> method to
            parse the items you are interested in (determined by the <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions" /> passed as the <i>options</i> parameter to the method). This is done for performance
            reasons and to give the user the ability to parse only the objects of interest.</para>
        <para>You can parse either the bookmarks or internal links or both of a PDF document using the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> method. When the method returns, the <see cref="T:Leadtools.Pdf.PDFDocument" /> will be updated as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions">PDFParseDocumentStructureOptions.Bookmarks</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks">PDFDocument.Bookmarks</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFBookmark" /> object for each bookmark item found in the document.
            If there aren't any bookmarks found in the document, <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks">PDFDocument.Bookmarks</see> will be initialized with an empty collection
            (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocument.Bookmarks.Count</see> will be 0).</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions">PDFParseDocumentStructureOptions.InternalLinks</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks">PDFDocument.InternalLinks</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFInternalLink" /> object for each internal link (or jump) item
            found in the document. If internal links aren't found in the document, The <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks">PDFDocument.InternalLinks</see> will be initialized with an empty
            collection (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocument.InternalLinks.Count</see> will be 0).</para>
            </description>
          </item>
        </list>
        <para>The values of <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions" /> can be OR'ed together.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.None">
      <summary>(0x00000000)<para>Do not parse anything.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.Bookmarks">
      <summary>(0x00000001)<para>Parse the bookmarks that constitute the Table of Contents (TOC) of the document. This option will cause the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks">PDFDocument.Bookmarks</see> property
            to be populated.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.InternalLinks">
      <summary>(0x00000002)<para>Parse the internal links (or jumps) between the pages found in the document. This option will cause the <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks">PDFDocument.InternalLinks</see> property
            to be populated.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.Images">
      <summary>(0x00000004)<para>Parse the images found in the document. This option will cause the <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see> property to be populated.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.Fonts">
      <summary>(0x00000008)<para>Parse the fonts found in the document. This option will cause the <see cref="P:Leadtools.Pdf.PDFDocument.Fonts">PDFDocument.Fonts</see> property to be populated.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParseDocumentStructureOptions.All">
      <summary>(0x0000000F)<para>Parse bookmarks, internal links, images and fonts.</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFParsePagesOptions">
      <summary>
            Specifies options to use when parsing the objects of a PDF document.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> enumeration is used as the type of the <i>options</i> parameter passed to the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" />
            method.</para>
        <para>When a <see cref="T:Leadtools.Pdf.PDFDocument" /> object is created, the pages of the PDF document are already parsed and populated in the <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see>
            collection. Each page may contain other objects such as text items (characters), images, rectangles and hyperlinks as well as the fonts used in these items. These items are not
            parsed automatically for performance reasons. Instead, call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method with the page ranges you are interested in (or all pages) and the type
            of items to parse.</para>
        <para>Initially, the values of the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see>, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see>
            lists of each <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). When the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method is called, the
            corresponding list will be populated with the items found in the page.</para>
        <para>You can parse any type of item you are interested in. This is done through the <i>options</i> parameter of type <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed to
            <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" />. The different options and results are as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFObject" /> object for each object item found in the page. These items can
            be text (characters), images or rectangles. If there aren't any object items found in the page, then the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> will be initialized with an empty collection
            (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Objects.Count</see> will be 0).</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFHyperlink" /> object for each hyperlink item
            found in the page. If no hyperlinks are found in the page, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> will be initialized with an empty
            collection (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Hyperlinks.Count</see> will be 0).</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFFont" /> object for each font item
            found in the page. If no fonts are found in the page, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> will be initialized with an empty
            collection (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Fonts.Count</see> will be 0).</para>
            </description>
          </item>
        </list>
        <para>A white space character such as a space or a tab are parsed by default and returned as individual objects. You can stop this behavior by OR'ing the
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.IgnoreWhiteSpaces</see> enumeration member with
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> in the <i>options</i> parameter passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>.
            Note that you can re-construct the words and lines of text in the page without white characters by using the
            <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord">PDFTextProperties.IsEndOfWord</see> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine">PDFTextProperties.IsEndOfLine</see>
            properties. The example of <see cref="T:Leadtools.Pdf.PDFTextProperties" /> shows how to do that.</para>
        <para>The values of <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> can be OR'ed together.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" />, <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> and <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.None">
      <summary>(0x00000000)<para>Do not parse any items</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.Objects">
      <summary>(0x00000001)<para>Parse the objects of the page such as text items (characters), images and rectangles. Specifying this member will populate the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see>
            collection with the objects found in the page</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.Hyperlinks">
      <summary>(0x00000002)<para>Parse the hyperlinks found in the page. Specifying this member will populate the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> collection with the hyperlinks found
            in the page</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.Fonts">
      <summary>(0x00000004)<para>Parse the fonts found in the page. Specifying this member will populate the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection with the fonts found
            in the page</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.IgnoreWhiteSpaces">
      <summary>(0x0000001F)<para>Must be OR'ed with <strong>Objects</strong> otherwise it will be ignored. If specified, white space characters such as a space or a tab character or will not be returned as items
            in the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> collection. Instead, you must rely on the
            <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord">PDFTextProperties.IsEndOfWord</see> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine">PDFTextProperties.IsEndOfLine</see> if
            re-construction of the page words and lines is needed</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.Annotations">
      <summary>(0x00000010)<para>Parse the annotations found in the page. Specifying this member will populate the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Annotations">PDFDocumentPage.Annotations</see> collection with the annotations found
             in the page</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.All">
      <summary>(0x00000017)<para>Parse all objects with white spaces. This the equivalent of <strong>Objects</strong> | <strong>Hyperlinks</strong> | <strong>Fonts</strong> | <strong>Annotations</strong></para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.AllIgnoreWhiteSpaces">
      <summary>(0x0000001F)<para>Parse all objects without white spaces. This the equivalent of <strong>Objects</strong> | <strong>Hyperlinks</strong> | <strong>Fonts</strong> | <strong>Annotations</strong> | <strong>IgnoreWhiteSpaces</strong></para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.RTLOriginal">
      <summary>(0x00000020)<para>Parse right to left characters as they are stored in the page.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFParsePagesOptions.RTLFlipBrackets">
      <summary>(0x00000040)<para>Flip bracket characters for right to left text when parsing the page.</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFDocument">
      <summary>
            Encapsulates a PDF document and allows reading the PDF pages, objects and images.  <strong><a href="#PDFCapability">*</a> PDF Capability Required</strong>.
            </summary>
      <keywords>Adobe Document Format|PDF|PDF/A|PDF,Files|PDF,Pages|PDF,Text|PDF,Parse|PDF,Parsing|PDF,Objects|PDF,Font|PDF,Hyperlink|PDF,Link|PDF,Metadata</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class encapsulates a PDF document on disk and allows you to read the pages, objects and images from the document. The <see cref="T:Leadtools.Pdf.PDFDocument" />
            contains the following functionality:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Create a <see cref="T:Leadtools.Pdf.PDFDocument" /> from a PDF file on disk (with support for reading encrypted documents) using the
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> and <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructors.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Allow you to load the PDF document at any resolution (dots per inch) using the <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Gets information about the PDF document. This encompasses properties or metadata such as author, subject and keywords through the <see cref="P:Leadtools.Pdf.PDFDocument.DocumentProperties" /> property, whether it
            is encrypted and requires a password to read (using the <see cref="P:Leadtools.Pdf.PDFDocument.IsEncrypted" /> property) and the PDF file type (or version) with the <see cref="P:Leadtools.Pdf.PDFDocument.FileType" />
            property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> to parse the document structure of the PDF document. The document structure is the Table of Contents (TOC) represented by a
            list of PDF bookmark objects stored in the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> property and the internal links between pages (or jumps) found in the document stored in the
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Automatically create a list of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> objects and store them in the <see cref="P:Leadtools.Pdf.PDFDocument.Pages" /> property. This list allows you to get information on any
            page in the PDF document (i.e. its size in PDF units, inches or pixels).</para>
            </description>
          </item>
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> to parse the objects of a range of pages (or all pages) in the document. This method can read the text items (characters), images,
            rectangles, hyperlinks and fonts found in the pages of the documents.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)" /> to get a <see cref="T:Leadtools.RasterImage" /> render of a page or more from the PDF document at any
            resolution. You can also use <see cref="M:Leadtools.Pdf.PDFDocument.GetThumbnail(Leadtools.Codecs.RasterCodecs,System.Int32,System.Int32,System.Int32)" /> to get a thumbnail of any page in the document.</para>
            </description>
          </item>
        </list>
        <para>To create a <see cref="T:Leadtools.Pdf.PDFDocument" /> from a PDF file on disk, use the <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> constructor passing the file name. If the
            document is encrypted with a password, then use the <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructor which will automatically
            decrypt the document and read it. To find out if a document is encrypted and requires a password, use the static (Shared in Visual Basic)
            <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)">PDFFile.IsEncrypted</see> method.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the standard .NET dispose pattern when using the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class. For more information, refer to the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
        <para>
          <a id="PDFCapability" name="PDFCapability" style="TEXT-DECORATION:none">*</a>
          <strong>NOTE:</strong> This class is only included as part of our Advanced PDF Plugin. If you receive a PDF Capability Required error, please check that your license supports this plugin before using these classes in an unlocked application.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.Pdf.PDFFile" />
      <seealso cref="T:Leadtools.Pdf.PDFDocumentPage" />
      <seealso cref="T:Leadtools.Pdf.PDFObject" />
      <seealso cref="T:PDF.Topics.ProgrammingWithPDF">Programming with LEADTOOLS PDF</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFDocumentExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         ' Create a PDF document for file
         Using document As New PDFDocument(pdfFileName)

            ' Show the file type and properties
            Console.WriteLine("File type is : {0}", document.FileType)
            Console.WriteLine("Contains : {0} pages", document.Pages.Count)
            Console.WriteLine("----------:")
            For Each page As PDFDocumentPage In document.Pages
               Console.WriteLine("Page: {0}, size: {1} by {2} ({3} by {4} inches)", page.PageNumber, page.Width, page.Height, page.WidthInches, page.HeightInches)
            Next

            Dim props As PDFDocumentProperties = document.DocumentProperties
            Console.WriteLine("Properties:")
            Console.WriteLine("----------:")
            Console.WriteLine("Title: {0}", props.Title)
            Console.WriteLine("Author: {0}", props.Author)
            Console.WriteLine("Subject: {0}", props.Subject)
            Console.WriteLine("Keywords: {0}", props.Keywords)
            Console.WriteLine("Creator: {0}", props.Creator)
            Console.WriteLine("Producer: {0}", props.Producer)
            Console.WriteLine("Created: {0}", props.Created)
            Console.WriteLine("Modified: {0}", props.Modified)
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         // Create a PDF document for file
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {

            // Show the file type and properties
            Console.WriteLine("File type is : {0}", document.FileType);
            Console.WriteLine("Contains : {0} pages", document.Pages.Count);
            Console.WriteLine("----------:");
            foreach(PDFDocumentPage page in document.Pages)
            {
               Console.WriteLine("Page: {0}, size: {1} by {2} ({3} by {4} inches)", page.PageNumber, page.Width, page.Height, page.WidthInches, page.HeightInches);
            }

            PDFDocumentProperties props = document.DocumentProperties;
            Console.WriteLine("Properties:");
            Console.WriteLine("----------:");
            Console.WriteLine("Title: {0}", props.Title);
            Console.WriteLine("Author: {0}", props.Author);
            Console.WriteLine("Subject: {0}", props.Subject);
            Console.WriteLine("Keywords: {0}", props.Keywords);
            Console.WriteLine("Creator: {0}", props.Creator);
            Console.WriteLine("Producer: {0}", props.Producer);
            Console.WriteLine("Created: {0}", props.Created);
            Console.WriteLine("Modified: {0}", props.Modified);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" /></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the standard .NET dispose pattern when using the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class. For more information, refer to the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.Dispose">
      <summary>
            Releases all resources used by this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the standard .NET dispose pattern when using the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class. For more information, refer to the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <param name="disposing">
        <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you follow the standard .NET dispose pattern when using the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class. For more information, refer to the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFDocument.MaximumPasswordLength">
      <summary>
            Gets the maximum size of a PDF password.
            </summary>
      <value>The maximum size of a PDF password. Which is 64 characters.</value>
      <remarks>
        <para>When encrypting PDF files with a password, the maximum length of the characters in the password must not exceed 64. LEADTOOLS will automatically truncate the values passed
            to <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see>, <see cref="P:Leadtools.Pdf.PDFFile.Password">PDFFile.Password</see> and
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">
      <summary>
            Gets the maximum size of a PDF string.
            </summary>
      <value>The maximum size of a PDF string. Which is 126 characters.</value>
      <remarks>
        <para>This value is used as the maximum length for the strings in the following properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Title">PDFDocumentProperties.Title</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Author">PDFDocumentProperties.Author</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Subject">PDFDocumentProperties.Subject</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Keywords">PDFDocumentProperties.Keywords</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Creator">PDFDocumentProperties.Creator</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Producer">PDFDocumentProperties.Producer</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.Title">PDFBookmark.Title</see>
              </para>
            </description>
          </item>
        </list>
        <para>These values should not contain more than 126 characters as defined by the PDF standard. LEADTOOLS will automatically truncate the values of these properties to
            126 before writing them to a PDF file.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Pdf.PDFDocument" /> form a specified PDF file.
            </summary>
      <param name="fileName">The name of an existing PDF file.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class encapsulates a PDF document on disk and allows you to read the pages, objects and images from the document.</para>
        <para>
          <paramref name="fileName" /> must contain the name of an existing and valid PDF file on disk. If the PDF file is encrypted, then use the
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructor. You can check whether a PDF is encrypted using the
            <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)">PDFFile.IsEncrypted</see> method.</para>
        <para>This method will initialize the members of <see cref="T:Leadtools.Pdf.PDFDocument" /> as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.FileName" />: will be set to <paramref name="fileName" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Password" />: will be set to <strong>null</strong>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.IsEncrypted" />: will be set <strong>false</strong> since this method cannot open an encrypted PDF file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" />: will be set to the default value used to load PDF files set in the static <see cref="P:Leadtools.Pdf.PDFDocument.DefaultResolution" /> property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Pages" />: will be initialized to list of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> objects, one item for each page found in the PDF document. Not all of the
            <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> members will be initialized since the <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor does not read any PDF objects by default. Refer to
            <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> for more information.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.DocumentProperties" />: will be initialized with PDF document properties or metadata read from the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.FileType" />: will be initialized with PDF document file type or version read from the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" />: will be initialized to <strong>null</strong>. The <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will not read the
            PDF document structure by default, instead, you must use the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> method to read the structure and populate <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" />: will be initialized to <strong>null</strong>. The <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will not read the
            PDF document structure by default, instead, you must use the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> method to read the structure and populate <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" />.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Pdf.PDFDocument" /> form a specified PDF file and optional password.
            </summary>
      <param name="fileName">The name of an existing PDF file.</param>
      <param name="password">The password to use if <paramref name="fileName" /> contains an encrypted PDF file.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> class encapsulates a PDF document on disk and allows you to read the pages, objects and images from the document.</para>
        <para>
          <paramref name="fileName" /> must contain the name of an existing and valid PDF file on disk. If the PDF file is encrypted, then <paramref name="password" />
            is used to try and decrypt the file. If the password value is not correct, and exception will be thrown. Another way of loading PDF documents is to use the
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> constructor. This constructor does not work on encrypted PDF files. Use the
            <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)">PDFFile.IsEncrypted</see> to determine whether a PDF file is encrypted.</para>
        <para>This method will initialize the members of <see cref="T:Leadtools.Pdf.PDFDocument" /> as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.FileName" />: will be set to <paramref name="fileName" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Password" />: will be set to <paramref name="password" /> regardless whether <paramref name="password" /> was used when loading the file or not.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.IsEncrypted" />: will be set <strong>false</strong> since this method cannot open an encrypted PDF file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" />: will be set to the default value used to load PDF files set in the static <see cref="P:Leadtools.Pdf.PDFDocument.DefaultResolution" /> property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Pages" />: will be initialized to list of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> objects, one item for each page found in the PDF document. Not all of the
            <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> members will be initialized since the <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor does not read any PDF objects by default. Refer to
            <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> for more information.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.DocumentProperties" />: will be initialized with PDF document properties or metadata read from the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.FileType" />: will be initialized with PDF document file type or version read from the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" />: will be initialized to <strong>null</strong>. The <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will not read the
            PDF document structure by default, instead, you must use the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> method to read the structure and populate <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" />.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" />: will be initialized to <strong>null</strong>. The <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will not read the
            PDF document structure by default, instead, you must use the <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> method to read the structure and populate <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" />.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFEncryptedExample()
         Dim pdfFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Encrypted.pdf")
         ' Create an encrypted version of LEAD.pdf
         Dim file As New PDFFile(pdfFileName1)
         file.SecurityOptions = New PDFSecurityOptions()
         file.SecurityOptions.UserPassword = "LEAD"
         file.Convert(1, -1, pdfFileName2)

         ' Now try to open it as a document
         Dim password As String = Nothing

         If PDFFile.IsEncrypted(pdfFileName2) Then
            Console.WriteLine("{0}\nIs encrypted. Enter the password:", pdfFileName2)
            password = Console.ReadLine()
         End If

         ' If the user entered the correct password (LEAD), you can open the file now
         Try
            Using document As New PDFDocument(pdfFileName2, password)
               Console.WriteLine("Opened successfully")
            End Using
         Catch ex As Exception
            ' Otherwise, you will get an error that the PDF file is corrupted
            Console.WriteLine(ex.Message)
         End Try
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFEncryptedExample()
      {
         string pdfFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"Encrypted.pdf");
         // Create an encrypted version of LEAD.pdf
         PDFFile file = new PDFFile(pdfFileName1);
         file.SecurityOptions = new PDFSecurityOptions();
         file.SecurityOptions.UserPassword = "LEAD";
         file.Convert(1, -1, pdfFileName2);

         // Now try to open it as a document
         string password = null;

         if(PDFFile.IsEncrypted(pdfFileName2))
         {
            Console.WriteLine("{0}\nIs encrypted. Enter the password:", pdfFileName2);
            password = Console.ReadLine();
         }

         // If the user entered the correct password (LEAD), you can open the file now
         try
         {
            using(PDFDocument document = new PDFDocument(pdfFileName2, password))
            {
               Console.WriteLine("Opened successfully");
            }
         }
         catch(Exception ex)
         {
            // Otherwise, you will get an error that the PDF file is corrupted
            Console.WriteLine(ex.Message);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile(string fileName, string password)-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">
      <summary>
            Parses the Table of Content and internal links or jumps between the pages of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <param name="options">Document structure parsing options.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> to parse the document structure of the PDF document. The document structure is the Table of Contents (TOC) represented by a
            list of PDF bookmark objects stored in the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> property and the internal links between pages (or jumps) found in the document stored in the
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> property.</para>
        <para>When you create a new <see cref="T:Leadtools.Pdf.PDFDocument" /> object from a PDF file on disj, the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> properties
            will not be parsed automatically their values will be <strong>null</strong>. To read the bookmarks or internal links, you must use <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" />. When this
            method returns, the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> properties will be populated with a list of <see cref="T:Leadtools.Pdf.PDFBookmark" /> objects for each bookmark item found in the document (or an
            empty list if the document does not contain any bookmarks). Similarly, the <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> will be populated with a list of <see cref="T:Leadtools.Pdf.PDFInternalLink" />
            objects for each internal link or jump between the pages found in the document (or an empty list of no such items exist).</para>
        <para>The <paramref name="options" /> controls which items are parsed. You can parse the bookmarks only, internal links only or all.</para>
        <para>To write bookmarks to a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.WriteBookmarks(System.Collections.Generic.IList{Leadtools.Pdf.PDFBookmark},System.String)">PDFFile.WriteBookmarks</see> method.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFDocumentParseDocumentStructureExample()
         Dim pdfFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Bookmarks.pdf")
         ' Create a version of the source file with a few bookmarks
         Dim file As New PDFFile(pdfFileName1)
         ' Load the pages
         file.Load()
         Dim bookmarks As New List(Of PDFBookmark)()

         ' We will bookmarks for each page, cascading levels:
         ' Goto page 1
         '    Goto page 2
         '       Goto page 3
         '          Goto page 4
         Dim level As Integer = 0
         For i As Integer = 0 To file.Pages.Count - 1
            Dim page As PDFFilePage = file.Pages(i)

            Dim bookmark As New PDFBookmark()
            bookmark.Title = "Goto page " + page.PageNumber.ToString()
            bookmark.BookmarkStyle = PDFBookmarkStyle.Plain
            bookmark.Level = level
            bookmark.TargetPageNumber = page.PageNumber
            bookmark.TargetPageFitType = PDFPageFitType.Default
            bookmark.TargetPosition = New PDFPoint(0, page.Height)
            bookmark.TargetZoomPercent = 0
            bookmarks.Add(bookmark)

            level = level + 1
            If level &gt; 8 Then
               ' Reset levels
               level = 0
            End If
         Next

         file.WriteBookmarks(bookmarks, pdfFileName2)

         ' Create a document for the output file
         Using document As New PDFDocument(pdfFileName2)

            ' Now read the bookmarks and internal links in the document
            document.ParseDocumentStructure(PDFParseDocumentStructureOptions.InternalLinks Or PDFParseDocumentStructureOptions.Bookmarks)

            Console.WriteLine("{0} bookmarks found:", document.Bookmarks.Count)
            For Each bookmark As PDFBookmark In document.Bookmarks
               Console.WriteLine(" Title: {0}, Level: {1}, Target page: {2}", bookmark.Title, bookmark.Level, bookmark.TargetPageNumber)
            Next

            Console.WriteLine("{0} Internal links found:", document.InternalLinks.Count)
            For Each internalLink As PDFInternalLink In document.InternalLinks
               Console.WriteLine(" Source bounds: {0}, Target page: {1}", internalLink.SourceBounds, internalLink.TargetPageNumber)
            Next
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentParseDocumentStructureExample()
      {
         string pdfFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"Bookmarks.pdf");
         // Create a version of the source file with a few bookmarks
         PDFFile file = new PDFFile(pdfFileName1);
         // Load the pages
         file.Load();
         List&lt;PDFBookmark&gt; bookmarks = new List&lt;PDFBookmark&gt;();

         // We will bookmarks for each page, cascading levels:
         // Goto page 1
         //    Goto page 2
         //       Goto page 3
         //          Goto page 4
         int level = 0;
         for(int i = 0; i &lt; file.Pages.Count; i++)
         {
            PDFFilePage page = file.Pages[i];

            PDFBookmark bookmark = new PDFBookmark();
            bookmark.Title = "Goto page " + page.PageNumber.ToString();
            bookmark.BookmarkStyle = PDFBookmarkStyle.Plain;
            bookmark.Level = level;
            bookmark.TargetPageNumber = page.PageNumber;
            bookmark.TargetPageFitType = PDFPageFitType.Default;
            bookmark.TargetPosition = new PDFPoint(0, page.Height);
            bookmark.TargetZoomPercent = 0;
            bookmarks.Add(bookmark);

            level++;
            if(level &gt; 8)
            {
               // Reset levels
               level = 0;
            }
         }

         file.WriteBookmarks(bookmarks, pdfFileName2);

         // Create a document for the output file
         using(PDFDocument document = new PDFDocument(pdfFileName2))
         {
            // Now read the bookmarks and internal links in the document
            document.ParseDocumentStructure(PDFParseDocumentStructureOptions.InternalLinks | PDFParseDocumentStructureOptions.Bookmarks);

            Console.WriteLine("{0} bookmarks found:", document.Bookmarks.Count);
            foreach(PDFBookmark bookmark in document.Bookmarks)
            {
               Console.WriteLine(" Title: {0}, Level: {1}, Target page: {2}", bookmark.Title, bookmark.Level, bookmark.TargetPageNumber);
            }

            Console.WriteLine("{0} Internal links found:", document.InternalLinks.Count);
            foreach(PDFInternalLink internalLink in document.InternalLinks)
            {
               Console.WriteLine(" Source bounds: {0}, Target page: {1}", internalLink.SourceBounds, internalLink.TargetPageNumber);
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.ParseDocumentStructure-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)">
      <summary>
            Gets a raster image of a page in the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <param name="codecs">An optional <see cref="T:Leadtools.Codecs.RasterCodecs" /> to use when reading the page. If you pass a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic),
            then this method will internal create a new <see cref="T:Leadtools.Codecs.RasterCodecs" /> object and dispose before it returns.</param>
      <param name="pageNumber">The 1-based page number to read. Must be greater than or equal to 1 and less than or equal to the total number of pages in the document
            (<see cref="P:System.Collections.Generic.ICollection`1.Count">Pages.Count</see>). You can use the special value of -1 to donate "last page in the document".</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> that represents the rendering of the requested page.</returns>
      <remarks>
        <para>This method does not perform anything beyound simply using the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object passed (or the temporary one created) to load the PDF page:</para>
        <para>
          <pre>
            <code inline="true">
            rasterCodecsObject.Load(document.FileName, 0, CodecsLoadByteOrder.Bgr, pageNumber, pageNumber)
            </code>
          </pre>
        </para>
        <para>For more information, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>.</para>
        <para>The size of the result <see cref="T:Leadtools.RasterImage" /> depends on the size of the page
            (<see cref="P:Leadtools.Pdf.PDFDocumentPage.Width">PDFDocumentPage.Width</see> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Height">PDFDocumentPage.Height</see>) and the current resolution value of the
            document <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see>). For example, if the PDF size is 612 by 792 PDF units (or 1/72 of an inch) and resolution value is
            300, then the result image size is: 300 * 612/72 by 300 * 792/72 = 2550 by 3300 pixels. You can increase or decrease the value of the resolution to load the image at larger
            or smaller pixel size. Refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see> for more information.</para>
        <para>Once the page is rendered as a <see cref="T:Leadtools.RasterImage" /> object, you can use this object to perform any other image functionality with LEADTOOLS, such as setting it into
            a viewer control, image processing, saving to other formats, etc.</para>
        <para>Since a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is required by this method, you can either pass one through the <paramref name="codecs" /> parameter and the method will use this
            object to load the page. This is helpful if you need to change the default <see cref="T:Leadtools.Codecs.RasterCodecs" /> load options or subscribe to any of the events that will occur during
            loading. If none of that is required, you can simply pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for the <paramref name="codecs" /> parameter and this
            method will internally create, use and dispose a temporary <see cref="T:Leadtools.Codecs.RasterCodecs" /> object.</para>
        <para>To get a thumbnail of any page in a PDF document, use <see cref="M:Leadtools.Pdf.PDFDocument.GetThumbnail(Leadtools.Codecs.RasterCodecs,System.Int32,System.Int32,System.Int32)" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFDocumentGetPageImageExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_pdf.tif")
         If File.Exists(tifFileName) Then
            ' So we won't append to it twice
            File.Delete(tifFileName)
         End If

         ' Open the document
         Using document As New PDFDocument(pdfFileName)

            ' Set the resolution to 200 dots/inch
            document.Resolution = 200

            Using codecs As New RasterCodecs()
               ' For each page...
               For i As Integer = 1 To document.Pages.Count
                  ' Get the page as a raster image
                  Using image As RasterImage = document.GetPageImage(codecs, i)
                     ' Save it to the destination file
                     codecs.Save(image, tifFileName, RasterImageFormat.TifJpeg, 24, 1, 1, -1, CodecsSavePageMode.Append)
                  End Using
               Next
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentGetPageImageExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdf.tif");
         if(File.Exists(tifFileName))
         {
            // So we won't append to it twice
            File.Delete(tifFileName);
         }

         // Open the document
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            // Set the resolution to 200 dots/inch
            document.Resolution = 200;

            using(RasterCodecs codecs = new RasterCodecs())
            {
               // For each page...
               for(int i = 1; i &lt;= document.Pages.Count; i++)
               {
                  // Get the page as a raster image
                  using(RasterImage image = document.GetPageImage(codecs, i))
                  {
                     // Save it to the destination file
                     codecs.Save(image, tifFileName, RasterImageFormat.TifJpeg, 24, 1, 1, -1, CodecsSavePageMode.Append);
                  }
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.GetPageImage-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.GetThumbnail(Leadtools.Codecs.RasterCodecs,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a thumbnail of a page in the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <param name="codecs">An optional <see cref="T:Leadtools.Codecs.RasterCodecs" /> to use when reading the page. If you pass a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic),
            then this method will internall create a new <see cref="T:Leadtools.Codecs.RasterCodecs" /> object and dispose before it returns.</param>
      <param name="pageNumber">The 1-based page number. Must be greater than or equal to 1 and less than or equal to the total number of pages in the document
            (<see cref="P:System.Collections.Generic.ICollection`1.Count">Pages.Count</see>). You can use the special value of -1 to donate "last page in the document".</param>
      <param name="thumbnailWidth">The desired maximum width of the thumbnail image in pixels. Must be greater than 32.</param>
      <param name="thumbnailHeight">The desired maximum height of the thumbnail image in pixels. Must be greater than 32.</param>
      <returns>A new <see cref="T:Leadtools.RasterImage" /> that is the thumbnail image.</returns>
      <remarks>
        <para>If the page width and height is less than <paramref name="thumbnailWidth" /> and <paramref name="thumbnailHeight" />, then this method returns an in the original
            size.</para>
        <para>If the page width or height is greater than <paramref name="thumbnailWidth" /> and <paramref name="thumbnailHeight" />, then this method will return the biggest thumbnail it can
            fit into the dimensions specified by <paramref name="thumbnailWidth" /> and <paramref name="thumbnailHeight" />, keeping the original image aspect ratio. </para>
        <para>The result image will always have 24 bits per pixel and a resolution of 96 by 96 regardless of the value of <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> set in this <see cref="T:Leadtools.Pdf.PDFDocument" /> and will never return a
            thumbnail bigger than the original page size in pixels.</para>
        <para>This method uses <see cref="M:Leadtools.RasterImage.CalculatePaintModeRectangle(System.Int32,System.Int32,Leadtools.LeadRect,Leadtools.RasterPaintSizeMode,Leadtools.RasterPaintAlignMode,Leadtools.RasterPaintAlignMode)" /> to calculate the thumbnail size and then the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load resize</see> method to load the thumbnail with
            <see cref="T:Leadtools.RasterSizeFlags">RasterSizeFlags.Resample</see> will be used as the <i>flags</i> parameter.</para>
        <para>Since a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is required by this method, you can either pass one through the <paramref name="codecs" /> parameter and the method will use this
            object to load the page. This is helpful if you need to change the default <see cref="T:Leadtools.Codecs.RasterCodecs" /> load options or subscribe to any of the events that will occur during
            loading. If none of that is required, you can simply pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for the <paramref name="codecs" /> parameter and this
            method will internally create, use and dispose a temporary <see cref="T:Leadtools.Codecs.RasterCodecs" /> object.</para>
        <para>To get a render of the full size of any page in a PDF document, use <see cref="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      Public Sub PDFDocumentGetThumbnailExample(ByVal imageList As RasterImageList)
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         ' Open the document
         Using document As New PDFDocument(pdfFileName)

            Using codecs As RasterCodecs = New RasterCodecs()
               ' For each page...
               For i As Integer = 1 To document.Pages.Count
                  ' Get the thumbnail of the page
                  Dim image As RasterImage = document.GetThumbnail(codecs, i, 128, 128)

                  ' Add it to the image list
                  Dim item As New RasterImageListItem(image, 1, "Page " + i.ToString())
                  imageList.Items.Add(item)
               Next
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      public void PDFDocumentGetThumbnailExample(RasterImageList imageList)
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         // Open the document
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            using(RasterCodecs codecs = new RasterCodecs())
            {
               // For each page...
               for(int i = 1; i &lt;= document.Pages.Count; i++)
               {
                  // Get the thumbnail of the page
                  RasterImage image = document.GetThumbnail(codecs, i, 128, 128);

                  // Add it to the image list
                  RasterImageListItem item = new RasterImageListItem(image, 1, "Page " + i.ToString());
                  imageList.Items.Add(item);
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.GetThumbnail-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">
      <summary>
            Parses the objects such as text items (characters), images, rectangles, hyperlinks and fonts from one or more PDF pages
            </summary>
      <param name="options">One or more <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> enumeration member that specify the types of objects to parse.</param>
      <param name="firstPageNumber">1-based index of the first page number to parse. Must be greater than or equal to 1 and less than or equal to the number of pages in the
            document.</param>
      <param name="lastPageNumber">1-based index of the last page number to parse. Must be greater than or equal to <paramref name="firstPageNumber" /> and less than or equal to the number
            of pages in the document. You can use the special value of -1 to donate "last page in the file".</param>
      <remarks>
        <para>When a <see cref="T:Leadtools.Pdf.PDFDocument" /> object is created, the pages of the PDF document are already parsed and populated in the <see cref="P:Leadtools.Pdf.PDFDocument.Pages">PDFDocument.Pages</see>
            collection. Each page may contain other objects such as text items (characters), images, rectangles and hyperlinks as well as the fonts used in these items. These items are not
            parsed automatically for performance reasons. Instead, you must call the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method with the page ranges you are interested in (or all pages) and type
            of items to parse.</para>
        <para>Initially, the values of the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see>, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see>
            lists of each <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic). When the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method is called, the
            corresponding list will be populated with the items found in the page.</para>
        <para>You can parse any type of item you are interested in, this is done through the <i>options</i> parameter of type <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> passed to
            <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFObject" /> object for each object item found in the page. These items can
            be text (characters), images or rectangles. If there aren't any object items found in the page, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects">PDFDocumentPage.Objects</see> will be initialized with an empty collection
            (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Objects.Count</see> will be 0).</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFHyperlink" /> object for each hyperlink item
            found in the page. If no hyperlinks are found in the page, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> will be initialized with an empty
            collection (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Hyperlinks.Count</see> will be 0).</para>
            </description>
          </item>
          <item>
            <description>
              <para>If <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> is specified, then the
            <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection will be populated with a <see cref="T:Leadtools.Pdf.PDFFont" /> object for each font item
            found in the page. If no fonts are found in the page, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> will be initialized with an empty
            collection (<see cref="P:System.Collections.Generic.ICollection`1.Count">PDFDocumentPage.Fonts.Count</see> will be 0).</para>
            </description>
          </item>
        </list>
        <para>A white space character such as a space or a tab are parsed by default and returned as individual objects. This behavior can be stopped by OR'ing the
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.IgnoreWhiteSpaces</see> enumeration member with
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> in the <i>options</i> parameter passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>.
            Note that you can re-construct the words and lines of text in the page without white characters by using the
            <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord">PDFTextProperties.IsEndOfWord</see> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine">PDFTextProperties.IsEndOfLine</see>
            properties. The example of <see cref="T:Leadtools.Pdf.PDFTextProperties" /> shows how to do that.</para>
        <para>The values of <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> can be OR'ed together.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFDocumentParsePagesExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim txtFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_pdf.txt")
         ' Open the document
         Using document As New PDFDocument(pdfFileName)

            ' Parse everything and for all pages
            Dim options As PDFParsePagesOptions = PDFParsePagesOptions.All
            document.ParsePages(options, 1, -1)

            ' Save the results to the text file for examining
            Using writer As StreamWriter = File.CreateText(txtFileName)
               For Each page As PDFDocumentPage In document.Pages
                  writer.WriteLine("Page {0}", page.PageNumber)

                  Dim fonts As IList(Of PDFFont) = page.Fonts
                  ' Note, no need to check if fonts is Nothing since we passed .All
                  ' This will either get the fonts or an empty list. Same for all
                  ' the other objects
                  writer.WriteLine("Fonts: {0}", fonts.Count)
                  For Each font As PDFFont In fonts
                     writer.WriteLine("  FaceName: {0}", font.FaceName)
                     writer.WriteLine("  FontStyle: {0}", font.FontStyle.ToString())
                     writer.WriteLine("------")
                  Next
                  writer.WriteLine("---------------------")

                  Dim objects As IList(Of PDFObject) = page.Objects
                  writer.WriteLine("Objects: {0}", objects.Count)
                  For Each obj As PDFObject In objects
                     writer.WriteLine("  ObjectType: {0}", obj.ObjectType.ToString())
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", obj.Bounds.Left, obj.Bounds.Top, obj.Bounds.Right, obj.Bounds.Bottom)
                     WriteTextProperties(writer, obj.TextProperties)
                     writer.WriteLine("  Code: {0}", obj.Code)
                     writer.WriteLine("------")
                  Next
                  writer.WriteLine("---------------------")

                  Dim hyperlinks As IList(Of PDFHyperlink) = page.Hyperlinks
                  writer.WriteLine("Hyperlinks: {0}", hyperlinks.Count)
                  For Each hyperlink As PDFHyperlink In hyperlinks
                     writer.WriteLine("  Hyperlink: {0}", hyperlink.Hyperlink)
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", hyperlink.Bounds.Left, hyperlink.Bounds.Top, hyperlink.Bounds.Right, hyperlink.Bounds.Bottom)
                     WriteTextProperties(writer, hyperlink.TextProperties)
                  Next
                  writer.WriteLine("---------------------")
               Next
            End Using
         End Using
      End Sub

      Private Shared Sub WriteTextProperties(ByVal writer As StreamWriter, ByVal textProperties As PDFTextProperties)
         writer.WriteLine("  TextProperties.FontHeight: {0}", textProperties.FontHeight.ToString())
         writer.WriteLine("  TextProperties.FontWidth: {0}", textProperties.FontWidth.ToString())
         writer.WriteLine("  TextProperties.FontIndex: {0}", textProperties.FontIndex.ToString())
         writer.WriteLine("  TextProperties.IsEndOfWord: {0}", textProperties.IsEndOfWord.ToString())
         writer.WriteLine("  TextProperties.IsEndOfLine: {0}", textProperties.IsEndOfLine.ToString())
         writer.WriteLine("  TextProperties.Color: {0}", textProperties.Color.ToString())
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentParsePagesExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string txtFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdf.txt");
         // Open the document
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            // Parse everything and for all pages
            PDFParsePagesOptions options = PDFParsePagesOptions.All;
            document.ParsePages(options, 1, -1);

            // Save the results to the text file for examining
            using(StreamWriter writer = File.CreateText(txtFileName))
            {
               foreach(PDFDocumentPage page in document.Pages)
               {
                  writer.WriteLine("Page {0}", page.PageNumber);

                  IList&lt;PDFFont&gt; fonts = page.Fonts;
                  // Note, no need to check if fonts is null since we passed .All
                  // This will either get the fonts or an empty list. Same for all
                  // the other objects
                  writer.WriteLine("Fonts: {0}", fonts.Count);
                  foreach(PDFFont font in fonts)
                  {
                     writer.WriteLine("  FaceName: {0}", font.FaceName);
                     writer.WriteLine("  FontStyle: {0}", font.FontStyle.ToString());
                     writer.WriteLine("------");
                  }
                  writer.WriteLine("---------------------");

                  IList&lt;PDFObject&gt; objects = page.Objects;
                  writer.WriteLine("Objects: {0}", objects.Count);
                  foreach(PDFObject obj in objects)
                  {
                     writer.WriteLine("  ObjectType: {0}", obj.ObjectType.ToString());
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", obj.Bounds.Left, obj.Bounds.Top, obj.Bounds.Right, obj.Bounds.Bottom);
                     WriteTextProperties(writer, obj.TextProperties);
                     writer.WriteLine("  Code: {0}", obj.Code);
                     writer.WriteLine("------");
                  }
                  writer.WriteLine("---------------------");

                  IList&lt;PDFHyperlink&gt; hyperlinks = page.Hyperlinks;
                  writer.WriteLine("Hyperlinks: {0}", hyperlinks.Count);
                  foreach(PDFHyperlink hyperlink in hyperlinks)
                  {
                     writer.WriteLine("  Hyperlink: {0}", hyperlink.Hyperlink);
                     writer.WriteLine("  Bounds: {0}, {1}, {2}, {3}", hyperlink.Bounds.Left, hyperlink.Bounds.Top, hyperlink.Bounds.Right, hyperlink.Bounds.Bottom);
                     WriteTextProperties(writer, hyperlink.TextProperties);
                  }
                  writer.WriteLine("---------------------");
               }
            }
         }
      }

      private static void WriteTextProperties(StreamWriter writer, PDFTextProperties textProperties)
      {
         writer.WriteLine("  TextProperties.FontHeight: {0}", textProperties.FontHeight.ToString());
         writer.WriteLine("  TextProperties.FontWidth: {0}", textProperties.FontWidth.ToString());
         writer.WriteLine("  TextProperties.FontIndex: {0}", textProperties.FontIndex.ToString());
         writer.WriteLine("  TextProperties.IsEndOfWord: {0}", textProperties.IsEndOfWord.ToString());
         writer.WriteLine("  TextProperties.IsEndOfLine: {0}", textProperties.IsEndOfLine.ToString());
         writer.WriteLine("  TextProperties.Color: {0}", textProperties.Color.ToString());
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.ParsePages-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.GetContentType(System.Int32)">
      <summary>
            Gets the content type for the specified page of this <strong>PDFDocument</strong>.
            </summary>
      <param name="pageNumber">The page number to check.</param>
      <returns>A <see cref="T:Leadtools.Pdf.PDFContentType" /> that indicates the content type for the specified page.</returns>
      <example>
        <!--GetContentType-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.GetPageSvg(System.Int32,Leadtools.Codecs.CodecsLoadSvgOptions)">
      <summary>
            Gets the specified page as an SVG document.
            </summary>
      <param name="pageNumber">1-based number of the page.</param>
      <param name="options">Options to use when converting the PDF data to SVG. This parameter can be <strong>null</strong> to use the default options.</param>
      <returns>The <see cref="T:Leadtools.ISvgDocument" /> for the specified page.</returns>
      <remarks>
            For more information refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadSvg(System.IO.Stream,System.Int32,Leadtools.Codecs.CodecsLoadSvgOptions)">RasterCodecs.LoadSvg</see>.
            </remarks>
      <example>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentGetPageSvgExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         PDFDocument pdfDocument = new PDFDocument(sourceFileName);

         ImageViewer imageViewer = new Leadtools.Controls.ImageViewer();
         imageViewer.ImageBackgroundColor = System.Drawing.Color.White;
         imageViewer.Location = new System.Drawing.Point(10, 10);
         imageViewer.Dock = DockStyle.Fill;

         imageViewer.SvgDocument = pdfDocument.GetPageSvg(1, null) as SvgDocument;
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.GetPageSvg-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocument.DecodeImage(System.String)">
      <summary>
            Decodes the specified PDF image object embedded in this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <param name="imageObjectNumber">String that specifies the PDF image object number to decode.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <noremarks />
      <example>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentDecodeImageExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdfDecodeImage.tif");
         using (PDFDocument document = new PDFDocument(sourceFileName))
         {
            document.Resolution = 200;

            // Parse the objects of the first page
            document.ParsePages(PDFParsePagesOptions.Fonts | PDFParsePagesOptions.Objects | PDFParsePagesOptions.Hyperlinks, 1, 1);

            // Get the page
            PDFDocumentPage page = document.Pages[0];

            using (RasterImage image = document.DecodeImage("1"))
               using (RasterCodecs codecs = new RasterCodecs())
                  codecs.Save(image, destinationFileName, RasterImageFormat.TifLzw, image.BitsPerPixel);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.DecodeImage-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.DefaultResolution">
      <summary>
            Gets or sets the default resolution in dots per inch used when creating new <see cref="T:Leadtools.Pdf.PDFDocument" /> objects.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the default resolution in dots per inch to use when creating new <see cref="T:Leadtools.Pdf.PDFDocument" /> objects. Must be a value greater than or equal to 0.
            Default value is 150.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocument" /> constructor will use this value to initialize the <see cref="P:Leadtools.Pdf.PDFDocument.Resolution">PDFDocument.Resolution</see> property.</para>
        <para>A value of 0 means "Use current screen resolution", usually, 96.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.FileName">
      <summary>
            Gets the name of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <value>A <see cref="T:System.String" /> that contains the name of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            Default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Pdf.PDFDocument.FileName" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Password" /> will contain the same exact values passed to the
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> and <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructors
            if any.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Password">
      <summary>
            Gets the password used to decrypt this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            </summary>
      <value>A <see cref="T:System.String" /> that contains the password used to decrypt this <see cref="T:Leadtools.Pdf.PDFDocument" />.
            Default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Pdf.PDFDocument.FileName" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Password" /> will contain the same exact values passed to the
            <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String)">PDFDocument(string fileName)</see> and <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructors
            if any.</para>
        <para>If the value of <see cref="P:Leadtools.Pdf.PDFDocument.IsEncrypted" /> is <strong>false</strong>, then the PDF document is not encrypted and <see cref="P:Leadtools.Pdf.PDFDocument.Password" /> was not used when loading the document.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.IsEncrypted">
      <summary>
            Gets a value that indicate whether this PDF document is encrypted.
            </summary>
      <value>
        <strong>true</strong> if this PDF document is encrypted and a password was used to open it; otherwise it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>LEADTOOLS can open encrypted PDF documents. Simply, use the <see cref="M:Leadtools.Pdf.PDFDocument.#ctor(System.String,System.String)">PDFDocument(string fileName, string password)</see> constructor to open
            such documents. You can use the <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)">PDFFile.IsEncrypted</see> method to check if a document is encrypted and requires a password.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Resolution">
      <summary>
            Gets or sets the resolution in dots per inch of this PDF document.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the resolution in dots per inch of this PDF document. The default value is the value of the static
            (Shared in Visual Basic) <see cref="P:Leadtools.Pdf.PDFDocument.DefaultResolution">PDFDocument.DefaultResolution</see> property.</value>
      <remarks>
        <para>A value of 0 means "Use current screen resolution", usually, 96. High resolution values will render the document with greater details at the expense of using more system
            resources. Typical resolution values are 72, 96, 150, 200, 300 and 600.</para>
        <para>PDF documents do not have a resolution. Instead, all locations and sizes are stored in PDF units which equivalent to 1/72 of an inch. To convert a PDF unit to a physical value
            such as pixels, you must provide an external value for the resolution.</para>
        <para>Physical values such as pixels are typically needed when a PDF document is rendered to the screen.  To convert from logical to physical units, a resolution must be provided.
            Resolution is the value of dots (pixels) per inch to use when converting logical to physical values. For a example, if a PDF document has a page width and height of 612
            by 792 units and the resolution value set in <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> is 150, then:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The size of the page in inches is 8.5" by 11" - Obtained by dividing 612 and 792 by 72</para>
            </description>
          </item>
          <item>
            <description>
              <para>The size of the page in pixels is 1275 by 1650 - Obtained by multiplying 8.5" and 11" by 150, the current resolution</para>
            </description>
          </item>
        </list>
        <para>The <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> and <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> uses the value of
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> when converting to and from pixels. Also, the <see cref="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)" /> method will also use this
            resolution when calculating the page size in pixels.</para>
        <para>You can change the <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> value at any time based on your need. For example, a PDF viewer may set <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" /> to a low value, for example,
            96, and calls <see cref="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)" /> to render the PDF page on the screen when the image is zoomed out and not alot of details will be viewed. When the user zooms in into the
            page, a higher quality with finer details is required, the viewer then can obtain a new version of the image with a higher resolution by setting a new value into
            <see cref="P:Leadtools.Pdf.PDFDocument.Resolution" />, such as 200, and calling <see cref="M:Leadtools.Pdf.PDFDocument.GetPageImage(Leadtools.Codecs.RasterCodecs,System.Int32)" /> again.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFDocumentResolutionExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim outFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "PageAt150.png")
         Dim outFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "PageAt300.png")
         ' Create a PDF document for file
         Using document As New PDFDocument(pdfFileName)

            ' Get the first page in the document
            Dim page As PDFDocumentPage = document.Pages(0)

            Using codecs As New RasterCodecs()
               ' Use a resolution of 150
               document.Resolution = 150
               Console.WriteLine("Page size in pixels at {0} is {1} by {2}", document.Resolution, page.WidthPixels, page.HeightPixels)

               ' Save this page at this resolution
               Using image As RasterImage = document.GetPageImage(codecs, 1)
                  codecs.Save(image, outFileName1, RasterImageFormat.Png, 32)
               End Using

               ' Use a resolution of 300, the new size should be twice as much as the previous one
               document.Resolution = 300
               Console.WriteLine("Page size in pixels at {0} is {1} by {2}", document.Resolution, page.WidthPixels, page.HeightPixels)

               ' Save this page at this resolution
               Using image As RasterImage = document.GetPageImage(codecs, 1)
                  codecs.Save(image, outFileName2, RasterImageFormat.Png, 32)
               End Using
            End Using

            ' Open both PNG files and notice that PageAt300.png has more details that PageAt150.png
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentResolutionExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string outFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"PageAt150.png");
         string outFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"PageAt300.png");
         // Create a PDF document for file
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            // Get the first page in the document
            PDFDocumentPage page = document.Pages[0];

            using(RasterCodecs codecs = new RasterCodecs())
            {
               // Use a resolution of 150
               document.Resolution = 150;
               Console.WriteLine("Page size in pixels at {0} is {1} by {2}", document.Resolution, page.WidthPixels, page.HeightPixels);

               // Save this page at this resolution
               using(RasterImage image = document.GetPageImage(codecs, 1))
               {
                  codecs.Save(image, outFileName1, RasterImageFormat.Png, 32);
               }

               // Use a resolution of 300, the new size should be twice as much as the previous one
               document.Resolution = 300;
               Console.WriteLine("Page size in pixels at {0} is {1} by {2}", document.Resolution, page.WidthPixels, page.HeightPixels);

               // Save this page at this resolution
               using(RasterImage image = document.GetPageImage(codecs, 1))
               {
                  codecs.Save(image, outFileName2, RasterImageFormat.Png, 32);
               }
            }

            // Open both PNG files and notice that PageAt300.png has more details that PageAt150.png
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.Resolution-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Pages">
      <summary>
            Gets the collection of pages in this PDF document.
            </summary>
      <value>A collection of type <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> that contain an item for each page in the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" /> object. Default
            value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFDocument.Pages" /> will be automatically populated with the pages collection after a <see cref="T:Leadtools.Pdf.PDFDocument" /> is created.</para>
        <para>Each item in the collection corresponds to a page in the PDF file. To the number of pages in the document is <see cref="P:System.Collections.Generic.ICollection`1.Count">Pages.Count</see> and
            the item at index 0 is the properties of page 1, item at index 1 is the properties of page 2 and so on.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> class contains the width and height  of the page in PDF units which is read from the PDF file directly. PDF units are
            in 1/72 of an inch units, so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72). For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>
          <see cref="T:Leadtools.Pdf.PDFDocumentPageCollection" /> is a read-only collection of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> objects. The <see cref="T:Leadtools.Pdf.PDFDocument" /> class is a read-only view of a PDF file,
            you cannot insert or delete pages into this object, instead, use the methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class to achieve that.</para>
        <para>To parse the objects of a PDF page, such as text items (characters), images, rectangles, fonts and hyperlinks, use the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" /> and <see cref="T:Leadtools.Pdf.PDFDocumentPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.DocumentProperties">
      <summary>
            Gets the properties or metadata of this PDF document.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> object that contains the properties or metadata of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />. Default value
            is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The properties or metadata such as author, subject and keywords are automatically read from the PDF file when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is constructed.</para>
        <para>To update the properties of a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.FileType">
      <summary>
            Gets the file type or version of this PDF document.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFFileType" /> enumeration member that specifies the file type of version of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFDocument" />. Default value
            is <see cref="T:Leadtools.Pdf.PDFFileType">PDFFileType.Unknown</see>.</value>
      <remarks>
        <para>The file type or version is automatically read from the PDF file when the <see cref="T:Leadtools.Pdf.PDFDocument" /> is constructed.</para>
        <para>To convert a PDF file to another version, use the <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)">PDFFile.Convert</see> method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.InternalLinks">
      <summary>
            Gets the internal links (or jumps) between the pages of this PDF document.
            </summary>
      <value>A list of <see cref="T:Leadtools.Pdf.PDFInternalLink" /> objects that specify the internal links (or jumps) between the pages of this <see cref="T:Leadtools.Pdf.PDFDocument" />. Default value
            is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> to parse the document structure of the PDF document. The document structure is the Table of Contents (TOC) represented by a
            list of PDF bookmark objects stored in the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> property and the internal links between pages (or jumps) found in the document stored in the
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> property.</para>
        <para>When you first create an instance of <see cref="T:Leadtools.Pdf.PDFDocument" />, both <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> will be initialized to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). You must call <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> with the desired <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions" /> passed to the
            <i>options</i> parameters. When this method returns, the <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> will be populated accordingly.</para>
      </remarks>
      <seealso cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Bookmarks">
      <summary>
            Gets the Table of Contents (TOC) of this PDF document.
            </summary>
      <value>A list of <see cref="T:Leadtools.Pdf.PDFBookmark" /> objects that specify the Table of Contents (TOC) of this <see cref="T:Leadtools.Pdf.PDFDocument" />. Default value
            is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>Use <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> to parse the document structure of the PDF document. The document structure is the Table of Contents (TOC) represented by a
            list of PDF bookmark objects stored in the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> property and the internal links between pages (or jumps) found in the document stored in the
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> property.</para>
        <para>When you first create an instance of <see cref="T:Leadtools.Pdf.PDFDocument" />, both <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> will be initialized to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). You must call <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" /> with the desired <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions" /> passed to the
            <i>options</i> parameters. When this method returns, the <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" /> and <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks" /> will be populated accordingly.</para>
        <para>To write bookmarks to a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.WriteBookmarks(System.Collections.Generic.IList{Leadtools.Pdf.PDFBookmark},System.String)">PDFFile.WriteBookmarks</see> method.</para>
      </remarks>
      <seealso cref="P:Leadtools.Pdf.PDFDocument.InternalLinks" />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Images">
      <summary>
            Gets a list of the embedded images of this <strong>PDFDocument</strong>.
            </summary>
      <value>A list of <see cref="T:Leadtools.Pdf.PDFImage" /> contained in this <strong>PDFDocument</strong>.</value>
      <example>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFDocumentImagesExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string txtFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdfImageInfo.txt");
         // Save the results to the text file for examining
         using (StreamWriter writer = File.CreateText(txtFileName))
            using (PDFDocument document = new PDFDocument(pdfFileName))
               foreach (PDFImage pdfImage in document.Images)
                  WritePdfImageProperties(writer, pdfImage);
      }

      public void WritePdfImageProperties(StreamWriter writer, PDFImage image)
      {
         writer.WriteLine("PDFImage.PageNumber: {0}", image.PageNumber.ToString());
         writer.WriteLine("  PDFImage.ObjectNumber: {0}", image.ObjectNumber.ToString());
         writer.WriteLine("  PDFImage.ColorDevice: {0}", image.ColorDevice.ToString());
         writer.WriteLine("  PDFImage.StreamOffset: {0}", image.StreamOffset.ToString());
         writer.WriteLine("  PDFImage.StreamLength: {0}", image.StreamLength.ToString());
         writer.WriteLine("  PDFImage.BitsPerComponent: {0}", image.BitsPerComponent.ToString());
         writer.WriteLine("  PDFImage.ComponentCount: {0}", image.ComponentCount.ToString());
         writer.WriteLine("  PDFImage.BitsPerPixel: {0}", image.BitsPerPixel.ToString());
         writer.WriteLine("  PDFImage.Width: {0}", image.Width.ToString());
         writer.WriteLine("  PDFImage.Height: {0}", image.Height.ToString());
         writer.WriteLine("  PDFImage.ImageType: {0}", image.ImageType.ToString());
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFDocument.Images-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocument.Fonts">
      <summary>
            Gets a list of the embedded fonts of this <strong>PDFDocument</strong>.
            </summary>
      <value>A list of <see cref="T:Leadtools.Pdf.PDFFont" /> contained in this <strong>PDFDocument</strong>.</value>
      <example>
        <!--PDFDocument.Fonts-->
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFDocumentProperties">
      <summary>
            Contains a PDF document properties or metadata.
            </summary>
      <keywords>PDF,Properties|PDF,Metadata</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> class contains the properties or metadata of a PDF document such as the title, author and keywords.</para>
        <para>This class is used with the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>As the type for the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties">PDFFile.DocumentProperties</see> property. This property will be populated
            when a PDF file is loaded in the object using the <see cref="M:Leadtools.Pdf.PDFFile.Load">PDFFile.Load</see> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>As a parameter to the <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> method that can be used update the
            properties of an existing PDF file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>As the type for the <see cref="P:Leadtools.Pdf.PDFDocument.DocumentProperties">PDFDocument.DocumentProperties</see> property. This property contains
            the properties of the PDF document loaded in the <see cref="T:Leadtools.Pdf.PDFDocument" /> object.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The following methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class will use the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties">PDFFile.DocumentProperties</see> to update
            the properties of the final PDF file created or updated: <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />,
            <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />. If the value of
            <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties">PDFFile.DocumentProperties</see> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the <see cref="T:Leadtools.Pdf.PDFFile" /> will
            use default values of the document properties.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocumentProperties.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDocumentProperties.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFDocumentProperties" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Title">
      <summary>
            Gets or sets the a string that represents the title of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the title of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Author">
      <summary>
            Gets or sets a string that represents the author of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the author of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Subject">
      <summary>
            Gets or sets a string that represents the subject of the PDF document.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the subject of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Keywords">
      <summary>
            Gets or sets a string that represents the keywords of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the keywords of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>LEADTOOLS will load or store the value of <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Keywords" /> as is in the PDF file. No special seperators are defined by the PDF standard. You can use your own seperators
            if required, such as a semi colon or a comma.</para>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Creator">
      <summary>
            Gets or sets a string that represents the creator of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the creator of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Producer">
      <summary>
            Gets or sets a string that represents the producer of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the producer of the PDF document. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Created">
      <summary>
            Gets or sets the a value that represents the creation date and time of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.DateTime" /> that contain the optional created date and time of the PDF document. The default value is an empty <see cref="T:System.DateTime" /> object.</value>
      <remarks>
        <para>LEADTOOLS will store the UTC value of <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Created" /> in the PDF file.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDocumentProperties.Modified">
      <summary>
            Gets or sets the a value that represents the modified date and time of the PDF document. This is optional.
            </summary>
      <value>A <see cref="T:System.DateTime" /> that contain the optional modified date and time of the PDF document. The default value is an empty <see cref="T:System.DateTime" /> object.</value>
      <remarks>
        <para>LEADTOOLS will store the UTC value of <see cref="P:Leadtools.Pdf.PDFDocumentProperties.Modified" /> in the PDF file.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />, <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">PDFFile.SetDocumentProperties</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFDistillerOutputMode">
      <summary>
            Specifies the Distiller output optimization mode.
            </summary>
      <keywords>PDF,Distiller|PDF,Postscript</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDistillerOutputMode" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFDistillerOptions.OutputMode">PDFDistillerOptions.OutputMode</see> property
            to determine the output optimization mode to use when distilling Postscript files (converting Postscript files to PDF).</para>
        <para>These output modes are analogous to the options used by Adobe Distiller.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerOutputMode.Default">
      <summary>(0x00000000)<para>Output is intended to be useful across a wide variety of uses, possibly at the expense of a larger output file.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerOutputMode.ScreenOptimized">
      <summary>(0x00000001)<para>Low resolution output. This is similar to the Acrobat Distiller 5.0 "Screen Optimized" setting.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerOutputMode.EBookOptimized">
      <summary>(0x00000002)<para>Medium resolution output. This is similar to the Acrobat Distiller 5.0 "eBook" setting.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerOutputMode.PrintOptimized">
      <summary>(0x00000003)<para>Output similar to the Acrobat Distiller 5.0 "Print Optimized" setting.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerOutputMode.PrepressOptimized">
      <summary>(0x00000004)<para>Output similar to Acrobat Distiller 5.0 "Prepress Optimized" setting.</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFDistillerAutoRotatePageMode">
      <summary>
            Specifies how pages are rotated when distilling Postscript files.
            </summary>
      <keywords>PDF,Distiller|PDF,Postscript</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDistillerAutoRotatePageMode" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFDistillerOptions.AutoRotatePageMode">PDFDistillerOptions.AutoRotatePageMode</see> property
            to control how pages are rotated when distilling Postscript files (converting Postscript files to PDF).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerAutoRotatePageMode.None">
      <summary>(0x00000000)<para>No rotation is used.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerAutoRotatePageMode.PageByPage">
      <summary>(0x00000001)<para>Rotation will be performed on a page by page bases.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDistillerAutoRotatePageMode.All">
      <summary>(0x00000002)<para>Rotation will be applied to all the pages in the final document.</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFDistillerOptions">
      <summary>
            Provides options to use when distilling Postscript files (Convert Postscript files to PDF).
            </summary>
      <keywords>PDF,Distiller|PDF,Postscript</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFDistillerOptions" /> class is used as a parameter to the <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see> method.It controls the
            output optimization and page rotation modes used when distilling Postscript files (Converting Postscript files to PDF).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDistillerOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Pdf.PDFDistillerOptions" /> class with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFDistillerOptions.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFDistillerOptions" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFDistillerOptions" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFDistillerOptions" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFDistillerOptions.OutputMode">
      <summary>
            Gets or sets the output optimization mode to use when distilling Postscript files.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFDistillerOutputMode" /> enumeration member that determines the output optimization mode to use when distilling Postscript files. Default value
            is <see cref="T:Leadtools.Pdf.PDFDistillerOutputMode">PDFDistillerOutputMode.Default</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFDistillerOptions.OutputMode" /> and <see cref="P:Leadtools.Pdf.PDFDistillerOptions.AutoRotatePageMode" /> properties are used to control the output optimization and page rotation modes to use when distilling
            Postscript files (Converting Postscript files to PDF).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFDistillerOptions.AutoRotatePageMode">
      <summary>
            Gets or sets the page rotation mode to use when distilling Postscript files.
            </summary>
      <value>An <see cref="T:Leadtools.Pdf.PDFDistillerAutoRotatePageMode" /> enumeration member that determine the page rotation mode to use when distilling Postscript files. Default value
            is <see cref="T:Leadtools.Pdf.PDFDistillerAutoRotatePageMode">PDFDistillerAutoRotatePageMode.None</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFDistillerOptions.OutputMode" /> and <see cref="P:Leadtools.Pdf.PDFDistillerOptions.AutoRotatePageMode" /> properties are used to control the output optimization and page rotation modes to use when distilling
            Postscript files (Converting Postscript files to PDF).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">PDFFile.Distill</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFFilePage">
      <summary>
            Contains information about a page in a PDF file.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure is used as the type of the <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see> collection.</para>
        <para>To get the pages collection, populate a <see cref="T:Leadtools.Pdf.PDFFile" /> object with the name of a valid PDF file and optional password and then use the
            <see cref="M:Leadtools.Pdf.PDFFile.Load">PDFFile.Load</see> method. When this returns, the <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see> property will contain a list of <see cref="T:Leadtools.Pdf.PDFFilePage" />
            with each item corresponding to a page in the PDF file.</para>
        <para>Each item in the <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection corresponds to a page in the PDF file. So item at index 0 is the properties of page 1, item at index 1 is the
            properties of page 2 and so on. Even though the <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the <see cref="P:Leadtools.Pdf.PDFFilePage.PageNumber" /> property that specifies the number of the page,
            this information is for convenience only, the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> will always populate the collection in the correct order from first page to last page.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the width and height of the page in PDF units which is read from the PDF file directly. PDF page units are in 1/72 of an inch,
            so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72). For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>You can get the total number of pages in a PDF file with two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Pdf.PDFFile.Load" /> to load the PDF file into the <see cref="T:Leadtools.Pdf.PDFFile" /> object and use <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages.Count</see>. Using the
            <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method will also read the size of each page as well as populating <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> with the properties of the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>A faster way is to call <see cref="M:Leadtools.Pdf.PDFFile.GetPageCount" /> directly. This method is faster than calling <see cref="M:Leadtools.Pdf.PDFFile.Load" /> since it will not parse
            the page sizes nor the document properties. Just set the file name and optional password and call the method.</para>
            </description>
          </item>
        </list>
        <para>The values of the <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure are used as read only by the <see cref="T:Leadtools.Pdf.PDFFile" /> object. The toolkit will only return objects of type
            <see cref="T:Leadtools.Pdf.PDFFilePage" /> from the PDF document.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> does not contain any information about a PDF page other than its size. To get the objects, bookmarks, images, links of a page, use the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class and its collection of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> items.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFilePage.Width">
      <summary>
            Gets or sets the width of the PDF page.
            </summary>
      <value>The width of the PDF page in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the width and height of the page in PDF units which is read from the PDF file directly. PDF page units are in 1/72 of an inch,
            so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72).</para>
        <para>This property returns the width of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFilePage.Height">
      <summary>
            Gets or sets the height of the PDF page.
            </summary>
      <value>The height of the PDF page in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the width and height of the page in PDF units which is read from the PDF file directly. PDF page units are in 1/72 of an inch,
            so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72).</para>
        <para>This property returns the height of the PDF crop box. For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFilePage.PageNumber">
      <summary>
            Gets or sets the number of this PDF page.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the number of this page. The default value is 0.</value>
      <remarks>
        <para>Each item in the <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection corresponds to a page in the PDF file. So item at index 0 is the properties of page 1, item at index 1 is the
            properties of page 2 and so on. Even though the <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the <see cref="P:Leadtools.Pdf.PDFFilePage.PageNumber" /> property that specifies the number of the page,
            this information is for convenience only, the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> will always populate the collection in the correct order from first page to last page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages</see>.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFEncryptionMode">
      <summary>
            Specifies the PDF encryption mode
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFEncryptionMode" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EncryptionMode">PDFSecurityOptions.EncryptionMode</see> property. It determines
            the encryption mode to use when creating or updating PDF files.</para>
        <para>The password to use with the encryption must be set in the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword">PDFSecurityOptions.UserPassword</see> or
            <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword">PDFSecurityOptions.OwnerPassword</see> properties.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSecurityOptions" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFEncryptionMode.RC40Bit">
      <summary>(0x00000000)<para>Use RC 40 bit mode</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFEncryptionMode.RC128Bit">
      <summary>(0x00000001)<para>Use RC 128 bit mode</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFSecurityOptions">
      <summary>
            PDF encryption options
            </summary>
      <keywords>PDF,Security|PDF,Encryption</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> class is used as the type for the <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" /> and used to set the security and encryption options to use
            when creating or updating PDF files.</para>
        <para>The following methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class will use the secutity options set in <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions">.SecurityOptions</see> when updating or
            created a PDF file: </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
        </list>
        <para>If the value of <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions">PDFFile.SecurityOptions</see> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the
            <see cref="T:Leadtools.Pdf.PDFFile" /> will not encrypt the result PDF file.</para>
        <para>There are two different ways to protect a PDF file with a password:</para>
        <list type="bullet">
          <item>
            <description>
              <para>By using a user password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" />. In this mode, external viewers such as Adobe Acrobat will ask the user for the same password
            when opening the file for viewing. If the correct password is supplied, then all operations and rights are granted.</para>
            </description>
          </item>
          <item>
            <description>
              <para>By using an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />. In this mode, external viewers such as Adobe Acrobat will ask the user for the same password
            when opening the file for viewing. If the correct password is supplied, the editor will check the various access rights properties to allow or disallow certain operations on the PDF
            file such as printing or editing.</para>
            </description>
          </item>
        </list>
        <para>You cannot use both <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> in the same PDF file. If both values are set, then the <see cref="T:Leadtools.Pdf.PDFFile" /> object will
            use <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> and ignore <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileSecurityOptionsExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_EncryptedNoPrint.pdf")
         Dim pdfFileObj As New PDFFile(sourceFileName)

         ' Set the security options
         pdfFileObj.SecurityOptions = New PDFSecurityOptions()
         pdfFileObj.SecurityOptions.UserPassword = "LEAD"
         pdfFileObj.SecurityOptions.PrintEnabled = False
         pdfFileObj.SecurityOptions.HighQualityPrintEnabled = False
         pdfFileObj.SecurityOptions.EncryptionMode = PDFEncryptionMode.RC128Bit

         ' Encrypt the file by saving it to the destination file
         pdfFileObj.Convert(1, -1, destinationFileName)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileSecurityOptionsExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_EncryptedNoPrint.pdf");
         PDFFile pdfFile = new PDFFile(sourceFileName);

         // Set the security options
         pdfFile.SecurityOptions = new PDFSecurityOptions();
         pdfFile.SecurityOptions.UserPassword = "LEAD";
         pdfFile.SecurityOptions.PrintEnabled = false;
         pdfFile.SecurityOptions.HighQualityPrintEnabled = false;
         pdfFile.SecurityOptions.EncryptionMode = PDFEncryptionMode.RC128Bit;

         // Encrypt the file by saving it to the destination file
         pdfFile.Convert(1, -1, destinationFileName);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFSecurityOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFSecurityOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> class with default values.</para>
      </summary>
      <remarks>
        <para>This constructor set the properties of the result object as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> is set to <strong>null</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> is set to <strong>null</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.CopyEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AnnotationsEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" /> is set to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EncryptionMode" /> is set to <see cref="T:Leadtools.Pdf.PDFEncryptionMode">PDFEncryptionMode.RC40Bit</see></para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFSecurityOptions.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> object.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword">
      <summary>
            Gets or sets the user password to use when encrypting a PDF file.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the user password to use when encrypting a PDF file. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF files can be encrypted with two passwords: user (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> and owner <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> is used only with viewing the PDF file, so PDF viewers such as Adobe Acrobat will ask for the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> if specified in a PDF and
            will allow anyone to view the file if a correct value is supplied. To allow anyone to view the PDF file, do not set a value in the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> (leave it as an empty
            string or <strong>null</strong>).</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> is used to restrict certain rights on the PDF file when loading into a view such as Adobe Acrobat, these include disabling print
            (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" />), copying text to the clipboard (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.CopyEnabled" />), annotations (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.AnnotationsEnabled" />) and
            editing and re-assembling the PDF file (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" />). When encrypting a PDF file with an <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />, you can
            enable or disable any of these rights based on your application needs.</para>
        <para>You cannot supply both a user and owner password in the same PDF file. If both passwords are supplied, then the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> is ignored.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword">
      <summary>
            Gets or sets the owner password to use when encrypting a PDF file.
            </summary>
      <value>A <see cref="T:System.String" /> that contains the owner password to use when encrypting a PDF file. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF files can be encrypted with two passwords: <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword">user</see>  and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword">owner</see>.</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> is used only with viewing the PDF file, so PDF viewers such as Adobe Acrobat will ask for the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> if one is specified in a PDF.
            If a correct value is supplied, the file can be viewed. To allow anyone to view the PDF file, do not set a value in the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> (leave it as an empty
            string or <strong>null</strong>).</para>
        <para>The <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> is used to restrict certain rights on the PDF file when loading into a viewer such as Adobe Acrobat. These include disabling printing,
            (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" />), copying text to the clipboard (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.CopyEnabled" />), annotations (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.AnnotationsEnabled" />) and
            editing and re-assembling the PDF file (<see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" />). When encrypting a PDF file with an <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />, you can
            enable or disable any of these rights based on your application needs.</para>
        <para>You cannot supply both a user and owner password in the same PDF file. If both passwords are supplied, then the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> is ignored.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled">
      <summary>
            Gets or sets a value that indicates whether the resulting PDF document has printing owner access rights.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to print the resulting PDF document; otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
        <para>
          <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" /> is ignored unless the value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> is set to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled">
      <summary>
            Gets or sets a value that indicates whether the resulting PDF document has high quality (faithful) printing owner access rights.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to print in high quality (faithful); otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
        <para>
          <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" /> is ignored unless the value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.PrintEnabled" /> is set to <strong>true</strong>.</para>
        <para>High quality printing is not enabled by the RC 40-bit encryption mode. As a result, the value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.HighQualityPrintEnabled" /> is ignored unless the value
            of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EncryptionMode" /> is set to <see cref="T:Leadtools.Pdf.PDFEncryptionMode">PDFEncryptionMode.RC128Bit</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.CopyEnabled">
      <summary>
            Gets or sets a value that indicates whether the resulting PDF document has copy text access rights.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to copy text from the resulting PDF document; otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.CopyEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled">
      <summary>
            Gets or sets a value that indicates whether the resulting PDF document can be edited.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to edit the resulting PDF document; otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
        <para>If the value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> is set to <strong>true</strong>, then <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" /> is considered to be <strong>true</strong> regardless of the
            value set in the property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.AnnotationsEnabled">
      <summary>
            Gets or sets a value that indicates whether annotations and comments can be added to the resulting PDF document.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to add annotations and comments to resulting PDF document; otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AnnotationsEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled">
      <summary>
            Gets or sets a value that indicates whether pages can be added or removed from the resulting PDF document.
            </summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to add or remove pages from the resulting PDF document; otherwise, it is <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" /> is used only when encrypting a PDF file with an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />.</para>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFSecurityOptions.AssemblyEnabled" /> is ignored and considered to be <strong>true</strong> if the value of the <see cref="P:Leadtools.Pdf.PDFSecurityOptions.EditEnabled" /> property is set to
            <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSecurityOptions.EncryptionMode">
      <summary>
            Gets or sets a value that indicates the encryption mode to use when updating or creating a PDF document.
            </summary>
      <value>An <see cref="T:Leadtools.Pdf.PDFEncryptionMode" /> enumeration member that specifies the encryption mode to use when updating or creating a PDF document. The default value is
            <see cref="T:Leadtools.Pdf.PDFEncryptionMode">PDFEncryptionMode.RC40Bit</see>.</value>
      <remarks>
        <para>PDF encryption mode along with the owner password and the different owner access right properties allow creating customized security levels in the resulting PDF document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFFileType">
      <summary>
            Specifies PDF and PS (Postscript) file type and version
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFileType" /> enumeration is used as the return value from <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)">PDFFile.GetPDFFileType</see> method and as the type of the
            <see cref="P:Leadtools.Pdf.PDFDocument.FileType">PDFDocument.FileType</see> property. It determines the type and version of the PDF or PS file.</para>
        <para>
          <strong>Note:</strong> The <see cref="T:Leadtools.Pdf.PDFDocument" /> class can be associate with a PDF only and does not support Postscript files. As a result, the value of
            <see cref="P:Leadtools.Pdf.PDFDocument.FileType">PDFDocument.FileType</see> will only be one of the PDF version values.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)">PDFFile.GetPDFFileType</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.Unknown">
      <summary>(0x00000000)<para>Not a valid PDF or PS (Postscript) file</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF10">
      <summary>(0x00000001)<para>PDF Version 1.0</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF11">
      <summary>(0x00000002)<para>PDF Version 1.1</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF12">
      <summary>(0x00000003)<para>PDF Version 1.2</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF13">
      <summary>(0x00000004)<para>PDF Version 1.3</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF14">
      <summary>(0x00000005)<para>PDF Version 1.4</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF15">
      <summary>(0x00000006)<para>PDF Version 1.5</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF16">
      <summary>(0x00000007)<para>PDF Version 1.6</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.PDF17">
      <summary>(0x00000008)<para>PDF Version 1.7</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.Postscript">
      <summary>(0x0000000A)<para>Postscript file (PS)</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFileType.EncapsulatedPostscript">
      <summary>(0x0000000A)<para>Encapsulated Postscript file (EPS)</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFContentType">
      <summary>
            Specifies PDF content type
            </summary>
      <remarks>
            Used by <see cref="M:Leadtools.Pdf.PDFDocument.GetContentType(System.Int32)">PDFDocument.GetContentType</see> to indicate the PDF content type.
            </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.GetContentType(System.Int32)">PDFDocument.GetContentType</see> and <see cref="T:Leadtools.Pdf.PDFDocument" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFContentType.Text">
      <summary>(0x00000000)PDF contains any content</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFContentType.Image">
      <summary>(0x00000001)Page has an image only, no other content</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFContentType.ImageOverText">
      <summary>(0x00000002)Page has an image over the content</summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFCompatibilityLevel">
      <summary>
            Determines the compatibility (or version) level to use when creating or updating PDF files.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFCompatibilityLevel" /> enumeration member is used as the type for the <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel">PDFFile.CompatibilityLevel</see> property
            and is used to determine the compatibility (or version) level to use when creating or updating PDF files.</para>
        <para>The following methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class will use <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" /> when creating the new or updating the an existing PDF file :</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Linearize(System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFCompatibilityLevelExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_14.pdf")
         ' Check the version of the source file
         Dim fileType As PDFFileType = PDFFile.GetPDFFileType(sourceFileName, True)
         If fileType = PDFFileType.Unknown Then
            Console.WriteLine("Not a valid PDF file")
            Return
         End If

         If fileType = PDFFileType.PDF14 Then
            Console.WriteLine("Is PDF 1.4 already")
            Return
         End If

         ' Not PDF 1.4, convert
         Console.WriteLine("Converting to PDF 1.4")
         Dim pdfFileObj As New PDFFile(sourceFileName)
         pdfFileObj.CompatibilityLevel = PDFCompatibilityLevel.PDF14
         pdfFileObj.Convert(1, -1, destFileName)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFCompatibilityLevelExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_14.pdf");
         // Check the version of the source file
         PDFFileType fileType = PDFFile.GetPDFFileType(sourceFileName, true);
         if (fileType == PDFFileType.Unknown)
         {
            Console.WriteLine("Not a valid PDF file");
            return;
         }

         if (fileType == PDFFileType.PDF14)
         {
            Console.WriteLine("Is PDF 1.4 already");
            return;
         }

         // Not PDF 1.4, convert
         Console.WriteLine("Converting to PDF 1.4");
         PDFFile file = new PDFFile(sourceFileName);
         file.CompatibilityLevel = PDFCompatibilityLevel.PDF14;
         file.Convert(1, -1, destFileName);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFCompatibilityLevel-->
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.Default">
      <summary>(0x00000000)<para>Default (PDF version 1.5)</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.PDF12">
      <summary>(0x00000001)<para>PDF version 1.2</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.PDF13">
      <summary>(0x00000002)<para>PDF version 1.3</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.PDF14">
      <summary>(0x00000003)<para>PDF version 1.4</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.PDFA">
      <summary>(0x00000004)<para>PDF/A</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFCompatibilityLevel.PDF15">
      <summary>(0x00000005)<para>PDF version 1.5</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFFile">
      <summary>
            PDF file features class.  <strong><a href="#PDFCapability">*</a> PDF Capability Required</strong>.
            </summary>
      <keywords>Adobe Document Format|PDF|PDF/A|PDF,Files|PDF,Pages|PDF,Metadata</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFile" /> class allows you to perform the following actions on Adobe Document Format (PDF) and Postscript (PS) files:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Get the PDF or PS version of a file with the <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Determine if a PDF file is encrypted with the <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Get the PDF file properties or metadata (such as title, author, keywords, etc.) with the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Update the properties of any PDF file with the <see cref="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Get the number and size of pages in a PDF file with the <see cref="M:Leadtools.Pdf.PDFFile.GetPageCount" /> method and <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> property</para>
            </description>
          </item>
          <item>
            <description>
              <para>Quickly convert any PDF file to PDF/A while optionally updating its properties with the <see cref="M:Leadtools.Pdf.PDFFile.ConvertToPDFA(System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Linearize (optimize for Web viewing) any PDF file while optionally updating its properties with the <see cref="M:Leadtools.Pdf.PDFFile.Linearize(System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Convert or encrypt any PDF file from any version to another using the <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" /> method.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Convert any Postscript file to PDF with the <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Merge a range or all pages from multiple existing PDF files into a single PDF file with the <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Extract all or range of pages from an existing PDF file with the <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Delete range of pages from an existing PDF file with the <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Insert all or range of pages from an existing PDF file into another using the <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Replace all or range of pages from an existing PDF file into another using the <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>Write bookmarks to an existing PDF files to update its Table of Contents (TOC) with the <see cref="M:Leadtools.Pdf.PDFFile.WriteBookmarks(System.Collections.Generic.IList{Leadtools.Pdf.PDFBookmark},System.String)" /> method</para>
            </description>
          </item>
        </list>
        <para>All the methods described above can set the compatibility level (version) of the created or updated PDF using the <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" /> property, update its
            properties using the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> property or set the security and encryption mode using the <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" /> property.</para>
        <para>To use most of these properties methods, you must construct a <see cref="T:Leadtools.Pdf.PDFFile" /> object with the PDF file and optional password before performing the action.</para>
        <para>The C# and VB PDF File Demo shipped with LEADTOOLS contains a wizard style user interface to perform all the action above on existing PDF and PS files.</para>
        <para>You can also use the <see cref="T:Leadtools.Pdf.PDFDocument" /> class to parse a PDF file and extract its objects such as text (without invoking OCR), images, hyperlinks, internal links and
            bookmarks.</para>
        <para>
          <a id="PDFCapability" name="PDFCapability" style="TEXT-DECORATION:none">*</a>
          <strong>NOTE:</strong> This class is only included as part of our Advanced PDF Plugin. If you receive a PDF Capability Required error, please check that your license supports this plugin before using these classes in an unlocked application.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.Pdf.PDFDocument" />
      <seealso cref="T:Leadtools.Pdf.PDFFilePage" />
      <seealso cref="T:PDF.Topics.ProgrammingWithPDF">Programming with LEADTOOLS PDF</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_14.pdf")
         ' Load the properties of the file
         ShowProperties("Source file", sourceFileName)

         ' Update the properties of the file
         Dim pdfFileObj As New PDFFile(sourceFileName)
         pdfFileObj.DocumentProperties = New PDFDocumentProperties()
         pdfFileObj.DocumentProperties.Author = "Me"
         pdfFileObj.DocumentProperties.Title = "My title"
         pdfFileObj.DocumentProperties.Subject = "My subject"
         pdfFileObj.DocumentProperties.Creator = "My application"
         pdfFileObj.DocumentProperties.Modified = DateTime.Now
         pdfFileObj.SetDocumentProperties(destFileName)

         ' Show the properties of the new file
         ShowProperties("Destination file", destFileName)
      End Sub

      Private Shared Sub ShowProperties(ByVal message As String, ByVal fileName As String)
         Console.WriteLine(message)

         ' Get the properties of the file
         Dim pdfFileObj As New PDFFile(fileName)
         pdfFileObj.Load()

         Dim props As PDFDocumentProperties = pdfFileObj.DocumentProperties

         Console.WriteLine("  Title: {0}", props.Title)
         Console.WriteLine("  Author: {0}", props.Author)
         Console.WriteLine("  Subject: {0}", props.Subject)
         Console.WriteLine("  Keywords: {0}", props.Keywords)
         Console.WriteLine("  Creator: {0}", props.Creator)
         Console.WriteLine("  Producer: {0}", props.Producer)
         Console.WriteLine("  Created: {0}", props.Created)
         Console.WriteLine("  Modified: {0}", props.Modified)
         Console.WriteLine("----------:")
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_14.pdf");
         // Load the properties of the file
         ShowProperties("Source file", sourceFileName);

         // Update the properties of the file
         PDFFile file = new PDFFile(sourceFileName);
         file.DocumentProperties = new PDFDocumentProperties();
         file.DocumentProperties.Author = "Me";
         file.DocumentProperties.Title = "My title";
         file.DocumentProperties.Subject = "My subject";
         file.DocumentProperties.Creator = "My application";
         file.DocumentProperties.Modified = DateTime.Now;
         file.SetDocumentProperties(destFileName);

         // Show the properties of the new file
         ShowProperties("Destination file", destFileName);
      }

      private static void ShowProperties(string message, string fileName)
      {
         Console.WriteLine(message);

         // Get the properties of the file
         PDFFile file = new PDFFile(fileName);
         file.Load();

         PDFDocumentProperties props = file.DocumentProperties;

         Console.WriteLine("  Title: {0}", props.Title);
         Console.WriteLine("  Author: {0}", props.Author);
         Console.WriteLine("  Subject: {0}", props.Subject);
         Console.WriteLine("  Keywords: {0}", props.Keywords);
         Console.WriteLine("  Creator: {0}", props.Creator);
         Console.WriteLine("  Producer: {0}", props.Producer);
         Console.WriteLine("  Created: {0}", props.Created);
         Console.WriteLine("  Modified: {0}", props.Modified);
         Console.WriteLine("----------:");
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)">
      <summary>
            Get the type of a PDF or Postscript file.
            </summary>
      <param name="fileName">The name of the PDF or Postscript file.</param>
      <param name="pdfTypesOnly">
        <strong>true</strong> to only recognize PDF files, Postscript files will not be recognized and <see cref="T:Leadtools.Pdf.PDFFileType">PDFFileType.Unknown</see> will
            be returned when <paramref name="fileName" /> is a PS or EPS file. <strong>false</strong> to recognize PDF and PS files.</param>
      <returns>An <see cref="T:Leadtools.Pdf.PDFFileType" /> enumeration member that determines the type of the file. If the file is not PDF (or Postscript depending on <paramref name="pdfTypesOnly" />),
            then <see cref="T:Leadtools.Pdf.PDFFileType">PDFFileType.Unknown</see> is returned.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method will internally call <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)" /> with <paramref name="pdfTypesOnly" /> set to <strong>true</strong> before loading
            the file properties.</para>
        <para>When loading PDF files, generally you will call <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)" /> first to determine if the file provided by the user is valid PDF. After that, it is
            recommended you call <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> to check if the file is encrypted and ask the user for a password before loading the file.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFCompatibilityLevel" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Pdf.PDFFile" /> object with default parameters.
            </summary>
      <remarks>
        <para>This constructor will initialize the properties of the <see cref="T:Leadtools.Pdf.PDFFile" /> object as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Password" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
        <para>Before using any of the methods and properties of this <see cref="T:Leadtools.Pdf.PDFFile" />, you must set the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and optionally, the <see cref="P:Leadtools.Pdf.PDFFile.Password" />
            property to valid values.</para>
        <para>After you set the file name and optional password, you can call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method to populate the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> and <see cref="P:Leadtools.Pdf.PDFFile.Pages" />
            properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object with the correct values read from the file. Or use any of the other file feature functions supported by this class.</para>
        <para>In certain situation, you may want to associate a <see cref="T:Leadtools.Pdf.PDFFile" /> with a Postscript and not a PDF file, for example, to create a <see cref="T:Leadtools.Pdf.PDFFile" />
            object and call its <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method to convert the Postscript file to PDF.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Pdf.PDFFile" /> object and associates it with the name of a PDF file.
            </summary>
      <param name="fileName">The name of the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" />.</param>
      <remarks>
        <para>This constructor will initialize the properties of the <see cref="T:Leadtools.Pdf.PDFFile" /> object as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be set to <paramref name="fileName" /></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Password" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
        <para>After the file name and optional password are set , call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method to populate the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> and <see cref="P:Leadtools.Pdf.PDFFile.Pages" />
            properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object with the values read from the file.</para>
        <para>In certain situation, you may want to associate a <see cref="T:Leadtools.Pdf.PDFFile" /> with a Postscript and not a PDF file. For example, to create a <see cref="T:Leadtools.Pdf.PDFFile" />
            object and call its <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method to convert the Postscript file to PDF.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Pdf.PDFFile" /> object and associated it with the name of a PDF file and the password used to decrypt it.
            </summary>
      <param name="fileName">The name of the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" />.</param>
      <param name="password">The password associated with the PDF file at <paramref name="fileName" />.</param>
      <remarks>
        <para>This constructor will initialize the properties of the <see cref="T:Leadtools.Pdf.PDFFile" /> object as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be set to <paramref name="fileName" /></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Password" /> will be set to <paramref name="password" /></para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
        <para>After the file name and optional password are set, call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method to populate the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> and <see cref="P:Leadtools.Pdf.PDFFile.Pages" />
            properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object with the values read from the file. </para>
        <para>In certain situation, you may want to associate a <see cref="T:Leadtools.Pdf.PDFFile" /> with a Postscript and not a PDF file. For example, to create a <see cref="T:Leadtools.Pdf.PDFFile" />
            object and call its <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method to convert the Postscript file to PDF.</para>
        <para>PDF files password must be 64 ASCII characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumPasswordLength">PDFDocument.MaximumPasswordLength</see> constant.
            LEADTOOLS will automatically convert the password string to ASCII and truncate if required.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileEncryptedExample()
         Dim pdfFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Encrypted.pdf")
         ' Create an encrypted version of LEAD.pdf
         Dim pdfFileObj As New PDFFile(pdfFileName1)
         pdfFileObj.SecurityOptions = New PDFSecurityOptions()
         pdfFileObj.SecurityOptions.UserPassword = "LEAD"
         pdfFileObj.Convert(1, -1, pdfFileName2)

         ' Now try to open it as a document
         Dim password As String = Nothing

         If PDFFile.IsEncrypted(pdfFileName2) Then
            Console.WriteLine("{0}\nIs encrypted. Enter the password:", pdfFileName2)
            password = Console.ReadLine()
         End If

         ' If the user entered the correct password (LEAD), you can open the file now
         Try
            pdfFileObj = New PDFFile(pdfFileName2, password)
            pdfFileObj.Load()

            Dim props As PDFDocumentProperties = pdfFileObj.DocumentProperties

            Console.WriteLine("  Title: {0}", props.Title)
            Console.WriteLine("  Author: {0}", props.Author)
            Console.WriteLine("  Subject: {0}", props.Subject)
            Console.WriteLine("  Keywords: {0}", props.Keywords)
            Console.WriteLine("  Creator: {0}", props.Creator)
            Console.WriteLine("  Producer: {0}", props.Producer)
            Console.WriteLine("  Created: {0}", props.Created)
            Console.WriteLine("  Modified: {0}", props.Modified)
            Console.WriteLine("----------:")
         Catch ex As Exception
            ' Otherwise, you will get an error that the PDF file is corrupted
            Console.WriteLine(ex.Message)
         End Try
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileEncryptedExample()
      {
         string pdfFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"Encrypted.pdf");
         // Create an encrypted version of LEAD.pdf
         PDFFile file = new PDFFile(pdfFileName1);
         file.SecurityOptions = new PDFSecurityOptions();
         file.SecurityOptions.UserPassword = "LEAD";
         file.Convert(1, -1, pdfFileName2);

         // Now try to open it as a document
         string password = null;

         if (PDFFile.IsEncrypted(pdfFileName2))
         {
            Console.WriteLine("{0}\nIs encrypted. Enter the password:", pdfFileName2);
            password = Console.ReadLine();
         }

         // If the user entered the correct password (LEAD), you can open the file now
         try
         {
            file = new PDFFile(pdfFileName2, password);
            file.Load();

            PDFDocumentProperties props = file.DocumentProperties;

            Console.WriteLine("  Title: {0}", props.Title);
            Console.WriteLine("  Author: {0}", props.Author);
            Console.WriteLine("  Subject: {0}", props.Subject);
            Console.WriteLine("  Keywords: {0}", props.Keywords);
            Console.WriteLine("  Creator: {0}", props.Creator);
            Console.WriteLine("  Producer: {0}", props.Producer);
            Console.WriteLine("  Created: {0}", props.Created);
            Console.WriteLine("  Modified: {0}", props.Modified);
            Console.WriteLine("----------:");
         }
         catch (Exception ex)
         {
            // Otherwise, you will get an error that the PDF file is corrupted
            Console.WriteLine(ex.Message);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile(string, string)-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFFile" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)">
      <summary>
            Gets a value that indicate whether a PDF file is encrypted.
            </summary>
      <param name="fileName">The name of the PDF file.</param>
      <returns>
        <strong>true</strong> if the PDF file is encrypted; otherwise, it is <strong>false</strong>.</returns>
      <remarks>
        <para>This method checks if the PDF file has been encrypted and protected with a password. If this is the case, then you must create a <see cref="T:Leadtools.Pdf.PDFFile" /> object (or set the
            <see cref="P:Leadtools.Pdf.PDFFile.Password" /> property) to the correct file before you can use the other methods of this object.</para>
        <para>To load PDF files, you generally perfrom this:</para>
        <list type="number">
          <item>
            <description>
              <para>Call <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)" /> with <i>pdfTypesOnly</i> set to <strong>true</strong> and check if the return value is not
            <see cref="T:Leadtools.Pdf.PDFFileType">PDFFileType.Unknown</see> meaning a valid PDF file of any version.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Call <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> to check if the file is encrypted (password protected), if so, instruct the user for the password to use
            with this PDF file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Finally construct a <see cref="T:Leadtools.Pdf.PDFFile" /> object with the file name and password (if any) and call its methods.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.GetPageCount">
      <summary>
            Gets the number of pages in this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <returns>A <see cref="T:System.Int32" /> that represents the number of pages in this <see cref="T:Leadtools.Pdf.PDFFile" /> object.</returns>
      <remarks>
        <para>This method will obtain the number of pages in the PDF file set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" />. Since obtaining the number of pages might require decrypting a secured file, the
            value of the password set in <see cref="P:Leadtools.Pdf.PDFFile.Password" /> will be used if the file is encrypted.</para>
        <para>To get the size of each page in a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method which populates the <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection with an <see cref="T:Leadtools.Pdf.PDFFilePage" /> for each page.</para>
        <para>This method is faster than calling <see cref="M:Leadtools.Pdf.PDFFile.Load" /> and using <see cref="P:Leadtools.Pdf.PDFFile.Pages" />.Count since it does not parse the page sizes not load the document properties.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFilePageCountExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         ' Show the number of pages
         Dim pdfFileObj As New PDFFile(pdfFileName)
         Dim pageCount As Integer = pdfFileObj.GetPageCount()
         Console.WriteLine("File has {0} pages", pageCount)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFilePageCountExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         // Show the number of pages
         PDFFile file = new PDFFile(pdfFileName);
         int pageCount = file.GetPageCount();
         Console.WriteLine("File has {0} pages", pageCount);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.GetPageCount-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Load">
      <summary>
            Loads this <see cref="T:Leadtools.Pdf.PDFFile" /> object and populate its pages collection and document properties.
            </summary>
      <remarks>
        <para>This method will load the PDF file set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> (using the password set in <see cref="P:Leadtools.Pdf.PDFFile.Password" /> if the PDF file is secured) and populate the following
            properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> property will contain a list of <see cref="T:Leadtools.Pdf.PDFFilePage" /> for each page in the PDF file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> property will contain the properties of the PDF file.</para>
            </description>
          </item>
        </list>
        <para>This method will fail with an exception if the file in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> is not a valid PDF file. In certain case, you can set the name of a Postscript file in
            <see cref="P:Leadtools.Pdf.PDFFile.FileName" />, for example, before calling the <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method. But you should not call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> in this case.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.ConvertToPDFA(System.String)">
      <summary>
            Convert the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object to PDF/A.
            </summary>
      <keywords>PDF,PDF/A|PDF/A</keywords>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used.</para>
            </description>
          </item>
        </list>
        <para>The following properties are not used by this method:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. You cannot create encrypted PDF/A files</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. Since it is implied a PDF/A version will be generated</para>
            </description>
          </item>
        </list>
        <para>This method allows a quick way to convert a PDF file to PDF/A. To convert a PDF file to any version, use <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileConvertToPDFAExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_pdfa.pdf")
         ' Show the source file type
         Dim fileType As PDFFileType = PDFFile.GetPDFFileType(sourceFileName, True)
         Console.WriteLine("Source file is {0}", fileType)

         Dim pdfFileObj As New PDFFile(sourceFileName)
         pdfFileObj.ConvertToPDFA(destinationFileName)

         ' Show the converted file type, it should be PDF 1.4, and when you open it in
         ' in Adobe Acrobat, it should open as PDF/A
         fileType = PDFFile.GetPDFFileType(destinationFileName, True)
         Console.WriteLine("Destination file is {0}", fileType)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileConvertToPDFAExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_pdfa.pdf");
         // Show the source file type
         PDFFileType fileType = PDFFile.GetPDFFileType(sourceFileName, true);
         Console.WriteLine("Source file is {0}", fileType);

         PDFFile pdfFile = new PDFFile(sourceFileName);
         pdfFile.ConvertToPDFA(destinationFileName);

         // Show the converted file type, it should be PDF 1.4, and when you open it in
         // in Adobe Acrobat, it should open as PDF/A
         fileType = PDFFile.GetPDFFileType(destinationFileName, true);
         Console.WriteLine("Destination file is {0}", fileType);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.ConvertToPDFA-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Linearize(System.String)">
      <summary>
            Convert the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object to a linearized version (optimized for Web viewing)
            </summary>
      <keywords>PDF,Linearized|PDF,Web viewing</keywords>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>A Linearized PDF file is a file that has been organized in a special way to enable efficient incremental access in a network environment, this allows the first page of the PDF
            file to be displayed in a user Web browser before the entire file is downloaded from the Web server.</para>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the PDF to be generated</para>
            </description>
          </item>
        </list>
        <para>The following properties are not used by this method:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. You cannot create encrypted linearized PDF files</para>
            </description>
          </item>
        </list>
        <para>Note: Currently, generating linearized PDF files with PDF/A compatibility level may result in a PDF file that is not compatible with Adobe Preflight.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileLinearizeExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_linearized.pdf")
         Dim pdfFileObj As New PDFFile(sourceFileName)
         pdfFileObj.Linearize(destinationFileName)

         ' Open the destination file in Adobe Acrobat and go to
         ' File/Properties. You should see the "Fast Web View" option as "Yes";
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileLinearizeExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_linearized.pdf");
         PDFFile pdfFile = new PDFFile(sourceFileName);
         pdfFile.Linearize(destinationFileName);

         // Open the destination file in Adobe Acrobat and go to
         // File/Properties. You should see the "Fast Web View" option as "Yes";
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.Linearize-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.SetDocumentProperties(System.String)">
      <summary>
            Updates the properties of the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used.</para>
            </description>
          </item>
        </list>
        <para>The following properties are not used by this method:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. To encrypt a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" /> method</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the PDF to be generated is the same as the original version. To create a PDF file with a different
            version use <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" /> or <see cref="M:Leadtools.Pdf.PDFFile.ConvertToPDFA(System.String)" /></para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)">
      <summary>
            Converts the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object to a different version using optional document properties and security options.
            </summary>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <param name="firstPageNumber">The 1-based number of the first page to be converted. Must be a value greater than or equal to 1.</param>
      <param name="lastPageNumber">The 1-based number of the last page to be converted. Must be a value greater than or equal to <paramref name="firstPageNumber" /> and less than or equal
            to the total number of pages in the file. Use the special value of -1 to represents "last page in the file".</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method can be used to work on all or portion of the pages in a PDF file. To use all the pages of a document, pass 1 and -1 for <paramref name="firstPageNumber" /> and
            <paramref name="lastPageNumber" />.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileConvertExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_15.pdf")
         Dim pdfFileObj As New PDFFile(sourceFileName)
         pdfFileObj.DocumentProperties = New PDFDocumentProperties()
         Dim properties As PDFDocumentProperties = pdfFileObj.DocumentProperties
         properties.Author = "Me"
         properties.Creator = "My Application"
         properties.Title = "My Document"
         properties.Producer = "LEAD"
         properties.Subject = "My Subject"
         properties.Keywords = "Keyword1 Keyword2"
         properties.Created = DateTime.Now
         properties.Modified = DateTime.Now

         pdfFileObj.CompatibilityLevel = PDFCompatibilityLevel.PDF15

         pdfFileObj.Convert(1, -1, destinationFileName)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileConvertExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_15.pdf");
         PDFFile pdfFile = new PDFFile(sourceFileName);
         pdfFile.DocumentProperties = new PDFDocumentProperties();
         PDFDocumentProperties properties = pdfFile.DocumentProperties;
         properties.Author = "Me";
         properties.Creator = "My Application";
         properties.Title = "My Document";
         properties.Producer = "LEAD";
         properties.Subject = "My Subject";
         properties.Keywords = "Keyword1 Keyword2";
         properties.Created = DateTime.Now;
         properties.Modified = DateTime.Now;

         pdfFile.CompatibilityLevel = PDFCompatibilityLevel.PDF15;

         pdfFile.Convert(1, -1, destinationFileName);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.Convert-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)">
      <summary>
            Converts (distill) the Postscript file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object to PDF.
            </summary>
      <param name="distillerOptions">The options to use when creating the PDF file. Cannot be <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic).</param>
      <param name="destinationFileName">Name of the destination PDF file to be created. Cannot be <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic).</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid Postscript file. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> constructurs or set the file name and directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> property. Since the file is Postscript,
            you must not call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object to create the destination PDF file:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileDistillExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.ps")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_ps.pdf")
         ' Set the source PS file
         Dim file As New PDFFile(sourceFileName)

         ' Setup the distill options, eBook optimized
         Dim options As New PDFDistillerOptions()
         options.AutoRotatePageMode = PDFDistillerAutoRotatePageMode.PageByPage
         options.OutputMode = PDFDistillerOutputMode.EBookOptimized
         file.Distill(options, destinationFileName)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileDistillExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.ps");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_ps.pdf");
         // Set the source PS file
         PDFFile file = new PDFFile(sourceFileName);

         // Setup the distill options, eBook optimized
         PDFDistillerOptions options = new PDFDistillerOptions();
         options.AutoRotatePageMode = PDFDistillerAutoRotatePageMode.PageByPage;
         options.OutputMode = PDFDistillerOutputMode.EBookOptimized;
         file.Distill(options, destinationFileName);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.Distill-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.MergeWith(System.String[],System.String)">
      <summary>
            Merges this PDF file with one or more PDF existing files.
            </summary>
      <param name="sourceFileNames">An array of <see cref="T:System.String" />'s that contain the names of the source files to merge with this <see cref="T:Leadtools.Pdf.PDFFile" />. Must not
            be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) and must contain at least one item and a maximum of 100 items.</param>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>This method will merge two or more existing PDF files to form a new file containing all the pages from the pre-existing PDF files. The new file will be constructed as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The pages of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object will be first</para>
            </description>
          </item>
          <item>
            <description>
              <para>The pages of the first file in the <paramref name="sourceFileNames" /> list will be appeneded next</para>
            </description>
          </item>
          <item>
            <description>
              <para>The pages of the second file in the <paramref name="sourceFileNames" /> list will be appeneded next</para>
            </description>
          </item>
          <item>
            <description>
              <para>And so on for each item in <paramref name="sourceFileNames" />.</para>
            </description>
          </item>
        </list>
        <para>All the PDF files must pre-exist on disk and must be valid. The <paramref name="sourceFileNames" /> parameter must not contain any <strong>null</strong> items.</para>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
        <para>If one or more of the files to merge with are encrypted with a password, then use the
            <see cref="M:Leadtools.Pdf.PDFFile.MergeWith(Leadtools.Pdf.PDFFile[],System.String)">MergeWith(PDFFile[] sourceFiles, string destinationFileName)</see> version of this method that allow you to pass a list
            of <see cref="T:Leadtools.Pdf.PDFFile" /> objects instead of just the file names, and thus, associated each input item with an optional password.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileMergeWithExample()
         Dim sourceFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "File1.pdf")
         Dim sourceFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "File2.pdf")
         Dim sourceFileName3 As String = Path.Combine(LEAD_VARS.ImagesDir, "File3.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Merged.pdf")

         ' Merge 1 with (2, 3) and form destination
         Dim pdfFileObj As New PDFFile(sourceFileName1)
         pdfFileObj.MergeWith(New String() {sourceFileName2, sourceFileName2}, destinationFileName)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileMergeWithExample()
      {
         string sourceFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"File1.pdf");
         string sourceFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"File2.pdf");
         string sourceFileName3 = Path.Combine(LEAD_VARS.ImagesDir, @"File3.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"Merged.pdf");

         // Merge 1 with (2, 3) and form destination
         PDFFile pdfFile = new PDFFile(sourceFileName1);
         pdfFile.MergeWith(new string[] { sourceFileName2, sourceFileName2 }, destinationFileName);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.MergeWith-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.MergeWith(Leadtools.Pdf.PDFFile[],System.String)">
      <summary>
            Merges this PDF file with one or more PDF existing files with optional passwords for each file.
            </summary>
      <param name="sourceFiles">An array of <see cref="T:Leadtools.Pdf.PDFFile" /> objects that contain the names and optional password of the source files to merge with this <see cref="T:Leadtools.Pdf.PDFFile" />. Must not
            be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) and must contain at least one item and a maximum of 100 items.</param>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>This method will merge two or more existing PDF files to form a new file containing all the pages from the pre-existing PDF files. The new file will be constructed as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The pages of the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object will be first</para>
            </description>
          </item>
          <item>
            <description>
              <para>The pages of the first file in the <paramref name="sourceFiles" /> list will be appended next</para>
            </description>
          </item>
          <item>
            <description>
              <para>The pages of the second file in the <paramref name="sourceFiles" /> list will be appended next</para>
            </description>
          </item>
          <item>
            <description>
              <para>And so on for each item in <paramref name="sourceFiles" />.</para>
            </description>
          </item>
        </list>
        <para>All the PDF files must pre-exist on disk and must be valid. The <paramref name="sourceFiles" /> parameter must not contain any <strong>null</strong> items.</para>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructors or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
        <para>If one or more of the files to merge with are encrypted with a password, then set the required password in its <see cref="T:Leadtools.Pdf.PDFFile" /> item in the
            <paramref name="sourceFiles" /> array. If none of the files are encrypted, then you can use the
            <see cref="M:Leadtools.Pdf.PDFFile.MergeWith(System.String[],System.String)">MergeWith(string[] sourceFileNames, string destinationFileName)</see> version of this method that allow you to pass a list
            of <see cref="T:System.String" />'s for the file names instead.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFFile.MergeWith(System.String[],System.String)">MergeWidth</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)">
      <summary>
            Extract one or more pages from the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <param name="firstPageNumber">The 1-based number of the first page to be extracted. Must be a value greater than or equal to 1.</param>
      <param name="lastPageNumber">The 1-based number of the last page to be extracted. Must be a value greater than or equal to <paramref name="firstPageNumber" /> and less than or equal
            to the total number of pages in the file. Use the special value of -1 to represents "last page in the file".</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileExtractPagesExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         ' Get the number of pages in the source file
         Dim pdfFileObj As New PDFFile(sourceFileName)
         Dim pageCount As Integer = pdfFileObj.GetPageCount()
         Console.WriteLine("Pages in source file : {0}", pageCount)

         ' Extract each page to an individual PDF file
         For i As Integer = 1 To pageCount
            Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("LEAD_Page{0}.pdf", i))
            pdfFileObj.ExtractPages(i, i, destinationFileName)
         Next
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileExtractPagesExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         // Get the number of pages in the source file
         PDFFile file = new PDFFile(sourceFileName);
         int pageCount = file.GetPageCount();
         Console.WriteLine("Pages in source file : {0}", pageCount);

         // Extract each page to an individual PDF file
         for (int i = 1; i &lt;= pageCount; i++)
         {
            string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("LEAD_Page{0}.pdf", i));
            file.ExtractPages(i, i, destinationFileName);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.ExtractPages-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)">
      <summary>
            Delete one or more pages from the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <param name="firstPageNumber">The 1-based number of the first page to be deleted. Must be a value greater than or equal to 1.</param>
      <param name="lastPageNumber">The 1-based number of the last page to be deleted. Must be a value greater than or equal to <paramref name="firstPageNumber" /> and less than or equal
            to the total number of pages in the file. Use the special value of -1 to represents "last page in the file".</param>
      <remarks>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object with a valid PDF file and optional password. You can achieve this by either using the
            <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileDeletePagesExample()
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_DeletePages.pdf")
         ' Get the number of pages in the source file
         Dim pdfFileObj As New PDFFile(sourceFileName)
         Dim pageCount As Integer = pdfFileObj.GetPageCount()
         Console.WriteLine("Pages in source file : {0}", pageCount)

         ' If the file has more than 1 page, delete all except the first page
         If pageCount &gt; 1 Then
            ' -1 is (up to and including last page)
            pdfFileObj.DeletePages(2, -1, destinationFileName)
         End If
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileDeletePagesExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_DeletePages.pdf");
         // Get the number of pages in the source file
         PDFFile file = new PDFFile(sourceFileName);
         int pageCount = file.GetPageCount();
         Console.WriteLine("Pages in source file : {0}", pageCount);

         // If the file has more than 1 page, delete all except the first page
         if (pageCount &gt; 1)
         {
            // -1 is (up to and including last page)
            file.DeletePages(2, -1, destinationFileName);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.DeletePages-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)">
      <summary>
            Inserts one or more pages from an existing PDF file into the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <param name="insertPageNumber">The 1-based number of the insertion point in this <see cref="T:Leadtools.Pdf.PDFFile" /> object. Use a value of 0 to insert the new pages at the beginning of the
            file and -1 to insert the new pages at the end of the file (append).</param>
      <param name="sourceFile">A <see cref="T:Leadtools.Pdf.PDFFile" /> object associated with an existing PDF file that contain the source file to insert the pages from.</param>
      <param name="firstPageNumber">The 1-based number of the first page in the source file to be inserted. Must be a value greater than or equal to 1.</param>
      <param name="lastPageNumber">The 1-based number of the last page in the source file to be inserted. Must be a value greater than or equal to
            <paramref name="firstPageNumber" /> and less than or equal to the total number of pages in the file. Use the special value of -1 to represent "last page in the file".</param>
      <remarks>
        <para>Both files in this <see cref="T:Leadtools.Pdf.PDFFile" /> (the destination) and <paramref name="sourceFile" /> must exist and contain valid PDF files prior to calling this method.</para>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object and the source <see cref="T:Leadtools.Pdf.PDFFile" /> with a valid PDF file and optional password. You can achieve this
            by either using the <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileInsertPagesFromExample()
         Dim originalFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PDFSegmentation.pdf")
         Dim destinationFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "InsertAtBeginning.pdf")
         Dim destinationFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "InsertInMiddle.pdf")
         Dim destinationFileName3 As String = Path.Combine(LEAD_VARS.ImagesDir, "InsertAtEnd.pdf")

         ' Make a copy of the original file
         File.Copy(originalFileName, destinationFileName1, True)
         File.SetAttributes(destinationFileName1, FileAttributes.Normal)
         File.Copy(originalFileName, destinationFileName2, True)
         File.SetAttributes(destinationFileName2, FileAttributes.Normal)
         File.Copy(originalFileName, destinationFileName3, True)
         File.SetAttributes(destinationFileName3, FileAttributes.Normal)

         ' This is the source PDF file to insert into the destination
         Dim sourceFile As New PDFFile(sourceFileName)

         ' Insert sourceFileName2 into destinationFileName1 at the beginning
         Dim pdfFileObj As New PDFFile(destinationFileName1)
         pdfFileObj.InsertPagesFrom(0, sourceFile, 1, -1)

         ' Insert sourceFileName2 into destinationFileName2 in the middle
         pdfFileObj = New PDFFile(destinationFileName2)
         pdfFileObj.InsertPagesFrom(pdfFileObj.GetPageCount() \ 2, sourceFile, 1, -1)

         ' Insert sourceFileName2 into destinationFileName3 at the end (append)
         pdfFileObj = New PDFFile(destinationFileName3)
         pdfFileObj.InsertPagesFrom(-1, sourceFile, 1, -1)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileInsertPagesFromExample()
      {
         string originalFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"PDFSegmentation.pdf");
         string destinationFileName1 = Path.Combine(LEAD_VARS.ImagesDir, @"InsertAtBeginning.pdf");
         string destinationFileName2 = Path.Combine(LEAD_VARS.ImagesDir, @"InsertInMiddle.pdf");
         string destinationFileName3 = Path.Combine(LEAD_VARS.ImagesDir, @"InsertAtEnd.pdf");

         // Make a copy of the original file
         File.Copy(originalFileName, destinationFileName1, true);
         File.SetAttributes(destinationFileName1, FileAttributes.Normal);
         File.Copy(originalFileName, destinationFileName2, true);
         File.SetAttributes(destinationFileName2, FileAttributes.Normal);
         File.Copy(originalFileName, destinationFileName3, true);
         File.SetAttributes(destinationFileName3, FileAttributes.Normal);

         // This is the source PDF file to insert into the destination
         PDFFile sourceFile = new PDFFile(sourceFileName);

         // Insert sourceFileName2 into destinationFileName1 at the beginning
         PDFFile file = new PDFFile(destinationFileName1);
         file.InsertPagesFrom(0, sourceFile, 1, -1);

         // Insert sourceFileName2 into destinationFileName2 in the middle
         file = new PDFFile(destinationFileName2);
         file.InsertPagesFrom(file.GetPageCount() / 2, sourceFile, 1, -1);

         // Insert sourceFileName2 into destinationFileName3 at the end (append)
         file = new PDFFile(destinationFileName3);
         file.InsertPagesFrom(-1, sourceFile, 1, -1);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.InsertPagesFrom-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)">
      <summary>
            Replaces one or more pages from an existing PDF file into the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <param name="replacePageNumber">The 1-based number of the replacement point in this <see cref="T:Leadtools.Pdf.PDFFile" /> object. Must be greater than or equal to 1 and less than or equal to the
            total number of pages in <paramref name="sourceFile" />.</param>
      <param name="sourceFile">A <see cref="T:Leadtools.Pdf.PDFFile" /> object associated with an existing PDF file that contain the source file to replace the pages from.</param>
      <param name="firstPageNumber">The 1-based number of the first page in the source file to be replaced. Must be a value greater than or equal to 1.</param>
      <param name="lastPageNumber">The 1-based number of the last page in the source file to be replaced. Must be a value greater than or equal to
            <paramref name="firstPageNumber" /> and less than or equal to the total number of pages in the file. Use the special value of -1 to represent "last page in the file".</param>
      <remarks>
        <para>Both files in this <see cref="T:Leadtools.Pdf.PDFFile" /> (the destination) and <paramref name="sourceFile" /> must exist and contain valid PDF files prior to calling this method.</para>
        <para>To use this method, associate this <see cref="T:Leadtools.Pdf.PDFFile" /> object and the source <see cref="T:Leadtools.Pdf.PDFFile" /> with a valid PDF file and optional password. You can achieve this
            by either using the <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see> constructurs or set the
            file name and optional password directly into the <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> and <see cref="P:Leadtools.Pdf.PDFFile.Password" /> properties. You do not need to call <see cref="M:Leadtools.Pdf.PDFFile.Load" /> before using this method.</para>
        <para>This method will use the following properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" />. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then default
            properties will be used</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" />. If the value of this property is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the destination
            file will be encrypted using the properties of this property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the result file
            will not be encrypted</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" />. The version of the generated PDF file</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFileReplacePagesFromExample()
         Dim originalFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim sourceFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PDFSegmentation.pdf")
         Dim destinationFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_ReplacePage2.pdf")

         ' Make a copy of the original file
         File.Copy(originalFileName, destinationFileName, True)
         File.SetAttributes(destinationFileName, FileAttributes.Normal)

         ' This is the source PDF file to replace with
         Dim sourceFile As New PDFFile(sourceFileName)

         ' Replace page number 2 in destination file with source file
         Dim pdfFileObj As New PDFFile(destinationFileName)
         pdfFileObj.ReplacePagesFrom(2, sourceFile, 1, 1)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileReplacePagesFromExample()
      {
         string originalFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"PDFSegmentation.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_ReplacePage2.pdf");

         // Make a copy of the original file
         File.Copy(originalFileName, destinationFileName, true);
         File.SetAttributes(destinationFileName, FileAttributes.Normal);

         // This is the source PDF file to replace with
         PDFFile sourceFile = new PDFFile(sourceFileName);

         // Replace page number 2 in destination file with source file
         PDFFile file = new PDFFile(destinationFileName);
         file.ReplacePagesFrom(2, sourceFile, 1, 1);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.ReplacePagesFrom-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.WriteBookmarks(System.Collections.Generic.IList{Leadtools.Pdf.PDFBookmark},System.String)">
      <summary>
            Writes bookmarks to an existing PDF file.
            </summary>
      <param name="bookmarks">A list of <see cref="T:Leadtools.Pdf.PDFBookmark" /> objects to write.</param>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
            Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <remarks>
        <para>You can use this method to create a Table of Contents (TOC) for a PDF file. For more information, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
        <para>You can create a bookmarks list from scratch and populate with the bookmarks required, or you can read the bookmarks of a PDF file using
            <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see> with the
            <see cref="T:Leadtools.Pdf.PDFParseDocumentStructureOptions">PDFParseDocumentStructureOptions.Bookmarks</see> included in the <i>options</i> parameter. Modify these bookmarks then
            write them back to the file.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.WriteAnnotations(System.Collections.Generic.IList{Leadtools.Pdf.PDFAnnotation},System.String)">
      <summary>
             Writes annotations to an existing PDF file.
             </summary>
      <param name="annotations">A list of <see cref="T:Leadtools.Pdf.PDFAnnotation" /> objects to write.</param>
      <param name="destinationFileName">Name of the destination PDF file to be created. If the value of this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual
             Basic) then the file name set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> will be updated.</param>
      <noremarks />
      <example>
        <para>For an example on retrieving annotations of PDF pages, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.Optimize(System.String)">
      <summary>
            Optimizes this <see cref="T:Leadtools.Pdf.PDFFile" /> object and writes the PDF data into the specified file.
            </summary>
      <param name="destinationFileName">The filename of the new, optimized PDF file.</param>
      <remarks>For more information refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</remarks>
      <example>
        <!--PDFOptimizerOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.SetInitialView(System.String)">
      <summary>
            Updates the initial view options of the specified PDF file.
            </summary>
      <remarks>Set the <see cref="P:Leadtools.Pdf.PDFFile.InitialViewOptions" /> property before calling this method to set the initial view options to be saved into the <strong>destinationFileName</strong>.</remarks>
      <param name="destinationFileName">The filename of the PDF file to be updated.</param>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.DrawDocument(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Renders the specified page of the PDF file.
            </summary>
      <param name="hdc">The HDC where the PDF file should be rendered.</param>
      <param name="resolution">The resolution at which to render the PDF file.</param>
      <param name="pageNumber">The page number to be rendered.</param>
      <noremarks />
      <example>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFileDrawDocumentExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_DrawDocument.tif");
         PDFFile pdfFile = new PDFFile(sourceFileName);

         // Create an image
         using (RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 2550, 3300, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0))
         {
            // Make the image white
            FillCommand fillCmd = new FillCommand(RasterColor.White);
            fillCmd.Run(image);

            // Get a handle to the drawing surface
            IntPtr hDC = RasterImagePainter.CreateLeadDC(image);

            // Render the image data
            pdfFile.DrawDocument(hDC, 300, 1);

            // Save the image in another format
            using (RasterCodecs codecs = new RasterCodecs())
               codecs.Save(image, destinationFileName, RasterImageFormat.TifLzw, image.BitsPerPixel);

            // Clean up
            RasterImagePainter.DeleteLeadDC(hDC);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.DrawDocument-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFFile.ConvertToSvg(System.String,System.Int32,System.Int32)">
      <summary>
            Converts the specified page of this <see cref="T:Leadtools.Pdf.PDFFile" /> to SVG.
            </summary>
      <param name="destinationFileName">The filename for the output SVG file.</param>
      <param name="resolution">The resolution for the output file.</param>
      <param name="pageNumber">The page number to convert.</param>
      <noremarks />
      <example>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      /// &lt;para&gt;This example will convert a PDF to SVG for display in the Document Viewer.&lt;/para&gt;
      [TestMethod]
      public void PDFFileConvertToSvgExample()
      {
         string sourceFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string destinationFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_ConvertToSvg.svg");
         PDFFile pdfFile = new PDFFile(sourceFileName);
         pdfFile.ConvertToSvg(destinationFileName, 300, 1);

         ImageViewer imageViewer = new Leadtools.Controls.ImageViewer();
         imageViewer.ImageBackgroundColor = System.Drawing.Color.White;
         imageViewer.Location = new System.Drawing.Point(10, 10);
         imageViewer.Dock = DockStyle.Fill;

         using (RasterCodecs codecs = new RasterCodecs())
         {
            CodecsLoadSvgOptions options = new CodecsLoadSvgOptions();
            imageViewer.SvgDocument = codecs.LoadSvg(destinationFileName, 1, null) as SvgDocument;
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.ConvertToSvg-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.FileName">
      <summary>
            Gets or sets the name of the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" />.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the name of the file associated with this <see cref="T:Leadtools.Pdf.PDFFile" />. The default value is a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFile" /> object must be associated with an existing PDF file on disk when performing any of the actions using the various methods of the class. You can also
            set the file name when creating the object using the <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String)">PDFFile(string fileName)</see> or <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see>
            constructors.</para>
        <para>When you change the file name of a <see cref="T:Leadtools.Pdf.PDFFile" /> object, all the previous data is invalidated and returned to the default values as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> collection will be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
        <para>Some PDF files are encrypted and require a password before they can be used. For these kind of files, you must set the <see cref="P:Leadtools.Pdf.PDFFile.Password" /> property to the correct value
            before using the other properties and methods of the object. Use <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> to determine if the PDF file is encrypted and requires a password.</para>
        <para>After you set the file name and optional password, you can call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method to populate the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> and <see cref="P:Leadtools.Pdf.PDFFile.Pages" />
            properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object with the correct values read from the file.</para>
        <para>In certain situation, you may want to associate a <see cref="T:Leadtools.Pdf.PDFFile" /> with a Postscript and not a PDF file, for example, to create a <see cref="T:Leadtools.Pdf.PDFFile" />
            object and call its <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" /> method to convert the Postscript file to PDF.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.Password">
      <summary>
            Gets or sets the password associated with this <see cref="T:Leadtools.Pdf.PDFFile" />.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the password to use when loading this <see cref="T:Leadtools.Pdf.PDFFile" /> object if the file is encrypted.</value>
      <remarks>
        <para>You can also set the password directly when creating a <see cref="T:Leadtools.Pdf.PDFFile" /> object using the <see cref="M:Leadtools.Pdf.PDFFile.#ctor(System.String,System.String)">PDFFile(string fileName, string password)</see>
            constructor.</para>
        <para>Some PDF files are encrypted and require a password before they can be used. For these kind of files, you must set the <see cref="P:Leadtools.Pdf.PDFFile.Password" /> property to the correct value
            before using the other properties and methods of the object. Use <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> to determine if the PDF file is encrypted and requires a password.</para>
        <para>After you set the file name and optional password, you can call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method to populate the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> and <see cref="P:Leadtools.Pdf.PDFFile.Pages" />
            properties of this <see cref="T:Leadtools.Pdf.PDFFile" /> object with the correct values read from the file. Or use any of the other file feature functions supported by this class.</para>
        <para>PDF files password must be 64 (defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumPasswordLength">PDFDocument.MaximumPasswordLength</see> constant) or less ASCII characters.
            LEADTOOLS will automatically truncate and convert to the ASCII the password string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.DocumentProperties">
      <summary>
            Gets or sets the PDF document properties or metadata used with this <see cref="T:Leadtools.Pdf.PDFFile" /> object.
            </summary>
      <keywords>PDF,Properties|PDF,Metadata</keywords>
      <value>A <see cref="T:Leadtools.Pdf.PDFDocumentProperties" /> that contain the PDF document properties or metadata used with this <see cref="T:Leadtools.Pdf.PDFFile" />. The default value is <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>This property is used by this <see cref="T:Leadtools.Pdf.PDFFile" /> in multiple ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>This property will be populated with the PDF document file name property set in <see cref="P:Leadtools.Pdf.PDFFile.FileName" /> after you call the
            <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method.</para>
            </description>
          </item>
          <item>
            <description>
              <para>You can also use the loaded properties, modify it or completely set your own object and then use it to update the properties of the 
            created or updated PDF by the <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />, <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />, <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />,
            <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" /> and <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" /> methods</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFFile" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.SecurityOptions">
      <summary>
            Gets or sets the PDF security and encryption options to use when updating or creating a PDF file.
            </summary>
      <keywords>PDF,Security|PDF,Encryption</keywords>
      <value>A <see cref="T:Leadtools.Pdf.PDFSecurityOptions" /> that contain the PDF security and encryption options to use when this <see cref="T:Leadtools.Pdf.PDFFile" /> is used to update or create a PDF file.
            Default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The following methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class will use the secutity options set in <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions">.SecurityOptions</see> when updating or
            creating a PDF file: </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
        </list>
        <para>If the value of <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the <see cref="T:Leadtools.Pdf.PDFFile" /> will not encrypt the
            result PDF file.</para>
        <para>There are two different ways to protect a PDF file with a password:</para>
        <list type="bullet">
          <item>
            <description>
              <para>By using a user password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" />. In this mode, external viewers such as Adobe Acrobat will ask the user for the same password
            when opening the file for viewing. If the correct password is supplied, then all operations and rights are granted.</para>
            </description>
          </item>
          <item>
            <description>
              <para>By using an owner password set in <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" />. In this mode, external viewers such as Adobe Acrobat will ask the user for the same password
            when opening the file for viewing. If the correct password is supplied, the editor will check the various access rights properties to allow or disallow certain operations on the PDF
            file such as printing or editing.</para>
            </description>
          </item>
        </list>
        <para>You cannot use both <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" /> and <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> in the same PDF file. If both values are set, then the <see cref="T:Leadtools.Pdf.PDFFile" /> object will
            use <see cref="P:Leadtools.Pdf.PDFSecurityOptions.OwnerPassword" /> and ignore <see cref="P:Leadtools.Pdf.PDFSecurityOptions.UserPassword" />.</para>
        <para>Similar to the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> property, the value of <see cref="P:Leadtools.Pdf.PDFFile.SecurityOptions" /> will not be modified when a PDF file is loaded in this
            object using the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method.</para>
        <para>To check if a PDF file is encrypted and requires a password to view or modify, use the <see cref="M:Leadtools.Pdf.PDFFile.IsEncrypted(System.String)" /> method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSecurityOptions" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.CompatibilityLevel">
      <summary>
            Gets or sets the PDF compatibility level (version) to use when updating or creating a PDF file.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFCompatibilityLevel" /> that specifies the PDF compatibility level (version) to use when this <see cref="T:Leadtools.Pdf.PDFFile" /> is used to update or create a PDF file.
            Default value is <see cref="T:Leadtools.Pdf.PDFCompatibilityLevel">PDFCompatibilityLevel.Default</see>.</value>
      <remarks>
        <para>The following methods of the <see cref="T:Leadtools.Pdf.PDFFile" /> class will use the level set in <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" /> when updating or
            creating a PDF file: </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Linearize(System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Convert(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.Distill(Leadtools.Pdf.PDFDistillerOptions,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.MergeWith" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ExtractPages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.DeletePages(System.Int32,System.Int32,System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.InsertPagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Pdf.PDFFile.ReplacePagesFrom(System.Int32,Leadtools.Pdf.PDFFile,System.Int32,System.Int32)" />
            </description>
          </item>
        </list>
        <para>Similar to the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> property, the value of <see cref="P:Leadtools.Pdf.PDFFile.CompatibilityLevel" /> will not be modified when a PDF file is loaded in this
            object using the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method. To get the version of a PDF file, use the <see cref="M:Leadtools.Pdf.PDFFile.GetPDFFileType(System.String,System.Boolean)">PDFFile.GetPDFFileType</see> method.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFCompatibilityLevel" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.Pages">
      <summary>
            Gets the collection of pages in this PDF file.
            </summary>
      <value>A collection of <see cref="T:Leadtools.Pdf.PDFFilePage" /> objects that contain an item for each page in the PDF file associated with this <see cref="T:Leadtools.Pdf.PDFFile" /> object. Default
            value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Pdf.PDFFile.Pages" /> will be populated with the pages collection after you set a valid PDF file name (and optional password) in this <see cref="T:Leadtools.Pdf.PDFFile" />
            object and call the <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method.</para>
        <para>Each item in the collection corresponds to a page in the PDF file. So item at index 0 is the properties of page 1, item at index 1 is the properties of page 2
            and so on.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure contains the width and height  of the page in PDF units which is read from the PDF file directly. PDF units are
            in 1/72 of an inch units, so a page size of 612 by 792 corresponds to 8.5 by 11 inches (612/72 by 792/72). For more information, refer to
            <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>You can get the total number of pages in a PDF file with two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Pdf.PDFFile.Load" /> to load the PDF file into the <see cref="T:Leadtools.Pdf.PDFFile" /> object and use <see cref="P:Leadtools.Pdf.PDFFile.Pages">PDFFile.Pages.Count</see>. Using the
            <see cref="M:Leadtools.Pdf.PDFFile.Load" /> method will also read the size of each page as well as populating the <see cref="P:Leadtools.Pdf.PDFFile.DocumentProperties" /> with the properties of the file.</para>
            </description>
          </item>
          <item>
            <description>
              <para>A faster way is to call <see cref="M:Leadtools.Pdf.PDFFile.GetPageCount" /> directly. This method is faster than calling <see cref="M:Leadtools.Pdf.PDFFile.Load" /> since it will not parse
            the page sizes nor the document properties. Just set the file name and optional password and call the method.</para>
            </description>
          </item>
        </list>
        <para>The values of the <see cref="T:Leadtools.Pdf.PDFFilePage" /> structure are used as read only by the <see cref="T:Leadtools.Pdf.PDFFile" /> object. The toolkit will only return objects of type
            <see cref="T:Leadtools.Pdf.PDFFilePage" /> from the PDF document and does not use them anymore.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFFilePage" /> does not contain any information about a PDF page other than its size. To get the objects, bookmarks, images, links of a page, use the
            <see cref="T:Leadtools.Pdf.PDFDocument" /> class and its collection of <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> items.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms

      &lt;TestMethod()&gt; _
      Public Sub PDFFilePagesExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         ' Load the file
         Dim pdfFileObj As New PDFFile(pdfFileName)
         pdfFileObj.Load()

         ' Show the pages
         Console.WriteLine("File has {0} pages", pdfFileObj.Pages.Count)
         For Each page As PDFFilePage In pdfFileObj.Pages
            Console.WriteLine("Page {0} size is {1} by {2} units", page.PageNumber, page.Width, page.Height)
         Next
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Drawing;
      using Leadtools.ImageProcessing;
      using Leadtools.Pdf;
      using Leadtools.Svg;
      using Leadtools.WinForms;

      [TestMethod]
      public void PDFFilePagesExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         // Load the file
         PDFFile file = new PDFFile(pdfFileName);
         file.Load();

         // Show the pages
         Console.WriteLine("File has {0} pages", file.Pages.Count);
         foreach (PDFFilePage page in file.Pages)
         {
            Console.WriteLine("Page {0} size is {1} by {2} units", page.PageNumber, page.Width, page.Height);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFFile.Pages-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.InitialViewOptions">
      <summary>
            Sets the <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> that this <see cref="T:Leadtools.Pdf.PDFFile" /> object uses when creating new PDF files.
            </summary>
      <value>The <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> to use.</value>
      <remarks>
            Set this property to an instance of <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> before calling <see cref="M:Leadtools.Pdf.PDFFile.SetInitialView(System.String)" /> in order to set the initial view options that External viewers should use when opening the PDF file.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFile.OptimizerOptions">
      <summary>
            Sets the <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" /> that this <see cref="T:Leadtools.Pdf.PDFFile" /> object uses when <see cref="M:Leadtools.Pdf.PDFFile.Optimize(System.String)" /> is called to create a new, optimized PDF file.
            </summary>
      <value>The <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" /> to use.</value>
      <remarks>
            Set this property to an instance of <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> before calling <see cref="M:Leadtools.Pdf.PDFFile.Optimize(System.String)" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="T:Leadtools.Pdf.PDFEllipseAnnotation">
      <summary>
            Contains information for a PDF ellipse annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Ellipse Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" /> class contains information for a single PDF ellipse annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFEllipseAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim ellipse As PDFEllipseAnnotation = New PDFEllipseAnnotation()
         Dim pen As PDFPen = New PDFPen()
         Dim brush As PDFBrush = New PDFBrush()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         ' Assign brush properties
         ' Create green solid brush
         brush.BrushStyle = PDFBrush.Solid
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green)

         ellipse.Pen = pen
         ellipse.Brush = brush
         ellipse.Center = New PDFPoint(300, 300)
         ellipse.HorizontalRadius = 100
         ellipse.VerticalRadius = 50
         Annotations.Add(ellipse)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFEllipseAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFEllipseAnnotation ellipse = new PDFEllipseAnnotation();
         PDFPen pen = new PDFPen();
         PDFBrush brush = new PDFBrush();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         // Assign brush properties
         // Create green solid brush
         brush.BrushStyle = PDFBrush.Solid;
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green);

         ellipse.Pen = pen;
         ellipse.Brush = brush;
         ellipse.Center = new PDFPoint(300, 300);
         ellipse.HorizontalRadius = 100;
         ellipse.VerticalRadius = 50;
         Annotations.Add(ellipse);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFEllipseAnnotation-->
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFAnnotation">
      <summary>
            Contains information for a single PDF annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> class contains the properties of an annotation object such as the annotation type, title and object bounds.</para>
        <para>This class is used with the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>As the type for the <see cref="P:Leadtools.Pdf.PDFAnnotation.AnnotationType">PDFAnnotation.AnnotationType</see> property. This property will be populated
            when an annotation object is created</para>
            </description>
          </item>
          <item>
            <description>
              <para>As the type for the <see cref="P:Leadtools.Pdf.PDFAnnotation.Content">PDFAnnotation.Content</see> property. this property contains a string content for
            a PDF annotation object.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.Content">
      <summary>
            Gets or sets a string that represents the content of annotation object. This is optional.
            </summary>
      <value>A <see cref="T:System.String" /> that contains content of annotation object. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.Modified">
      <summary>
            Gets or sets the date and time for last modification of annotation object.
            </summary>
      <value>A <see cref="T:System.DateTime" /> that contains the date and time of the last modification of this annotation object.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.ObjectBounds">
      <summary>
            Gets the source bounds of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that represents the source location and size of this annotation in PDF units (1/72 of an inch and bottom left). The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFRect" /> is the hot spot area of the annotation. This property is updated internally in conjunction with assigning values to an annotation object</para>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.PageNumber">
      <summary>
            Gets or sets page number for this annotation.
            </summary>
      <value>An <see cref="T:System.Int32" /> that specifies the number of the page that this annotation will be added to. The default value is 1.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.Title">
      <summary>
            Gets or sets the a string that represents the title of this PDF annotation.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the title of the PDF annotation. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.Subject">
      <summary>
            Gets or sets the a string that represents the subject of this PDF annotation.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the subject of the PDF annotation. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>PDF property item strings must be 126 characters or less. This is defined by the <see cref="F:Leadtools.Pdf.PDFDocument.MaximumStringLength">PDFDocument.MaximumStringLength</see> constant.
            LEADTOOLS will automatically truncate the string if required.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFAnnotation.Transparency">
      <summary>
            Gets or sets transparency for this annotation.
            </summary>
      <value>A <see cref="T:System.Double" /> that specifies the transparency of this annotation. The default value is 1.</value>
      <remarks>
        <para>A value of 0 means that the annotation is fully transparent, 1 means that the annotation is fully opaque</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFEllipseAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFEllipseAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" /></summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.Brush">
      <summary>
            Gets or sets the brush of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFBrush" /> that represents brush properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.Center">
      <summary>
            Gets or sets the center point of this ellipse annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the center point, in PDF units (1/72 of an inch from the bottom-left), of the ellipse annotation. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.HorizontalRadius">
      <summary>
            Gets or sets the horizontal radius of this ellipse annotation.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the horizontal radius, in PDF units (1/72 of an inch from the bottom-left), of the ellipse annotation. The default value is
            0 <see cref="T:System.Double" />.</value>
      <noremarks />
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.Pen">
      <summary>
            Gets or sets the pen of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents the pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFEllipseAnnotation.VerticalRadius">
      <summary>
            Gets or sets the vertical radius of this ellipse annotation.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the horizontal radius, in PDF units (1/72 of an inch from the bottom-left), of the ellipse annotation. The default value is
            0 <see cref="T:System.Double" />.</value>
      <noremarks />
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFEllipseAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFHighlightAnnotation">
      <summary>
            Contains information for PDF highlight annotations.
            </summary>
      <keywords>PDF|Annotation|Annotations|Highlight Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /> class contains information for one or more PDF highlight annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFHighlightAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim highlight As PDFHighlightAnnotation = New PDFHighlightAnnotation()

         ' Add highlight points
         highlight.Points.Add(New PDFPoint(100, 100))
         highlight.Points.Add(New PDFPoint(100, 200))
         highlight.Points.Add(New PDFPoint(200, 200))
         highlight.Points.Add(New PDFPoint(200, 100))

         highlight.Color = RasterColor.FromKnownColor(RasterKnownColor.YellowGreen)
         Annotations.Add(highlight)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFHighlightAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFHighlightAnnotation highlight = new PDFHighlightAnnotation();

         // Add highlight points
         highlight.Points.Add(new PDFPoint(100, 100));
         highlight.Points.Add(new PDFPoint(100, 200));
         highlight.Points.Add(new PDFPoint(200, 200));
         highlight.Points.Add(new PDFPoint(200, 100));

         highlight.Color = RasterColor.FromKnownColor(RasterKnownColor.YellowGreen);
         Annotations.Add(highlight);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFHighlightAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFHighlightAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFHighlightAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHighlightAnnotation.AnnotationType">
      <summary>
            Gets the type of the annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHighlightAnnotation.Color">
      <summary>
            Gets or sets the color of the highlight annotations.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> object that represents the color of the highlight annotations. The default value is an empty <see cref="T:Leadtools.RasterColor" /> object.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHighlightAnnotation.Points">
      <summary>
            Gets a list of points for the highlight annotations.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structures that contain the list of points, in PDF units (1/72 of an inch from the bottom-left), of the highlight annotations.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch and starting at the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
        <para>The number of points should be multiple of four, each four points represent a single highlight annotation object</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHighlightAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFLineAnnotation">
      <summary>
            Contains information for a PDF line annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Line Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFLineAnnotation" /> class contains information for a single PDF line annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFLineAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim line As PDFLineAnnotation = New PDFLineAnnotation()
         Dim pen As PDFPen = New PDFPen()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         line.Pen = pen
         line.StartPoint = New PDFPoint(100, 100)
         line.EndPoint = New PDFPoint(500, 300)
         Annotations.Add(line)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFLineAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFLineAnnotation line = new PDFLineAnnotation();
         PDFPen pen = new PDFPen();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         line.Pen = pen;
         line.StartPoint = new PDFPoint(100, 100);
         line.EndPoint = new PDFPoint(500, 300);
         Annotations.Add(line);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFLineAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFLineAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFLineAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" /></para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFLineAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFLineAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFLineAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFLineAnnotation.EndPoint">
      <summary>
            Gets or sets the end point of this line annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the end point, in PDF units (1/72 of an inch from the bottom-left), of the line annotation. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFLineAnnotation.Pen">
      <summary>
            Gets or sets the pen of this line annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFLineAnnotation.StartPoint">
      <summary>
            Gets or sets the start point of this line annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the start point, in PDF units (1/72 of an inch from the bottom-left), of the line annotation. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFLineAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFNoteAnnotation">
      <summary>
            Contains information for a PDF note annotation.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" /> class contains information of a single PDF note annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFNoteAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim note As PDFNoteAnnotation = New PDFNoteAnnotation()

         ' Add an opened yellow note
         note.Point = New PDFPoint(200, 200)
         note.Color = RasterColor.FromKnownColor(RasterKnownColor.Yellow)
         note.Open = True
         ' Set note type as new paragraph note
         note.Type = note.NewParagraph
         Annotations.Add(note)

         ' Add non-opened blue note
         note.Point = New PDFPoint(350, 500)
         note.Color = RasterColor.FromKnownColor(RasterKnownColor.Blue)
         note.Open = False
         Annotations.Add(note)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFNoteAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFNoteAnnotation note = new PDFNoteAnnotation();

         // Add an opened yellow note
         note.Point = new PDFPoint(200, 200);
         note.Color = RasterColor.FromKnownColor(RasterKnownColor.Yellow);
         note.Open = true;
         // Set note type as new paragraph note
         note.Type = (int) note.AnnotationType;

         Annotations.Add(note);

         // Add non-opened blue note
         note.Point = new PDFPoint(350, 500);
         note.Color = RasterColor.FromKnownColor(RasterKnownColor.Blue);
         note.Open = false;
         Annotations.Add(note);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFNoteAnnotation-->
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Note">
      <summary>
        <para>Note icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Comment">
      <summary>
        <para>Comment icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Key">
      <summary>
        <para>Key icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Help">
      <summary>
        <para>Help icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Insert">
      <summary>
        <para>Insert icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.Paragraph">
      <summary>
        <para>Paragraph icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFNoteAnnotation.NewParagraph">
      <summary>
        <para>New paragraph icon</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFNoteAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFNoteAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFNoteAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFNoteAnnotation.Color">
      <summary>
            Gets or sets the color of this note annotation.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure that represents the color of the note annotation. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFNoteAnnotation.Open">
      <summary>
            Gets or sets a value that indicates whether this note annotation is opened or not.
            </summary>
      <value>
        <strong>true</strong> if the note pop up window is opened; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFNoteAnnotation.Point">
      <summary>
            Gets or sets the position of this note annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the position, in PDF units (1/72 of an inch from the bottom-left), of the note annotation. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFNoteAnnotation.Type">
      <summary>
            Gets or sets the type of this note annotation object.
            </summary>
      <value>A value that specifies the icon type of note annotation object associated with this <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFNoteAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFPencilAnnotation">
      <summary>
            Contains information for a PDF pencil annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Pencil Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" /> class contains information of a single PDF pencil annotation. </para>
        <para>The pencil annotation is a set of points the control the curve path connected by smooth lines. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFPencilAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim pencil As PDFPencilAnnotation = New PDFPencilAnnotation()
         Dim points As List(Of PDFPoint) = New List(Of PDFPoint)()
         Dim pen As PDFPen = New PDFPen()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         pencil.Pen = pen
         pencil.Points.Add(New PDFPoint(250, 400))
         pencil.Points.Add(New PDFPoint(300, 350))
         pencil.Points.Add(New PDFPoint(300, 200))
         pencil.Points.Add(New PDFPoint(300, 100))
         pencil.Points.Add(New PDFPoint(250, 150))
         pencil.Points.Add(New PDFPoint(100, 100))

         Annotations.Add(pencil)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFPencilAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFPencilAnnotation pencil = new PDFPencilAnnotation();
         List&lt;PDFPoint&gt; points = new List&lt;PDFPoint&gt;();
         PDFPen pen = new PDFPen();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         pencil.Pen = pen;
         pencil.Points.Add(new PDFPoint(250, 400));
         pencil.Points.Add(new PDFPoint(300, 350));
         pencil.Points.Add(new PDFPoint(300, 200));
         pencil.Points.Add(new PDFPoint(300, 100));
         pencil.Points.Add(new PDFPoint(250, 150));
         pencil.Points.Add(new PDFPoint(100, 100));

         Annotations.Add(pencil);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFPencilAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPencilAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPencilAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPencilAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPencilAnnotation.Pen">
      <summary>
            Gets or sets the pen of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents the pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPencilAnnotation.Points">
      <summary>
            Gets the list of points for this pencil annotation.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structures that contain the list of points, in PDF units (1/72 of an inch and bottom-left), of the polyline annotation.</value>
      <remarks>
        <para> You can create point list from scratch by adding points to the list. The points control the curve path to be created. 
            When creating an annotation pencil, a set of points connected as straight lines will be created and saved in the PDF document instead of given original points.
            The position is in PDF units (1/72 of an inch and bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPencilAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFPolygonAnnotation">
      <summary>
            Contains information for a PDF polygon annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Polygon Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" /> class contains information of a single PDF polygon annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFPolygonAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim polygon As PDFPolygonAnnotation = New PDFPolygonAnnotation()
         Dim points As List(Of PDFPoint) = New List(Of PDFPoint)()
         Dim pen As PDFPen = New PDFPen()
         Dim brush As PDFBrush = New PDFBrush()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         ' Assign brush properties
         ' Create green solid brush
         brush.BrushStyle = PDFBrush.Solid
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green)

         polygon.Pen = pen
         polygon.Brush = brush
         polygon.Points.Add(New PDFPoint(100, 100))
         polygon.Points.Add(New PDFPoint(200, 100))
         polygon.Points.Add(New PDFPoint(300, 200))
         polygon.Points.Add(New PDFPoint(300, 100))
         polygon.Points.Add(New PDFPoint(250, 150))
         polygon.Points.Add(New PDFPoint(100, 100))

         Annotations.Add(polygon)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFPolygonAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFPolygonAnnotation polygon = new PDFPolygonAnnotation();
         List&lt;PDFPoint&gt; points = new List&lt;PDFPoint&gt;();
         PDFPen pen = new PDFPen();
         PDFBrush brush = new PDFBrush();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         // Assign brush properties
         // Create green solid brush
         brush.BrushStyle = PDFBrush.Solid;
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green);

         polygon.Pen = pen;
         polygon.Brush = brush;
         polygon.Points.Add(new PDFPoint(100, 100));
         polygon.Points.Add(new PDFPoint(200, 100));
         polygon.Points.Add(new PDFPoint(300, 200));
         polygon.Points.Add(new PDFPoint(300, 100));
         polygon.Points.Add(new PDFPoint(250, 150));
         polygon.Points.Add(new PDFPoint(100, 100));

         Annotations.Add(polygon);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFPolygonAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPolygonAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPolygonAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolygonAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolygonAnnotation.Brush">
      <summary>
            Gets or sets the brush of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFBrush" /> that represents brush properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolygonAnnotation.Pen">
      <summary>
            Gets or sets the pen of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolygonAnnotation.Points">
      <summary>
            Gets the list of points for this polygon annotation.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> sturctures that contain the list of points, in PDF units (1/72 of an inch from the bottom-left), of the polygon annotation.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolygonAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFPolylineAnnotation">
      <summary>
            Contains information of a PDF polyline annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Polyline Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" /> class contains information of a single PDF polyline annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFPolylineAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim polyline As PDFPolylineAnnotation = New PDFPolylineAnnotation()
         Dim points As List(Of PDFPoint) = New List(Of PDFPoint)()
         Dim pen As PDFPen = New PDFPen()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         polyline.Pen = pen
         polyline.Points.Add(New PDFPoint(100, 100))
         polyline.Points.Add(New PDFPoint(200, 100))
         polyline.Points.Add(New PDFPoint(300, 200))
         polyline.Points.Add(New PDFPoint(300, 100))
         polyline.Points.Add(New PDFPoint(250, 150))
         polyline.Points.Add(New PDFPoint(100, 100))

         Annotations.Add(polyline)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFPolylineAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFPolylineAnnotation polyline = new PDFPolylineAnnotation();
         List&lt;PDFPoint&gt; points = new List&lt;PDFPoint&gt;();
         PDFPen pen = new PDFPen();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         polyline.Pen = pen;
         polyline.Points.Add(new PDFPoint(100, 100));
         polyline.Points.Add(new PDFPoint(200, 100));
         polyline.Points.Add(new PDFPoint(300, 200));
         polyline.Points.Add(new PDFPoint(300, 100));
         polyline.Points.Add(new PDFPoint(250, 150));
         polyline.Points.Add(new PDFPoint(100, 100));

         Annotations.Add(polyline);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFPolylineAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPolylineAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFPolylineAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolylineAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolylineAnnotation.Pen">
      <summary>
            Gets or sets the pen of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPolylineAnnotation.Points">
      <summary>
            Gets the list of points for this polyline annotation.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structures that contain the list of points, in PDF units (1/72 of an inch from the bottom-left), of the polyline annotation.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). To go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFPolylineAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFRectangleAnnotation">
      <summary>
            Contains information of a PDF rectangle annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Rectangle Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" /> class contains information of a single PDF rectangle annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFRectangleAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim rectangle As PDFRectangleAnnotation = New PDFRectangleAnnotation()
         Dim pen As PDFPen = New PDFPen()
         Dim brush As PDFBrush = New PDFBrush()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         ' Assign brush properties
         ' Create green solid brush
         brush.BrushStyle = PDFBrush.Solid
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green)

         rectangle.Pen = pen
         rectangle.Brush = brush
         rectangle.Bounds = New PDFRect(100, 300, 400, 200)
         rectangle.Transparency = 1
         Annotations.Add(rectangle)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFRectangleAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFRectangleAnnotation rectangle = new PDFRectangleAnnotation();
         PDFPen pen = new PDFPen();
         PDFBrush brush = new PDFBrush();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         // Assign brush properties
         // Create green solid brush
         brush.BrushStyle = PDFBrush.Solid;
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green);

         rectangle.Pen = pen;
         rectangle.Brush = brush;
         rectangle.Bounds = new PDFRect(100, 300, 400, 200);
         rectangle.Transparency = 1;
         Annotations.Add(rectangle);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFRectangleAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFRectangleAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFRectangleAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFRectangleAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFRectangleAnnotation.Bounds">
      <summary>
            Gets or sets the source bounds of rectangle annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that represents the source location and size of rectangle annotation in PDF units (1/72 of an inch and bottom left). The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFRectangleAnnotation.Brush">
      <summary>
            Gets or sets the brush of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFBrush" /> that represents brush properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFRectangleAnnotation.Pen">
      <summary>
            Gets or sets the pen of this annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents pen properties for this annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFSquigglyAnnotation">
      <summary>
            Contains information for PDF squiggly annotations.
            </summary>
      <keywords>PDF|Annotation|AnnotationsSquiggle Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" /> class contains information of one or more PDF squiggly annotations, the squiggly annotation
            is a zigzag line drawn according to its bounding rectangle.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFSquigglyAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim squiggly As PDFSquigglyAnnotation = New PDFSquigglyAnnotation()

         ' Add squiggly points
         squiggly.Points.Add(New PDFPoint(60, 200))
         squiggly.Points.Add(New PDFPoint(180, 200))
         squiggly.Points.Add(New PDFPoint(180, 250))
         squiggly.Points.Add(New PDFPoint(60, 250))

         squiggly.Color = RasterColor.FromKnownColor(RasterKnownColor.Orange)
         Annotations.Add(squiggly)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFSquigglyAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFSquigglyAnnotation squiggly = new PDFSquigglyAnnotation();

         // Add squiggly points
         squiggly.Points.Add(new PDFPoint(60, 200));
         squiggly.Points.Add(new PDFPoint(180, 200));
         squiggly.Points.Add(new PDFPoint(180, 250));
         squiggly.Points.Add(new PDFPoint(60, 250));

         squiggly.Color = RasterColor.FromKnownColor(RasterKnownColor.Orange);
         Annotations.Add(squiggly);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFSquigglyAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFSquigglyAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFSquigglyAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSquigglyAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSquigglyAnnotation.Color">
      <summary>
            Gets or sets the color of the squiggly annotations.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the squiggly annotation. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFSquigglyAnnotation.Points">
      <summary>
            Gets the list of points for the squiggly annotations.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structure that contains the list of points, in PDF units (1/72 of an inch from the bottom-left), of the squiggly annotation.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
        <para>The number of points should be multiple of four, each four points represent the bounding rectangle of a single squiggly annotation object.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFSquigglyAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFStrikeoutAnnotation">
      <summary>
            Contains information for PDF strikeout annotations.
            </summary>
      <keywords>PDF|Annotation|Annotations|Strikeout</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" /> class contains information of one or more PDF strikeout annotations. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFStrikeoutAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim strikeout As PDFStrikeoutAnnotation = New PDFStrikeoutAnnotation()

         ' Add strikeout points
         strikeout.Points.Add(New PDFPoint(20, 40))
         strikeout.Points.Add(New PDFPoint(50, 40))
         strikeout.Points.Add(New PDFPoint(50, 20))
         strikeout.Points.Add(New PDFPoint(20, 20))

         strikeout.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         Annotations.Add(strikeout)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFStrikeoutAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFStrikeoutAnnotation strikeout = new PDFStrikeoutAnnotation();

         // Add strikeout points
         strikeout.Points.Add(new PDFPoint(20, 40));
         strikeout.Points.Add(new PDFPoint(50, 40));
         strikeout.Points.Add(new PDFPoint(50, 20));
         strikeout.Points.Add(new PDFPoint(20, 20));

         strikeout.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         Annotations.Add(strikeout);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFStrikeoutAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFStrikeoutAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFStrikeoutAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFStrikeoutAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFStrikeoutAnnotation.Color">
      <summary>
            Gets or sets the color of the strikeout annotations.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the strikeout annotations. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFStrikeoutAnnotation.Points">
      <summary>
            Gets the list of points for strikeout annotations.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structure that contains the list of points, in PDF units (1/72 of an inch from the bottom-left), of the strikeout annotation.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
        <para>The number of points should be multiple of four, each four points represent a single strikeout annotation object.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFStrikeoutAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFTextJustification">
      <summary>
            Specifies the text justification.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFTextAnnotation.Justification" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFTextJustification.Left">
      <summary>(0x00000000)<para>Left aligned text</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFTextJustification.Center">
      <summary>(0x00000001)<para>Center aligned text</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFTextJustification.Right">
      <summary>(0x00000002)<para>Right aligned text</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFTextAnnotation">
      <summary>
            Contains information of a PDF text annotation.
            </summary>
      <keywords>PDF|Annotation|Annotations|Text Annotation</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFTextAnnotation" /> class contains information of a single PDF text annotation. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFTextAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim text As PDFTextAnnotation = New PDFTextAnnotation()
         Dim pen As PDFPen = New PDFPen()
         Dim brush As PDFBrush = New PDFBrush()

         ' Assign pen properties
         ' Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         pen.PenStyle = PDFPen.Dashed
         pen.Width = 2

         ' Assign brush properties
         ' Create green solid brush
         brush.BrushStyle = PDFBrush.Solid
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green)

         text.FramePen = pen
         text.FrameBrush = brush
         text.FontHeight = 30
         text.Color = RasterColor.FromKnownColor(RasterKnownColor.Magenta)
         text.FontName = "Arial"
         text.Content = "This is annotation text"
         text.Justification = PDFTextJustification.Left
         text.FrameBounds = New PDFRect(200, 500, 500, 300)
         Annotations.Add(text)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFTextAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFTextAnnotation text = new PDFTextAnnotation();
         PDFPen pen = new PDFPen();
         PDFBrush brush = new PDFBrush();

         // Assign pen properties
         // Create dashed red pen with width of 2
         pen.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         pen.PenStyle = PDFPen.Dashed;
         pen.Width = 2;

         // Assign brush properties
         // Create green solid brush
         brush.BrushStyle = PDFBrush.Solid;
         brush.Color = RasterColor.FromKnownColor(RasterKnownColor.Green);

         text.FramePen = pen;
         text.FrameBrush = brush;
         text.FontHeight = 30;
         text.Color = RasterColor.FromKnownColor(RasterKnownColor.Magenta);
         text.FontName = "Arial";
         text.Content = "This is annotation text";
         text.Justification = PDFTextJustification.Left;
         text.FrameBounds = new PDFRect(200, 500, 500, 300);
         Annotations.Add(text);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFTextAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFTextAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFTextAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFTextAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFTextAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Bold">
      <summary>
            Gets or sets a value that indicates whether the text has a bold font or not.
            </summary>
      <value>
        <strong>true</strong> the text has a bold font; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Color">
      <summary>
            Gets or sets the color of text annotation.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of text annotation. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.FontHeight">
      <summary>
            Gets or sets the font height in PDF units.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the font height in PDF units (1/72 of an inch and bottom left). The default value is 0.</value>
      <remarks>
        <para>This value contains the height of this PDF text annotation in PDF units (1/72 of an inch and bottom left). You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> method to convert the value to a pixels or inches and then to points if required. Here is an example:</para>
        <para>
          <pre>
            <code inline="true">
            // Get the font height in PDF units, which 1/72 of an inch, i.e. in points
            double fontHeightPoints = pdfObject.TextProperties.FontHeight;
            // Convert to inches: 
            double fontHeightInches1 = fontHeightPoints / 72.0;
            // Or use PDFDocumentPage.ConvertPoint to convert to inches:
            PDFPoint pt = new PDFPoint(0, fontHeightPoints);
            double fontHeightInches2 = pdfDocumentPage.ConvertPoint(PDFCoordinateType.Pdf, PDFCoordinateType.Inch, pt).Y;
            // And pixels:
            double fontHeightPixels = pdfDocumentPage.ConvertPoint(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, pt).Y;
            </code>
          </pre>
        </para>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.FontName">
      <summary>
            Gets or sets the true type face name of this font.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the face name of this font. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The face name of a font can be any true type font name. If this value is an empty, the Arial font will be used as default font.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.FrameBounds">
      <summary>
            Gets or sets the source bounds of text annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that represents the source location and size of bounding rectangle for text annotation in PDF units (1/72 of an inch and bottom left). The default value is an empty a <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.FrameBrush">
      <summary>
            Gets or sets the brush for the bounding rectangle of text annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFBrush" /> that represents brush properties for the bounding rectangle of text annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.FramePen">
      <summary>
            Gets or sets the pen for the bounding rectangle of text annotation.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents pen properties for the bounding rectangle of text annotation.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Italic">
      <summary>
            Gets or sets a value that indicates whether the annotation text has an italic font or not.
            </summary>
      <value>
        <strong>true</strong> the text has italic font; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Strikeout">
      <summary>
            Gets or sets a value that indicates whether the annotation text has a strikeout or not.
            </summary>
      <value>
        <strong>true</strong> the annotation text has a strikeout; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Underline">
      <summary>
            Gets or sets a value that indicates whether the annotation text is underlined or not.
            </summary>
      <value>
        <strong>true</strong> the annotation text is underlined; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextAnnotation.Justification">
      <summary>
            Gets or sets the justification of this text annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFTextJustification" /> enumeration member that specifies the alignment of text annotation object associated with this <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFTextAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFUnderlineAnnotation">
      <summary>
            Contains information for PDF underline annotations.
            </summary>
      <keywords>PDF|Annotation|Annotations|Underline</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" /> class contains information of one or more PDF underline annotations. </para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFUnderlineAnnotationExample()
         Dim pdfSrcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pdfDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_Annotations.pdf")
         Dim pdfFile As PDFFile = New PDFFile(pdfSrcFileName)
         Dim Annotations As List(Of PDFAnnotation) = New List(Of PDFAnnotation)()
         Dim underline As PDFUnderlineAnnotation = New PDFUnderlineAnnotation()

         ' Add underline points
         underline.Points.Add(New PDFPoint(100, 100))
         underline.Points.Add(New PDFPoint(100, 200))
         underline.Points.Add(New PDFPoint(200, 200))
         underline.Points.Add(New PDFPoint(200, 100))

         underline.Color = RasterColor.FromKnownColor(RasterKnownColor.Black)
         Annotations.Add(underline)

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName)
      End Sub


      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFUnderlineAnnotationExample()
      {
         string pdfSrcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pdfDestFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_Annotations.pdf");
         PDFFile pdfFile = new PDFFile(pdfSrcFileName);
         List&lt;PDFAnnotation&gt; Annotations = new List&lt;PDFAnnotation&gt;();
         PDFUnderlineAnnotation underline = new PDFUnderlineAnnotation();

         // Add underline points
         underline.Points.Add(new PDFPoint(100, 100));
         underline.Points.Add(new PDFPoint(100, 200));
         underline.Points.Add(new PDFPoint(200, 200));
         underline.Points.Add(new PDFPoint(200, 100));

         underline.Color = RasterColor.FromKnownColor(RasterKnownColor.Black);
         Annotations.Add(underline);

         pdfFile.WriteAnnotations(Annotations, pdfDestFileName);
      }


      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFUnderlineAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFUnderlineAnnotation.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" /> object with default values.
            </summary>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFUnderlineAnnotation.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFAnnotation" /> this method creates, cast as an object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFUnderlineAnnotation.AnnotationType">
      <summary>
            Gets the type of this annotation object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration member that specifies the type of annotation object associated with this <see cref="T:Leadtools.Pdf.PDFAnnotation" /></value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFUnderlineAnnotation.Color">
      <summary>
            Gets or sets the color of the underline annotations.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure that represents the color of the underline annotations. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFUnderlineAnnotation.Points">
      <summary>
            Gets the list of points for the underline annotations.
            </summary>
      <value>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Leadtools.Pdf.PDFPoint" /> structures that contain the list of points, in PDF units (1/72 of an inch from the bottom-left), of the underline annotations.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch from the bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
        <para>The number of points should be multiple of four, each four points represent a single underline annotation object</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFUnderlineAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFAnnotationType">
      <summary>
            Specifies the type of PDF annotation
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFAnnotationType" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFAnnotation.AnnotationType" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFAnnotation" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Note">
      <summary>(0x00000000)<para>Note annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Text">
      <summary>(0x00000001)<para>Text annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Line">
      <summary>(0x00000002)<para>Line annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Rectangle">
      <summary>(0x00000003)<para>Rectangle annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Ellipse">
      <summary>(0x00000004)<para>Ellipse annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Polyline">
      <summary>(0x00000005)<para>Polyline annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Polygon">
      <summary>(0x00000006)<para>Polygon annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Pencil">
      <summary>(0x00000007)<para>Pencil annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Highlight">
      <summary>(0x00000008)<para>Highlight annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Underline">
      <summary>(0x00000009)<para>Underline annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Strikeout">
      <summary>(0x0000000A)<para>Strikeout annotation</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAnnotationType.Squiggly">
      <summary>(0x0000000B)<para>Squiggly annotation</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFBookmarkStyle">
      <summary>
            Specifies the PDF bookmark style
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFBookmarkStyle" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFBookmark.BookmarkStyle" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFBookmarkStyle.Plain">
      <summary>(0x00000000)<para>No style. Use regular font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFBookmarkStyle.Italic">
      <summary>(0x00000003)<para>Use italic font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFBookmarkStyle.Bold">
      <summary>(0x00000002)<para>Use bold font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFBookmarkStyle.BoldItalic">
      <summary>(0x00000003)<para>Use bold italic font</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFBookmark">
      <summary>
            Provides information about PDF bookmark properties
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFBookmark" /> structure contains the properties of a single PDF bookmark. The collection of the bookmarks in a PDF file consititute the Table of Contents (TOC) of
            the document. Typically, external viewers will load all the bookmarks of a document and generate this TOC. The viewer then allows the user to click on any entry in the TOC and perform the action
            of the bookmark.</para>
        <para>The bookmarks and internal links of a PDF have a document (global) scope and are not part of any page. As a result, to read the bookmarks of a document, use the
            <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see> method. Then access the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks">PDFDocument.Bookmarks</see> and
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks">PDFDocument.InternalLinks</see> collections.</para>
        <para>The bookmark has the following properties to represent its appearance:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.Title" />: This is the text to appear to the user</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.Level" />: The bookmark identation level. Level 0 is a root bookmark, level 1 is a child of the previous bookmark, level 2 is a child of the child and so on.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.BookmarkStyle" />: The bookmark font style</para>
            </description>
          </item>
        </list>
        <para>The action of a bookmark consists of the followng:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.TargetPageNumber" />: This the 1-based integer to go to. External viewers should scroll to this page when this bookmark is activated</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.TargetPosition" />: The position in PDF units (1/72 of an inch and bottom-left) of the target page to scroll to. External viewers
            should scroll to this position when the bookmark is activated</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.TargetZoomPercent" />: The zoom percent (100 equals to no zoom) of the target page. External viewers should zoom to this value when
            the bookmark is activated</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFBookmark.TargetPageFitType" />: The page fit type of the target page. External viewers should set the page view properties based on this value when this
            bookmark is activated</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.Title">
      <summary>
            Gets or sets the title of the bookmark.
            </summary>
      <value>A <see cref="T:System.String" /> that represents the title of the bookmark. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFBookmark.Title" /> is the text that will appear to the user. External viewers use this value to draw the bookmark in the Table of Contents (TOC). The font style of the
            bookmark is stored in the <see cref="P:Leadtools.Pdf.PDFBookmark.BookmarkStyle" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.Level">
      <summary>
            Gets or sets the identation level of the bookmark.
            </summary>
      <value>A <see cref="T:System.Int32" /> that represents the 0-based identation level of the bookmark. The default value is 0.</value>
      <remarks>
        <para>The bookmark identation level. Level 0 is a root bookmark, level 1 is a child of the previous bookmark, level 2 is a child of the child and so on:</para>
        <para>
          <pre>
            <code inline="true">
            Level 0
            ..Level 1
            ....Level 2
            ......Level 3
            ..Level 1
            ..Level 1
            Level 0
            </code>
          </pre>
        </para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.TargetPageNumber">
      <summary>
            Gets or sets the number of the target page of this bookmark.
            </summary>
      <value>The 1-based number of the target page of this bookmark. The default value is 0.</value>
      <remarks>
        <para>External viewers should scroll to this page when this bookmark is activated.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.TargetPosition">
      <summary>
            Gets or sets the position in target page to scroll to of this bookmark.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the position in PDF units (1/72 of an inch and bottom-left) of the target page to scroll to. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch and bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.TargetZoomPercent">
      <summary>
            Gets or sets the target page zoom percentage of this bookmark.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the zoom percent (100 equals to no zoom) of the target page. The default value is 0.</value>
      <remarks>
        <para>The zoom percent (100 equals to no zoom) of the target page. External viewers should zoom to this value when the bookmark is activated. A value of 0 means do not
            change the current zoom percentage when going to the target page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.TargetPageFitType">
      <summary>
            Gets or sets the target page fit type of this bookmark.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPageFitType" /> enumeration member that specifies the target page fit type of this bookmark. The default value is <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see>.</value>
      <remarks>
        <para>The page fit type of the target page. External viewers should set the page view properties based on this value when this bookmark is activated. A value of
            <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see> means do not change the page fit mode when going to the target page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBookmark.BookmarkStyle">
      <summary>
            Gets or sets the style of this bookmark.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFBookmarkStyle" /> enumeration that specifies the style of the bookmark. The default value is <see cref="T:Leadtools.Pdf.PDFBookmarkStyle">PDFBookmarkStyle.Plain</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFBookmark.Title" /> is the text that will appear to the user. External viewers use this value to draw the bookmark in the Table of Contents (TOC). The font style of the
            bookmark is stored in the <see cref="P:Leadtools.Pdf.PDFBookmark.BookmarkStyle" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFFontStyle">
      <summary>
            Specifies the styles of a PDF font.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFontStyle" /> is used as the type for the <see cref="P:Leadtools.Pdf.PDFFont.FontStyle">PDFFont.FontStyle</see> property.</para>
        <para>The members of <see cref="T:Leadtools.Pdf.PDFFontStyle" /> can be OR'ed together.</para>
        <para>You can read the fonts of a PDF page through the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method with the
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> as part of the <i>options</i> parameter. When this method returns, each <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> parsed will
            have the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection populated with the fonts of the page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFFontStyle.Normal">
      <summary>(0x00000000)<para>Normal font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFontStyle.Bold">
      <summary>(0x00000001)<para>Bold font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFontStyle.Italic">
      <summary>(0x00000002)<para>Italic font</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFFontStyle.Underline">
      <summary>(0x00000004)<para>Underline font</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFFont">
      <summary>
            Contains the information for a PDF font.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFFont" /> structure is used as the type for the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection.</para>
        <para>You can read the fonts of a PDF page through the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see> method with the
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Fonts</see> as part of the <i>options</i> parameter. When this method returns, each <see cref="T:Leadtools.Pdf.PDFDocumentPage" /> parsed will
            have the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see> collection populated with the fonts of the page.</para>
        <para>The font height and width is not stored in the <see cref="T:Leadtools.Pdf.PDFFont" /> structure, instead it is stored in the <see cref="P:Leadtools.Pdf.PDFObject.TextProperties">PDFObject.TextProperties</see>
            property of the text or hyperlink object.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFont.FaceName">
      <summary>
            Gets or sets the face name of this font.
            </summary>
      <value>A <see cref="T:System.String" /> that contain the face name of this font. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The face name of a font can be "Arial" or "Times New Roman". If this value is an empty string after being read from a PDF file, then the font is embedded inside the
            file.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFFont.FontStyle">
      <summary>
            Gets or sets the style of this font.
            </summary>
      <value>One or more <see cref="T:Leadtools.Pdf.PDFFontStyle" /> enumeration member values that specify the style of this font. The default value is <see cref="T:Leadtools.Pdf.PDFFontStyle">PDFFontStyle.Normal</see>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFHyperlink">
      <summary>
            Contains information of a single PDF hyperlink.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFHyperlink" /> structure contains information of a single PDF hyperlink. To read hyperlinks from a PDF file, use the
            <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method with the <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Hyperlinks</see> specified in the <i>options</i> parameter passed to the
            method. The <see cref="T:Leadtools.Pdf.PDFDocumentPage">PDFDocumentPage's</see><see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> collections will be populated with the hyperlinks of the page.</para>
        <para>A hyper link is not a visible object on the page, rather, it is parsed from the text of the object. So for every hyperlink on a page, there will also exist the actual
            <see cref="T:Leadtools.Pdf.PDFObject" /> of type <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see> that forms the hyperlink text. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> collection gives
            you a quick access to all the hyperlinks of a page in one convenient location.</para>
        <para>The <see cref="T:Leadtools.Pdf.PDFHyperlink" /> structure contains these properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFHyperlink.Bounds" />: This is the location and size on the hyperlink of the link hot spot. An external viewer may choose to
            change the mouse cursor shape to a "Hand" when the user hovers over this link and proceed to perform the action of the link when the user clicks link.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFHyperlink.Hyperlink" />: The hyperlink string read from the PDF document. An external viewer may choose to start an external application
            such as a web browser when this link is clicked.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFHyperlink.TextProperties" />: The hyperlink text propertiess such as font information and color.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFDocumentPage" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHyperlink.Hyperlink">
      <summary>
            Gets or sets the hyperlink value.
            </summary>
      <value>A <see cref="T:System.String" /> that specifies the hyperlink value. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>While the <see cref="P:Leadtools.Pdf.PDFHyperlink.Hyperlink" /> value could be anything, in most cases it will be the name of an external resource such as a web page (http://www.example.com) or file
            on disk. An external viewer may choose to start an external application such as a web browser when this link is clicked.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHyperlink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHyperlink.Bounds">
      <summary>
            Gets or sets the source bounds of this hyperlink.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that represents the source location and size of this hyperlink in PDF units (1/72 of an inch and bottom left). The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFHyperlink.Bounds" /> is the hot spot area of the hyperlink. An external viewer may choose to change the mouse cursor shape to a "Hand" when the user hovers over
            this link and proceed to perform the action of the link when the user clicks the link.</para>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHyperlink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFHyperlink.TextProperties">
      <summary>
            Gets or sets the text properties such as font information and color of this hyperlink.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFTextProperties" /> structure that contain the text properties such as font information and color of this hyperlink. Default value
            is a default <see cref="T:Leadtools.Pdf.PDFTextProperties" /> object.</value>
      <remarks>
        <para>A hyperlink is not a visible object on the page, rather, it is parsed from the text of the object. So for every hyperlink on a page, there will also exist the actual
            <see cref="T:Leadtools.Pdf.PDFObject" /> of type <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see> that forms the hyperlink text. The <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks">PDFDocumentPage.Hyperlinks</see> collection gives
            you a quick access to all the hyperlinks of a page in one convenient location.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFHyperlink" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf._PDFTOOLSIMAGETYPE">
      <exclude />
    </member>
    <member name="T:Leadtools.Pdf.PDFImageType">
      <summary>
            Specifies the image compression type.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Unknown">
      <summary>(0x00000000)Unknown</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Raw">
      <summary>(0x00000001)Raw uncompressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Rle">
      <summary>(0x00000002)Raw RLE compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.FaxG31DimNoEol">
      <summary>(0x00000003)Raw FAX, compressed using CCITT group 3,1 dimension.with no EOL.</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.FaxG31Dim">
      <summary>(0x00000004)Raw FAX, compressed using CCITT group 3, 1 dimension.</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.FaxG32Dim">
      <summary>(0x00000005)Raw FAX, compressed using CCITT group 3, 2 dimensions.</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.FaxG4">
      <summary>(0x00000006)Raw FAX, compressed using CCITT group 4.</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Jbig2">
      <summary>(0x00000007)RAW JBIG2 compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Png">
      <summary>(0x00000008)Embedded PNG compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Flate">
      <summary>(0x00000009)Raw flate compression</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Lzw">
      <summary>(0x0000000A)Raw LZW compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Jpeg">
      <summary>(0x0000000B)Embedded JPEG compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Jpx">
      <summary>(0x0000000C)Embeded JPEG 2000 Part 2 (JPX) compressed</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFImageType.Tiff">
      <summary>(0x0000000D)Embedded TIFF uncompressed</summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFImage">
      <summary>
            The <strong>PDFImage</strong> structure describes an image embedded in the PDF file.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.ObjectNumber">
      <summary>
            The PDF object number of the embedded image.
            </summary>
      <value>The PDF object number of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.ColorDevice">
      <summary>
            The color device of the embedded image.
            </summary>
      <value>The color device of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.StreamOffset">
      <summary>
            The offset within the PDF stream for the embedded image.
            </summary>
      <value>The offset within the PDF stream for the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.StreamLength">
      <summary>
            The size in bytes of the embedded image.
            </summary>
      <value>The size in bytes of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.PageNumber">
      <summary>
            The page number of page that contains the embedded image.
            </summary>
      <value>The page number of page that contains the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.BitsPerComponent">
      <summary>
            The bits per component of the embedded image.
            </summary>
      <value>The bits per component of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.ComponentCount">
      <summary>
            The number of color components of the embedded image.
            </summary>
      <value>The number of color components of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.BitsPerPixel">
      <summary>
            The bits per pixel of the embedded image.
            </summary>
      <value>The bits per pixel of the embedded image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.Width">
      <summary>
            The width in pixels of the embedded image.
            </summary>
      <value>The width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.Height">
      <summary>
            The height in pixels of the embedded image.
            </summary>
      <value>The height in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFImage.ImageType">
      <summary>
            The image compression type of the embedded image.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFImageType" /> that indicates the compression type.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Pdf.PDFDocument.Images">PDFDocument.Images</see>.</example>
    </member>
    <member name="T:Leadtools.Pdf._PDFTOOLSPAGEMODETYPE">
      <exclude />
    </member>
    <member name="T:Leadtools.Pdf.PDFPageModeType">
      <summary>
            Specifies the PDF page mode
            </summary>
      <remarks>
            Used by <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> to control the PDF page mode.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.PageOnly">
      <summary>(0x00000000)Default, Neither document outline nor thumbnail images visible</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.Outlines">
      <summary>(0x00000001)Document bookmarks visible</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.Thumbs">
      <summary>(0x00000002)Thumbnail images visible</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.FullScreen">
      <summary>(0x00000003)Full-screen mode, with no menu bar, window controls, or any other window visible</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.Layers">
      <summary>(0x00000004)Layer panel visible</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageModeType.Attachments">
      <summary>(0x00000005)Attachments panel visible</summary>
    </member>
    <member name="T:Leadtools.Pdf._PDFTOOLSPAGELAYOUTTYPE">
      <exclude />
    </member>
    <member name="T:Leadtools.Pdf.PDFPageLayoutType">
      <summary>
            Specifies the PDF page layout
            </summary>
      <remarks>
            Used by <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> to control the PDF page layout.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.SinglePageDisplay">
      <summary>(0x00000000)Default, Display one page at a time</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.OneColumnDisplay">
      <summary>(0x00000001)Display the pages in one column</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.TwoColumnLeftDisplay">
      <summary>(0x00000002)Display the pages in two columns, with odd-numbered pages on the left</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.TwoColumnRightDisplay">
      <summary>(0x00000003)Display the pages in two columns, with odd-numbered pages on the right</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.TwoPageLeft">
      <summary>(0x00000004)Display the pages two at a time, with odd-numbered pages on the left</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageLayoutType.TwoPageRight">
      <summary>(0x00000005)Display the pages two at a time, with odd-numbered pages on the right</summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFInitialViewOptions">
      <summary>
            The <strong>PDFInitialViewOptions</strong> class provides options for controlling the initial view and actions that should be applied by External viewers when the PDF file is opened.
            </summary>
      <remarks>
            Use the <strong>PDFInitialViewOptions</strong> class to specify options that control the initial view and actions that should be applied by External viewers when the PDF file is opened.
            </remarks>
      <example>
        <!--PDFInitialViewOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFInitialViewOptions.#ctor">
      <summary>
            Creates a new <strong>PDFInitialViewOptions</strong> object with default settings.
            </summary>
      <noremarks />
      <returns>The newly created <strong>PDFInitialViewOptions</strong> object.</returns>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="M:Leadtools.Pdf.PDFInitialViewOptions.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.AutoPrint">
      <summary>
            Enables or disables PDF Auto Print
            </summary>
      <value>
            true to enable PDF Auto Print; false to disable PDF Auto Print.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should automatically display the print dialog when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.PageNumber">
      <summary>
            Gets or sets the initial page to display
            </summary>
      <value>The page number to display when the PDF file is opened.</value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should automatically display the print dialog when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.Position">
      <summary>
            Gets or sets the position in the initial page to scroll to.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the position in PDF units (1/72 of an inch and bottom-left) of the initial page to scroll to. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>
            Set this property to to indicate the position to scroll to when the the PDF file is opened.
            </para>
        <para>The position is in PDF units (1/72 of an inch and bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.ZoomPercent">
      <summary>
            Gets or sets the initial page zoom percentage.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the zoom percent (100 equals to no zoom) of the initial page. The default value is 0.</value>
      <remarks>
        <para>The zoom percent (100 equals to no zoom) of the initial page. External viewers should zoom to this value when the PDF file is opened. A value of 0 means do not
            change the current zoom percentage when going to the initial page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.PageFitType">
      <summary>
            Gets or sets the target page fit type of the initial page.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPageFitType" /> enumeration member that specifies the target page fit type of the initial page. The default value is <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see>.</value>
      <remarks>
        <para>The page fit type of the target page. External viewers should set the page view properties based on this value when the PDF file is loaded. A value of
            <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see> means do not change the page fit mode when going to the initial page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.PageModeType">
      <summary>
            Gets or sets the page mode type of the initial page.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPageModeType" /> enumeration member that specifies the page mode for the initial page.</value>
      <remarks>
        <para>The page fit type of the initial page. External viewers should set the page view properties based on this value when the PDF file is loaded.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.PageLayoutType">
      <summary>
            Gets or sets the page layout of the initial page.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPageLayoutType" /> enumeration member that specifies the page layout for the initial page.</value>
      <remarks>
        <para>The page layout type of the initial page. External viewers should set the page view properties based on this value when the PDF file is loaded.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.HideToolbar">
      <summary>
            Enables or disables the toolbar in the External viewer.
            </summary>
      <value>
            true to enable the toolbar; false to disable the toolbar.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should display/enable the toolbar when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.HideMenubar">
      <summary>
            Shows or hides the menubar in the External viewer.
            </summary>
      <value>
            true to hide the menubar; false to disable the menubar.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should hide the menubar when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.HideWindowUI">
      <summary>
            Shows or hides the window user interface in the External viewer.
            </summary>
      <value>
            true to hide the window user interface; false to disable the window user interface.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should hide the window user interface when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.FitWindow">
      <summary>
            Enables or disables fit in window.
            </summary>
      <value>
            true to enable fit in window; false to disable fit in window.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should enable fit in window when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.CenterWindow">
      <summary>
            Enables or disables center in window.
            </summary>
      <value>
            true to enable center in window; false to disable center in window.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should enable center in window when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInitialViewOptions.DisplayDocTitle">
      <summary>
            Enables or disables display of the document title.
            </summary>
      <value>
            true to enable display of the document title; false to disable display of the document title.
            </value>
      <remarks>
            Set this property to <strong>true</strong> to indicate that External viewers should display the document title when the PDF file is opened.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInitialViewOptions" />.</example>
    </member>
    <member name="T:Leadtools.Pdf.PDFInternalLink">
      <summary>
            Provides information about the PDF internal link properties
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFInternalLink" /> structure contains the properties of a single PDF internal link. An internal link in a PDF file is a location on a page that defines a hot area,
            when this location is clicked with the mouse. An external viewer should read the properties of the link and proceed to go to the page defined by the properties of the internal link
            while optionally change the view parameters (zoom factor, fit page mode and scroll position).</para>
        <para>The bookmarks and internal links of a PDF has a document (global) scope and are not part of any page. As a result, to read the bookmarks of a document use the
            <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see> method and then access the <see cref="P:Leadtools.Pdf.PDFDocument.Bookmarks">PDFDocument.Bookmarks</see> and
            <see cref="P:Leadtools.Pdf.PDFDocument.InternalLinks">PDFDocument.InternalLinks</see> collections.</para>
        <para>The internal link has the following properties for the source hot sport:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.SourcePageNumber" />: This is the 1-based number of the page where the link is located.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.SourceBounds" />: This is the location and size on the source page of the link hot spot. An external viewer may choose to
            change the mouse cursor shape to a "Hand" when the user hovers over this link and proceed to perform the action of the link when the user clicks the link.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderWidth" />: The width of the border of the internal link. An external viewer may choose to frame the source bounds of the link
            with the width of border specified by this property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderColor" />: The color of the border of the internal link. An external viewer may choose to frame the source bounds of the link with the color of the
            frame specified by this property.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderDashLength" />: The length of dash marks of the border of the internal link. An external viewer may choose to frame the source bounds of the link
            with the dash length of the frame specified by this property.</para>
            </description>
          </item>
        </list>
        <para>The action of a internal link consists of the followng:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetPageNumber" />: This the 1-based integer to go to. External viewers should scroll to this page when this internal link is activated.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetPosition" />: The position in PDF units (1/72 of an inch and bottom-left) of the target page to scroll to. External viewers
            should scroll to this position when the internal link is activated.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetZoomPercent" />: The zoom percent (100 equals to no zoom) of the target page. External viewers should zoom to this value when
            the internal link is activated</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetPageFitType" />: The page fit type of the target page. External viewers should set the page view properties based on this value when this
            internal link is activated.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Pdf.PDFDocument.ParseDocumentStructure(Leadtools.Pdf.PDFParseDocumentStructureOptions)">PDFDocument.ParseDocumentStructure</see>.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.SourcePageNumber">
      <summary>
            Gets or sets the source page number of this internal link.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the 1-based source page number of this internal link. The default value is 0.</value>
      <remarks>
        <para>The source page number of the internal link is the page where the link is located.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.TargetPageNumber">
      <summary>
            Gets or sets the number of the target page of this internal link.
            </summary>
      <value>The 1-based number of the target page of this internal link. The default value is 0.</value>
      <remarks>
        <para>External viewers should scroll to this page when this internal link is activated.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.BorderColor">
      <summary>
            Gets or sets the color of the border of this internal link
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the color of the border of this internal link.</value>
      <remarks>
        <para>External viewers may choose to draw a border around the internal link. The properties of this border is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderColor" />: The color of the border</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderWidth" />: The width of the border in PDF units (1/72 of an inch)</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderDashLength" />: The length of the dashes the border in PDF units (1/72 of an inch)</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.BorderWidth">
      <summary>
            Gets or sets the border width of this internal link.
            </summary>
      <value>A <see cref="T:System.Double" /> that specifies the border width of this internal link in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>External viewers may choose to draw a border around the internal link. The properties of this border is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderColor" />: The color of the border.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderWidth" />: The width of the border, in PDF units (1/72 of an inch).</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderDashLength" />: The length of the dashes the border, in PDF units (1/72 of an inch).</para>
            </description>
          </item>
        </list>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> method to convert values from PDF units to pixels or inches and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.BorderDashLength">
      <summary>
            Gets or sets the border dash length of this internal link.
            </summary>
      <value>A <see cref="T:System.Double" /> that specifies the border dash length of this internal link, in PDF units (1/72 of an inch). The default value is 0.</value>
      <remarks>
        <para>External viewers may choose to draw a border around the internal link. The properties of this border is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderColor" />: The color of the border</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderWidth" />: The width of the border, in PDF units (1/72 of an inch).</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFInternalLink.BorderDashLength" />: The length of the dashes the border, in PDF units (1/72 of an inch).</para>
            </description>
          </item>
        </list>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> method to convert values from PDF units to pixels or inches and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.TargetPosition">
      <summary>
            Gets or sets the position in target page to scroll to for this internal link.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPoint" /> that represents the position, in PDF units (1/72 of an inch and bottom-left), of the target page to scroll to. The default value is an
            empty <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <remarks>
        <para>The position is in PDF units (1/72 of an inch and bottom-left). So to go to the top of the page, you must go to "0, PageHeight". You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.TargetZoomPercent">
      <summary>
            Gets or sets the target page zoom percentage of this internal link.
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the zoom percent (100 equals to no zoom) of the target page. The default value is 0.</value>
      <remarks>
        <para>The zoom percent (100 equals to no zoom) of the target page. External viewers should zoom to this value when the internal link is activated. A value of 0 means do not
            change the current zoom percentage when going to the target page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.SourceBounds">
      <summary>
            Gets or sets the source bounds of this internal link.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> that represents the source location and size of this internal link, in PDF units (1/72 of an inch and bottom left). The default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFInternalLink.SourceBounds" /> is the hot spot area of the internal link. An external viewer may choose to change the mouse cursor shape to a "Hand" when the user hovers over
            this link and proceed to perform the action of the link when the user clicks the link.</para>
        <para>You can use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper method to convert from pixel or inches to PDF units and back.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFInternalLink.TargetPageFitType">
      <summary>
            Gets or sets the target page fit type of this internal link.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFPageFitType" /> enumeration member that specifies the target page fit type of this internal link. The default value is <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see>.</value>
      <remarks>
        <para>The page fit type of the target page. External viewers should set the page view properties based on this value when this internal link is activated. A value of
            <see cref="T:Leadtools.Pdf.PDFPageFitType">PDFPageFitType.Default</see> means do not change the page fit mode when going to the target page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFInternalLink" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFObjectType">
      <summary>
            Specifies the PDF object type.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFObjectType" /> enumeration is used as the type for the <see cref="P:Leadtools.Pdf.PDFObject.ObjectType">PDFObject.ObjectType</see> property and is used
            to determine the object type.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFObjectType.Text">
      <summary>(0x00000000)<para>The item is text. The <see cref="P:Leadtools.Pdf.PDFObject.Code">PDFObject.Code</see> contains the character code for this text item. The <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see>
            contains the character exact bounds with any internal or external leading in PDF units (1/72 of an inch and bottom left) and the
            <see cref="P:Leadtools.Pdf.PDFObject.TextProperties">PDFObject.TextProperties</see> property contains its font and color information.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFObjectType.Rectangle">
      <summary>(0x00000001)<para>The item is a rectangle. The coordinates of the rectangle are in <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see> in PDF units (1/72 of an inch and bottom left)</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFObjectType.Image">
      <summary>(0x00000002)<para>The item is an image. The coordinates of the image are in <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see> in PDF units (1/72 of an inch and bottom left)</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFObject">
      <summary>
            Contains information of a single PDF object.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFObject" /> structure contains information of a single PDF text item (character), rectangle or image. To read objects from a PDF file, you use the
            <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method. After this method returns and depending on the value of <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> parameter passed to the method, the
            <see cref="T:Leadtools.Pdf.PDFDocumentPage">PDFDocumentPage's</see><see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" /> collections will be populated with the items of the
            PDF page.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFObjectExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim pngFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_png.png")
         ' Create a PDF document for file at 200 DPI
         Using document As New PDFDocument(pdfFileName)
            document.Resolution = 200

            ' Parse the objects of the first page
            document.ParsePages(PDFParsePagesOptions.Fonts Or PDFParsePagesOptions.Objects Or PDFParsePagesOptions.Fonts, 1, 1)

            ' Get the page
            Dim page As PDFDocumentPage = document.Pages(0)

            ' Get the image of the page so we can use it to get the source image objects
            Using pageImage As RasterImage = document.GetPageImage(Nothing, page.PageNumber)
               ' Create the bitmap to draw the objects to
               Using btmp As New Bitmap(page.WidthPixels, page.HeightPixels)
                  btmp.SetResolution(document.Resolution, document.Resolution)
                  Using g As Graphics = Graphics.FromImage(btmp)
                     g.Clear(Color.White)

                     ' Render the objects

                     ' Text is line at a time
                     Dim textRect As LeadRect = LeadRect.Empty
                     Dim textFontHeight As Double = 0
                     Dim textLine As New StringBuilder()

                     For Each obj As PDFObject In page.Objects
                        Select Case obj.ObjectType
                           Case PDFObjectType.Image
                              RenderImage(g, pageImage, page, obj)

                           Case PDFObjectType.Text
                              ' Add the text code and rects together
                              textLine.Append(obj.Code)
                              Dim rc As PDFRect = page.ConvertRect(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, obj.Bounds)
                              Dim objRect As LeadRect = LeadRect.FromLTRB(CType(rc.Left, Integer), CType(rc.Top, Integer), CType(rc.Right, Integer), CType(rc.Bottom, Integer))
                              If textRect.IsEmpty Then
                                 textRect = objRect
                              Else
                                 textRect = LeadRect.Union(textRect, objRect)
                              End If

                              textFontHeight = Math.Max(textFontHeight, obj.TextProperties.FontHeight)

                              ' If this is the last object in a line, render it
                              If obj.TextProperties.IsEndOfLine Then
                                 RenderText(g, page, textLine.ToString(), textRect, obj.TextProperties, textFontHeight)

                                 textLine = New StringBuilder()
                                 textRect = LeadRect.Empty
                              End If
                        End Select
                     Next
                  End Using

                  btmp.Save(pngFileName, System.Drawing.Imaging.ImageFormat.Png)
               End Using
            End Using
         End Using
      End Sub

      Private Shared Sub RenderImage(ByVal g As Graphics, ByVal pageImage As RasterImage, ByVal page As PDFDocumentPage, ByVal obj As PDFObject)
         Dim destRect As New LeadRect(0, 0, page.WidthPixels, page.HeightPixels)

         ' Get the object coordinates in pixels
         Dim rc As PDFRect = page.ConvertRect(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, obj.Bounds)
         Dim destClipRect As LeadRect = LeadRect.FromLTRB(CType(rc.Left, Integer), CType(rc.Top, Integer), CType(rc.Right, Integer), CType(rc.Bottom, Integer))

         ' Draw from the page image to the destination graphics
         Dim props As RasterPaintProperties = RasterPaintProperties.Default
         props.PaintEngine = RasterPaintEngine.GdiPlus
         RasterImagePainter.Paint( _
            pageImage, _
            g, _
            LeadRect.Empty, _
            LeadRect.Empty, _
            destRect, _
            destClipRect, _
            props)
      End Sub

      Private Shared Sub RenderText(ByVal g As Graphics, ByVal page As PDFDocumentPage, ByVal text As String, ByVal textRect As LeadRect, ByVal textProperties As PDFTextProperties, ByVal textFontHeight As Double)
         ' Create the font
         Dim font As PDFFont = page.Fonts(textProperties.FontIndex)
         Dim faceName As String = font.FaceName
         If String.IsNullOrEmpty(faceName) Then
            ' Could be an embedded font, use Arial
            faceName = "Arial"
         End If

         Dim fontStyle As FontStyle = fontStyle.Regular

         If (font.FontStyle And PDFFontStyle.Bold) = PDFFontStyle.Bold Then
            fontStyle = fontStyle Or fontStyle.Bold
         End If

         If (font.FontStyle And PDFFontStyle.Italic) = PDFFontStyle.Italic Then
            fontStyle = fontStyle Or fontStyle.Italic
         End If

         If (font.FontStyle And PDFFontStyle.Underline) = PDFFontStyle.Underline Then
            fontStyle = fontStyle Or fontStyle.Underline
         End If

         Using f As New Font(faceName, CType(textFontHeight * 72 / g.DpiY, Single), fontStyle)
            Using brush As New SolidBrush(RasterColorConverter.ToColor(textProperties.Color))
               Dim rect As New Rectangle(textRect.X, textRect.Y, textRect.Width, textRect.Height)

               Using sf As New StringFormat()
                  sf.Alignment = StringAlignment.Center
                  sf.LineAlignment = StringAlignment.Center
                  sf.FormatFlags = sf.FormatFlags Or StringFormatFlags.NoClip Or StringFormatFlags.NoWrap

                  g.DrawString(text, f, brush, rect, sf)
               End Using
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFObjectExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string pngFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_png.png");
         // Create a PDF document for file at 200 DPI
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            document.Resolution = 200;

            // Parse the objects of the first page
            document.ParsePages(PDFParsePagesOptions.Fonts | PDFParsePagesOptions.Objects, 1, 1);

            // Get the page
            PDFDocumentPage page = document.Pages[0];

            // Get the image of the page so we can use it to get the source image objects
            using(RasterImage pageImage = document.GetPageImage(null, page.PageNumber))
            {
               // Create the bitmap to draw the objects to
               using(Bitmap btmp = new Bitmap(page.WidthPixels, page.HeightPixels))
               {
                  btmp.SetResolution(document.Resolution, document.Resolution);
                  using(Graphics g = Graphics.FromImage(btmp))
                  {
                     g.Clear(Color.White);

                     // Render the objects

                     // Text is line at a time
                     LeadRect textRect = LeadRect.Empty;
                     double textFontHeight = 0;
                     StringBuilder textLine = new StringBuilder();

                     foreach(PDFObject obj in page.Objects)
                     {
                        switch(obj.ObjectType)
                        {
                           case PDFObjectType.Image:
                              RenderImage(g, pageImage, page, obj);
                              break;

                           case PDFObjectType.Text:
                              // Add the text code and rects together
                              textLine.Append(obj.Code);
                              PDFRect rc = page.ConvertRect(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, obj.Bounds);
                              LeadRect objRect = LeadRect.FromLTRB((int)rc.Left, (int)rc.Top, (int)rc.Right, (int)rc.Bottom);
                              if(textRect.IsEmpty)
                              {
                                 textRect = objRect;
                              }
                              else
                              {
                                 textRect = LeadRect.Union(textRect, objRect);
                              }

                              textFontHeight = Math.Max(textFontHeight, obj.TextProperties.FontHeight);

                              // If this is the last object in a line, render it
                              if(obj.TextProperties.IsEndOfLine)
                              {
                                 RenderText(g, page, textLine.ToString(), textRect, obj.TextProperties, textFontHeight);

                                 textLine = new StringBuilder();
                                 textRect = LeadRect.Empty;
                              }
                              break;
                        }
                     }
                  }

                  btmp.Save(pngFileName, System.Drawing.Imaging.ImageFormat.Png);
               }
            }
         }
      }

      private static void RenderImage(Graphics g, RasterImage pageImage, PDFDocumentPage page, PDFObject obj)
      {
         LeadRect destRect = new LeadRect(0, 0, page.WidthPixels, page.HeightPixels);

         // Get the object coordinates in pixels
         PDFRect rc = page.ConvertRect(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, obj.Bounds);
         LeadRect destClipRect = LeadRect.FromLTRB((int)rc.Left, (int)rc.Top, (int)rc.Right, (int)rc.Bottom);

         // Draw from the page image to the destination graphics
         RasterPaintProperties props = RasterPaintProperties.Default;
         props.PaintEngine = RasterPaintEngine.GdiPlus;
         RasterImagePainter.Paint(
            pageImage,
            g,
            LeadRect.Empty,
            LeadRect.Empty,
            destRect,
            destClipRect,
            props);
      }

      private static void RenderText(Graphics g, PDFDocumentPage page, string text, LeadRect textRect, PDFTextProperties textProperties, double textFontHeight)
      {
         // Create the font
         PDFFont font = page.Fonts[textProperties.FontIndex];
         string faceName = font.FaceName;
         if(string.IsNullOrEmpty(faceName))
         {
            // Could be an embedded font, use Arial
            faceName = "Arial";
         }

         FontStyle fontStyle = FontStyle.Regular;

         if((font.FontStyle &amp; PDFFontStyle.Bold) == PDFFontStyle.Bold)
         {
            fontStyle |= FontStyle.Bold;
         }

         if((font.FontStyle &amp; PDFFontStyle.Italic) == PDFFontStyle.Italic)
         {
            fontStyle |= FontStyle.Italic;
         }

         if((font.FontStyle &amp; PDFFontStyle.Underline) == PDFFontStyle.Underline)
         {
            fontStyle |= FontStyle.Underline;
         }

         using(Font f = new Font(faceName, (float)textFontHeight * 72 / g.DpiY, fontStyle))
         {
            using(Brush brush = new SolidBrush(RasterColorConverter.ToColor(textProperties.Color)))
            {
               Rectangle rect = new Rectangle(textRect.X, textRect.Y, textRect.Width, textRect.Height);

               using(StringFormat sf = new StringFormat())
               {
                  sf.Alignment = StringAlignment.Center;
                  sf.LineAlignment = StringAlignment.Center;
                  sf.FormatFlags |= StringFormatFlags.NoClip | StringFormatFlags.NoWrap;

                  g.DrawString(text, f, brush, rect, sf);
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFObject-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFObject.Bounds">
      <summary>
            Gets or sets the bounding rectangle of the object.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFRect" /> structure that contain the bounding rectangle of the object in PDF units (1/72 of an inch and bottom left).
            Default value is an empty <see cref="T:Leadtools.Pdf.PDFRect" /> with all values initialized to 0.</value>
      <remarks>
        <para>The bounds of an object is read in PDF units, these are in 1/72 of an inch and a are bottom-left on the page. In other words, the 0,0 location is the
            bottom left corner of the page. To convert these units to inches or pixels in top-left coordinates, use the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see>
            method as follows:</para>
        <para>
          <pre>
            <code inline="true">
            PDFRect coords = pdfObject.Bounds;
            // Convert to pixels:
            PDFRect pixels = page.ConvertRect(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, coords);
            </code>
          </pre>
        </para>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
        <para>If this object is a text item (<see cref="P:Leadtools.Pdf.PDFObject.ObjectType" /> is <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see>), then the <see cref="P:Leadtools.Pdf.PDFObject.Bounds" /> property contains the
            exact bounding box of the character in <see cref="P:Leadtools.Pdf.PDFObject.Code" />. This box does not include the internal or external leading spaces adding by the font used. To obtain this information,
            you must use the values of the <see cref="P:Leadtools.Pdf.PDFObject.TextProperties" /> property.</para>
        <para>If this object is an image item (<see cref="P:Leadtools.Pdf.PDFObject.ObjectType" /> is <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Image</see>), then the <see cref="P:Leadtools.Pdf.PDFObject.Bounds" /> property contains the
            bounding box of the image in the PDF page. The example of <see cref="T:Leadtools.Pdf.PDFObject" /> shows how to extract the image data from the PDF page.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFObject.Code">
      <summary>
            Gets or sets the character code value of this <see cref="T:Leadtools.Pdf.PDFObject" /> text item.
            </summary>
      <value>A <see cref="T:System.Char" /> that contain the UNICODE character code of this <see cref="T:Leadtools.Pdf.PDFObject" /> text item. The default value is 0.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFObject.Code" /> property is only valid for text items, i.e., when the value of <see cref="P:Leadtools.Pdf.PDFObject.ObjectType" /> is <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see>. The
            text properties such as font information and color will be stored in the <see cref="P:Leadtools.Pdf.PDFObject.TextProperties" /> property of this object.</para>
        <para>White space characters such as a space or a tab are parsed by default and returned as individual objects. You can stop this behavior by OR'ing the
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.IgnoreWhiteSpaces</see> enumeration member with
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions">PDFParsePagesOptions.Objects</see> in the <i>options</i> parameter passed to <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)">PDFDocument.ParsePages</see>.
            <strong>Note:</strong> To re-construct the words and lines of text in the page without white characters by using the
            <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord">PDFTextProperties.IsEndOfWord</see> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine">PDFTextProperties.IsEndOfLine</see>
            properties. The <see cref="T:Leadtools.Pdf.PDFTextProperties" />example demonstrates this.</para>
        <para>
          <strong>Note:</strong> Currently, LEADTOOLS does not support extracting true UNICODE characters from a PDF file. Only ASCII characters are read and then converted to UNICODE.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" /> to show how to draw the objects of a PDF page to an image and <see cref="T:Leadtools.Pdf.PDFTextProperties" /> to show
            how to write the text of a PDF page to an external file.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFObject.TextProperties">
      <summary>
            Gets or sets the text properties such as font information and color of this <see cref="T:Leadtools.Pdf.PDFObject" /> text item.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFTextProperties" /> structure that contain the text properties such as font information and color of this <see cref="T:Leadtools.Pdf.PDFObject" /> text item. Default value
            is a default <see cref="T:Leadtools.Pdf.PDFTextProperties" /> object.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Pdf.PDFObject.TextProperties" /> property is only valid for text items, i.e., when the value of <see cref="P:Leadtools.Pdf.PDFObject.ObjectType" /> is <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see>.
            The character code of the text item will be stored in the <see cref="P:Leadtools.Pdf.PDFObject.Code" /> property of this object.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" /> to show how to draw the objects of a PDF page to an image and <see cref="T:Leadtools.Pdf.PDFTextProperties" /> to show
            how to write the text of a PDF page to an external file.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFObject.ObjectType">
      <summary>
            Gets or sets the PDF object type.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFObjectType" /> enumeration member that specifies the PDF object type. The default value is <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see>.</value>
      <remarks>
        <para>Currently LEADTOOLS supports reading the following object types from a PDF file: </para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Text</see>: for each text character in the page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Image</see>: for each image in the page.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Pdf.PDFObjectType">PDFObjectType.Rectangle</see>: for each rectangle in the page.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" /> to show how to draw the objects of a PDF page to an image and <see cref="T:Leadtools.Pdf.PDFTextProperties" /> to show
            how to write the text of a PDF page to an external file.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFObject.ImageObjectNumber">
      <summary>
            Gets or sets the PDF image object number.
            </summary>
      <value>The PDF image object number</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Pdf._PDFTOOLSAUTOOPTIMIZERMODE">
      <exclude />
    </member>
    <member name="T:Leadtools.Pdf.PDFAutoOptimizerMode">
      <summary>
            Specifies the mode for automatic PDF document optimization.
            </summary>
      <remarks>
            Use this when calling <see cref="M:Leadtools.Pdf.PDFFile.Optimize(System.String)">PDFFile.Optimize</see> to control the optimization process.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.Customized">
      <summary>(0x00000000)Use custom settings.</summary>
      <remarks>
            Use this value to specify custom settings for the optimization process.
            </remarks>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.BestSize">
      <summary>(0x00000001)Optimize for smallest file size</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.MediumSize">
      <summary>(0x00000002)Optimize favoring size over quality</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.AverageSize">
      <summary>(0x00000003)Optimize with balance between size and quality</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.GoodQuality">
      <summary>(0x00000004)Optimize favoring quality over size</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFAutoOptimizerMode.BestQuality">
      <summary>(0x00000005)Optimize for highest quality</summary>
    </member>
    <member name="T:Leadtools.Pdf._PDFTOOLSDOWNSAMPLINGMODE">
      <exclude />
    </member>
    <member name="T:Leadtools.Pdf.PDFDownsamplingMode">
      <summary>
            Specifies the downsampling mode for the PDF optimizer.
            </summary>
      <remarks>
            Use this when calling <see cref="M:Leadtools.Pdf.PDFFile.Optimize(System.String)">PDFFile.Optimize</see> to control the optimization process.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="F:Leadtools.Pdf.PDFDownsamplingMode.Average">
      <summary>(0x00000000)Use average downsampling. Faster but lower quality.</summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFDownsamplingMode.Bicubic">
      <summary>(0x00000001)Use bicubic downsampling. Slower but higher quality.</summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFOptimizerOptions">
      <summary>
            The <strong>PDFOptimizerOptions</strong> class provides options for controlling the <see cref="T:Leadtools.Pdf.PDFFile" /> optimizer.
            </summary>
      <remarks>
            Use the <strong>PDFOptimizerOptions</strong> class to specify options that control the <see cref="T:Leadtools.Pdf.PDFFile" /> optimizer when calling <see cref="M:Leadtools.Pdf.PDFFile.Optimize(System.String)" />.
            </remarks>
      <example>
        <!--PDFOptimizerOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Pdf.PDFOptimizerOptions.#ctor">
      <summary>
            Creates a new <strong>PDFOptimizerOptions</strong> object with default values.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="M:Leadtools.Pdf.PDFOptimizerOptions.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.AutoOptimizerMode">
      <summary>
            Gets or sets the optimizer mode, which controls the file size and quality.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFAutoOptimizerMode" /> value.</value>
      <remarks>
        <para>
            Specifies automatic pdf document optimization. If not set to <see cref="T:Leadtools.Pdf.PDFAutoOptimizerMode">Customized</see>, all other properties of <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" /> are ignored.
            </para>
        <para>
            For more information, refer to <see cref="T:Leadtools.Pdf.PDFAutoOptimizerMode" />.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.ColorImageDPI">
      <summary>
            Gets or sets the DPI to use when saving a color image.
            </summary>
      <value>Specifies the resolution to which downsampled color images are reduced. This should be always less than original image resolution. Default is 150.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.grayscaleImageDPI">
      <summary>
            Gets or sets the DPI to use when saving a grayscale image.
            </summary>
      <value>Specifies the resolution to which downsampled grayscale images are reduced. This should be always less than original image resolution. Default is 150.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.monochromeImageDPI">
      <summary>
            Gets or sets the DPI to use when saving a monochrome image.
            </summary>
      <value>Specifies the resolution to which downsampled monochrome images are reduced. This should be always less than original image resolution. Default is 150.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.ColorImageCompression">
      <summary>
            Gets or sets the compression format to use when saving a color image.
            </summary>
      <value>
        <para>
            The <see cref="T:Leadtools.RasterImageFormat" /> to use. Possible values: <see cref="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedColorImageFormats" />.
            </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.GrayImageCompression">
      <summary>
            Gets or sets the compression format to use when saving a grayscale image.
            </summary>
      <value>
        <para>
            The <see cref="T:Leadtools.RasterImageFormat" /> to use. Possible values: <see cref="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedGrayImageFormats" />.
            </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.MonoImageCompression">
      <summary>
            Gets or sets the compression format to use when saving a monochrome image.
            </summary>
      <value>
        <para>
            The <see cref="T:Leadtools.RasterImageFormat" /> to use. Possible values: <see cref="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedMonoImageFormats" />.
            </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.ColorImageDownsampleFactor">
      <summary>
            Gets or sets the downsample threshold for color images.
            </summary>
      <value>
            This is the ratio of image resolution to output resolution above which downsampling may be performed.
            Must be between 1.0 through 10.0, inclusive.
            </value>
      <remarks>
            If you set the threshold out of range, it reverts to a default of 1.5.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.GrayImageDownsampleFactor">
      <summary>
            Gets or sets the scale factor to use for resizing when saving a grayscale image.
            </summary>
      <value>
            This is the ratio of image resolution to output resolution above which downsampling may be performed.
            Must be between 1.0 through 10.0, inclusive.
            </value>
      <remarks>
            If you set the threshold out of range, it reverts to a default of 1.5.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.MonoImageDownsampleFactor">
      <summary>
            Gets or sets the scale factor to use for resizing when saving a monochrome image.
            </summary>
      <value>
            This is the ratio of image resolution to output resolution above which downsampling may be performed.
            Must be between 1.0 through 10.0, inclusive.
            </value>
      <remarks>
            If you set the threshold out of range, it reverts to a default of 1.5.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.ColorImageDownsamplingMode">
      <summary>
            Gets or sets the interpolation mode for color images.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFDownsamplingMode" /> value to use for downsampling. Default is <see cref="T:Leadtools.Pdf.PDFDownsamplingMode">Average</see></value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.GrayImageDownsamplingMode">
      <summary>
            Gets or sets the downsampling mode to use for resizing when saving a grayscale image.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFDownsamplingMode" /> value to use for downsampling. Default is <see cref="T:Leadtools.Pdf.PDFDownsamplingMode">Average</see></value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.MonoImageDownsamplingMode">
      <summary>
            Gets or sets the downsampling mode to use for resizing when saving a monochrome image.
            </summary>
      <value>A <see cref="T:Leadtools.Pdf.PDFDownsamplingMode" /> value to use for downsampling. Default is <see cref="T:Leadtools.Pdf.PDFDownsamplingMode">Average</see></value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.QualityFactor">
      <summary>
            Gets or sets the Quality Factor (Q. Factor) for lossy image compression.
            </summary>
      <value>The Quality Factor to use when saving compressed images.</value>
      <remarks>For more information see <see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor" />.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.EmbedAllFonts">
      <summary>
            Enables or disables font embedding in the output PDF file.
            </summary>
      <value>If <strong>true</strong>, specifies that all fonts are to be embedded in the PDF file, default <strong>false</strong>.</value>
      <remarks>Embedding the fonts in the output file results in a larger PDF file.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.SubsetFonts">
      <summary>
            Enables or disables font subsetting in the output PDF file.
            </summary>
      <value>If <strong>true</strong>, enables font subsetting. If <strong>false</strong>, subsetting is not enabled.</value>
      <remarks>Font subsetting embeds only those glyphs that are used in a document, instead of the entire font.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFOptimizerOptions" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedColorImageFormats">
      <summary>
            Gets the list of supported color image formats.
            </summary>
      <value>An array of <see cref="T:Leadtools.RasterImageFormat" /> values.</value>
      <noremarks />
      <seealso cref="P:Leadtools.Pdf.PDFOptimizerOptions.ColorImageCompression" />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedGrayImageFormats">
      <summary>
            Gets the list of supported grayscale image formats.
            </summary>
      <value>An array of <see cref="T:Leadtools.RasterImageFormat" /> values.</value>
      <noremarks />
      <seealso cref="P:Leadtools.Pdf.PDFOptimizerOptions.GrayImageCompression" />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFOptimizerOptions.SupportedMonoImageFormats">
      <summary>
            Gets the list of supported monochrome image formats.
            </summary>
      <value>An array of <see cref="T:Leadtools.RasterImageFormat" /> values.</value>
      <noremarks />
      <seealso cref="P:Leadtools.Pdf.PDFOptimizerOptions.MonoImageCompression" />
      <noexample />
    </member>
    <member name="T:Leadtools.Pdf.PDFPageFitType">
      <summary>
            Specifies the PDF page fit type.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPageFitType" /> structure is used as the type for the <see cref="P:Leadtools.Pdf.PDFBookmark.TargetPageFitType">PDFBookmark.TargetPageFitType</see>, 
            <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetPageFitType">PDFInternalLink.TargetPageFitType</see> and <see cref="P:Leadtools.Pdf.PDFInitialViewOptions.PageFitType">PDFInitialViewOptions.PageFitType</see>
            properties. It is used to instruct external viewers on how to fit the page in the viewer window when this bookmark or internal link is activated or clicked.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFBookmark" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.Default">
      <summary>(0x00000000)<para>Default mode. Do not change the page fit mode.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.FitWidth">
      <summary>(0x00000001)<para>Fit the page width into the window.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.FitHeight">
      <summary>(0x00000002)<para>Fit the page height into the window.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.FitWidthBounds">
      <summary>(0x00000003)<para>Fit the window into the page width.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.FitHeightBounds">
      <summary>(0x00000004)<para>Fit the window into the page height.</para></summary>
    </member>
    <member name="F:Leadtools.Pdf.PDFPageFitType.FitBounds">
      <summary>(0x00000005)<para>Fit the window into the page width and height.</para></summary>
    </member>
    <member name="T:Leadtools.Pdf.PDFPen">
      <summary>
            Contains information about PDF pen properties
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPen" /> structure contains information about pen properties. <see cref="T:Leadtools.Pdf.PDFPen" /> is referenced by pdf objects.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" /></para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFPen.Solid">
      <summary>
        <para>Solid pen style</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFPen.Transparent">
      <summary>
        <para>Transparent pen style</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFPen.Dashed">
      <summary>
        <para>Dashed pen style</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFPen.#ctor(Leadtools.RasterColor,System.Double,System.Int32)">
      <summary>
            Initializes a <see cref="T:Leadtools.Pdf.PDFPen" /> structure with the specified properties 
            </summary>
      <param name="Color">A <see cref="T:Leadtools.RasterColor" /> that represents the color of the pen.</param>
      <param name="width">A <see cref="T:System.Double" /> that represents the width of the pen. The default value is 0.0.</param>
      <param name="style">A <see cref="T:Leadtools.Pdf.PDFPen" /> that represents the style of the pen. The default value is <see cref="T:Leadtools.Pdf.PDFPen">PDFPen.Solid</see>.</param>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" /></para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPen.Color">
      <summary>
            Gets or sets the color of the pen.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the pen. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPen.PenStyle">
      <summary>     
            Gets or sets the style of the pen.
            </summary>
      <value>A value that represents the style of the pen. The default value is 0 <see cref="F:Leadtools.Pdf.PDFPen.Solid" />Solid.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFPen.Width">
      <summary>
            Gets or sets the width of the pen.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the width of the pen. The default value is 0.0.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFBrush">
      <summary>
            Contains information about PDF brush properties
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFBrush" /> structure contains information about brush properties. <see cref="T:Leadtools.Pdf.PDFBrush" /> is referenced by pdf objects.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Pdf.PDFBrush.Solid">
      <summary>
        <para>Solid brush style</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Pdf.PDFBrush.Transparent">
      <summary>
        <para>Transparent brush style</para>
      </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFBrush.#ctor(Leadtools.RasterColor,System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.Pdf.PDFBrush" /> structure with the specified parameters.
            </summary>
      <param name="Color">A <see cref="T:Leadtools.RasterColor" /> that represents the color of the brush. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</param>
      <param name="style">A <see cref="T:Leadtools.Pdf.PDFBrush" /> enumeration value that represents the style of the brush. The default value is <see cref="T:Leadtools.Pdf.PDFBrush">PDFBrush.Solid</see>.</param>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBrush.BrushStyle">
      <summary>
            Gets or sets the style of the brush.
            </summary>
      <value>A value that represents the style of the brush. The default value is <see cref="F:Leadtools.Pdf.PDFBrush.Solid">Solid</see>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFBrush.Color">
      <summary>
            Gets or sets the color of the brush.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the brush. The default value is an empty <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFRectangleAnnotation" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Pdf.PDFRect">
      <summary>
            Describes the width, height, and location of a rectangle.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFRect" /> structure is used as the type for the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFHyperlink.Bounds">PDFHyperlink.Bounds</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFInternalLink.SourceBounds">PDFInternalLink.SourceBounds</see>
            </description>
          </item>
        </list>
        <para>When reading objects from a PDF files, the location and bounds of these objects will be retuned in original values read from the file as PDF units. You can use
            the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> or <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper methods to
            convert these units to pixels or inches.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Pdf.PDFRect" /> structure with the specified edge locations.
            </summary>
      <param name="left">The x-coordinate of the upper-left corner of the rectangle</param>
      <param name="top">The y-coordinate of the upper-left corner of the rectangle</param>
      <param name="right">The x-coordinate of the lower-right corner of the rectangle</param>
      <param name="bottom">The y-coordinate of the lower-right corner of the rectangle</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFRect.ToString">
      <summary>
            Converts the attributes of this <see cref="T:Leadtools.Pdf.PDFRect" /> to a human-readable string.
            </summary>
      <returns>A string that contains the coordinates of this <see cref="T:Leadtools.Pdf.PDFRect" /> structure. For example, {Left=10,Top=20,Right=30,Bottom=40}.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Left">
      <summary>
            Gets or sets the x-axis value of the left side of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the x-axis value of the left side of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Top">
      <summary>
            Gets or sets the y-axis value of the top side of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the y-axis value of the top side of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Right">
      <summary>
            Gets or sets the x-axis value of the left side of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the x-axis value of the left side of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Bottom">
      <summary>
            Gets or sets the y-axis value of the bottom side of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the y-axis value of the bottom side of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Width">
      <summary>
            Gets the width of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the width of the rectangle.</value>
      <remarks>
        <para>This is a read-only value. Width of a <see cref="T:Leadtools.Pdf.PDFRect" /> is <see cref="P:Leadtools.Pdf.PDFRect.Right" /> - <see cref="P:Leadtools.Pdf.PDFRect.Left" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFRect.Height">
      <summary>
            Gets the height of the rectangle.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the height of the rectangle.</value>
      <remarks>
        <para>This is a read-only value. Height of a <see cref="T:Leadtools.Pdf.PDFRect" /> is <see cref="P:Leadtools.Pdf.PDFRect.Bottom" /> - <see cref="P:Leadtools.Pdf.PDFRect.Top" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Pdf.PDFPoint">
      <summary>
            Represents an x- and y-coordinate pair.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFPoint" /> structure is used as the type for the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFBookmark.TargetPosition">PDFBookmark.TargetPosition</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFInternalLink.TargetPosition">PDFInternalLink.TargetPosition</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Pdf.PDFInitialViewOptions.Position">PDFInitialViewOptions.Position</see>
            </description>
          </item>
        </list>
        <para>When reading objects from a PDF files, the location and bounds of these objects will be retuned in original values read from the file as PDF units. You can use
            the <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> or <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertRect(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFRect)">PDFDocumentPage.ConvertRect</see> helper methods to convert these units to pixels or
            inches.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFPoint.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Pdf.PDFPoint" /> structure with the specified coordinates.
            </summary>
      <param name="x">The horizontal position of the point.</param>
      <param name="y">The vertical position of the point.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Pdf.PDFPoint.ToString">
      <summary>
            Converts the attributes of this <see cref="T:Leadtools.Pdf.PDFPoint" /> to a human-readable string.
            </summary>
      <returns>A string that contains the coordinates of this <see cref="T:Leadtools.Pdf.PDFPoint" /> structure. For example, {X=10,Y=20}.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFPoint.X">
      <summary>
            Gets or sets the x-coordinate of this <see cref="T:Leadtools.Pdf.PDFPoint" />.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the x-coordinate of this <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Pdf.PDFPoint.Y">
      <summary>
            Gets or sets the y-coordinate of this <see cref="T:Leadtools.Pdf.PDFPoint" />.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the y-coordinate of this <see cref="T:Leadtools.Pdf.PDFPoint" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Pdf.PDFTextProperties">
      <summary>
            Contains information on a text item in a PDF page.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Pdf.PDFTextProperties" /> structure is used as the type of the following properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFObject.TextProperties">PDFObject.TextProperties</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Pdf.PDFHyperlink.TextProperties">PDFHyperlink.TextProperties</see>
              </para>
            </description>
          </item>
        </list>
        <para>This structure contains font information of the text such as its font width, height and index, text position(represent whether the text item is the last item in a word
            or a line) and the text color.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Pdf
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      &lt;TestMethod()&gt; _
      Public Sub PDFTextPropertiesExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD.pdf")
         Dim txtFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LEAD_txt.txt")
         ' Create a PDF document for file
         Using document As New PDFDocument(pdfFileName)

            ' Parse the text of all the pages
            document.ParsePages(PDFParsePagesOptions.Fonts Or PDFParsePagesOptions.Objects Or PDFParsePagesOptions.Fonts, 1, -1)

            ' Output the words to the txt file
            Using writer As StreamWriter = File.CreateText(txtFileName)
               For Each page As PDFDocumentPage In document.Pages
                  Dim line As New StringBuilder()
                  For Each obj As PDFObject In page.Objects
                     If obj.ObjectType = PDFObjectType.Text Then
                        line.Append(obj.Code)

                        If obj.TextProperties.IsEndOfLine Then
                           writer.WriteLine(line)

                           line = New StringBuilder()
                        End If
                     End If
                  Next
               Next
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Pdf;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      [TestMethod]
      public void PDFTextPropertiesExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD.pdf");
         string txtFileName = Path.Combine(LEAD_VARS.ImagesDir, @"LEAD_txt.txt");
         // Create a PDF document for file
         using(PDFDocument document = new PDFDocument(pdfFileName))
         {
            // Parse the text of all the pages
            document.ParsePages(PDFParsePagesOptions.Fonts | PDFParsePagesOptions.Objects | PDFParsePagesOptions.Fonts, 1, -1);

            // Output the words to the txt file
            using(StreamWriter writer = File.CreateText(txtFileName))
            {
               foreach(PDFDocumentPage page in document.Pages)
               {
                  StringBuilder line = new StringBuilder();
                  foreach(PDFObject obj in page.Objects)
                  {
                     if(obj.ObjectType == PDFObjectType.Text)
                     {
                        line.Append(obj.Code);

                        if(obj.TextProperties.IsEndOfLine)
                        {
                           writer.WriteLine(line);

                           line = new StringBuilder();
                        }
                     }
                  }
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      }
</code>
        <!--PDFTextProperties-->
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.FontHeight">
      <summary>
            Gets or sets the font height in PDF units.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the font height in PDF units (1/72 of an inch and bottom left). The default value is 0.</value>
      <remarks>
        <para>This value contains the height of this PDF text object in PDF units (1/72 of an inch and bottom left). You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> method to convert the value to a pixels or inches and then to points if required. Here is an example:</para>
        <para>
          <pre>
            <code inline="true">
            // Get the font height in PDF units, which 1/72 of an inch, i.e. in points
            double fontHeightPoints = pdfObject.TextProperties.FontHeight;
            // Convert to inches: 
            double fontHeightInches1 = fontHeightPoints / 72.0;
            // Or use PDFDocumentPage.ConvertPoint to convert to inches:
            PDFPoint pt = new PDFPoint(0, fontHeightPoints);
            double fontHeightInches2 = pdfDocumentPage.ConvertPoint(PDFCoordinateType.Pdf, PDFCoordinateType.Inch, pt).Y;
            // And pixels:
            double fontHeightPixels = pdfDocumentPage.ConvertPoint(PDFCoordinateType.Pdf, PDFCoordinateType.Pixel, pt).Y;
            </code>
          </pre>
        </para>
        <para>This value contains the external and internal leading of the text item, to get the bounds of the box that exactly surrounds the text object, use
            <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see>.</para>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.FontWidth">
      <summary>
            Gets or sets the font width in PDF units.
            </summary>
      <value>A <see cref="T:System.Double" /> that represents the font width in PDF units (1/72 of an inch and bottom left). The default value is 0.</value>
      <remarks>
        <para>This value contains the width of this PDF text object in PDF units (1/72 of an inch and bottom left). You can use the
            <see cref="M:Leadtools.Pdf.PDFDocumentPage.ConvertPoint(Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFCoordinateType,Leadtools.Pdf.PDFPoint)">PDFDocumentPage.ConvertPoint</see> method to convert the value to a pixels or inches and then to points if required. Refer to
            <see cref="P:Leadtools.Pdf.PDFTextProperties.FontHeight" /> for an example.</para>
        <para>This value contains the external and internal leading of the text item, to get the bounds of the box that exactly surrounds the text object, use
            <see cref="P:Leadtools.Pdf.PDFObject.Bounds">PDFObject.Bounds</see>.</para>
        <para>For more information, refer to <see cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</see>.</para>
      </remarks>
      <seealso cref="T:PDF.Topics.PDFCoordinateSystem">PDF Coordinate System</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.FontIndex">
      <summary>
            Gets or sets the index of a font used by this text item in the font array.
            </summary>
      <value>The 0-based index of font used by this text item into the font array. The default value is 0.</value>
      <remarks>
        <para>To read objects (including text items) from a PDF file, you use the <see cref="M:Leadtools.Pdf.PDFDocument.ParsePages(Leadtools.Pdf.PDFParsePagesOptions,System.Int32,System.Int32)" /> method. After this method returns and depending on the value of
            <see cref="T:Leadtools.Pdf.PDFParsePagesOptions" /> parameter passed to the method, the <see cref="T:Leadtools.Pdf.PDFDocumentPage">PDFDocumentPage's</see><see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts" />, <see cref="P:Leadtools.Pdf.PDFDocumentPage.Objects" /> and <see cref="P:Leadtools.Pdf.PDFDocumentPage.Hyperlinks" />
            collections will be populated with the items of the PDF page. The <see cref="P:Leadtools.Pdf.PDFTextProperties.FontIndex" /> property will contain the index in the <see cref="P:Leadtools.Pdf.PDFDocumentPage.Fonts">PDFDocumentPage.Fonts</see>
            collection that corresponds to the font of this item.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord">
      <summary>
            Gets or sets a value that indicates if this is the last character in a word.
            </summary>
      <value>
        <strong>true</strong> if this is the last character in a word; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>You can use the <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord" /> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine" /> properties to construct the words and lines of the text in a PDF page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine">
      <summary>
            Gets or sets a value that indicates if this is the last character in a line.
            </summary>
      <value>
        <strong>true</strong> if this is the last character in a line; otherwise, it is <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>You can use the <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfWord" /> and <see cref="P:Leadtools.Pdf.PDFTextProperties.IsEndOfLine" /> properties to construct the words and lines of the text in a PDF page.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.Color">
      <summary>
            Gets or sets the color of the text item.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> object that contain the color text item. The default value is an empty <see cref="T:Leadtools.RasterColor" />.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Pdf.PDFObject" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Pdf.PDFTextProperties.IsRTL">
      <summary>
            Gets or sets a value that indicates if this text is Right to Left.
            </summary>
      <value>
        <strong>true</strong> if the text is Right to Left; otherwise, <strong>false</strong>.</value>
      <noremarks />
      <noexample />
    </member>
  </members>
</doc>