<?xml version="1.0"?>
<doc processed="true">
  <assembly>
    <name>Leadtools.Forms.Ocr</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">
      <summary>
        <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> job operations. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Used as type for the following properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Operation">OcrAutoRecognizeManagerJobError.Operation</see> property to
            indicate the operation that cause the error.</para>
              <para>You can set <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see> to
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see> to log and continue when a none critical error
            occurs during the recognition process. The following errors are considered unrecoverable and the recognition will fail regardless on the current
            error mode: <strong>Other</strong>, <strong>CreateDocument</strong>, <strong>PrepareDocument</strong>, <strong>LoadPage</strong>,
            <strong>SavePage</strong>, <strong>AppendLtd</strong>, <strong>SaveDocument</strong> and <strong>Convert</strong>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Operation">OcrAutoRecognizeJobOperationEventArgs.Operation</see> property to
            indicate the operation being run.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> allows you to modify the raster image, OCR page or OCR document during some parts of the operation.
            Refer to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">OcrAutoRecognizeJobOperationEventArgs.PageImage</see> for more
            information an example.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.Other">
      <summary>(0x00000000)<para>Other operation, such as unexpected and unrecoverable errors.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.CreateDocument">
      <summary>(0x00000001)<para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> is creating a document with <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.PrepareDocument">
      <summary>(0x00000002)<para>Preparing the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, in certain situations, by clearing all the pages inside it.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.LoadPage">
      <summary>(0x00000003)<para>Loading the image of a page using <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>. The page is then created using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.PreprocessPage">
      <summary>(0x00000004)<para>Preprocessing a page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.ZonePage">
      <summary>(0x00000005)<para>Zoning a page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZone</see>.</para><para>Note that when using the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation">IOcrAutoRecognizeManager.JobOperation</see> event, you can use this operation to
            zone the page manually as shown in the <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" /> example.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.RecognizePage">
      <summary>(0x00000006)<para>Recognizing a page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.SavePage">
      <summary>(0x00000007)<para>Saving a page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.AppendLtd">
      <summary>(0x00000008)<para>Appending multiple LTD's using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.SaveDocument">
      <summary>(0x00000009)<para>Saving a document using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation.ConvertDocument">
      <summary>(0x0000000A)<para>Converting a document to its final format using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs">
      <summary>Contains data for the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation">IOcrAutoRecognizeManager.JobOperation</see> event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation">IOcrAutoRecognizeManager.JobOperation</see> will trigger when
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>You can use this event to get information on the current operation (creating an OCR document, loading a page, zoning, recognizing, saving, etc.).</para>
        <para>This class contains the following members:</para>
        <table>
          <tr>
            <th>Member</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Status" />
            </td>
            <td>
                     The status of the job. You can set this from the default value of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus">OcrAutoRecognizeManagerJobStatus.Success</see> to
                     <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus">OcrAutoRecognizeManagerJobStatus.Abort</see> to abort the recognition process.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Job" />
            </td>
            <td>
                      The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> currently being run. You can use this member to get information about the job, for example, the
                     image file name and page numbers to recognize and the output document file name and format through <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.JobData">IOcrAutoRecognizeJob.JobData</see>.
                     Note that <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber">OcrAutoRecognizeJobData.LastPageNumber</see> will have the true value of the last page number in the image file
                     if a value of -1 (for up to last page) was passed in the original object used to create <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" />.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" />
            </td>
            <td>
                      A boolean value that indicates whether the engine is preparing to run the operation (the value of <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> is
                     <strong>false</strong>) or whether the operation has already run (the value of 
                     <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> is
                     <strong>true</strong>). This is useful if you want to manipulate operation data as shown in the example.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Operation" />
            </td>
            <td>
                      An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation" /> enumeration member that specifies the current operation.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Document" />
            </td>
            <td>
                      An <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> instance that specifies the OCR document being used in the current operation. This object is not valid and will be null (<strong>Nothing</strong>
                     in Visual Basic) when the current operation is <strong>ConvertDocument</strong> (or in <strong>CreateDocument</strong> with <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> equals to <strong>false</strong>).
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Page" />
            </td>
            <td>
                      an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> instance that specifies the OCR page being used in the current operation. This object is not valid and will be null (<strong>Nothing</strong>
                     in Visual Basic) when the current operation is <strong>CreateDocument</strong>, <strong>PrepareDocument</strong>, <strong>SaveDocument</strong> or <strong>ConvertDocument</strong>.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.ImagePageNumber" />
            </td>
            <td>
                      The page number in the input (image) file name for the current operation. This member is not valid and will be 0 when the
                     current operation is <strong>CreateDocument</strong>, <strong>PrepareDocument</strong>, <strong>SaveDocument</strong> or <strong>ConvertDocument</strong>.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage" />
            </td>
            <td>
                      The raster image object used for the current operation. This member is only valid when the current operation is
                      <strong>LoadPage</strong> and <strong>SavePage</strong>.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.LtdFileName" />
            </td>
            <td>
                      The name of the LEAD Temporary Document (LTD) being used in the current operation. Depending on how the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> was setup, the engine
                     might create LTD files during the recognition process to support multi-threading or recognition of images with large amount of pages. The value of this member is valid
                     <strong>only</strong> when the current operation is <strong>SavePage</strong> (as the LTD for this page), <strong>AppendLtd</strong> (as the source file name) or
                     <strong>ConvertDocument</strong> (as the source file name).
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Format" />
            </td>
            <td>
                      An <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration member that specifies the format being used in the current operation. This member will be equal to
                     the original <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format">OcrAutoRecognizeJobData.Format</see> value except for the following operations: <strong>SavePage</strong> and
                     <strong>AppendLtd</strong> where it will be <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> or <strong>SaveDocument</strong> where it can either be the original
                     format or <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> if LTD is being used to create a temporary document during recognition.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.DocumentFileName" />
            </td>
            <td>
                      The name of the document file being saved in the current operation. This member will be equal to
                     the original <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName">OcrAutoRecognizeJobData.DocumentFileName</see> value except for the following operations: <strong>SavePage</strong> and
                     <strong>AppendLtd</strong> where it will be destination file name or <strong>SaveDocument</strong> where it can either be the original
                     document file name or the name of a temporary LTD file if LTD is being used to create a temporary document during recognition.
                 </td>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.DocumentWriterInstance" />
            </td>
            <td>
                      The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instance being used in the current operation. This member will be equal to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">IOcrDocument.DocumentWriterInstance</see>
                     in all operations where an <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Document" /> is available. When the operation is <strong>ConvertDocument</strong>, this instance will point to the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
                     object being used to convert the document.
                 </td>
          </tr>
        </table>
      </remarks>
      <para>
        <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> allows you to modify the raster image, OCR page or OCR document during some parts of the operation.
            Refer to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">OcrAutoRecognizeJobOperationEventArgs.PageImage</see> for more
            information an example.</para>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private Shared Sub JobOperationExample()
         Dim imageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim documentFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "JobOperation.pdf")
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim autoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager
            AddHandler autoRecognizeManager.JobOperation, AddressOf autoRecognizeManager_JobOperation

            Dim job As IOcrAutoRecognizeJob = _
               autoRecognizeManager.CreateJob(New OcrAutoRecognizeJobData(imageFileName, DocumentFormat.Pdf, documentFileName))
            autoRecognizeManager.RunJob(job)

            RemoveHandler autoRecognizeManager.JobOperation, AddressOf autoRecognizeManager_JobOperation
         End Using
      End Sub

      Private Shared Sub autoRecognizeManager_JobOperation(sender As Object, e As OcrAutoRecognizeJobOperationEventArgs)
         ' We did not pass a zone to the job, so the engine will attempt to do AutoZone unless we
         ' add any zone to the input document.
         ' We can also check for e.PostOperation equals to true and manipulate the zones
         ' found the engine at this point

         ' Add a graphics zone.
         ' If you comment out this code, the result PDF will contain text, but since we will be adding a zone here,
         ' the engine will not auto-zone the document for us. Also, since the zone we are adding is
         ' graphics that takes up the whole page, the result PDF will contain a raster image and no text.
         If Not e.PostOperation AndAlso e.ImagePageNumber = 1 Then
            Dim ocrZone As New OcrZone()
            ocrZone.ZoneType = OcrZoneType.Graphic
            ocrZone.Bounds = New LogicalRectangle(0, 0, e.Page.Width, e.Page.Height, LogicalUnit.Pixel)
            e.Page.Zones.Add(ocrZone)
         End If
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private static void JobOperationExample()
      {
         string imageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string documentFileName = Path.Combine(LEAD_VARS.ImagesDir, "JobOperation.pdf");
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager autoRecognizeManager = ocrEngine.AutoRecognizeManager;
            autoRecognizeManager.JobOperation += new EventHandler&lt;OcrAutoRecognizeJobOperationEventArgs&gt;(autoRecognizeManager_JobOperation);

            IOcrAutoRecognizeJob job = autoRecognizeManager.CreateJob(new OcrAutoRecognizeJobData(imageFileName, DocumentFormat.Pdf, documentFileName));
            autoRecognizeManager.RunJob(job);

            autoRecognizeManager.JobOperation -= new EventHandler&lt;OcrAutoRecognizeJobOperationEventArgs&gt;(autoRecognizeManager_JobOperation);
         }
      }

      private static void autoRecognizeManager_JobOperation(object sender, OcrAutoRecognizeJobOperationEventArgs e)
      {
         // We did not pass a zone to the job, so the engine will attempt to do AutoZone unless we
         // add any zone to the input document.
         // We can also check for e.PostOperation equals to true and manipulate the zones
         // found the engine at this point

         // Add a graphics zone.
         // If you comment out this code, the result PDF will contain text, but since we will be adding a zone here,
         // the engine will not auto-zone the document for us. Also, since the zone we are adding is
         // graphics that takes up the whole page, the result PDF will contain a raster image and no text.
         if (!e.PostOperation &amp;&amp; e.ImagePageNumber == 1)
         {
            OcrZone ocrZone = new OcrZone();
            ocrZone.ZoneType = OcrZoneType.Graphic;
            ocrZone.Bounds = new LogicalRectangle(0, 0, e.Page.Width, e.Page.Height, LogicalUnit.Pixel);
            e.Page.Zones.Add(ocrZone);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--OcrAutoRecognizeJobOperationEventArgs-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.#ctor(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob,Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation,System.Boolean,Leadtools.Forms.Ocr.IOcrDocument,Leadtools.Forms.Ocr.IOcrPage,System.Int32,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String,Leadtools.Forms.DocumentWriters.DocumentWriter)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" /> class with the specified values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="job">The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> currently being run</param>
      <param name="operation">The current operation.</param>
      <param name="postOperation">A value indicating whether the operation has run.</param>
      <param name="document">The OCR document being used.</param>
      <param name="page">The OCR page being.</param>
      <param name="imagePageNumber">The 1-based page number in the image file.</param>
      <param name="ltdFileName">Optional name of the LTD file being used.</param>
      <param name="format">The format being used when saving or converting the document.</param>
      <param name="documentFileName">The document file name being used.</param>
      <param name="documentWriterInstance">The document writer instance being used.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Status">
      <summary>Gets or sets a value indicating whether to continue or abort current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus" /> enumeration member that specifies the operation status.</value>
      <remarks>
        <para>Use this property to abort the current operation (and whole recognition job).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Job">
      <summary>Gets the job associated with this operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> currently being run.</value>
      <remarks>
        <para>You can use this member to get information about the job, for example, the image file name and page numbers to recognize and the output document file name and
            format through <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.JobData">IOcrAutoRecognizeJob.JobData</see>.
            Note that <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber">OcrAutoRecognizeJobData.LastPageNumber</see> will have the true value of the last page number in the image file
            if a value of -1 (for up to last page) was passed in the original object used to create <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation">
      <summary>Gets a value that indicates whether the engine has already run the operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the engine has already run the operation or <strong>false</strong> if the engine is preparing to run
            the operation.</value>
      <remarks>
        <para>This is useful if you want to manipulate operation data as shown in the example.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Operation">
      <summary>Gets the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation" /> enumeration member that specifies the current operation.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Document">
      <summary>Gets the OCR document being used in the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> An <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> instance that specifies the OCR document being used in the current operation. Or a null reference (<strong>Nothing</strong> in Visual Basic)
            if no document is being used.</value>
      <remarks>
        <para>This member is not valid and will be null (<strong>Nothing</strong> in Visual Basic) when the current operation is <strong>ConvertDocument</strong>
            (or in <strong>CreateDocument</strong> with <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> equals to <strong>false</strong>).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Page">
      <summary>Gets the OCR page being used in the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> instance that specifies the OCR page being used in the current operation. Or a null reference (<strong>Nothing</strong> in Visual Basic)
            if no page is being used.</value>
      <remarks>
        <para>This member is not valid and will be null (<strong>Nothing</strong> in Visual Basic) when the current operation is
            <strong>CreateDocument</strong>, <strong>PrepareDocument</strong>, <strong>SaveDocument</strong> or <strong>ConvertDocument</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.ImagePageNumber">
      <summary>Gets the page number in the input (image) file name for the current operation <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The 1-based page number in the input (image) file name for the current operation. Or 0 if no page is being used.</value>
      <remarks>
        <para>This member is not valid and will be 0 when the current operation is <strong>CreateDocument</strong>, <strong>PrepareDocument</strong>,
            <strong>SaveDocument</strong> or <strong>ConvertDocument</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.LtdFileName">
      <summary>Gets the name of the LEAD Temporary Document (LTD) being used in the current operation <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> The name of the LEAD Temporary Document (LTD) being used in the current operation. Or a null reference (<strong>Nothing</strong> in Visual Basic)
            when the current operation is not using LTD.</value>
      <remarks>
        <para>Depending on how the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> was setup, the engine might create LTD files during the recognition process to support multi-threading
            or recognition of images with large amount of pages. The value of this member is valid <strong>only</strong> when the current operation is
            <strong>SavePage</strong> (as the LTD for this page), <strong>AppendLtd</strong> (as the source file name) or <strong>ConvertDocument</strong> (as the source file name).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Format">
      <summary>Gets the document format being used in the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value> An <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration member that specifies the format being used in the current operation.</value>
      <remarks>
        <para>This member will be equal to the original <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format">OcrAutoRecognizeJobData.Format</see> value except for
            the following operations: <strong>SavePage</strong> and <strong>AppendLtd</strong> where it will be <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> or
            <strong>SaveDocument</strong> where it can either be the original format or <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> if LTD is being used to
            create a temporary document during recognition.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.DocumentFileName">
      <summary>Gets the name of the document file being saved in the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The name of the document file being saved in the current operation.</value>
      <remarks>
        <para>This member will be equal to the original <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName">OcrAutoRecognizeJobData.DocumentFileName</see>
            value except for the following operations: <strong>SavePage</strong> and <strong>AppendLtd</strong> where it will be destination file name or
            <strong>SaveDocument</strong> where it can either be the original document file name or the name of a temporary LTD file if LTD is being used to
            create a temporary document during recognition.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.DocumentWriterInstance">
      <summary>Gets the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instance being used in the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instance being used in the current operation.</value>
      <remarks>
        <para>This member will be equal to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">IOcrDocument.DocumentWriterInstance</see> in all operations where an
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Document" /> is avaliable. When the operation is <strong>ConvertDocument</strong>, this instance will point to the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
            object being used to convert the document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">
      <summary>Gets or sets the image used with the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.RasterImage" /> instance that specifies the raster image being used in the current operation if any.</value>
      <remarks>
        <para>This member is valid only when the current operation is:</para>
        <list type="table">
          <listheader>
            <term>Operation</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.LoadPage</see>
            </term>
            <description>
              <para>When the value of <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> is <strong>false</strong>, then <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage" /> holds the raster image object
            to be used to create the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. By default this will be <strong>null</strong> and the engine will load the image from
            the input document.</para>
              <para>You can override this behavior by setting your own <see cref="T:Leadtools.RasterImage" /> in this property. The engine will use the supplied image to
            create the page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.SavePage</see>
            </term>
            <description>
              <para>
                <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage" /> holds the raster image to be used with the final document if the page contains graphics zone (to obtain the
            graphics area) or if the format supports "image over text" such as PDF with Image/Text.</para>
              <para>By default this is either the original image of the page (same instance obtained through
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage</see> with <see cref="T:Leadtools.Forms.Ocr.OcrPageType">OcrPageType.Original</see> or the
            overlay image if the user set a value using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</see>.</para>
              <para>You can set your own image to be used for this purpose by setting the value in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage" /> during this operation when
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> is <strong>false</strong>.</para>
              <para>Note that the engine will not dispose this image reference, therefore, it is recommended that the user will call
            <see cref="M:System.IDisposable.Dispose" /> on <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage" /> in the next event occurance (when <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PostOperation" /> is <strong>true</strong>).</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <!--OcrAutoRecognizeJobOperationEventArgs.PageImage-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus">
      <summary>Job status. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus" /> is used as the type of the
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">OcrAutoRecognizeRunJobEventArgs.Status</see> property that you can set during
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted">IOcrAutoRecognizeManager.JobStarted</see> to optionally abort any pending jobs.</para>
        <para>It is also used as the type of the <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Status">OcrAutoRecognizeJobOperationEventArgs.Status</see> property that you can
            set during <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation">IOcrAutoRecognizeManager.JobOperation</see> event handler to abort any currently running jobs.</para>
        <para>It is also used as the return value from the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">IOcrAutoRecognizeManager.RunJob</see> to indicate
            whether job completed successfully or was aborted due to errors or user action.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus.Success">
      <summary>(0x00000000)<para>The job was completed successfully if this is used as the return value from <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">IOcrAutoRecognizeManager.RunJob</see>,
            or continue with current job if this is used width <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">OcrAutoRecognizeRunJobEventArgs.Status</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus.Abort">
      <summary>(0x00000001)<para>The job was aborted or had errors if this is used as the return value from <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">IOcrAutoRecognizeManager.RunJob</see>,
            or abort current job if this is used width <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">OcrAutoRecognizeRunJobEventArgs.Status</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError">
      <summary>Contains information on an <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> job error. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see> is
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Abort</see>, any error that may occur while running a job will
            result in an exception being thrown.</para>
        <para>If the value of this property is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see>, then
            none critical errors can be logged and running continues. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page. In this mode, the engine will not
            throw an exception if an error occur, instead, all errors will be logged into the job's <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> collection. When
            recognition finishes, you can check if this collection is not empty and get the information of the errors and act upon them according to your application
            logic.</para>
        <para>Each error in <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> contains the following information:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.ImagePageNumber">OcrAutoRecognizeManagerJobError.ImagePageNumber</see>
            </term>
            <description>
              <para>
            The 1-based page number of the page in the source image file that caused the error. This value may be 0 if the error that occur is not specific for
            any page, for example, when creating an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> is called.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Operation" />OcrAutoRecognizeManagerJobError.Operation</term>
            <description>
              <para>
            The operation that caused the error.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Exception" />OcrAutoRecognizeManagerJobError.Exception</term>
            <description>
              <para>
            The exception that was thrown (if any). May be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.#ctor(System.Int32,Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError" /> structure with the given values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imagePageNumber">The 1-based page number of the page in the source image file that caused the error.</param>
      <param name="operation">The operation that caused the error.</param>
      <param name="exception">The exception that was thrown (if any). May be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.ImagePageNumber">
      <summary>Gets or sets the 1-based page number of the page in the source image file that caused the error. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that specifies the 1-based page number of the page in the source image file that caused the error. Default value is 0.</value>
      <remarks>
        <para>This value may be 0 if the error that occur is not specific for
            any page, for example, when creating an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> is called.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Operation">
      <summary>Gets or sets the operation that caused the error. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation" /> enumeration member that specifies the operation that caused the error. Default value
            is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.Other</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Exception">
      <summary>Gets or sets the exception that was thrown (if any). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError.Exception" /> object that specifies the exception that was thrown (if any).
            May be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic). Default value is <strong>null</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">
      <summary>Defines values for the <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see> property. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>If <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see> is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see>,
            then the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> will perform the following actions depending on the current operation:</para>
        <list type="table">
          <listheader>
            <term>Operation</term>
            <description>Action</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.Other</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.CreateDocument</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.PrepareDocument</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.LoadPage</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.PreprocessPage</see>
            </term>
            <description>
              <para>
            Ignore the error and continue to zoning the page.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.ZonePage</see>
            </term>
            <description>
              <para>
            If an error occurred during loading of a zone data from a file, the engine will try to auto-zone the page instead. If an error occurs
            during the auto-zone operation, the engine will skip recognition of the page and save it as a graphics data in the file document. This is useful
            when PDF with image over text option is used.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.RecognizePage</see>
            </term>
            <description>
              <para>
            The engine will skip recognition of the page and save it as a graphics data in the file document. This is useful
            when PDF with image over text option is used.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.SavePage</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.AppendLtd</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.SaveDocument</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobOperation">OcrAutoRecognizeManagerJobOperation.ConvertDocument</see>
            </term>
            <description>
              <para>
            Non-recoverable. The recognition will fail.
              </para>
            </description>
          </item>
        </list>
        <para>For more information, refer to <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode.Abort">
      <summary>(0x00000000)<para>Abort the recognition process.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode.Continue">
      <summary>(0x00000001)<para>Continue on none critical errors.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs">
      <summary>Contains data for the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see> event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This is the equivalent of using standard OCR progress callbacks with the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />, the
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.Data" /> member will contain the same data passed to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.</para>
        <para>Note that the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see> will only occur if
            one thread is used during the recognition process.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> allows you to modify the raster image, OCR page or OCR document during some parts of the operation.
            Refer to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">OcrAutoRecognizeJobOperationEventArgs.PageImage</see> for more
            information an example.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.#ctor(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob,Leadtools.Forms.Ocr.IOcrProgressData)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs" /> class with the specified values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="job">The job that triggered the event.</param>
      <param name="data">Progress data.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.Data">
      <summary>Gets the event progress data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An object of type <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> that contains the progress data.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.Job">
      <summary>Gets the job that triggered the event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An object of type <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> that specifies the job that triggered the event.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs">
      <summary>Contains data for the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted">IOcrAutoRecognizeManager.JobStarted</see> and
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted">IOcrAutoRecognizeManager.JobCompleted</see> events. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted">IOcrAutoRecognizeManager.JobStarted</see> and
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted">IOcrAutoRecognizeManager.JobCompleted</see> will trigger when
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event occurs when a job is about to start. You can use this event to keep track of the number of jobs
            pending running. You can also examine <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">OcrAutoRecognizeRunJobEventArgs.Job</see> to get information on whether
            the job finished successfully and get error status if any. <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> example shows complete source code of how to easily
            accomplish these tasks in your application.</para>
        <para>The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event will always occur when a job is run whether the job is aborted or completed.</para>
        <para>To abort pending jobs in a multi-threaded application using <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />, you subscribe to this event and
            set the value of <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">OcrAutoRecognizeRunJobEventArgs.Status</see> to 
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus">OcrAutoRecognizeManagerJobStatus.Abort</see>. You can also examine 
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">OcrAutoRecognizeRunJobEventArgs.Job</see> and only abort certain jobs depending on your
            application logic.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> allows you to modify the raster image, OCR page or OCR document during some parts of the operation.
            Refer to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">OcrAutoRecognizeJobOperationEventArgs.PageImage</see> for more
            information an example.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.#ctor(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs" /> class with specific values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="job">The job that triggered the event.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">
      <summary>Gets the job that triggered this event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object that specifies the job which was started or completed.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">
      <summary>Gets or sets a value indicating whether to continue or abort current job. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus" /> enumeration member that specifies the job status.</value>
      <remarks>
        <para>Use this property to abort pending jobs before they start. A full example can be found here:
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager">
      <summary>Provides support for the one shot "fire and forget" approach to OCR suitable for unattended recognition. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <keywords>Recognition | OCR|OCR,Engines|OCR,Zoning|OCR,Recognition|OCR,PDF|OCR,Word</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager">IOcrEngine.AutoRecognizeManager</see> property.</para>
        <para>The members of this interface will let you create a document from an image file on disk with optional progress and status monitors.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>
            methods to convert in one line of code an image on disk to a final document with any of the document formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>You can also create jobs using the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> method and then run them synchronously through <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or asynchronously through
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> methods:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <item>
              <term>
                <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands" />
              </term>
              <description>
                <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to perform on each page
            document prior to recognition.</para>
              </description>
            </item>
            <item>
              <item>
                <term>
                  <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode" />
                </term>
                <description>
                  <para>Ability to resume on none critical errors. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page.</para>
                </description>
              </item>
              <item>
                <term>
                  <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> and
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events</term>
                <description>
                  <para>Events to track when both synchronous and asynchronous jobs has started, being run and completed.</para>
                </description>
              </item>
              <item>
                <term>
                  <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs" />
                </term>
                <description>
                  <para>Aborts all running and pending jobs.</para>
                </description>
              </item>
              <item>
                <term>
                  <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace" />
                </term>
                <description>
                  <para>Output debug messages to the standard .NET trace listeners.</para>
                </description>
              </item>
              <term>
                <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />
              </term>
              <description>
                <para>
                  <strong>Important</strong>: not used by the LEADTOOLS Advantage OCR engine.</para>
                <para>Add support for converting a document with unlimited number of pages if the engine does not support it. An OCR recognition operation on a document
            that contains a large amount of pages (10 and more) might result in an out of memory error.</para>
                <para>All of the LEADTOOLS OCR engines supports saving the intermediate recognition results to a temporary LTD file
            (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be appended to this temporary file. When all the
            pages of the document have been recognized, the engine will convert the temporary LTD file to the desired output format.</para>
                <para>The LEADTOOLS Advantage OCR engine handles this operation internally by using a file-based document and does not load more than one page
            in memory at a time and will not use the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />.</para>
                <para>For the other engines, the <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" /> property defines the maximum number of pages processed as a whole. For example,
            if the original document has 20 pages and the value of this property is 8, the engine will recognize the first 8 pages and saves the result to a
            temporary file, recognizes the second 8 pages and append the results, and finally, recognize the last 4 pages and convert the temporary document into
            the final format.</para>
              </description>
            </item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />
            </term>
            <description>
              <para>Maximum number of threads to use per job. You can instruct <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> to use all available machine CPUs/cores when
            recognizing a document. This will greatly reduce the time required to finish the OCR operation.</para>
              <para>The LEADTOOLS Advantage OCR engine uses the system thread pool and does not require a set number of threads. A value of 1 will disable threading
            and any other value will be treated as "use multi-threading".</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> allows you to modify the raster image, OCR page or OCR document during some parts of the operation.
            Refer to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.PageImage">OcrAutoRecognizeJobOperationEventArgs.PageImage</see> for more
            information an example.</para>
        <para>Some OCR engine types support creating multi-threaded documents by creating one <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and multiple <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> each in its own dedicated threads. For more information, refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private Shared Sub OcrAutoRecognizeManagerExample()
         Console.WriteLine("Preparing the source and destination directories...")
         Dim sourceDirectory As String = LEAD_VARS.ImagesDir
         Dim destinationDirectory As String = Path.Combine(LEAD_VARS.ImagesDir, "AutoRecognizeManagerExample")

         ' Prepare the output directory
         If Not Directory.Exists(destinationDirectory) Then
            Directory.CreateDirectory(destinationDirectory)
         End If

         ' OCR some images from the source directory into the destination directory:
         Dim imageFiles As IList(Of String) = New List(Of String)()

         For i As Integer = 1 To 4
            imageFiles.Add(Path.Combine(sourceDirectory, String.Format("Ocr{0}.tif", i)))
         Next

         Console.WriteLine("Creating an instance of the engine...")

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

            ' Use LTD as a temporary format if a document has more than 4 pages to save memory
            ocrAutoRecognizeManager.MaximumPagesBeforeLtd = 4

            ' Use maximum CPUs/cores of current machine to speed up recognition
            ' Either passing 0 or System.Environment.ProcessorCount
            ocrAutoRecognizeManager.MaximumThreadsPerJob = 0

            ' Deskew and auto-orient all pages before recognition
            ocrAutoRecognizeManager.PreprocessPageCommands.Clear()
            ocrAutoRecognizeManager.PreprocessPageCommands.Add(OcrAutoPreprocessPageCommand.Deskew)
            ocrAutoRecognizeManager.PreprocessPageCommands.Add(OcrAutoPreprocessPageCommand.Rotate)

            ' Create PDFs with Image/Text option
            Dim pdfOptions As PdfDocumentOptions = TryCast(ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
            pdfOptions.ImageOverText = True
            ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions)

            ' Loop through all the TIF files in the source directory, convert to PDF in the destination directory
            For Each imageFile As String In imageFiles
               ' Construct the name of the document file
               Dim documentFileName As String = Path.Combine(destinationDirectory, Path.GetFileNameWithoutExtension(imageFile))
               documentFileName = Path.ChangeExtension(documentFileName, "pdf")

               ' OCR the file
               Console.WriteLine("Processing {0}", imageFile)
               ocrAutoRecognizeManager.Run(imageFile, documentFileName, DocumentFormat.Pdf, Nothing, Nothing)
               Console.WriteLine("Saved: {0}", documentFileName)
            Next
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private static void OcrAutoRecognizeManagerExample()
      {
         Console.WriteLine("Preparing the source and destination directories...");
         string sourceDirectory = LEAD_VARS.ImagesDir;
         string destinationDirectory = Path.Combine(LEAD_VARS.ImagesDir, "AutoRecognizeManagerExample");

         // Prepare the output directory
         if (!Directory.Exists(destinationDirectory))
         {
            Directory.CreateDirectory(destinationDirectory);
         }

         // OCR some images from the source directory into the destination directory:
         IList&lt;string&gt; imageFiles = new List&lt;string&gt;();

         for (int i = 1; i &lt;= 4; i++)
         {
            imageFiles.Add(Path.Combine(sourceDirectory, string.Format("Ocr{0}.tif", i)));
         }

         Console.WriteLine("Creating an instance of the engine...");

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Use LTD as a temporary format if a document has more than 4 pages to save memory
            ocrAutoRecognizeManager.MaximumPagesBeforeLtd = 4;

            // Use maximum CPUs/cores of current machine to speed up recognition
            // Either passing 0 or System.Environment.ProcessorCount
            ocrAutoRecognizeManager.MaximumThreadsPerJob = 0;

            // Deskew and auto-orient all pages before recognition
            ocrAutoRecognizeManager.PreprocessPageCommands.Clear();
            ocrAutoRecognizeManager.PreprocessPageCommands.Add(OcrAutoPreprocessPageCommand.Deskew);
            ocrAutoRecognizeManager.PreprocessPageCommands.Add(OcrAutoPreprocessPageCommand.Rotate);

            // Create PDFs with Image/Text option
            PdfDocumentOptions pdfOptions = ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
            pdfOptions.ImageOverText = true;
            ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions);

            // Loop through all the TIF files in the source directory, convert to PDF in the destination directory
            foreach (string imageFile in imageFiles)
            {
               // Construct the name of the document file
               string documentFileName = Path.Combine(destinationDirectory, Path.GetFileNameWithoutExtension(imageFile));
               documentFileName = Path.ChangeExtension(documentFileName, "pdf");

               // OCR the file
               Console.WriteLine("Processing {0}", imageFile);
               ocrAutoRecognizeManager.Run(imageFile, documentFileName, DocumentFormat.Pdf, null, null);
               Console.WriteLine("Saved: {0}", documentFileName);
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrAutoRecognizeManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Converts an image file on disk to a document file in the specified document format with optional multiple single zone files.
            </summary>
      <param name="imageFileName">The name of the file containing the image.</param>
      <param name="documentFileName">The name of the result document file.</param>
      <param name="zoneFileNames">Optional list of file names for prepared zone files for the pages. This parameter can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference.</param>
      <param name="format">The output document format. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will perform the following operations:</para>
        <list type="number">
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Creates one ore more <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to store the pages into. The number of OCR documents created is dependant on
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />. If this value is 0 (maximum CPUs/cores) or is greater than 1 and multiple threads is supported by this
            engine, then more than one document might be created to participate in the recognition process. The document will be created as disk-based.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Loops through all the pages in <paramref name="imageFileName" /> and for each page:
              <list type="number"><item><description><para>
            The page is created using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.
                 </para></description></item><item><description><para>
            If <paramref name="zoneFileNames" /> contains a valid zone file name for the current page (the index in this array matches the index of the page being
            loaded), the zones are loaded with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones</see> and applied to the page. If
            <paramref name="zoneFileNames" /> is a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference or its entry for the current
            page is a <strong>null</strong> reference, auto-decomposing of the page is performed instead with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.
                 </para></description></item><item><description><para><see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called to get the OCR data of the page.
                 </para></description></item><item><description><para>
            For OCR Advantage engine, the page is added to the document using <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrDocument.Pages.Add</see>.
                 </para></description></item><item><description><para>
            For other engines that OCR Advantage: If multiple documents are used or current number of recognized pages is greater than the maximum specified in <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />, then
            current recognition data is saved to a temporary LTD file and the OCR document is cleared.
                 </para></description></item></list></para>
            </description>
          </item>
          <item>
            <description>
              <para>
            When all pages are processed their saved to result file name specified in <paramref name="documentFileName" /> using the format specified in <paramref name="format" />.
            If LTD was used, the temporary file is converted to the final document using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> and
            optionally <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see>.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            All OCR documents and temporary files are deleted.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" /> event or <paramref name="callback" /> to show the operation progress or to abort it if threading is not used. For more information and an
            example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> event to get information regarding the current operation being performed. For more information and an
            example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" />.
              </para>
            </description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with this method:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />
            </term>
            <description>
              <para>Add support for converting a document with unlimited number of pages. An OCR recognition operation on a document that contains a large
            amount of pages (10 and more) might result in an out of memory error.</para>
              <para>All of the LEADTOOLS OCR engines supports saving the intermediate recognition results to a temporary LTD file
            (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be appended to this temporary file. When all the
            pages of the document have been recognized, the engine will convert the temporary LTD file to the desired output format.</para>
              <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" /> property defines the maximum number of pages processed as a whole. For example,
            if the original document has 20 pages and the value of this property is 8, the engine will recognize the first 8 pages and saves the result to a
            temporary file, recognizes the second 8 pages and append the results, and finally, recognize the last 4 pages and convert the temporary document into
            the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands" />
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />
            </term>
            <description>
              <para>Maximum number of threads to use per job. You can instruct <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> to use all available machine CPUs/cores when
            recognizing a document. This will greatly reduce the time required to finish the OCR operation.</para>
              <para>The LEADTOOLS Advantage OCR engine uses the system thread pool and does not require a set number of threads. A value of 1 will disable threading
            and any other value will be treated as "use multi-threading".</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode" />
            </term>
            <description>
              <para>Ability to resume on none critical errors. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> and <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events</term>
            <description>
              <para>Events to track when both synchronous and asynchronous jobs has started, being run and completed.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs" />
            </term>
            <description>
              <para>Aborts all running and pending jobs.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace" />
            </term>
            <description>
              <para>Output debug messages to the standard .NET trace listeners.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private Shared Sub OcrAutoRecognizeManagerRun1Example()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

            ' Recognize the document
            ocrAutoRecognizeManager.Run(tifFileName, pdfFileName, Nothing, DocumentFormat.Pdf, Nothing)
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private static void OcrAutoRecognizeManagerRun1Example()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Recognize the document
            ocrAutoRecognizeManager.Run(tifFileName, pdfFileName, null, DocumentFormat.Pdf, null);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrAutoRecognizeManager.Run1-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Converts an image file on disk to a document file in the specified document format with optional multi-page zone file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imageFileName">The name of the file containing the image.</param>
      <param name="documentFileName">The name of the result document file.</param>
      <param name="zonesFileName">Optional name of prepared multi-page zone file. This parameter can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference.</param>
      <param name="format">The output document format. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will perform the following operations:</para>
        <list type="number">
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Creates one ore more <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to store the pages into. The number of OCR documents created is dependant on
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />. If this value is 0 (maximum CPUs/cores) or is greater than 1 and multiple threads is supported by this
            engine, then more than one document might be created to participate in the recognition process. The document will be created as disk-based.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Loops through all the pages in <paramref name="imageFileName" /> and for each page:
              <list type="number"><item><description><para>
            The page is created using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.
                 </para></description></item><item><description><para>
            If <paramref name="zonesFileName" /> contains a valid multi-page zone file name and has an entry for the current page, then the zones are loaded
            with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> and applied to the page. If
            <paramref name="zonesFileName" /> is a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference or it does not contain an
            equivalent page number, auto-decomposing of the page is performed instead with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.
                 </para></description></item><item><description><para><see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called to get the OCR data of the page.
                 </para></description></item><item><description><para>
            For OCR Advantage engine, the page is added to the document using <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrDocument.Pages.Add</see>.
                 </para></description></item><item><description><para>
            For other engines that OCR Advantage: If multiple documents are used or current number of recognized pages is greater than the maximum specified in <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />, then
            current recognition data is saved to a temporary LTD file and the OCR document is cleared.
                 </para></description></item></list></para>
            </description>
          </item>
          <item>
            <description>
              <para>
            When all pages are processed their saved to result file name specified in <paramref name="documentFileName" /> using the format specified in <paramref name="format" />.
            If LTD was used, the temporary file is converted to the final document using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> and
            optionally <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see>.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            All OCR documents and temporary files are deleted.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" /> event or <paramref name="callback" /> to show the operation progress or to abort it if threading is not used. For more information and an
            example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> event to get information regarding the current operation being performed. For more information and an
            example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" />.
              </para>
            </description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with this method:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />
            </term>
            <description>
              <para>Add support for converting a document with unlimited number of pages. An OCR recognition operation on a document that contains a large
            amount of pages (10 and more) might result in an out of memory error.</para>
              <para>All of the LEADTOOLS OCR engines supports saving the intermediate recognition results to a temporary LTD file
            (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be appended to this temporary file. When all the
            pages of the document have been recognized, the engine will convert the temporary LTD file to the desired output format.</para>
              <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" /> property defines the maximum number of pages processed as a whole. For example,
            if the original document has 20 pages and the value of this property is 8, the engine will recognize the first 8 pages and saves the result to a 
            temporary file, recognizes the second 8 pages and append the results, and finally, recognize the last 4 pages and convert the temporary document into
            the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands" />
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />
            </term>
            <description>
              <para>Maximum number of threads to use per job. You can instruct <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> to use all available machine CPUs/cores when
            recognizing a document. This will greatly reduce the time required to finish the OCR operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode" />
            </term>
            <description>
              <para>Ability to resume on none critical errors. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> and <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events</term>
            <description>
              <para>Events to track when both synchronous and asynchronous jobs has started, being run and completed.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs" />
            </term>
            <description>
              <para>Aborts all running and pending jobs.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace" />
            </term>
            <description>
              <para>Output debug messages to the standard .NET trace listeners.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private Shared Sub OcrAutoRecognizeManagerRun2Example()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

            ' Recognize the document
            ocrAutoRecognizeManager.Run(tifFileName, pdfFileName, DocumentFormat.Pdf, Nothing, Nothing)
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private static void OcrAutoRecognizeManagerRun2Example()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Recognize the document
            ocrAutoRecognizeManager.Run(tifFileName, pdfFileName, DocumentFormat.Pdf, null, null);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrAutoRecognizeManager.Run2-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)">
      <summary>Creates a new job. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="jobData">The job data.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object that is ready to run.</returns>
      <remarks>
        <para>Use this method to create an OCR job that is ready to run. When this method returns, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> to start this job.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">
      <summary>Runs a job <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="job">The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> to run this parameter cannot be <strong>null</strong> (<strong>Nothing</strong> in
            Visual Basic). Use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> to create a job.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus" /> enumeration member that determines whether the job was completed successfully
            or aborted due to errors or user action.</returns>
      <remarks>
        <para>If you call this method from the same thread that created <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />, then the current thread will block till
            this method returns. To run a job asynchronously, use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
        <para>When this method returns, the <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> member of 
            <paramref name="job" /> will contain any errors that might have occurred during the recognition process.</para>
        <para>To use this method, initialize a new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object with the job's parameters (input image file name,
            pages, output document format, output document name, optional zones file name, etc.), then use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> to create the
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object passed as <paramref name="job" /> to this method. Finally, call <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> passing
            the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object.</para>
        <para>This method will perform the following operations:</para>
        <list type="number">
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Creates one ore more <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to store the pages into. The number of OCR documents created is dependant on
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />. If this value is 0 (maximum CPUs/cores) or is greater than 1 and multiple threads is supported by this
            engine, then more than one document might be created to participate in the recognition process. The document will be created as disk-based.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Loops through the pages specified in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber">OcrAutoRecognizeJobData.FirstPageNumber</see> and
            in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber">OcrAutoRecognizeJobData.LastPageNumber</see> in
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName">OcrAutoRecognizeJobData.ImageFileName</see> and for each page:
              <list type="number"><item><description><para>
            The page is created using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.
                 </para></description></item><item><description><para>
            If <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName">OcrAutoRecognizeJobData.ZonesFileName</see> contains a valid multi-page zone file name and has an entry for the current page, then the zones are loaded
            with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> and applied to the page. If
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName">OcrAutoRecognizeJobData.ZonesFileName</see> is a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference or it does not contain an
            equivalent page number, auto-decomposing of the page is performed instead with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>. A valid multi-page zone file that has entries 
            for all document pages is generated by saving document zones using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> not <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones</see> 
            since <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones</see> does not save the page number.
                 </para></description></item><item><description><para><see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called to get the OCR data of the page.
                 </para></description></item><item><description><para>
            For OCR Advantage engine, the page is added to the document using <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrDocument.Pages.Add</see>.
                 </para></description></item><item><description><para>
            For other engines that OCR Advantage: If multiple documents are used or current number of recognized pages is greater than the maximum specified in <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />, then
            current recognition data is saved to a temporary LTD file and the OCR document is cleared.
                 </para></description></item></list></para>
            </description>
          </item>
          <item>
            <description>
              <para>
            When all pages are processed their saved to result file name specified in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName">OcrAutoRecognizeJobData.DocumentFileName</see> using the format specified
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format">OcrAutoRecognizeJobData.Format</see> If LTD was used, the temporary file is converted to the final document
            using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> and optionally <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see>.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            All OCR documents and temporary files are deleted.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" /> event to show the operation progress or to abort it if threading is not used. For more information and an
            example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> event to get information regarding the current operation being performed. For more information and an
            example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" />.
              </para>
            </description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with this method:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />
            </term>
            <description>
              <para>Add support for converting a document with unlimited number of pages. An OCR recognition operation on a document that contains a large
            amount of pages (10 and more) might result in an out of memory error.</para>
              <para>All of the LEADTOOLS OCR engines supports saving the intermediate recognition results to a temporary LTD file
            (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be appended to this temporary file. When all the
            pages of the document have been recognized, the engine will convert the temporary LTD file to the desired output format.</para>
              <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" /> property defines the maximum number of pages processed as a whole. For example,
            if the original document has 20 pages and the value of this property is 8, the engine will recognize the first 8 pages and saves the result to a
            temporary file, recognizes the second 8 pages and append the results, and finally, recognize the last 4 pages and convert the temporary documentto
            the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands" />
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />
            </term>
            <description>
              <para>Maximum number of threads to use per job. You can instruct <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> to use all available machine CPUs/cores when
            recognizing a document. This will greatly reduce the time required to finish the OCR operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode" />
            </term>
            <description>
              <para>Ability to resume on none critical errors. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> and <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events</term>
            <description>
              <para>Events to track when both synchronous and asynchronous jobs has started, being run and completed.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs" />
            </term>
            <description>
              <para>Aborts all running and pending jobs.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace" />
            </term>
            <description>
              <para>Output debug messages to the standard .NET trace listeners.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">   Imports Leadtools
   Imports Leadtools.Codecs
   Imports Leadtools.Forms.Ocr
   Imports Leadtools.Forms.DocumentWriters
   Imports Leadtools.Forms
   Imports Leadtools.WinForms

   Public Class RunJobExample
      ' Number of documents that are pending
      Private _documentsPending As Integer
      ' Event to trigger when all documents are finished
      Private _allDocumentsFinishedEvent As AutoResetEvent
      Public Sub Start()
         Dim imagesDirectory As String = LEAD_VARS.ImagesDir
         Dim documentsDirectory As String = Path.Combine(LEAD_VARS.ImagesDir, "RunJobExample")

         ' Create the output (documents) directory
         If Not Directory.Exists(documentsDirectory) Then
            Directory.CreateDirectory(documentsDirectory)
         End If

         ' Get all TIF files in input (images) directory
         Dim imageFileNames As String() = Directory.GetFiles(imagesDirectory, "*.tif")
         If imageFileNames.Length = 0 Then
            Console.WriteLine("No images to OCR")
            Return
         End If

         ' Create a new OCR engine instance
         Dim engineType As OcrEngineType = OcrEngineType.Advantage
         Console.WriteLine(String.Format("Starting up {0} engine", engineType))
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(engineType, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Setup document PDF save options: Image/Text with CCITT G4 encoding for B/W
            Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance
            Dim pdfOptions As PdfDocumentOptions = TryCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
            pdfOptions.ImageOverText = True
            pdfOptions.DocumentType = PdfDocumentType.Pdf
            pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None
            pdfOptions.OneBitImageCompression = OneBitImageCompressionType.FaxG4
            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

            ' We are going to use multiple-threads, so disable threading in
            ' IOcrAutoRecognizeManager
            Dim autoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager
            autoRecognizeManager.MaximumThreadsPerJob = 1

            ' Tell the recognize manager to continue on errors
            autoRecognizeManager.JobErrorMode = OcrAutoRecognizeManagerJobErrorMode.[Continue]

            ' Instead of using events to trigger when documents are done,
            ' we will use the JobCompleted events of IOcrAutoRecognizeManager
            ' to decrement a counter and trigger one event when the counter reaches 0
            AddHandler autoRecognizeManager.JobStarted, AddressOf autoRecognizeManager_JobStarted
            AddHandler autoRecognizeManager.JobCompleted, AddressOf autoRecognizeManager_JobCompleted

            Dim count As Integer = imageFileNames.Length
            _documentsPending = count
            _allDocumentsFinishedEvent = New AutoResetEvent(False)

            For i As Integer = 0 To count - 1
               ' Create the job data
               Dim imageFileName As String = imageFileNames(i)
               Dim name As String = "Document " &amp; (i + 1).ToString()
               Console.WriteLine("Queuing {0} file {1}", name, imageFileName)

               Dim data As New JobData()
               data.AutoRecognizeManager = autoRecognizeManager
               data.ImageFileName = imageFileName
               data.DocumentFileName = Path.Combine(documentsDirectory, Path.GetFileNameWithoutExtension(imageFileName) &amp; ".pdf")
               data.JobName = name

               ' Queue this job
               ThreadPool.QueueUserWorkItem(New WaitCallback(AddressOf RunJob), data)
            Next

            ' Wait for all documents to finish
            _allDocumentsFinishedEvent.WaitOne()
            _allDocumentsFinishedEvent.Close()

            RemoveHandler autoRecognizeManager.JobStarted, AddressOf autoRecognizeManager_JobStarted
            RemoveHandler autoRecognizeManager.JobCompleted, AddressOf autoRecognizeManager_JobCompleted

            Console.WriteLine("All documents finished, check the result files in {0}", documentsDirectory)
         End Using
      End Sub

      Private Sub autoRecognizeManager_JobStarted(sender As Object, e As OcrAutoRecognizeRunJobEventArgs)
         ' This is not strictly needed in this example, we will
         ' use it to show information
         Console.WriteLine("{0} started...", e.Job.JobData.JobName)

         ' Check if we need to abort
         If AbortJobs(e.Job) Then
            ' Yes, abort all jobs
            e.Job.AutoRecognizeManager.AbortAllJobs()
         End If
      End Sub

      Private Sub autoRecognizeManager_JobCompleted(sender As Object, e As OcrAutoRecognizeRunJobEventArgs)
         Dim message As String = String.Format("{0} completed ", e.Job.JobData.JobName)

         Dim job As IOcrAutoRecognizeJob = e.Job

         ' Show any errors
         If job.Errors.Count = 0 Then
            message += "successfully..."
         Else
            message += "with errors, first error is " + job.Errors(0).Exception.Message

            ' And save the errors to a text file in the document directory
            Dim documentFileName As String = job.JobData.DocumentFileName
            Dim textPathName As String = _
               Path.Combine(Path.GetDirectoryName(documentFileName), Path.GetFileNameWithoutExtension(documentFileName) &amp; "_errors.txt")

            Using writer As StreamWriter = File.CreateText(textPathName)
               writer.WriteLine(job.JobData.JobName)
               writer.WriteLine("Data:")
               writer.WriteLine(" Image file name: " &amp; job.JobData.ImageFileName)
               writer.WriteLine(" First page number: " &amp; job.JobData.FirstPageNumber)
               writer.WriteLine(" Last page number: " &amp; job.JobData.LastPageNumber)
               writer.WriteLine(" Format:" &amp; job.JobData.Format)
               writer.WriteLine(" Document file name: " &amp; job.JobData.DocumentFileName)
               writer.WriteLine("Errors:")

               For Each [error] As OcrAutoRecognizeManagerJobError In job.Errors
                  writer.WriteLine(" Page: {0} during {1}. Error: {2}", [error].ImagePageNumber, [error].Operation, [error].Exception.Message)
               Next
            End Using
         End If

         Console.WriteLine(message)

         ' Decrement the documents count, when we reach 0, we are done
         ' Since this will be called from multiple threads, we need
         ' to use a thread-safety procedure
         Dim pending As Integer = Interlocked.Decrement(_documentsPending)

         ' If we are the last document, wait up main thread
         If pending = 0 Then
            _allDocumentsFinishedEvent.Set()
         End If
      End Sub

      Private Class JobData
         Public AutoRecognizeManager As IOcrAutoRecognizeManager
         Public ImageFileName As String
         Public DocumentFileName As String
         Public JobName As String
      End Class

      Private Sub RunJob(state As Object)
         Dim data As JobData = TryCast(state, JobData)

         Console.WriteLine("Running {0}", data.JobName)

         ' Run it
         Dim jobData As New OcrAutoRecognizeJobData(data.ImageFileName, DocumentFormat.Pdf, data.DocumentFileName)
         jobData.JobName = data.JobName
         Dim job As IOcrAutoRecognizeJob = data.AutoRecognizeManager.CreateJob(jobData)
         data.AutoRecognizeManager.RunJob(job)
      End Sub

      Private Function AbortJobs(ocrJob As IOcrAutoRecognizeJob) As Boolean
         ' In your application, you can check if abortion is required, for example, if the user
         ' has pressed the Cancel button on a progress bar or if your service is shutting down.

         ' In this example, we will never abort, but you can change this code to return true
         ' upon any condition (or when a specific job is about to start)
         ' and the engine will abort all current and pending jobs
         Return False
      End Function
   End Class

   Public NotInheritable Class LEAD_VARS
   Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
   End Class
</code>
        <code lang="CS">   using Leadtools;
   using Leadtools.Codecs;
   using Leadtools.Forms.Ocr;
   using Leadtools.Forms.DocumentWriters;
   using Leadtools.Forms;
   using Leadtools.WinForms;

   public class RunJobExample
   {
      // Number of documents that are pending
      private int _documentsPending;
      // Event to trigger when all documents are finished
      private AutoResetEvent _allDocumentsFinishedEvent;
      public void Start()
      {
         string imagesDirectory = LEAD_VARS.ImagesDir;
         string documentsDirectory = Path.Combine(LEAD_VARS.ImagesDir, "RunJobExample");

         // Create the output (documents) directory
         if (!Directory.Exists(documentsDirectory))
         {
            Directory.CreateDirectory(documentsDirectory);
         }

         // Get all TIF files in input (images) directory
         string[] imageFileNames = Directory.GetFiles(imagesDirectory, "*.tif");
         if (imageFileNames.Length == 0)
         {
            Console.WriteLine("No images to OCR");
            return;
         }

         // Create a new OCR engine instance
         OcrEngineType engineType = OcrEngineType.Advantage;
         Console.WriteLine(string.Format("Starting up {0} engine", engineType));
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(engineType, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Setup document PDF save options: Image/Text with CCITT G4 encoding for B/W
            DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;
            PdfDocumentOptions pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
            pdfOptions.ImageOverText = true;
            pdfOptions.DocumentType = PdfDocumentType.Pdf;
            pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None;
            pdfOptions.OneBitImageCompression = OneBitImageCompressionType.FaxG4;
            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

            // We are going to use multiple-threads, so disable threading in
            // IOcrAutoRecognizeManager
            IOcrAutoRecognizeManager autoRecognizeManager = ocrEngine.AutoRecognizeManager;
            autoRecognizeManager.MaximumThreadsPerJob = 1;

            // Tell the recognize manager to continue on errors
            autoRecognizeManager.JobErrorMode = OcrAutoRecognizeManagerJobErrorMode.Continue;

            // Instead of using events to trigger when documents are done,
            // we will use the JobCompleted events of IOcrAutoRecognizeManager
            // to decrement a counter and trigger one event when the counter reaches 0
            autoRecognizeManager.JobStarted += new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(autoRecognizeManager_JobStarted);
            autoRecognizeManager.JobCompleted += new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(autoRecognizeManager_JobCompleted);

            int count = imageFileNames.Length;
            _documentsPending = count;
            _allDocumentsFinishedEvent = new AutoResetEvent(false);

            for (int i = 0; i &lt; count; i++)
            {
               // Create the job data
               string imageFileName = imageFileNames[i];
               string name = "Document " + (i + 1).ToString();
               Console.WriteLine("Queuing {0} file {1}", name, imageFileName);

               JobData data = new JobData();
               data.AutoRecognizeManager = autoRecognizeManager;
               data.ImageFileName = imageFileName;
               data.DocumentFileName = Path.Combine(documentsDirectory, Path.GetFileNameWithoutExtension(imageFileName) + ".pdf");
               data.JobName = name;

               // Queue this job
               ThreadPool.QueueUserWorkItem(new WaitCallback(RunJob), data);
            }

            // Wait for all documents to finish
            _allDocumentsFinishedEvent.WaitOne();
            _allDocumentsFinishedEvent.Close();

            autoRecognizeManager.JobStarted -= new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(autoRecognizeManager_JobStarted);
            autoRecognizeManager.JobCompleted -= new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(autoRecognizeManager_JobCompleted);

            Console.WriteLine("All documents finished, check the result files in {0}", documentsDirectory);
         }
      }

      private void autoRecognizeManager_JobStarted(object sender, OcrAutoRecognizeRunJobEventArgs e)
      {
         // This is not strictly needed in this example, we will
         // use it to show information
         Console.WriteLine("{0} started...", e.Job.JobData.JobName);

         // Check if we need to abort
         if (AbortJobs(e.Job))
         {
            // Yes, abort all jobs
            e.Job.AutoRecognizeManager.AbortAllJobs();
         }
      }

      private void autoRecognizeManager_JobCompleted(object sender, OcrAutoRecognizeRunJobEventArgs e)
      {
         string message = string.Format("{0} completed ", e.Job.JobData.JobName);

         IOcrAutoRecognizeJob job = e.Job;

         // Show any errors
         if (job.Errors.Count == 0)
         {
            message += "successfully...";
         }
         else
         {
            message += "with errors, first error is " + job.Errors[0].Exception.Message;

            // And save the errors to a text file in the document directory
            string documentFileName = job.JobData.DocumentFileName;
            string textPathName = Path.Combine(Path.GetDirectoryName(documentFileName), Path.GetFileNameWithoutExtension(documentFileName) + "_errors.txt");
            using (StreamWriter writer = File.CreateText(textPathName))
            {
               writer.WriteLine(job.JobData.JobName);
               writer.WriteLine("Data:");
               writer.WriteLine(" Image file name: " + job.JobData.ImageFileName);
               writer.WriteLine(" First page number: " + job.JobData.FirstPageNumber);
               writer.WriteLine(" Last page number: " + job.JobData.LastPageNumber);
               writer.WriteLine(" Format:" + job.JobData.Format);
               writer.WriteLine(" Document file name: " + job.JobData.DocumentFileName);
               writer.WriteLine("Errors:");

               foreach (OcrAutoRecognizeManagerJobError error in job.Errors)
               {
                  writer.WriteLine(" Page: {0} during {1}. Error: {2}", error.ImagePageNumber, error.Operation, error.Exception.Message);
               }
            }
         }

         Console.WriteLine(message);

         // Decrement the documents count, when we reach 0, we are done
         // Since this will be called from multiple threads, we need
         // to use a thread-safety procedure
         int pending = Interlocked.Decrement(ref _documentsPending);

         // If we are the last document, wait up main thread
         if (pending == 0)
         {
            _allDocumentsFinishedEvent.Set();
         }
      }

      private class JobData
      {
         public IOcrAutoRecognizeManager AutoRecognizeManager;
         public string ImageFileName;
         public string DocumentFileName;
         public string JobName;
      }

      private void RunJob(object state)
      {
         JobData data = state as JobData;

         Console.WriteLine("Running {0}", data.JobName);

         // Run it
         OcrAutoRecognizeJobData jobData = new OcrAutoRecognizeJobData(data.ImageFileName, DocumentFormat.Pdf, data.DocumentFileName);
         jobData.JobName = data.JobName;
         IOcrAutoRecognizeJob job = data.AutoRecognizeManager.CreateJob(jobData);
         data.AutoRecognizeManager.RunJob(job);
      }

      private bool AbortJobs(IOcrAutoRecognizeJob ocrJob)
      {
         // In your application, you can check if abortion is required, for example, if the user
         // has pressed the Cancel button on a progress bar or if your service is shutting down.

         // In this example, we will never abort, but you can change this code to return true
         // upon any condition (or when a specific job is about to start)
         // and the engine will abort all current and pending jobs
         return false;
      }
   }

   static class LEAD_VARS
   {
   public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
   }
</code>
        <!--IOcrAutoRecognizeManager.RunJob-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">
      <summary>Runs a job asynchronously <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="job">The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> to run this parameter cannot be <strong>null</strong> (<strong>Nothing</strong> in
            Visual Basic). Use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> to create a job.</param>
      <remarks>
        <para>This method will create an internal worker thread and return control immediately to the called. When the job is completed, the
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> member of <paramref name="job" /> will contain any errors that might
            have occurred during the recognition process. To get notification when the job is completed (whether successfully or with aborted due to errors
            or through user action), subscribe to the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events.</para>
        <para>To run a job synchronously, use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
        <para>To use this method, initialize a new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object with the job's parameters (input image file name,
            pages, output document format, output document name, optional zones file name, etc.), then use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> to create the
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object passed as <paramref name="job" /> to this method. Finally, call <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> passing
            the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object.</para>
        <para>This method will perform the following operations:</para>
        <list type="number">
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Creates one ore more <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to store the pages into. The number of OCR documents created is dependant on
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />. If this value is 0 (maximum CPUs/cores) or is greater than 1 and multiple threads is supported by this
            engine, then more than one document might be created to participate in the recognition process. The document will be created as disk-based.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            Loops through the pages specified in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber">OcrAutoRecognizeJobData.FirstPageNumber</see> and
            in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber">OcrAutoRecognizeJobData.LastPageNumber</see> in
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName">OcrAutoRecognizeJobData.ImageFileName</see> and for each page:
              <list type="number"><item><description><para>
            The page is created using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.
                 </para></description></item><item><description><para>
            If <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName">OcrAutoRecognizeJobData.ZonesFileName</see> contains a valid multi-page zone file name and has an entry for the current page, then the zones are loaded
            with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> and applied to the page. If
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName">OcrAutoRecognizeJobData.ZonesFileName</see> is a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference or it does not contain an
            equivalent page number, auto-decomposing of the page is performed instead with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.
                 </para></description></item><item><description><para><see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called to get the OCR data of the page.
                 </para></description></item><item><description><para>
            For OCR Advantage engine, the page is added to the document using <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrDocument.Pages.Add</see>.
                 </para></description></item><item><description><para>
            For other engines that OCR Advantage: If multiple documents are used or current number of recognized pages is greater than the maximum specified in <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />, then
            current recognition data is saved to a temporary LTD file and the OCR document is cleared.
                 </para></description></item></list></para>
            </description>
          </item>
          <item>
            <description>
              <para>
            When all pages are processed their saved to result file name specified in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName">OcrAutoRecognizeJobData.DocumentFileName</see> using the format specified
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format">OcrAutoRecognizeJobData.Format</see> If LTD was used, the temporary file is converted to the final document
            using <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> and optionally <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see>.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            All OCR documents and temporary files are deleted.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event is triggered.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" /> event to show the operation progress or to abort it if threading is not used. For more information and an
            example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
            You can use the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> event to get information regarding the current operation being performed. For more information and an
            example, refer to <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" />.
              </para>
            </description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with this method:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />
            </term>
            <description>
              <para>Add support for converting a document with unlimited number of pages. An OCR recognition operation on a document that contains a large
            amount of pages (10 and more) might result in an out of memory error.</para>
              <para>All of the LEADTOOLS OCR engines supports saving the intermediate recognition results to a temporary LTD file
            (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be appended to this temporary file. When all the
            pages of the document have been recognized, the engine will convert the temporary LTD file to the desired output format.</para>
              <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" /> property defines the maximum number of pages processed as a whole. For example,
            if the original document has 20 pages and the value of this property is 8, the engine will recognize the first 8 pages and saves the result to a
            temporary file, recognizes the second 8 pages and append the results, and finally, recognize the last 4 pages and convert the temporary documentto
            the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands" />
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" />
            </term>
            <description>
              <para>Maximum number of threads to use per job. You can instruct <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> to use all available machine CPUs/cores when
            recognizing a document. This will greatly reduce the time required to finish the OCR operation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode" />
            </term>
            <description>
              <para>Ability to resume on none critical errors. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" />, <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> and <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events</term>
            <description>
              <para>Events to track when both synchronous and asynchronous jobs has started, being run and completed.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs" />
            </term>
            <description>
              <para>Aborts all running and pending jobs.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace" />
            </term>
            <description>
              <para>Output debug messages to the standard .NET trace listeners.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private _jobFinishedEvent As AutoResetEvent
      Private Sub RunJobAsyncExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

            ' Create the job
            Dim ocrJobData As New OcrAutoRecognizeJobData(tifFileName, DocumentFormat.Pdf, pdfFileName)
            ocrJobData.JobName = "MyJob"
            Dim ocrJob As IOcrAutoRecognizeJob = ocrAutoRecognizeManager.CreateJob(ocrJobData)

            ' Create the event
            _jobFinishedEvent = New AutoResetEvent(False)

            ' Run the job in a thread and wait for it to be done
            ' We will use the JobCompleted event to get notified when
            ' the job is finished
            AddHandler ocrAutoRecognizeManager.JobCompleted, AddressOf ocrAutoRecognizeManager_JobCompleted
            Console.WriteLine("Running the job...")
            ocrAutoRecognizeManager.RunJobAsync(ocrJob)

            Console.WriteLine("Waiting for the job to complete...")
            _jobFinishedEvent.WaitOne()
            Console.WriteLine("Done...")
            _jobFinishedEvent.Close()
            RemoveHandler ocrAutoRecognizeManager.JobCompleted, AddressOf ocrAutoRecognizeManager_JobCompleted
         End Using
      End Sub

      Private Sub ocrAutoRecognizeManager_JobCompleted(sender As Object, e As OcrAutoRecognizeRunJobEventArgs)
         ' Tell main thread we are done
         _jobFinishedEvent.Set()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private AutoResetEvent _jobFinishedEvent;
      private void RunJobAsyncExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Create the job
            OcrAutoRecognizeJobData ocrJobData = new OcrAutoRecognizeJobData(tifFileName, DocumentFormat.Pdf, pdfFileName);
            ocrJobData.JobName = "MyJob";
            IOcrAutoRecognizeJob ocrJob = ocrAutoRecognizeManager.CreateJob(ocrJobData);

            // Create the event
            _jobFinishedEvent = new AutoResetEvent(false);

            // Run the job in a thread and wait for it to be done
            // We will use the JobCompleted event to get notified when
            // the job is finished
            ocrAutoRecognizeManager.JobCompleted += new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(ocrAutoRecognizeManager_JobCompleted);
            Console.WriteLine("Running the job...");
            ocrAutoRecognizeManager.RunJobAsync(ocrJob);

            Console.WriteLine("Waiting for the job to complete...");
            _jobFinishedEvent.WaitOne();
            Console.WriteLine("Done...");
            _jobFinishedEvent.Close();
            ocrAutoRecognizeManager.JobCompleted -= new EventHandler&lt;OcrAutoRecognizeRunJobEventArgs&gt;(ocrAutoRecognizeManager_JobCompleted);
         }
      }

      private void ocrAutoRecognizeManager_JobCompleted(object sender, OcrAutoRecognizeRunJobEventArgs e)
      {
         // Tell main thread we are done
         _jobFinishedEvent.Set();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrAutoRecognizeManager.RunJobAsync-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.AbortAllJobs">
      <summary>Aborts all running and pending jobs. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Call this method to cause all running and pending jobs started with
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> to gracefully abort. Notice that this method will only triggers the abortion
            operation and returns immediately. You must still add synchronization code if your application logic needs to be informed when all
            jobs are completed/aborted. For a complete example on how to accomplish this, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd">
      <summary>Gets or sets a value that indicate the maximum number of pages to process before using LTD as a temporary format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An integer value that indicate the maximum number of pages to process before using LTD as a temporary format. Default value is 8.</value>
      <remarks>
        <para>The LEADTOOLS Advantage OCR engine handles this operation internally by using a file-based document and does not load more than one page
            in memory at a time and will not use the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd" />.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> methods:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd">IOcrAutoRecognizeManager.MaximumPagesBeforeLtd</see>
            </term>
            <description>
              <para>Used to add support for converting a document with unlimited number of pages. An OCR recognition operation on a document
            that contains a large amount of pages (10 and more) might result in an out of memory error. All of the LEADTOOLS OCR engines supports saving
            the intermediate recognition results to a temporary LTD file (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be
            appended to this temporary file. When all the pages of the document have been recognized, the engine will convert the temporary LTD file to the desired
            output format. The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd">IOcrAutoRecognizeManager.MaximumPagesBeforeLtd</see> property defines the maximum
            number of pages processed as a whole. For example, if the original document has 20 pages and the value of this property is 8, the engine will
            recognize the first 8 pages and saves the result to a temporary file, recognizes the second 8 pages and append the results, and finally,
            recognize the last 4 pages and convert the temporary document to the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands">IOcrAutoRecognizeManager.PreprocessPageCommands</see>
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
        </list>
        <para>
          <strong>Note:</strong> This property is not used and will be ignored when using engine native format (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> 
            and <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands">
      <summary>Gets a list of the auto-preprocess commands to perform on each document page prior to recognition. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A list of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> commands to perform on each document page prior to recognition. Default value is an array of on item (<see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Deskew</see>).</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> interface also has the following options to use with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> methods:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd">IOcrAutoRecognizeManager.MaximumPagesBeforeLtd</see>
            </term>
            <description>
              <para>Used to add support for converting a document with unlimited number of pages. An OCR recognition operation on a document
            that contains a large amount of pages (10 and more) might result in an out of memory error. All of the LEADTOOLS OCR engines supports saving
            the intermediate recognition results to a temporary LTD file (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.LTD</see>). The result of subsequent pages will be
            appended to this temporary file. When all the pages of the document have been recognized, the engine will convert the temporary LTD file to the desired
            output format. The <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumPagesBeforeLtd">IOcrAutoRecognizeManager.MaximumPagesBeforeLtd</see> property defines the maximum
            number of pages processed as a whole. For example, if the original document has 20 pages and the value of this property is 8, the engine will
            recognize the first 8 pages and saves the result to a temporary file, recognizes the second 8 pages and append the results, and finally,
            recognize the last 4 pages and convert the temporary document to the final format.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.PreprocessPageCommands">IOcrAutoRecognizeManager.PreprocessPageCommands</see>
            </term>
            <description>
              <para>Holds an array of <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" /> items to control what auto-preprocess operation to
            perform on each page document prior to recognition.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace">
      <summary>Gets or sets a value that indicates whether this <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> should output debug messages to the standard .NET
            trace listeners. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> should output debug messages to the standard .NET
            trace listeners, otherwise; <strong>false</strong> Default value is <strong>false</strong>.</value>
      <remarks>
        <para>If the value of this property is set to <strong>true</strong>, then this <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> object will output debug
            messages with current status (page being loaded, zoned, recognized, saved, etc.) and any errors that may occur to the default .NET trace listener.</para>
        <para>For example, to enable tracing to the .NET console, use the following code:</para>
        <para>
          <pre>
            <code>
            // Trace to the console
            System.Diagnostics.Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));
            // Enable tracing in the OCR recognize manager
            ocrAutoRecognizeManager.EnableTrace = true;
            // Run the job
            ocrAutoRecognizeManager.RunJob(ocrJob);
            </code>
          </pre>
        </para>
        <para>When tracing is enabled, the engine will use the <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName">OcrAutoRecognizeJobData.JobName</see> value when
            writing trace messages to help easily identity jobs.</para>
        <para>For more information on .NET tracing, refer to <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.IsMultiThreadedSupported">
      <summary>Gets a value that indicates whether multi-threading is supported in this <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> supports multi-threading, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> supports converting a single document using multiple threads using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> methods. You can enable this feature by setting <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> to 0 (for maximum
            CPUs/cores) or a value greater than 1.</para>
        <para>The LEADTOOLS Advantage OCR engine uses the system thread pool and does not require a set number of threads. A value of 1 will disable threading
            and any other value will be treated as "use multi-threading".</para>
        <para>Not all OCR engines support multi-threading in this fashion. If multi-threading supported, then <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.IsMultiThreadedSupported" /> will
            be <strong>true</strong> and the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> is used.</para>
        <para>If the OCR engine does not support multi-threading, then <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.IsMultiThreadedSupported" /> will
            be <strong>false</strong> and the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> is not used (ignored).</para>
        <para>The following table lists the LEADTOOLS OCR engines and whether they support multi-threading in <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />:</para>
        <list type="table">
          <listheader>
            <term>
              <para>OCR Engine</para>
            </term>
            <description>Multi-threaded supported in <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /></description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>/&gt; Win32 (x86) version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>/&gt; x64 version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>/&gt; Win32 (x86) version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>/&gt; x64 version</term>
            <description>No</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Arabic</see>/&gt; Win32 (x86) version</term>
            <description>No</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Arabic</see>/&gt; x64 version</term>
            <description>No</description>
          </item>
        </list>
        <para>Some OCR engine types support creating multi-threaded documents by creating one <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and multiple <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> each in its own dedicated threads. For more information, refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob">
      <summary>Gets or sets a value that indicates the maximum number of threads to use when recognizing a document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the maximum number of threads to use when recognizing a document. Must be greater than or equals to 0
            and less than or equals to 64. Default value is 0.</value>
      <remarks>
        <para>A value of 0 means use maximum number of CPUs/cores available to the machine. The engine will read this value from
            <see cref="P:System.Environment.ProcessorCount">System.Environment.ProcessorCount</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> supports converting a single document using multiple threads using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> methods. You can enable this feature by setting <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> to 0 (for maximum
            CPUs/cores) or a value greater than 1.</para>
        <para>The LEADTOOLS Advantage OCR engine uses the system thread pool and does not require a set number of threads. A value of 1 will disable threading
            and any other value will be treated as "use multi-threading".</para>
        <para>Not all OCR engines support multi-threading in this fashion. If multi-threading supported, then <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.IsMultiThreadedSupported" /> will
            be <strong>true</strong> and the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> is used.</para>
        <para>If the OCR engine does not support multi-threading, then <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.IsMultiThreadedSupported" /> will
            be <strong>false</strong> and the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> is not used (ignored).</para>
        <para>The following table lists the LEADTOOLS OCR engines and whether they support multi-threading in <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />:</para>
        <list type="table">
          <listheader>
            <term>
              <para>OCR Engine</para>
            </term>
            <description>Multi-threaded supported in <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /></description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>/&gt; Win32 (x86) version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>/&gt; x64 version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>/&gt; Win32 (x86) version</term>
            <description>Yes</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>/&gt; x64 version</term>
            <description>No</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Arabic</see>/&gt; Win32 (x86) version</term>
            <description>No</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Arabic</see>/&gt; x64 version</term>
            <description>No</description>
          </item>
        </list>
        <para>
          <strong>Note:</strong> This property is not used and will be ignored when using engine native format (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> 
            and <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>).</para>
        <para>Some OCR engine types support creating multi-threaded documents by creating one <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and multiple <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> each in its own dedicated threads. For more information, refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">
      <summary>Gets or sets a value that indicates whether to abort or try to continue running jobs when an error occur. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode" /> enumeration member that specifies whether to
            abort or try to continue running jobs when an error occur. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see>.</value>
      <remarks>
        <para>When the value of this property is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Abort</see>, any error
            that may occur while running a job will result in an exception being thrown.</para>
        <para>If the value of this property is <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see>, then
            none critical errors can be logged and running continues. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page. In this mode, the engine will not
            throw an exception if an error occur, instead, all errors will be logged into the job's <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> collection. When
            recognition finishes, you can check if this collection is not empty and get the information of the errors and act upon them according to your application
            logic.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">
      <summary>Occurs when a job is being run to provide progress status and ability to abort. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs" /> containing data related to this event.</event>
      <remarks>
        <para>Note, this event will not trigger if multiple threads are used on the same document (the value of
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.MaximumThreadsPerJob" /> is anything else but 1).</para>
        <para>This event will occur when <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs" /> and <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      Private Shared Sub JobProgressExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

            ' Run the job in 1 thread
            ocrAutoRecognizeManager.MaximumThreadsPerJob = 1

            ' Create the job
            Dim ocrJobData As New OcrAutoRecognizeJobData(tifFileName, DocumentFormat.Pdf, pdfFileName)
            ocrJobData.JobName = "MyJob"
            Dim ocrJob As IOcrAutoRecognizeJob = ocrAutoRecognizeManager.CreateJob(ocrJobData)

            ' Subscribe to the JobProgress event
            AddHandler ocrAutoRecognizeManager.JobProgress, AddressOf ocrAutoRecognizeManager_JobProgress
            ' Run the job
            ocrAutoRecognizeManager.RunJob(ocrJob)

            ' Unsubscribe to the JobProgress event
            RemoveHandler ocrAutoRecognizeManager.JobProgress, AddressOf ocrAutoRecognizeManager_JobProgress
         End Using
      End Sub

      Private Shared Sub ocrAutoRecognizeManager_JobProgress(sender As Object, e As OcrAutoRecognizeJobProgressEventArgs)
         Console.WriteLine(String.Format("Job: {0} - Page: {1}:{2} - {3} - {4}%", _
                                         e.Job.JobData.JobName, _
                                         e.Data.CurrentPageIndex + 1, _
                                         e.Data.LastPageIndex + 1, _
                                         e.Data.Operation, _
                                         e.Data.Percentage))
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      private static void JobProgressExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Run the job in 1 thread
            ocrAutoRecognizeManager.MaximumThreadsPerJob = 1;

            // Create the job
            OcrAutoRecognizeJobData ocrJobData = new OcrAutoRecognizeJobData(tifFileName, DocumentFormat.Pdf, pdfFileName);
            ocrJobData.JobName = "MyJob";
            IOcrAutoRecognizeJob ocrJob = ocrAutoRecognizeManager.CreateJob(ocrJobData);

            // Subscribe to the JobProgress event
            ocrAutoRecognizeManager.JobProgress += new EventHandler&lt;OcrAutoRecognizeJobProgressEventArgs&gt;(ocrAutoRecognizeManager_JobProgress);

            // Run the job
            ocrAutoRecognizeManager.RunJob(ocrJob);

            // Unsubscribe to the JobProgress event
            ocrAutoRecognizeManager.JobProgress -= new EventHandler&lt;OcrAutoRecognizeJobProgressEventArgs&gt;(ocrAutoRecognizeManager_JobProgress);
         }
      }

      private static void ocrAutoRecognizeManager_JobProgress(object sender, OcrAutoRecognizeJobProgressEventArgs e)
      {
         Console.WriteLine(string.Format("Job: {0} - Page: {1}:{2} - {3} - {4}%",
            e.Job.JobData.JobName, e.Data.CurrentPageIndex + 1, e.Data.LastPageIndex + 1, e.Data.Operation, e.Data.Percentage));
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrAutoRecognizeManager.JobProgress-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted">
      <summary>Occurs when a job is about to start. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs" /> containing data related to this event.</event>
      <remarks>
        <para>This event will occur when <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>To abort pending jobs in a multi-threaded application using <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />, you subscribe to this event and
            set the value of <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Status">OcrAutoRecognizeRunJobEventArgs.Status</see> to 
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobStatus">OcrAutoRecognizeManagerJobStatus.Abort</see>. You can also examine 
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">OcrAutoRecognizeRunJobEventArgs.Job</see> and only abort certain jobs depending on your
            application logic.</para>
        <para>The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event will always occur when a job is run whether the job is aborted or completed.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted">
      <summary>Occurs when a job is completed or aborted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs" /> containing data related to this event.</event>
      <remarks>
        <para>This event will occur when <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>You can use this event to keep track of the number of jobs pending running. You can also examine
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">OcrAutoRecognizeRunJobEventArgs.Job</see> to get information on whether job finished successfully
            and get error status if any. <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> example shows complete source code of how to easily accomplish these tasks
            in your application.</para>
        <para>The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> event will always occur when a job is run whether the job is aborted or completed.</para>
        <para>The <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" /> event occurs when a job is about to start.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation">
      <summary>Occurs while a job is running. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" /> containing data related to this event.</event>
      <remarks>
        <para>This event will occur when <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> is called.</para>
        <para>You can use this event to get information on the current operation (creating an OCR document, loading a page, zoning, recognizing, saving, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData">
      <summary>Conatains the data used to create an OCR Auto Recognition job. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this structure to specific the input data for an OCR job. After you create an instance of this structure with the data, you can pass it
            to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)">IOcrAutoRecognizeManager.CreateJob</see> to create an <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object. You can
            then use this with the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">IOcrAutoRecognizeManager.RunJob</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)">IOcrAutoRecognizeManager.RunJobAsync</see> methods to run and monitor an OCR job.</para>
        <para>This structure contains the following members:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" />
            </term>
            <description>
              <para>
            The name of the file containing the source image. This can be any single or multi-page image file format supported by LEADTOOLS. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain the name of an existing file on disk.
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" />
            </term>
            <description>
              <para>
            1-based index of the first page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. You can use this and <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" /> to recognize
            only a certain range of pages in the source file. This member must be greater than or equals to 1 (first page in the file).
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" />
            </term>
            <description>
              <para>
            1-based index of the last page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. You can use this and <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" /> to recognize
            only a certain range of pages in the source file. You can use a value of -1 to indicate "up to last page in the file", otherwise, this member must be
            a value greater than or equals to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" /> up to the maximum number of pages in the source file name.
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName" />
            </term>
            <description>
              <para>
            Optional name of prepared multi-page zone file. This member can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference. When no zone file is specified, the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> will auto detect the zones for each
            page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format" />
            </term>
            <description>
              <para>
            The output document format. This can be any of the supported <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine
            format set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise
            an exception will be thrown.
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName" />
            </term>
            <description>
              <para>
            The name of the output document file. When recognition is completed, this file will be created on disk. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" />
            </term>
            <description>
              <para>
            Optional job name. If tracing is enabled with <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace">IOcrAutoRecognizeManager.EnableTrace</see>, then the
            engine will use this value in the trace messages. If this member is a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic),
            then the trace will show the generic [Untitled] name next to the trace messages.
            </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" />
            </term>
            <description>
              <para>
            Optionsl user data associated with the job. You can use this value to store any extra information required by your application. The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" />
            will contain the same object used here in its <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.JobData">IOcrAutoRecognizeJob.JobData</see> member.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.#ctor(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String)">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> with the specified parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imageFileName">The name of the file containing the source image. This can be any single or multi-page image file format supported by
            LEADTOOLS. This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain the name of an
            existing file on disk.</param>
      <param name="format">The output document format. This can be any of the supported <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this
            member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format set in
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise
            an exception will be thrown.</param>
      <param name="documentFileName">The name of the output document file. When recognition is completed, this file will be created on disk. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>This constructor will initialize the members of the new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object as described below:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" />
            </term>
            <description>
              <para>
                <paramref name="imageFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" />
            </term>
            <description>
              <para>1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" />
            </term>
            <description>
              <para>-1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format" />
            </term>
            <description>
              <para>
                <paramref name="format" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName" />
            </term>
            <description>
              <para>
                <paramref name="documentFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.#ctor(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String)">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> with the specified parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imageFileName">The name of the file containing the source image. This can be any single or multi-page image file format supported by
            LEADTOOLS. This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain the name of an
            existing file on disk.</param>
      <param name="zonesFileName">Optional name of prepared multi-page zone file. This member can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference. When no zone file is specified, the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> will auto detect the zones for each
            page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</param>
      <param name="format">The output document format. This can be any of the supported <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this
            member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format set in
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise
            an exception will be thrown.</param>
      <param name="documentFileName">The name of the output document file. When recognition is completed, this file will be created on disk. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>This constructor will initialize the members of the new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object as described below:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" />
            </term>
            <description>
              <para>
                <paramref name="imageFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" />
            </term>
            <description>
              <para>1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" />
            </term>
            <description>
              <para>-1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName" />
            </term>
            <description>
              <para>
                <paramref name="zonesFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format" />
            </term>
            <description>
              <para>
                <paramref name="format" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName" />
            </term>
            <description>
              <para>
                <paramref name="documentFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.#ctor(System.String,System.Int32,System.Int32,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String)">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> with the specified parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imageFileName">The name of the file containing the source image. This can be any single or multi-page image file format supported by
            LEADTOOLS. This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain the name of an
            existing file on disk.</param>
      <param name="firstPageNumber">1-based index of the first page number in <paramref name="imageFileName" /> to recognize. You can use this and
            <paramref name="lastPageNumber" /> to recognize only a certain range of pages in the source file. This parameter must be greater than or equals to 1
            (first page in the file).</param>
      <param name="lastPageNumber">1-based index of the last page number in <paramref name="imageFileName" /> to recognize. You can use this and
            <paramref name="firstPageNumber" /> to recognize only a certain range of pages in the source file. You can use a value of -1 to indicate
            "up to last page in the file", otherwise, this member must be a value greater than or equals to <paramref name="firstPageNumber" /> up to the
            maximum number of pages in the source file name.</param>
      <param name="format">The output document format. This can be any of the supported <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this
            member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format set in
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise
            an exception will be thrown.</param>
      <param name="documentFileName">The name of the output document file. When recognition is completed, this file will be created on disk. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>This constructor will initialize the members of the new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object as described below:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" />
            </term>
            <description>
              <para>
                <paramref name="imageFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" />
            </term>
            <description>
              <para>
                <paramref name="firstPageNumber" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" />
            </term>
            <description>
              <para>
                <paramref name="lastPageNumber" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format" />
            </term>
            <description>
              <para>
                <paramref name="format" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName" />
            </term>
            <description>
              <para>
                <paramref name="documentFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.#ctor(System.String,System.Int32,System.Int32,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,System.String)">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> with the specified parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="imageFileName">The name of the file containing the source image. This can be any single or multi-page image file format supported by
            LEADTOOLS. This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain the name of an
            existing file on disk.</param>
      <param name="firstPageNumber">1-based index of the first page number in <paramref name="imageFileName" /> to recognize. You can use this and
            <paramref name="lastPageNumber" /> to recognize only a certain range of pages in the source file. This parameter must be greater than or equals to 1
            (first page in the file).</param>
      <param name="lastPageNumber">1-based index of the last page number in <paramref name="imageFileName" /> to recognize. You can use this and
            <paramref name="firstPageNumber" /> to recognize only a certain range of pages in the source file. You can use a value of -1 to indicate
            "up to last page in the file", otherwise, this member must be a value greater than or equals to <paramref name="firstPageNumber" /> up to the
            maximum number of pages in the source file name.</param>
      <param name="zonesFileName">Optional name of prepared multi-page zone file. This member can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference. When no zone file is specified, the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> will auto detect the zones for each
            page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</param>
      <param name="format">The output document format. This can be any of the supported <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this
            member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format set in
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise
            an exception will be thrown.</param>
      <param name="documentFileName">The name of the output document file. When recognition is completed, this file will be created on disk. This member cannot
            be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>This constructor will initialize the members of the new <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object as described below:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" />
            </term>
            <description>
              <para>
                <paramref name="imageFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" />
            </term>
            <description>
              <para>
                <paramref name="firstPageNumber" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" />
            </term>
            <description>
              <para>
                <paramref name="lastPageNumber" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName" />
            </term>
            <description>
              <para>
                <paramref name="zonesFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format" />
            </term>
            <description>
              <para>
                <paramref name="format" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName" />
            </term>
            <description>
              <para>
                <paramref name="documentFileName" />
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" />
            </term>
            <description>
              <para>
                <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName">
      <summary>Gets or sets the name of the file containing the source image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that specifies the name of the file containing the source image. This can be any single or multi-page image file
            format supported by LEADTOOLS. This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic) and must contain
            the name of an existing file on disk.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber">
      <summary>Gets or sets 1-based index of the first page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> that indicates the 1-based index of the first page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. You can use this and
            <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber" /> to recognize only a certain range of pages in the source file. This parameter must be greater than or equals to 1
            (first page in the file).</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.LastPageNumber">
      <summary>Gets or sets the 1-based index of the last page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> that indicates the 1-based index of the last page number in <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ImageFileName" /> to recognize. You can use this
            and <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" /> to recognize only a certain range of pages in the source file. You can use a value of -1 to indicate
            "up to last page in the file", otherwise, this member must be a value greater than or equals to <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.FirstPageNumber" /> up to the
            maximum number of pages in the source file name.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.ZonesFileName">
      <summary>Gets or sets the optional name of prepared multi-page zone file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains the optional name of prepared multi-page zone file. This member can be a
            <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference. When no zone file is specified, the
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> will auto detect the zones for each page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.Format">
      <summary>Gets or sets the output document format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration member that specifies the output document format. This can be any of the supported
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> such as PDF, DOC and TEXT. If this member is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document
            saved using the native engine format set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine
            used supports native formats, otherwise an exception will be thrown.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.DocumentFileName">
      <summary>Gets or sets the name of the output document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains the name of the output document file. When recognition is completed, this file will be created on disk.
            This member cannot be a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName">
      <summary>Gets or sets the optional job name. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains the optional job name. If tracing is enabled with
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.EnableTrace">IOcrAutoRecognizeManager.EnableTrace</see>, then the engine will use this value in the trace
            messages. If this member is a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic), then the trace will show the
            generic [Untitled] name next to the trace messages.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData">
      <summary>Gets or sets optional user data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Object" /> that contains the optional user data associated with the job. You can use this value to store any extra information
            required by your application. The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> will contain the same object used here in its
            <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.JobData">IOcrAutoRecognizeJob.JobData</see> member.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob">
      <summary>Specifies an OCR job that can run and tracked by <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>To run an OCR job with <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />, first initialize a new
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> object with the job's parameters (input image file name,
            pages, output document format, output document name, optional zones file name, etc.), then use <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" /> to create the
            <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> object. Finally pass this job to either <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</para>
        <para>The job instance can also be tracked and obtained through the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobStarted" />,
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress" /> and 
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobCompleted" /> events through the event data (<see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeRunJobEventArgs.Job">OcrAutoRecognizeRunJobEventArgs.Job</see>
            or <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.Job">OcrAutoRecognizeJobProgressEventArgs.Job</see>) and the
            <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobOperation" /> event through its event data (<see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobOperationEventArgs.Job">OcrAutoRecognizeJobOperationEventArgs.Job</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> implements the <see cref="T:System.IDisposable" /> interface and you must call the
            <see cref="M:System.IDisposable.Dispose">IDisposable.Dispose</see> method on the instance after it is no longer used.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.AutoRecognizeManager">
      <summary>Gets the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> used to create this object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> used to create this object.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.JobData">
      <summary>Gets the job data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData" /> structure that contains the job data used to create this object.</value>
      <remarks>
        <para>You can use this member to get information about the original job data used to create this object using <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.CreateJob(Leadtools.Forms.Ocr.OcrAutoRecognizeJobData)" />.
            For example, to get the original <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.JobName" /> or <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobData.UserData" /> associated with
            this job.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">
      <summary>Gets an array that contains any errors occured when this job is run. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A list of <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobError" /> objects that contain detailed information on any errors that may have occured
            when this job is run.</value>
      <remarks>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobErrorMode">IOcrAutoRecognizeManager.JobErrorMode</see> was
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoRecognizeManagerJobErrorMode">OcrAutoRecognizeManagerJobErrorMode.Continue</see> when this job is run, then
            none critical errors can be logged and running continues. For example, if a source document has a page that could not be recognized. The offending
            page will be added to the final document as a graphics images and recognition will continue to the next page. In this mode, the engine will not
            throw an exception if an error occur, instead, all errors will be logged into the job's <see cref="P:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob.Errors">IOcrAutoRecognizeJob.Errors</see> collection. When
            recognition finishes, you can check if this collection is not empty and get the information of the errors and act upon them according to your application
            logic.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJob(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.RunJobAsync(Leadtools.Forms.Ocr.IOcrAutoRecognizeJob)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrProgressData">
      <summary>Contains data for the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> delegate. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>An object of type <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> is passed to the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> delegate every time the operation or the percentage of the operation is changed.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> is also used as the type for the <see cref="P:Leadtools.Forms.Ocr.OcrAutoRecognizeJobProgressEventArgs.Data">OcrAutoRecognizeJobProgressEventArgs.Data</see>
            property used by the <see cref="E:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.JobProgress">IOcrAutoRecognizeManager.JobProgress</see> event.</para>
        <para>You can examine the members of <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> to show information on the current page, operation and percentage complete of the OCR process.</para>
        <para>You can also use the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> property to abort the OCR operation.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public class OcrProgressData</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrProgressData : NSObject</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex">
      <summary>Gets the zero-based index of the first page in the process that initiated the callback. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the first page in the process that initiated the callback.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public int getFirstPageIndex()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int firstPageIndex;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex">
      <summary>Gets the zero-based index of the last page in the process that initiated the callback. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the last page in the process that initiated the callback.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public int getLastPageIndex()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int lastPageIndex;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex">
      <summary>Gets the zero-based index of the current page being processed by the operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the current page being processed by the operation.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public int getCurrentPageIndex()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int currentPageIndex;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Operation">
      <summary>Gets the current running operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The current running operation.</value>
      <remarks>
        <para>For a list of the available operations, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrProgressOperation getOperation()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTOcrProgressOperation operation;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Percentage">
      <summary>Gets the progress of the current operation expressed as a percentage. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A value between 0 and 100 that represent the progress of the current operation expressed as a percentage.</value>
      <remarks>
        <para>For a list of the available operations, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public int getPercentage()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int percentage;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">
      <summary>Gets or sets the current status of the callback. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The current status of the callback.</value>
      <remarks>
        <para>Abort the callback at anytime by setting the value of <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> to <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Abort</see>. To continue the OCR
            process, leave <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> to the default value of <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Continue</see></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public OcrProgressStatus getStatus()
public void setStatus(OcrProgressStatus value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrProgressStatus status;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressCallback">
      <summary>Monitors progress of OCR operations. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <keywords>OCR Progress</keywords>
      <param name="data">An instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> interface containing the progress callback data.</param>
      <remarks>
        <para>The OCR engine will continuously invoke the callback procedure during the different OCR operations with an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> providing
            the current processing stage and a percentage indicator value. Use this function to indicate progress of application operations.</para>
        <para>The callback can set the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">IOcrProgressData.Status</see> property at any time to <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Abort</see>
            to abort the OCR process and cancel all pending operations.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.WinForms

      ' Text writer to save the log to
      Private _log As StreamWriter
      Public Sub OcrProgressCallbackExample()
         Dim logFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "log.txt")
         Dim multiPageTifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

         ' Create the log text writer
         _log = File.CreateText(logFileName)

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               _log.WriteLine("Adding the pages")
               _log.WriteLine("********************************")
               ocrDocument.Pages.AddPages(multiPageTifFileName, 1, -1, New OcrProgressCallback(AddressOf MyOcrProgressCallback))

               ' Auto-recognize the zones in all the pages
               _log.WriteLine("Auto-zoning")
               _log.WriteLine("********************************")
               ocrDocument.Pages.AutoZone(New OcrProgressCallback(AddressOf MyOcrProgressCallback))

               ' Recognize it and save it as PDF
               _log.WriteLine("Recognizing")
               _log.WriteLine("********************************")
               ocrDocument.Pages.Recognize(New OcrProgressCallback(AddressOf MyOcrProgressCallback))
               _log.WriteLine("Saving to PDF")
               _log.WriteLine("********************************")
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, New OcrProgressCallback(AddressOf MyOcrProgressCallback))
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         _log.WriteLine("********************************")
         _log.WriteLine("Complete")
         _log.Flush()
         _log.Close()
      End Sub

      Private Sub MyOcrProgressCallback(data As IOcrProgressData)
         If data.Percentage = 0 Then
            _log.WriteLine("--------------------------")
         End If

         _log.WriteLine("Page:{0}({1}:{2}) {3}% Operation:{4}", _
                        data.CurrentPageIndex.ToString("00"), _
                        data.FirstPageIndex.ToString("00"), _
                        data.LastPageIndex.ToString("00"), _
                        data.Percentage.ToString("000"), _
                        data.Operation)
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.WinForms;

      // Text writer to save the log to
      private StreamWriter _log;
      public void OcrProgressCallbackExample()
      {
         string logFileName = Path.Combine(LEAD_VARS.ImagesDir, "log.txt");
         string multiPageTifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

         // Create the log text writer
         _log = File.CreateText(logFileName);

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               _log.WriteLine("Adding the pages");
               _log.WriteLine("********************************");
               ocrDocument.Pages.AddPages(multiPageTifFileName, 1, -1, new OcrProgressCallback(MyOcrProgressCallback));

               // Auto-recognize the zones in all the pages
               _log.WriteLine("Auto-zoning");
               _log.WriteLine("********************************");
               ocrDocument.Pages.AutoZone(new OcrProgressCallback(MyOcrProgressCallback));

               // Recognize it and save it as PDF
               _log.WriteLine("Recognizing");
               _log.WriteLine("********************************");
               ocrDocument.Pages.Recognize(new OcrProgressCallback(MyOcrProgressCallback));
               _log.WriteLine("Saving to PDF");
               _log.WriteLine("********************************");
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, new OcrProgressCallback(MyOcrProgressCallback));
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         _log.WriteLine("********************************");
         _log.WriteLine("Complete");
         _log.Flush();
         _log.Close();
      }

      private void MyOcrProgressCallback(IOcrProgressData data)
      {
         if (data.Percentage == 0)
            _log.WriteLine("--------------------------");

         _log.WriteLine("Page:{0}({1}:{2}) {3}% Operation:{4}",
            data.CurrentPageIndex.ToString("00"),
            data.FirstPageIndex.ToString("00"),
            data.LastPageIndex.ToString("00"),
            data.Percentage.ToString("000"),
            data.Operation);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;

      // Text writer to save the log to
      private DataWriter _log;
      private IRandomAccessStream _fileStream;
      private IOutputStream _outputStream;
      [TestMethod]
      public async Task OcrProgressCallbackExample()
      {
         string logFileName = @"log.txt";
         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = @"Ocr1.pdf";

         // Create the log text writer
         StorageFile file = await Tools.AppLocalFolder.CreateFileAsync(logFileName);
         _fileStream = await file.OpenAsync(FileAccessMode.ReadWrite);

         _outputStream = _fileStream.GetOutputStreamAt(0);
         _log = new DataWriter(_outputStream);

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         _log.WriteString("Adding the pages\r\n");
         _log.WriteString("********************************\r\n");

         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrDocument.Pages.AddPage(image, new OcrProgressCallback(MyOcrProgressCallback));
         }

         // Auto-recognize the zones in all the pages
         _log.WriteString("Auto-zoning\r\n");
         _log.WriteString("********************************\r\n");
         ocrDocument.Pages.AutoZone(new OcrProgressCallback(MyOcrProgressCallback));

         // Recognize it and save it as PDF
         _log.WriteString("Recognizing\r\n");
         _log.WriteString("********************************\r\n");
         ocrDocument.Pages.Recognize(new OcrProgressCallback(MyOcrProgressCallback));
         _log.WriteString("Saving to PDF\r\n");
         _log.WriteString("********************************\r\n");
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, new OcrProgressCallback(MyOcrProgressCallback));

         // Shutdown the engine
         ocrEngine.Shutdown();

         _log.WriteString("********************************\r\n");
         _log.WriteString("Complete\r\n");

         await _log.StoreAsync();
         _log.DetachStream();
         await _outputStream.FlushAsync();
         _fileStream.Dispose();
      }

      private void MyOcrProgressCallback(IOcrProgressData data)
      {
         if(data.Percentage == 0)
            _log.WriteString("--------------------------\r\n");

         _log.WriteString(string.Format("Page:{0}({1}:{2}) {3}% Operation:{4}\r\n",
            data.CurrentPageIndex,
            data.FirstPageIndex,
            data.LastPageIndex,
            data.Percentage,
            data.Operation));
      }</code>
        <!--OcrProgressCallback-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrProgressData" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressStatus" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressOperation">
      <summary>OCR progress callback operation identification. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" /> is the value of <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Operation">IOcrProgressData.Operation</see>. Use this value to examine
            the current operation of the process.</para>
        <para>Each operation listed represents one of the fundamental services provided by the OCR engine. Any application program will use at least some of these processes.</para>
        <para>Each operation can be initiated by the methods shown. <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> can be used to generate progress monitoring on any of these operations.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public enum OcrProgressOperation</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrProgressOperation</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.LoadImage">
      <summary>(0x00000000)Image load operation. Used when pages are added to an OCR document through one of <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPage</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPages</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPage</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPages</see> methods. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>LOAD_IMAGE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_LoadImage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveImage">
      <summary>(0x00000001)Image save operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SAVE_IMAGE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_SaveImage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.ProcessImage">
      <summary>(0x00000002)Image preprocessing operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>PROCESS_IMAGE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_ProcessImage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.FindZones">
      <summary>(0x00000003)Page-layout decomposition operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>FIND_ZONES</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_FindZones</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeFirstPass">
      <summary>(0x00000004)First pass recognition operation that may be used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is used with the MOR recognition module <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>RECOGNIZE_FIRST_PASS</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_RecognizeFirstPass</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeSecondPass">
      <summary>(0x00000005)Second pass recognition operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>RECOGNIZE_SECOND_PASS</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_RecognizeSecondPass</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeThirdPass">
      <summary>(0x00000006)Third pass recognition operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>RECOGNIZE_THIRD_PASS</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_RecognizeThirdPass</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocumentPrepare">
      <summary>(0x00000007)Prepare the document operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SAVE_DOCUMENT_PREPARE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_SaveDocumentPrepare</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocument">
      <summary>(0x00000008)Save document operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SAVE_DOCUMENT</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_SaveDocument</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocumentConvertImage">
      <summary>(0x00000009)Convert the document images operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SAVE_DOCUMENT_CONVERT_IMAGE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_SaveDocumentConvertImage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.Formatting">
      <summary>(0x0000000A)Format the document before saving. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> is called. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>FORMATTING</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_Formatting</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeOmr">
      <summary>(0x0000000B)Recognizing OMR zones operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called on a page with zones containing <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Omr</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>RECOGNIZE_OMR</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressOperation_RecognizeOmr</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressStatus">
      <summary>Status control of the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus" /> used as a parameter to the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">IOcrProgressData.Status</see> property. You can use this
            property to abort the callback at anytime.</para>
        <para>Notice that aborting the callback will cancel any pending operations.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public enum OcrProgressStatus</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrProgressStatus</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressStatus.Continue">
      <summary>(0x00000000)Continue normal operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>CONTINUE</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressStatus_Continue</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressStatus.Abort">
      <summary>(0x00000001)Signal that the user has requested the current operation to be aborted. The processing will stop at the first suitable moment and any pending operations are aborted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>ABORT</pre>
      </java>
      <objectivec>
        <pre>LTOcrProgressStatus_Abort</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrMicrData">
      <summary>Magnetic ink character recognition (MICR) data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrMicrData" /> is the result returned from the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.ExtractMicrData" /> method.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.Auxiliary">
      <summary>Gets or sets the auxiliary value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The auxiliary value. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.Epc">
      <summary>Gets or sets the EPC value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The EPC value. Default value is <strong>0</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.Routing">
      <summary>Gets or sets the routing value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The routing value. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.Account">
      <summary>Gets or sets the account value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The account value. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.CheckNumber">
      <summary>Gets or sets the check number value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The check number value. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrMicrData.Amount">
      <summary>Gets or sets the amount value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The amount value. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPageCharacters">
      <summary>Represents the recognized characters collection of a page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. Thus each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters of a particular zones.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> interface also contains the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">IOcrPageCharacters.UpdateWord</see> method that allow to modify the
            OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.</para>
            delete any word from 
            <para>For example, if you are interested in iterating through the characters of the 2nd zone in the page, you can do the following:</para><para><code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, index is zero-based so 2nd zone is index 1
            // You can also iterate through the pageCharacters collection and find the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code></para></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public class OcrPageCharacters implements List&lt;OcrZoneCharacters&gt;</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrPageCharacters : NSMutableArray</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCharacters.FindZoneCharacters(System.Int32)">
      <summary>Gets the character collection for the specified zone index. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneIndex">Zero-based index of the required zone.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection containing the characters for the specified zone.</returns>
      <remarks>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contain a collection of the collection of characters for each zone. To get the characters of a particular zone you
            can either iterate through all the members of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> and find the item with <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see>
            equal to <paramref name="zoneIndex" />, or you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.FindZoneCharacters(System.Int32)" /> helper method to get the same value.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrZoneCharacters findZoneCharacters(int zoneIndex)</pre>
      </java>
      <objectivec>
        <pre>- (LTOcrZoneCharacters*)findZoneCharacters:(int)zoneIndex;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">
      <summary>
            Updates or deletes a word in the recognized words list.
            </summary>
      <param name="words">A list of <see cref="T:Leadtools.Forms.Ocr.OcrWord" />. In most cases, the same list obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see>.</param>
      <param name="zoneIndex">The 0-based zone index of the words.</param>
      <param name="wordIndex">The 0-based index of the word in <paramref name="words" /> to update.</param>
      <param name="newValue">The value of the new word. Use <strong>null</strong> to delete the word.</param>
      <remarks>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)" /> to modify the OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.
            The C# and VB OCR Edit Demo uses this technique as well as the example below.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Sub OcrUpdateWordExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Original.pdf")
         Dim pdfFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Modified.pdf")
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Recognize the TIFF file
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)
               ocrPage.Recognize(Nothing)

               ' Save the original recognition results to compare with the results
               ' we will modify
               ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, Nothing)

               ' Get the recognized words
               Dim pageCharacters As IOcrPageCharacters = ocrPage.GetRecognizedCharacters()
               For Each zoneCharacters As IOcrZoneCharacters In pageCharacters
                  Dim words As IList(Of OcrWord) = zoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Pixel)

                  ' Check for our words

                  ' Note, we should not loop through words and change the collection. Remember, collections cannot
                  ' be modified this way, instead, we have a helper method that returns the index of the word
                  ' we are looking for then change the word. Repeat while no more words are found

                  Dim index As Integer

                  ' Capitilize all "the"
                  Do
                     index = FindWord(words, "the", False)
                     If index &lt;&gt; -1 Then
                        ' We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, "THE")
                     End If
                  Loop While index &lt;&gt; -1


                  ' Delete all "a"
                  Do
                     index = FindWord(words, "a", True)
                     If index &lt;&gt; -1 Then
                        ' We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, Nothing)
                     End If
                  Loop While index &lt;&gt; -1


                  ' Replace all "color" with "water"
                  Do
                     index = FindWord(words, "color", True)
                     If index &lt;&gt; -1 Then
                        ' We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, "water")
                     End If
                  Loop While index &lt;&gt; -1
               Next

               ' We are done, update the page recognized results
               ocrPage.SetRecognizedCharacters(pageCharacters)

               ' Save this new results
               ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, Nothing)
            End Using
         End Using
      End Sub

      Private Shared Function FindWord(words As IList(Of OcrWord), value As String, ignoreCase As Boolean) As Integer
         If words Is Nothing OrElse words.Count = 0 Then
            Return -1
         End If

         For i As Integer = 0 To words.Count - 1
            If String.Compare(words(i).Value, value, ignoreCase) = 0 Then
               ' Found it
               Return i
            End If
         Next

         ' Not found
         Return -1
      End Function

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private void OcrUpdateWordExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Original.pdf");
         string pdfFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Modified.pdf");
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Recognize the TIFF file
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);
               ocrPage.Recognize(null);

               // Save the original recognition results to compare with the results
               // we will modify
               ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, null);

               // Get the recognized words
               IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
               foreach (IOcrZoneCharacters zoneCharacters in pageCharacters)
               {
                  IList&lt;OcrWord&gt; words = zoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Pixel);

                  // Check for our words

                  // Note, we should not loop through words and change the collection. Remember, collections cannot
                  // be modified this way, instead, we have a helper method that returns the index of the word
                  // we are looking for then change the word. Repeat while no more words are found

                  int index;

                  // Capitilize all "the"
                  do
                  {
                     index = FindWord(words, "the", false);
                     if (index != -1)
                     {
                        // We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, "THE");
                     }
                  }
                  while (index != -1);


                  // Delete all "a"
                  do
                  {
                     index = FindWord(words, "a", true);
                     if (index != -1)
                     {
                        // We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, null);
                     }
                  }
                  while (index != -1);


                  // Replace all "color" with "water"
                  do
                  {
                     index = FindWord(words, "color", true);
                     if (index != -1)
                     {
                        // We have one, update it
                        pageCharacters.UpdateWord(words, zoneCharacters.ZoneIndex, index, "water");
                     }
                  }
                  while (index != -1);
               }

               // We are done, update the page recognized results
               ocrPage.SetRecognizedCharacters(pageCharacters);

               // Save this new results
               ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, null);
            }
         }
      }

      private static int FindWord(IList&lt;OcrWord&gt; words, string value, bool ignoreCase)
      {
         if (words == null || words.Count == 0)
         {
            return -1;
         }

         for (int i = 0; i &lt; words.Count; i++)
         {
            if (string.Compare(words[i].Value, value, ignoreCase) == 0)
            {
               // Found it
               return i;
            }
         }

         // Not found
         return -1;
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCharacters.UpdateWord-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPageCharacters.Page">
      <summary>Gets the page associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> interface implementation object that define the page associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /></value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrPageCharacters.Page" /> is the same <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object you used to get this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> object through
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrPage getPage()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrPage* page;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacter">
      <summary>Represents recognized character data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Recognized characters</keywords>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.  Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters for a particular zone.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> interface also contains the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">IOcrPageCharacters.UpdateWord</see> method that allow to modify the
            OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.</para>
        <para>For example, if you are interesed in iterating through the characters of the 2nd zone in the page, you can do the following:</para>
        <para>
          <code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, index is zero-based so 2nd zone is index 1
            // You can also iterate through the pageCharacters collection and fine the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code>
        </para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> is the most detailed information available about the recognized characters.</para>
        <para>Touching characters, those whose shapes are physically joined in the page passed to the OCR engine, will result in a separate <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> structure for
            each recognized character within the block. However, the coordinate property of these characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds" />) will have identical coordinates defining a rectangle
            boundary for the character block. The order of the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> structures representing a character block gives the order of the touching characters on the
            original document. This means the coordinates do not give information on the order of characters inside a boundary block.</para>
        <para>To create an <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> object with all values initialized to default values, use <see cref="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrCharacter">OcrTypeManager.CreateDefaultOcrCharacter</see>. This
            is a shortcut for languages that do not automatically initialize all the members of a structure, such as JavaScript.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>public class OcrCharacter</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrCharacter : NSObject</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Code">
      <summary>Gets or sets the character code (value). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The character code (value) of the first guess of the recognition, or zero (0) signaling that the OCR engine could not recognize the character (rejected character).</value>
      <remarks>
        <para>The confidence of the character code value is expressed in a value of 0 (worst) to 100 (best) in the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence" /> property.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>
public char getCode()
public void setCode(char value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unichar code;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence">
      <summary>Gets or sets the confidence number expressing the recognition certainty for the first guess. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An integer value between 0 (worst) and 100 (best) that indicates the confidence number expressing the recognition certainty of the first guess. (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code" />).</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <strong>Note:</strong> This property is not supported for Arabic OCR engine so it will always have the value 100.</para>
      </remarks>
      <keywords>OCR,Confidence</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>
public int getConfidence()
public void setConfidence(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int confidence;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.WordIsCertain">
      <summary>Gets or sets a value indicating whether the word this character is part of has passed spell checking. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>True</strong> if the word this character is part of has passed spell checking; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>The word is certain if it passes one of the following criteria:
            <list type="number"><item><description>The engine is very confident of the letters of the word, even if the word is not in the dictionary</description></item><item><description>The engine is not very confident, but the word is in the dictionary</description></item></list></para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>
public boolean getWordIsCertain()
public void setWordIsCertain(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL wordIsCertain;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2">
      <summary>Gets or sets the second guess of the recognition, if any. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The character code (value) of the second guess of the recognition, or zero (0) if none is determined.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <b>Note:</b> The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <ul><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></li></ul></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public char getGuessCode2()
public void setGuessCode2(char value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unichar guessCode2;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3">
      <summary>Gets or sets the third guess of the recognition, if any. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The character code (value) of the third guess of the recognition, or zero (0) if none is determined.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <b>Note:</b> The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <ul><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></li></ul></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public char getGuessCode3()
public void setGuessCode3(char value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unichar guessCode3;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">
      <summary>Gets or sets the coordinates of the rectangle exactly containing the character. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that contains the coordinates of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds_WinRT">
      <summary>
            Gets or sets the coordinates of the rectangle exactly containing the character.
            </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> that contains the coordinates of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Position">
      <summary>Gets or sets the character position information. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrCharacterPosition" /> enumeration member providing information about the character position.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getPosition()
public void setPosition(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCharacterPosition position;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Base">
      <summary>Gets or sets the length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getBase()
public void setBase(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) double base;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Base_WinRT">
      <summary>
            Gets or sets the length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character.
            </summary>
      <value>The length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.CellIndex">
      <summary>Gets or sets the index of the cell in the table that contains this character. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The index of the cell in the table that contains this character.</value>
      <remarks>
        <para>This value is applicable only for <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> zones. This is the index into the cells array
            if this zone is a table zone. You can use these values to detect the row and column value of a character or word inside the table. This information
            is only available if <see cref="P:Leadtools.Forms.Ocr.IOcrPage.TableZoneManager">IOcrPage.TableZoneManager</see> contains a valid <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
            object and cell manipulation is supported by the engine. Currently, only the LEADTOOLS Professional engine supports table cells.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getCellIndex()
public void setCellIndex(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int cellIndex;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces">
      <summary>Gets or sets the estimated number of leading spaces in front of the character. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The estimated number of leading spaces in front of the character.</value>
      <remarks>
        <para>The confidence of the number of leading spaces in front of the character is expressed in a value of 0 (worst) to 100 (best) in the
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /> property.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <b>Note:</b> The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <ul><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></li></ul></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>
public int getLeadingSpaces()
public void setLeadingSpaces(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int leadingSpaces;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence">
      <summary>Gets or sets the confidence number expressing the certainty of number of leading spaces in front of this character. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An integer value between 0 (worst) and 100 (best) that indicate the confidence number expressing the certainty of the number of spaces in front of this
            character (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" />).</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <b>Note:</b> The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <ul><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></li><li><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></li></ul></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <java>
        <pre>
public int getLeadingSpacesConfidence()
public void setLeadingSpacesConfidence(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int leadingSpacesConfidence;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.FontSize">
      <summary>Gets or sets the font size of the character in points. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The font size of the character in points.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getFontSize()
public void setFontSize(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int fontSize;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">
      <summary>Gets or sets the character font attributes. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle" /> enumeration members containing the attributes of the  character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getFontStyle()
public void setFontStyle(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCharacterFontStyle fontStyle;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Color">
      <summary>Gets or sets the character color. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure containing the character color.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <strong>Note: This property is not currently supported in any LEADTOOLS OCR Engine. Setting the character color will not affect the final document.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <isnew>5/8/2009</isnew>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public RasterColor getColor()
public void setColor(RasterColor value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* color;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Language1">
      <summary>Gets or sets the first language which the recognized word belongs to. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that specifies the first language which the recognized word belongs to. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language1" /> contains the language which the recognized word belongs to. When the recognized word cannot be associated with any
            language, the value of <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language1" /> will be <strong>null</strong>. If the recognized word can also be found in another language dictionary, then both
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language2" /> will contain the second language name.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <isnew>5/8/2009</isnew>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public String getLanguage1()
public void setLanguage1(String value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* language1;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Language2">
      <summary>Gets or sets the second language which the recognized word belongs to. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that specifies the second language which the recognized word belongs to. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language1" /> contains the language which the recognized word belongs to. When the recognized word cannot be associated with any
            language, the value of <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language1" /> will be <strong>null</strong>. If the recognized word can also be found in another language dictionary, then both
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language2" /> will contain the second language name.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <isnew>5/8/2009</isnew>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public String getLanguage2()
public void setLanguage2(String value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* language2;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle">
      <summary>Indicates the font attributes for recognized characters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> property contains the font attributes of the recognized character.</para>
        <para>The values of <see cref="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle" /> can be combined together (OR-ed).</para>
        <para>
          <strong>Note: SansSerif, Serif, Superscript, and Subscript attributes are not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public enum OcrCharacterFontStyle</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrCharacterFontStyle</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Regular">
      <summary>(0x00000000)Normal text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>REGULAR</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Regular</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Bold">
      <summary>(0x00000001)Bold text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>BOLD</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Bold</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Italic">
      <summary>(0x00000002)Italic text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>ITALIC</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Italic</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Underline">
      <summary>(0x00000004)Underlined text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>UNDERLINE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Underline</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.SansSerif">
      <summary>(0x00000008)SansSerif text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SANS_SERIF</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_SansSerif</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Serif">
      <summary>(0x00000008)Serif text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SERIF</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Serif</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Proportional">
      <summary>(0x00000020)Proportional text. If this flag is not set, the text is mono-spaced. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>PROPORTIONAL</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Proportional</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Superscript">
      <summary>(0x00000040)Super script text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SUPERSCRIPT</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Superscript</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Subscript">
      <summary>(0x00000080)Subscript text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SUBSCRIPT</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Subscript</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Strikeout">
      <summary>(0x00000100)Strikeout text <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>STRIKEOUT</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterFontStyle_Strikout</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacterPosition">
      <summary>Recognition character data position information. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Since the recognition character data does not contain extra characters for marking the ends of lines, paragraphs, pages, etc, these pieces of information are stored
            for the particular characters in the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> property.</para>
        <para> The values of <see cref="T:Leadtools.Forms.Ocr.OcrCharacterPosition" /> can be combined together (OR-ed).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public enum OcrCharacterPosition</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrCharacterPosition</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.None">
      <summary>(0x00000000)None <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>NONE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_None</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfLine">
      <summary>(0x00000001)This is the last character in a line <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_LINE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfLine</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfParagraph">
      <summary>(0x00000002)This is the last character in a paragraph <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_PARAGRAPH</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfParagraph</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfWord">
      <summary>(0x00000004)This is the last character of a word <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_WORD</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfWord</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfZone">
      <summary>(0x00000008)This is the last character in a zone <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_ZONE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfZone</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfPage">
      <summary>(0x00000010)This is the last character on a page <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_PAGE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfPage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfCell">
      <summary>(0x00000020)This is the last character in a cell. (applicable only for <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type zones) <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>END_OF_CELL</pre>
      </java>
      <objectivec>
        <pre>LTOcrCharacterPosition_EndOfCell</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrWord">
      <summary>Represents recognized word data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Recognized words</keywords>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> interface also contains the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">IOcrPageCharacters.UpdateWord</see> method that allow to modify the
            OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.</para>
        <para>To create an <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> object with all values initialized to default values, use <see cref="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrWord">OcrTypeManager.CreateDefaultOcrWord</see>. This
            is a shortcut for languages that do not automatically initialize all the members of a structure, such as JavaScript.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public class OcrWord</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrWord : NSObject</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.Value">
      <summary>Gets or sets the word value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that indicate the word value.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterates
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The word value is the collection of characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code">OcrCharacter.Code</see>) from <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> to
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" /> into the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public String getValue()
public void setValue(String value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* value;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.Bounds">
      <summary>Gets or sets the word coordinates in logical units. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> containing the word coordinates in logical units.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The word coordinates is the sum of the coordinates of the characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">OcrCharacter.Bounds</see>) from <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> to
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" /> into the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection.</para>
        <para>The unit of this logical rectangle is the same as <i>unit</i> passed to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.Bounds_WinRT">
      <summary>
            Gets or sets the word coordinates in pixels.
            </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> containing the word coordinates in pixels.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The word coordinates is the sum of the coordinates of the characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">OcrCharacter.Bounds</see>) from <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> to
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" /> into the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex">
      <summary>Gets or sets the first index of word value in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the first character that forms this word in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> used to create this <see cref="T:Leadtools.Forms.Ocr.OcrWord" />.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>You can get extra information about the characters in this word by iterating through the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection with starting index of
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> and ending index of <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getFirstCharacterIndex()
public void setFirstCharacterIndex(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int firstCharacterIndex;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex">
      <summary>Gets or sets the last index of word value in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the last character that forms this word in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> used to create this <see cref="T:Leadtools.Forms.Ocr.OcrWord" />.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>You can get extra information about the characters in this word by iterating through the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection with starting index of
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> and ending index of <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public int getLastCharacterIndex()
public void setLastCharacterIndex(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int lastCharacterIndex;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrDocument">
      <summary>Defines an OCR document object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds the recognition data for one or more pages and is used to convert this data to the final output document.</para>
        <para>For information on how to create memory-based or file-based documents or how to load file-based documents from disk refer to
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
             <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <para>Typical OCR operation using <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine and then creating an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using the
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and performing either automatic or manual zoning. Once this is done, use
             the  <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method on each page to collect the recognition data and store it internally in the page. After the recognition
             data is collected, use the various <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
             or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>
             methods to save the document to its final format. You can also use the various
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
             methods
             or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see> methods
             to save the document as XML. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
             as many times as required to save the document to multiple formats such PDF, DOC and HTML (As well as XML through the
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
             method). You can also continue to add and recognize pages
             (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>In LEADTOOLS for Windows Runtime, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)" /> instead of the above methods.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
             of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
             <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert a raster-only page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
             finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
             <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>Some OCR engine types support creating multi-threaded documents by creating one <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and multiple <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or
             <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeJob" /> each in its own dedicated threads. For more information, refer to
             <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.IsInMemory">IOcrDocument.IsInMemory</see> will be <strong>true</strong> for memory-based documents and
             <strong>false</strong> for file-based documents.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.FileName">IOcrDocument.FileName</see> can be used to obtain the name of the disk file used by a file-based document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.RecognizingOcrPages">Recognizing OCR Pages</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
      <java>
        <pre>public class OcrDocument</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrDocument : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to the final output document and stores it in a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream to save the final output document to.</param>
      <param name="format">The document format to use. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>To save the output document to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save(string fileName, DocumentFormat format, OcrProgressCallback callback)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to the final output document and stores it to a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="fileName">The name of the file to save the final output document to.</param>
      <param name="format">The document format to use. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>To save the output document to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save(Stream stream, DocumentFormat format, OcrProgressCallback callback)</see>.</para>
        <para>To get the extension used commonly with the document format specified in <paramref name="format" />, use
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFileExtension(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetFormatFileExtension</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine then creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>
public void save(String fileName,
                 OcrProgressListener callback)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to XML data and stores it in a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream to save the XML data to.</param>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">SaveXml(string, OcrXmlOutputOptions)</see>.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to XML data and stores it in a .NET stream with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream to save the XML data to.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <param name="outputOptions">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">SaveXml(string, OcrXmlOutputOptions)</see>.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Converts the accumulated recognition results stored in the pages of this OCR document to the final output document and stores it into a Windows Runtime StorageFile object.
            </summary>
      <param name="stream">The LEADTOOLS stream object to save the final output document to.</param>
      <param name="format">The document format to use. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>Returns the <strong>IAsyncActoin</strong> object for the operation.</returns>
      <remarks>
        <para>To get the extension used commonly with the document format specified in <paramref name="format" />, use
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFileExtension(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetFormatFileExtension</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine then creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)" /> to save the document to its final format as well as <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)" /> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)" /> as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>
        <!--IOcrDocument.SaveAsync-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>
            Converts the accumulated recognition results stored in the pages of this OCR document to XML data and stores it into a Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage file object to save the XML data to.</param>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <returns>Returns the <strong>IAsyncActoin</strong> object for the operation.</returns>
      <remarks>
        <para>To obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)" /> to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)" /> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)" /> as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <!--IOcrDocument.SaveXmlAsync-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to XML data and stores it in a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The output file name to save the XML data to.</param>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(Stream stream, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Sub SaveAsXmlExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim xmlFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.xml")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize it
               ocrPage.Recognize(Nothing)

               ' Save the result XML to a disk file
               ' Only save the words not characters, if we want the characters
               ' we need to change the options to OcrXmlOutputOptions.Characters
               ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private void SaveAsXmlExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string xmlFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.xml");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Save the result XML to a disk file
               // Only save the words not characters, if we want the characters
               // we need to change the options to OcrXmlOutputOptions.Characters
               ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;

      private async Task SaveAsXmlExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string xmlFileName = "Ocr1.xml";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize it
         ocrPage.Recognize(null);

         // Save the result XML to a disk file
         // Only save the words not characters, if we want the characters
         // we need to change the options to OcrXmlOutputOptions.Characters
         StorageFile xmlFile = await Tools.AppInstallFolder.GetFileAsync(xmlFileName);
         await ocrDocument.SaveXmlAsync(xmlFile, OcrXmlOutputOptions.None);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrDocument.SaveXmlFile-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document to XML data and stores it in a disk file with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The output file name to save the XML data to.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <param name="outputOptions">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(Stream stream, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Sub SaveAsXmlExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim xmlFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.xml")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize it
               ocrPage.Recognize(Nothing)

               ' Save the result XML to a disk file
               ' Only save the words not characters, if we want the characters
               ' we need to change the options to OcrXmlOutputOptions.Characters
               ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private void SaveAsXmlExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string xmlFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.xml");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Save the result XML to a disk file
               // Only save the words not characters, if we want the characters
               // we need to change the options to OcrXmlOutputOptions.Characters
               ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;

      private async Task SaveAsXmlExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string xmlFileName = "Ocr1.xml";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize it
         ocrPage.Recognize(null);

         // Save the result XML to a disk file
         // Only save the words not characters, if we want the characters
         // we need to change the options to OcrXmlOutputOptions.Characters
         StorageFile xmlFile = await Tools.AppInstallFolder.GetFileAsync(xmlFileName);
         await ocrDocument.SaveXmlAsync(xmlFile, OcrXmlOutputOptions.None);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrDocument.SaveXmlFile-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in the pages of this OCR document and returns it as XML data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <returns>A <see cref="T:System.String" /> object containing the XML data.</returns>
      <remarks>
        <para>To save the output document as XML to a disk file or a .NET stream, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(Stream stream, OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final format as well as
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> method to return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Sub SaveAndProcessXmlExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize it
               ocrPage.Recognize(Nothing)

               ' Get the recognition data as XML
               Dim xml As String = ocrDocument.SaveXml(OcrXmlOutputOptions.None)

               ' Process the data by showing all the words
               Using reader As New System.IO.StringReader(xml)
                  Dim doc As New System.Xml.XPath.XPathDocument(reader)
                  Dim nav As System.Xml.XPath.XPathNavigator = doc.CreateNavigator()

                  ' Select all the &lt;word&gt; elements
                  Dim iter As System.Xml.XPath.XPathNodeIterator = nav.Select("//word")

                  Console.WriteLine("Word found:")
                  While iter.MoveNext()
                     Console.WriteLine(iter.Current.Value)
                  End While
               End Using
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private void SaveAndProcessXmlExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Get the recognition data as XML
               string xml = ocrDocument.SaveXml(OcrXmlOutputOptions.None);

               // Process the data by showing all the words
               using (System.IO.StringReader reader = new System.IO.StringReader(xml))
               {
                  System.Xml.XPath.XPathDocument doc = new System.Xml.XPath.XPathDocument(reader);
                  System.Xml.XPath.XPathNavigator nav = doc.CreateNavigator();

                  // Select all the &lt;word&gt; elements
                  System.Xml.XPath.XPathNodeIterator iter = nav.Select(@"//word");

                  Console.WriteLine("Word found:");
                  while (iter.MoveNext())
                  {
                     Console.WriteLine(iter.Current.Value);
                  }
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;

      private async Task SaveAndProcessXmlExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize it
         ocrPage.Recognize(null);

         // Get the recognition data as XML
         string xml = ocrDocument.SaveXml(OcrXmlOutputOptions.None);

         // Process the data by showing all the words
         using (System.IO.StringReader reader = new System.IO.StringReader(xml))
         {
            System.Xml.XmlReader xmlReader = System.Xml.XmlReader.Create(reader);

            xmlReader.MoveToContent();
            while (xmlReader.Read())
            {
               if (xmlReader.NodeType == XmlNodeType.Element)
               {
                  if (xmlReader.Name == @"//word")
                  {
                     Debug.WriteLine(xmlReader.Value);
                  }
               }
            }
         }

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrDocument.SaveXml-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">
      <summary>Load zones from a multi-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the zones to load.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.
            This will also speed up the recognition process considerably.</description></item></list></para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Shared Sub LoadSaveZonesExample()
         Dim engineType As OcrEngineType = OcrEngineType.Advantage
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(engineType, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add 2 pages
               ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), Nothing)
               ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif"), Nothing)

               ' Auto-zone all the pages
               ocrDocument.Pages.AutoZone(Nothing)
               Console.WriteLine("Number of zones after auto-zone:")
               For i As Integer = 0 To ocrDocument.Pages.Count - 1
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages(i).Zones.Count)
               Next

               ' Save the zones to a disk file
               Dim zonesFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LoadSaveZonesExample.ozf")
               ocrDocument.SaveZones(zonesFileName)

               ' Clear the zones
               For i As Integer = 0 To ocrDocument.Pages.Count - 1
                  ocrDocument.Pages(i).Zones.Clear()
               Next

               ' Show the zones now:
               Console.WriteLine("Number of zones after saving the zones to file and then clear:")
               For i As Integer = 0 To ocrDocument.Pages.Count - 1
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages(i).Zones.Count)
               Next

               ' Re-load the zones
               ocrDocument.LoadZones(zonesFileName)

               ' Show the zones now:
               ocrDocument.Pages.AutoZone(Nothing)
               Console.WriteLine("Number of zones after loading the zones from file:")
               For i As Integer = 0 To ocrDocument.Pages.Count - 1
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages(i).Zones.Count)
               Next
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private static void LoadSaveZonesExample()
      {
         OcrEngineType engineType = OcrEngineType.Advantage;
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(engineType, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add 2 pages
               ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), null);
               ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif"), null);

               // Auto-zone all the pages
               ocrDocument.Pages.AutoZone(null);
               Console.WriteLine("Number of zones after auto-zone:");
               for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
               {
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
               }

               // Save the zones to a disk file
               string zonesFileName = Path.Combine(LEAD_VARS.ImagesDir, "LoadSaveZonesExample.ozf");
               ocrDocument.SaveZones(zonesFileName);

               // Clear the zones
               for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
               {
                  ocrDocument.Pages[i].Zones.Clear();
               }

               // Show the zones now:
               Console.WriteLine("Number of zones after saving the zones to file and then clear:");
               for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
               {
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
               }

               // Re-load the zones
               ocrDocument.LoadZones(zonesFileName);

               // Show the zones now:
               ocrDocument.Pages.AutoZone(null);
               Console.WriteLine("Number of zones after loading the zones from file:");
               for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
               {
                  Console.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;

      private async Task LoadSaveZonesExample()
      {
         OcrEngineType engineType = OcrEngineType.Advantage;
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(engineType, false);
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add 2 pages
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(@"Assets\Ocr1.tif");
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);

            loadFile = await Tools.AppInstallFolder.GetFileAsync(@"Assets\Ocr2.tif");
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Auto-zone all the pages
         ocrDocument.Pages.AutoZone(null);
         Debug.WriteLine("Number of zones after auto-zone:");
         for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
         {
            Debug.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
         }

         // Save the zones to a disk file
         string zonesFileName = "LoadSaveZonesExample.ozf";
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(zonesFileName);
         await ocrDocument.SaveZonesAsync(saveFile);

         // Clear the zones
         for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
         {
            ocrDocument.Pages[i].Zones.Clear();
         }

         // Show the zones now:
         Debug.WriteLine("Number of zones after saving the zones to file and then clear:");
         for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
         {
            Debug.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
         }

         // Re-load the zones
         await ocrDocument.LoadZonesAsync(saveFile);

         // Show the zones now:
         ocrDocument.Pages.AutoZone(null);
         Debug.WriteLine("Number of zones after loading the zones from file:");
         for (int i = 0; i &lt; ocrDocument.Pages.Count; i++)
         {
            Debug.WriteLine("  Page {0} has {1} zones.", i, ocrDocument.Pages[i].Zones.Count);
         }
      }</code>
        <!--IOcrDocument.LoadZones-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">
      <summary>Load zones from a multi-page zones .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream containing the zones to load.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone stream: If the stream does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones stream file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.
            This will also speed up the recognition process considerably.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">
      <summary>Saves zones to a multi-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file that will contain the zones data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> to
            load all or one page zones saved by this method.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">
      <summary>Saves zones to a multi-page zones .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream that will contain the zones data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream must previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone stream: If the stream does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to
            load all or one page zones saved by this method.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves zones to a multi-page zones disk file with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file that will contain the zones data.</param>
      <param name="xmlOptions">Options to use when writing the XML data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> to
            load all or one page zones saved by this method.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves zones to a multi-page zones .NET stream with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream that will contain the zones data.</param>
      <param name="xmlOptions">Options to use when writing the XML data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream must previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone stream: If the stream does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to
            load all or one page zones saved by this method.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">
      <summary>
            Load zones from a multi-page Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage containing the zones to load.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(storageFile)</see>: This method save the zones of a particular OCR page to a single-page storage file. This method will not
            use the page number, and hence, the file will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load
            these zones back into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(storageFile)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(storageFile, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
             to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.
            This will also speed up the recognition process considerably.</description></item></list></para>
      </remarks>
      <example>
        <!--IOcrDocument.LoadZonesAsync-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">
      <summary>
            Saves zones to a multi-page zones Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage file object to save the zones data to.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(storageFile)</see>: This method save the zones of a particular OCR page to a single-page storage file. This method will not
            use the page number, and hence, the file will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load
            these zones back into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(storageFile)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(storageFile, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
             to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property conatins 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.
            This will also speed up the recognition process considerably.</description></item></list></para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">LoadZonesAsync(file)</see>.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.Engine">
      <summary>Gets the OCR engine used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Engine" /> will have the same value as the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object that owns the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> used to create this OCR document.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public OcrEngine getEngine()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrEngine* engine;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">
      <summary>Allows you to add, remove or update image (raster) pages in the OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> object that allow you to add, remove or update image (raster) pages in the OCR document.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> is a standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Through this member you can add, remove or update image (raster) pages to the
            OCR document. These pages can be image files on disk, memory or even in a remote URL.</para>
        <para>In memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> holds the pages. The user can recognize any or all of the pages at
            any time and pages can be added or removed at will.</para>
        <para>In file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> is a store-only view of the pages. when page is added, a snap
            shot of the current recognition data is saved into the document. This data cannot be modified any more and the page is no longer needed. The user
            must recognize the pages before they are added to the document and pages can only be added but not removed. In this mode, you can only use
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrPageCollection.Add</see> and <see cref="P:System.Collections.Generic.ICollection`1.Count">IOcrPageCollection.Count</see>. No other method
            or property is supported.</para>
        <para>Any file format supported by LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. Once the image is loaded into the document, use the various
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone the page (or pages) in preparation to be recognized and saved as a document.</para>
        <para>You can also convert to and from any of the pages added to the OCR document to a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> for use with other LEADTOOLS for .NET assemblies
            such as TWAIN scanning, image processing, MRC, etc.</para>
        <para>For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <keywords>OCR,Pages|OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public OcrPageCollection getPages()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrPageCollection* pages;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions">
      <summary>Gets or sets a value indicating whether this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> must copy the <see cref="T:Leadtools.Codecs.RasterCodecs" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
            options from the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> before using them. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> must copy the <see cref="T:Leadtools.Codecs.RasterCodecs" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
            options from the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> before using them; otherwise, <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>When the value of this property is <strong>true</strong>, then this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will copy the options from
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">IOcrEngine.DocumentWriterInstance</see>
            to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance">IOcrDocument.RasterCodecsInstance</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">IOcrDocument.DocumentWriterInstance</see> before using them.</para>
        <para>This makes it easy to change <see cref="T:Leadtools.Codecs.RasterCodecs" /> and and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> options globally for all current and future
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />'s.</para>
        <para>If you have a requirement to use different options per <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> in the same <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, for example, you have an
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object that will save to PDF with Image/Text option and another to save to PDF/A. Then you can set
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions" /> of each document to <strong>false</strong>, then change the PDF options through
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance" /> instead of <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance" />.</para>
        <para>The options are copied before any of the following methods is called:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Pages.AddPage</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Pages.AddPages</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Pages.InsertPage</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Pages.InsertPages</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">IOcrDocument.Pages.ExportPage</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">IOcrDocument.Pages.ExportPages</see>)
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
              </para>
            </description>
          </item>
        </list>
        <para>For more information, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">IOcrEngine.DocumentWriterInstance</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <noexample />
      <java>
        <pre>
public boolean getUseEngineInstanceOptions()
public void setUseEngineInstanceOptions(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useEngineInstanceOptions;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance">
      <summary>Gets the instance of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will be disposed of by the document automatically when <see cref="M:System.IDisposable.Dispose" /> is called.</para>
        <para>When new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects are created using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see>, a new
            object of type <see cref="T:Leadtools.Codecs.RasterCodecs" /> is created by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, and assigned to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance">IOcrDocument.RasterCodecsInstance</see>. All
            image load and save operation (such as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPage</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPages</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPage</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPages</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">IOcrPageCollection.ExportPage</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">IOcrPageCollection.ExportPages</see>)
            that is performed inside by OCR document or objects inside the OCR document will use that object.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions">IOcrDocument.UseEngineInstanceOptions</see> is <strong>true</strong>, then
            the options will be copied from the engine's <see cref="T:Leadtools.Codecs.RasterCodecs" /> to the document <see cref="T:Leadtools.Codecs.RasterCodecs" /> before any methods is called.</para>
        <para>For more information on how this object is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</para>
      </remarks>
      <example>For an example, <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">IOcrEngine.DocumentWriterInstance</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public RasterCodecs getRasterCodecsInstance()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTRasterCodecs* rasterCodecsInstance;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">
      <summary>Gets the instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object will be disposed of by the engine automatically when <see cref="M:System.IDisposable.Dispose" /> is called.</para>
        <para>When new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects are created using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see>, a new
            object of type <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> is created by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, and assigned to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">IOcrDocument.DocumentWriterInstance</see>. All
            document creation operation (such as <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>)
            that is performed inside by OCR document or objects inside the OCR document will use that object.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions">IOcrDocument.UseEngineInstanceOptions</see> is <strong>true</strong>, then
            the options will be copied from the engine's <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> to the document <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> before any methods is called.</para>
        <para>For more information on how this object is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</para>
      </remarks>
      <example>For an example, <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">IOcrEngine.DocumentWriterInstance</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.FileName">
      <summary>Gets the name of the disk file used by this file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The name of the disk file used by this file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> or <strong>null</strong> if this is a memory-based document.</value>
      <remarks>
        <para>For information on how to create memory-based or file-based documents or how to load file-based documents from disk refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.IsInMemory">
      <summary>Gets a value that indicate whether this is a memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this is a memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <strong>false</strong> if this is a file-based document.</value>
      <remarks>
        <para>For information on how to create memory-based or file-based documents or how to load file-based documents from disk refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrDocumentManager">
      <summary>Manages the OCR documents of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Documents|Creating documents|Document formats | OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see> property.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> interface allows you to create <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that encapsulate an OCR'ed document. Each OCR document contains
            a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that you can use to add and remove pages from the document. After you add the pages to the document and optionally manage the zones
            on the pages, you can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method on each page to obtain the recognition data and store them internally in
            the pages. Once you are done, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save the document into its final format.</para>
        <para>LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others through the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>
            engine. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> supports creating documents in two ways:</para>
        <h2>Memory-Based Documents</h2>
        <para>In this mode, the OCR pages are required to be in memory before saving. This is not recommended when the document have a large amount of pages and
            either using a file-based document or using the LEADTOOLS Temporary file format (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> is required.</para>
        <para>In memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> holds the pages. The user can recognize any or all of the pages at
            any time and pages can be added or removed at will.</para>
        <para>Use or <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument(string, OcrCreateDocumentOptions)</see>
            with the <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.InMemory</see> flag to create such documents.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.IsInMemory">IOcrDocument.IsInMemory</see> will be <strong>true</strong> for memory-based documents.</para>
        <h2>File-Based Documents</h2>
        <para>In this mode, the OCR pages are not required to be in memory before saving. This mode is recommended when the document have a large amount of
            pages and.</para>
        <para>In file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> is a store-only view of the pages. when page is added, a snap
            shot of the current recognition data is saved into the document. This data cannot be modified any more and the page is no longer needed. The user
            must recognize the pages before they are added to the document and pages can only be added but not removed.</para>
        <para>File-based documents can also be saved and re-loaded to continue adding pages or converting to final document at a later time. For more information
            and examples, refer to to <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <para>Use
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument(string, OcrCreateDocumentOptions)</see>
            without the <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.InMemory</see> flag to create such documents.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.IsInMemory">IOcrDocument.IsInMemory</see> will be <strong>false</strong> for memory-based documents. The current back-end
            file name can be obtained through <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.FileName">IOcrDocument.FileName</see>.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine, create an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see> method and adding the pages into it and perform either automatic or manual zoning.
            Once this is done, After the recognition data is collected using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> methods to save the document to its final
            format such as PDF, DOC or HTML.</para>
        <para>In addition to the above, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> to
            save the document as XML.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms

      Public Sub OcrDocumentManagerExample()
         Dim tifFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim tifFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif")
         Dim outputDirectory As String = LEAD_VARS.ImagesDir
         ' Create the output directory
         If Directory.Exists(outputDirectory) Then
            Directory.Delete(outputDirectory, True)
         End If
         Directory.CreateDirectory(outputDirectory)

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            Console.WriteLine("Starting up the engine...")
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create the OCR document
            Console.WriteLine("Creating the OCR document...")
            Dim ocrDocumentManager As IOcrDocumentManager = ocrEngine.DocumentManager
            Using ocrDocument As IOcrDocument = ocrDocumentManager.CreateDocument()
               ' Add the pages to the document
               Console.WriteLine("Adding the pages...")
               ocrDocument.Pages.AddPage(tifFileName1, Nothing)
               ocrDocument.Pages.AddPage(tifFileName2, Nothing)

               ' Recognize the pages to this document. Note, we did not call AutoZone, it will explicitly be called by Recognize
               Console.WriteLine("Recognizing all the pages...")
               ocrDocument.Pages.Recognize(Nothing)

               ' Save to all the formats supported by this OCR engine
               Dim formats As Array = [Enum].GetValues(GetType(DocumentFormat))
               For Each format As DocumentFormat In formats
                  Dim friendlyName As String = DocumentWriter.GetFormatFriendlyName(format)
                  Console.WriteLine("Saving (using default options) to {0}...", friendlyName)

                  ' Construct the output file name (output_directory + document_format_name + . + extension)
                  Dim extension As String = DocumentWriter.GetFormatFileExtension(format)
                  Dim outputFileName As String = Path.Combine(outputDirectory, format.ToString() &amp; "." &amp; extension)

                  ' Save the document
                  ocrDocument.Save(outputFileName, format, Nothing)

                  ' If this is the LTD format, convert it to PDF
                  If format = DocumentFormat.Ltd Then
                     Console.WriteLine("Converting the LTD file to PDF...")
                     Dim pdfFileName As String = Path.Combine(outputDirectory, format.ToString() &amp; "_pdf.pdf")

                     Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance
                     docWriter.Convert(outputFileName, pdfFileName, DocumentFormat.Pdf)
                  End If
               Next

               ' Now save to all the engine native formats (if any) supported by the engine
               Dim engineFormats As String() = ocrDocumentManager.GetSupportedEngineFormats()
               For Each engineFormat As String In engineFormats
                  Dim friendlyName As String = ocrDocumentManager.GetEngineFormatFriendlyName(engineFormat)
                  Console.WriteLine("Saving to engine native format {0}...", friendlyName)

                  ' Construct the output file name (output_directory + "engine" + engine_format_name + . + extension)
                  Dim extension As String = ocrDocumentManager.GetEngineFormatFileExtension(engineFormat)
                  Dim outputFileName As String = Path.Combine(outputDirectory, "engine_" &amp; engineFormat &amp; "." &amp; extension)

                  ' To use this format, set it in the IOcrDocumentManager.EngineFormat and do a normal save using DocumentFormat.User

                  ' Save the document
                  ocrDocumentManager.EngineFormat = engineFormat
                  ocrDocument.Save(outputFileName, DocumentFormat.User, Nothing)
               Next
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            Console.WriteLine("Shutting down...")
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;

      public void OcrDocumentManagerExample()
      {
         string tifFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string tifFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif");
         string outputDirectory = LEAD_VARS.ImagesDir;
         // Create the output directory
         if (Directory.Exists(outputDirectory))
            Directory.Delete(outputDirectory, true);
         Directory.CreateDirectory(outputDirectory);

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create the OCR document
            Console.WriteLine("Creating the OCR document...");
            IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;
            using (IOcrDocument ocrDocument = ocrDocumentManager.CreateDocument())
            {
               // Add the pages to the document
               Console.WriteLine("Adding the pages...");
               ocrDocument.Pages.AddPage(tifFileName1, null);
               ocrDocument.Pages.AddPage(tifFileName2, null);

               // Recognize the pages to this document. Note, we did not call AutoZone, it will explicitly be called by Recognize
               Console.WriteLine("Recognizing all the pages...");
               ocrDocument.Pages.Recognize(null);

               // Save to all the formats supported by this OCR engine
               Array formats = Enum.GetValues(typeof(DocumentFormat));
               foreach (DocumentFormat format in formats)
               {
                  string friendlyName = DocumentWriter.GetFormatFriendlyName(format);
                  Console.WriteLine("Saving (using default options) to {0}...", friendlyName);

                  // Construct the output file name (output_directory + document_format_name + . + extension)
                  string extension = DocumentWriter.GetFormatFileExtension(format);
                  string outputFileName = Path.Combine(outputDirectory, format.ToString() + "." + extension);

                  // Save the document
                  ocrDocument.Save(outputFileName, format, null);

                  // If this is the LTD format, convert it to PDF
                  if (format == DocumentFormat.Ltd)
                  {
                     Console.WriteLine("Converting the LTD file to PDF...");
                     string pdfFileName = Path.Combine(outputDirectory, format.ToString() + "_pdf.pdf");

                     DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;
                     docWriter.Convert(outputFileName, pdfFileName, DocumentFormat.Pdf);
                  }
               }

               // Now save to all the engine native formats (if any) supported by the engine
               string[] engineFormats = ocrDocumentManager.GetSupportedEngineFormats();
               foreach (string engineFormat in engineFormats)
               {
                  string friendlyName = ocrDocumentManager.GetEngineFormatFriendlyName(engineFormat);
                  Console.WriteLine("Saving to engine native format {0}...", friendlyName);

                  // Construct the output file name (output_directory + "engine" + engine_format_name + . + extension)
                  string extension = ocrDocumentManager.GetEngineFormatFileExtension(engineFormat);
                  string outputFileName = Path.Combine(outputDirectory, "engine_" + engineFormat + "." + extension);

                  // To use this format, set it in the IOcrDocumentManager.EngineFormat and do a normal save using DocumentFormat.User

                  // Save the document
                  ocrDocumentManager.EngineFormat = engineFormat;
                  ocrDocument.Save(outputFileName, DocumentFormat.User, null);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            Console.WriteLine("Shutting down...");
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task OcrDocumentManagerExample()
      {
         string tifFileName1 = @"Assets\Ocr1.tif";
         string tifFileName2 = @"Assets\Ocr2.tif";
         string[] sourceFiles = 
         {
            tifFileName1,
            tifFileName2
         };

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         Debug.WriteLine("Starting up the engine...");
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create the OCR document
         Debug.WriteLine("Creating the OCR document...");
         IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;
         IOcrDocument ocrDocument = ocrDocumentManager.CreateDocument();

         // Add the pages to the document
         Debug.WriteLine("Adding the pages...");

         using (RasterCodecs codecs = new RasterCodecs())
         {
            foreach (string fileName in sourceFiles)
            {
               StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(fileName);
               using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               {
                  ocrDocument.Pages.AddPage(image, null);
               }
            }
         }

         // Recognize the pages to this document. Note, we did not call AutoZone, it will explicitly be called by Recognize
         Debug.WriteLine("Recognizing all the pages...");
         ocrDocument.Pages.Recognize(null);

         // Save to all the formats supported by this OCR engine
         DocumentFormat[] supportedFormats = DocumentWriter.GetSupportedFormats();
         foreach (DocumentFormat format in supportedFormats)
         {
            string friendlyName = DocumentWriter.GetFormatFriendlyName(format);
            Debug.WriteLine("Saving (using default options) to {0}...", friendlyName);

            // Construct the output file name (output_directory + document_format_name + . + extension)
            string extension = DocumentWriter.GetFormatFileExtension(format);
            string outputFileName = format.ToString() + "." + extension;

            // Save the document
            StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(outputFileName, CreationCollisionOption.ReplaceExisting);
            await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), format, null);

            // If this is the LTD format, convert it to PDF
            if (format == DocumentFormat.Ltd)
            {
               Debug.WriteLine("Converting the LTD file to PDF...");
               string pdfFileName = Path.Combine(Tools.AppLocalFolder.Path, format.ToString() + "_pdf.pdf");

               DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;
               docWriter.Convert(outputFileName, pdfFileName, DocumentFormat.Pdf);
            }
         }

         // Shutdown the engine
         Debug.WriteLine("Shutting down...");
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrDocumentManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.RecognizingOcrPages">Recognizing OCR Pages</seealso>
      <java>
        <pre>public class OcrDocumentManager</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrDocumentManager : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats">
      <summary>Gets a list of the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>An array of <see cref="T:System.String" /> that contains the name of the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. If this engine does not support
            native formats, an empty array is returned instead.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, 
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving the recognition results using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>It is recommended that you use the LEADTOOLS Document Writers supported formats always when saving OCR recognition data. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.
            Support for native engine formats may be deprecated in later versions of LEADTOOLS.</para>
        <para>To save the recognition results using the engine native format:
            <list type="bullet"><item><description>Obtain the engine native format name using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</description></item><item><description>Set the engine format name with the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property</description></item><item><description>Call the various save methods (<see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IAutoRecognizeManager.Run</see>) using
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> for the <i>format</i> parameter.</description></item></list></para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. 
            You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature. 
            To get a list of the engine native formats available but not installed for
            the current OCR engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats" />.</para>
        <para>For more information about the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To determine whether a specific engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get the friendly name for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public String[] getSupportedEngineFormats()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats">
      <summary>Gets a list of the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> that are not installed. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>An array of <see cref="T:System.String" /> that contains the name of the engine native formats supported by 
            this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not installed. If this engine does not
            support native formats or all formats are installed, an empty array is returned instead.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the 
            and --&gt;<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving recognition results using the engine-native-save mechanism instead of using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. 
            Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats 
            and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set which format to use when
            saving the results.</para>
        <para>For best results, always use the formats supported by the LEADTOOLS Document Writers 
            when saving OCR recognition data. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.
            Support for native engine formats may be deprecated in later versions of LEADTOOLS.</para>
        <para>To save the recognition results using the engine native format:
            <list type="bullet"><item><description>Obtain the engine native format name using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</description></item><item><description>Set the engine format name with the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property</description></item><item><description>Call the various save methods (<see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IAutoRecognizeManager.Run</see>) using
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> for the <i>format</i> parameter.</description></item></list></para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature.</para>
        <para>For more information about the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To determine whether a specific engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get the friendly name for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public String[] getAdditionalEngineFormats()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)">
      <summary>Gets a value indicating whether the specified engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="formatName">The name of the engine native format to check.</param>
      <returns>
        <strong>true</strong> if <paramref name="formatName" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the 
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving the recognition results using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature. To get a list of the engine native formats available but not installed for
            the current OCR engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats" />.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</para>
        <para>To get the file extension for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get a friendly name for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public boolean isEngineFormatSupported(String formatName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)">
      <summary>Gets the default file extension for the specified engine native format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="formatName">The name of the engine native format requested.</param>
      <returns>A <see cref="T:System.String" /> containing the file extension for the specified format (without the ".").</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the 
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving recognition results using the engine native save mechanism instead of the 
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats 
            and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>This method returns the default file extension commonly used with file of types <paramref name="formatName" />. For example, Adobe PDF files commonly have "pdf" extensions,
            Microsoft Word documents commonly have "doc" extensions and so forth.</para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature. To get a list of the engine native formats available but not installed for
            the current OCR engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats" />.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</para>
        <para>To determine whether a specific engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get a friendly name for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public String getEngineFormatFileExtension(String formatName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">
      <summary>Gets the friendly name of the specified engine native format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="formatName">The engine native format name requested.</param>
      <returns>A <see cref="T:System.String" /> containing the friendly name for the specified format.</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the 
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving the recognition results using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>This method will return a friendly name used for <paramref name="formatName" />. For example, Adobe PDF files will return something similar to "Adobe PDF" and 
            Microsoft Word documents will return "Microsoft Word" and so forth. You can use this value in your application when presenting the user with a list to select a format to save
            the recognized OCR documents.</para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature. To get a list of the engine native formats available but not installed for
            the current OCR engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats" />.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</para>
        <para>To determine whether a specific engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public String getEngineFormatFriendlyName(String formatName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">
      <summary>Creates a new OCR memory-based document object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An object implementing <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that can participate in recognition and saving operations.</returns>
      <remarks>
        <para>This method creates a memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. It is the equivalant of
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">CreateDocument(null, OcrCreateDocumentOptions.InMemory)</see>. For more information
            on memory and file-based documents, refer to <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up and then creating an OCR document using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method then
            adding the pages into it and perform either automatic or manual zoning. Once this is done, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called on each
            page to collect the recognition data and have it stored internally in the page. After the recognition data is collected, you use the various
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> methods to save the document to its final format.</para>
        <para>When you are done using the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object created by this method, you should dispose it as soon as possible to free its resources. Disposing
            an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrDocument createDocument()</pre>
      </java>
      <objectivec>
        <pre>- (LTOcrDocument*)createDocument;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">
      <summary>Creates a new OCR file or memory-based document object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="documentFileName">The document file name. This value can be <strong>null</strong>.</param>
      <param name="options">Options to control how the document is created or loaded.</param>
      <returns>An object implementing <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that can participate in recognition and saving operations.</returns>
      <remarks>
        <para>This method can either create a file or memory-based OCR document, or load a previously created file-based document based on the values
             of <paramref name="documentFileName" /> and <see paramref="options" /> as follows:</para>
        <para>To create a memory-based document, pass <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.InMemory</see> to <paramref name="options" />.
             <paramref name="documentFileName" /> is not used and the engine will not use a disk file to store the document data.</para>
        <para>To create a file-based document that will be not be re-used, pass <strong>null</strong> to <paramref name="documentFileName" /> and
             <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.AutoDeleteFile</see> to <paramref name="options" />. In this case, the engine will
             create a temporary file on disk to use as the store for the document file. The file is deleted when the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> is disposed. Note that you use your
             own file name in <paramref name="documentFileName" /> along with <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.AutoDeleteFile</see>,
             the engine will overwrite this file if it exists and automatically deletes it when disposed.</para>
        <para>To create a file-based document that will be re-used, pass a file name to <paramref name="documentFileName" /> and
             <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.None</see> to <paramref name="options" />. In this case, the engine will overwrite this
             file if it exists but will not delete it when <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> is disposed.</para>
        <para>To re-load a document that was created with the previous option, pass the same file name to <paramref name="documentFileName" /> and
             <see cref="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">OcrCreateDocumentOptions.LoadExisting</see> to <paramref name="options" />. In this case, the engine will
             re-generate the document from data found in the file.</para>
        <para>Use <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.IsInMemory">IOcrDocument.IsInMemory</see> to test whether a document is memory or file-based and
             <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.FileName">IOcrDocument.FileName</see> to get the name of the disk-file used by a file-based document. This will be set to the
             same value passed to <paramref name="documentFileName" /> or the name of the temp file created.</para>
        <para>For more information on memory and file-based documents, refer to <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up and then creating an OCR document using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method then
             adding the pages into it and perform either automatic or manual zoning. Once this is done, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called on each
             page to collect the recognition data and have it stored internally in the page. After the recognition data is collected, you use the various
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> or
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> methods to save the document to its final format.</para>
        <para>When you are done using the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object created by this method, you should dispose it as soon as possible to free its resources. Disposing
             an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <!--IOcrDocumentManager.CreateDocument(string, OcrCreateDocumentOptions)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrDocument createDocument()</pre>
      </java>
      <objectivec>
        <pre>- (LTOcrDocument*)createDocument;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)">
      <summary>Gets the font names used in the final document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <returns>An array of six string values that contains the font names used in the final document.</returns>
      <remarks>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows. The following table shows the array index and the font
            description:
            <list type="table"><listheader><term>Index</term><description>Description</description></listheader><item><term>0</term><description>The font used with proportional serif characters</description></item><item><term>1</term><description>The font used with proportional sans-serif characters</description></item><item><term>2</term><description>The font used with monospaced serif characters</description></item><item><term>3</term><description>The font used with monospaced sans-serif characters</description></item><item><term>4</term><description>The font used with ICR (hand-written) characters</description></item><item><term>5</term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Icr</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see>then the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalent of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the character position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms

      Private Shared Sub DocumentFontsTest()
         Using codecs As New RasterCodecs()
            Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
               ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
               Dim ocrDocumentManager As IOcrDocumentManager = ocrEngine.DocumentManager

               Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
                  ' Add a page to OCR
                  Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), Nothing)

                  ocrPage.AutoZone(Nothing)
                  ocrPage.Recognize(Nothing)

                  ' Show the current fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:")
                  ShowFonts(ocrDocumentManager)
                  ocrDocument.Save(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_DefaultFonts.pdf"), DocumentFormat.Pdf, Nothing)

                  ' Now change the fonts to something else
                  Dim newFonts As String() = ocrDocumentManager.GetFontNames(Nothing)

                  ' Use Cambira for Proportional Serif font - instead of Times New Roman
                  newFonts(0) = "Cambria"
                  ' Use Calibri for Proportional Sans-serif font - instead of Arial
                  newFonts(1) = "Calibri"
                  ' Use Lucida Console for Monospace fonts (both Serif and Sans-serif)
                  newFonts(2) = "Lucida Console"
                  newFonts(3) = "Lucida Console"
                  ' Leave the ICR and MICR fonts the same

                  ocrDocumentManager.SetFontNames(Nothing, newFonts)

                  ' Show the new fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:")
                  ShowFonts(ocrDocumentManager)
                  ocrDocument.Save(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_CustomFonts.pdf"), DocumentFormat.Pdf, Nothing)
               End Using
            End Using
         End Using
      End Sub

      Private Shared Sub ShowFonts(ocrDocumentManager As IOcrDocumentManager)
         ' Get the default fonts
         ' The default fonts will be used for all Latin languages
         Dim fonts As String() = ocrDocumentManager.GetFontNames(Nothing)

         ' This should return an array of 6 items, as follows:
         Console.WriteLine("Proportional Serif font:        " &amp; fonts(0))
         Console.WriteLine("Proportional Sans-serif font:   " &amp; fonts(1))
         Console.WriteLine("Monospace Serif font:           " &amp; fonts(2))
         Console.WriteLine("Monospace Sans-serif font:      " &amp; fonts(3))
         Console.WriteLine("ICR (hand-written) font:        " &amp; fonts(4))
         Console.WriteLine("MICR (Check) font:              " &amp; fonts(5))
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;

      private static void DocumentFontsTest()
      {
         using (RasterCodecs codecs = new RasterCodecs())
         {
            using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
            {
               ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
               IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;

               using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to OCR
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), null);

                  ocrPage.AutoZone(null);
                  ocrPage.Recognize(null);

                  // Show the current fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:");
                  ShowFonts(ocrDocumentManager);
                  ocrDocument.Save(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_DefaultFonts.pdf"), DocumentFormat.Pdf, null);

                  // Now change the fonts to something else
                  string[] newFonts = ocrDocumentManager.GetFontNames(null);

                  // Use Cambira for Proportional Serif font - instead of Times New Roman
                  newFonts[0] = "Cambria";
                  // Use Calibri for Proportional Sans-serif font - instead of Arial
                  newFonts[1] = "Calibri";
                  // Use Lucida Console for Monospace fonts (both Serif and Sans-serif)
                  newFonts[2] = "Lucida Console";
                  newFonts[3] = "Lucida Console";
                  // Leave the ICR and MICR fonts the same

                  ocrDocumentManager.SetFontNames(null, newFonts);

                  // Show the new fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:");
                  ShowFonts(ocrDocumentManager);
                  ocrDocument.Save(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_CustomFonts.pdf"), DocumentFormat.Pdf, null);
               }
            }
         }
      }

      private static void ShowFonts(IOcrDocumentManager ocrDocumentManager)
      {
         // Get the default fonts
         // The default fonts will be used for all Latin languages
         string[] fonts = ocrDocumentManager.GetFontNames(null);

         // This should return an array of 6 items, as follows:
         Console.WriteLine("Proportional Serif font:        " + fonts[0]);
         Console.WriteLine("Proportional Sans-serif font:   " + fonts[1]);
         Console.WriteLine("Monospace Serif font:           " + fonts[2]);
         Console.WriteLine("Monospace Sans-serif font:      " + fonts[3]);
         Console.WriteLine("ICR (hand-written) font:        " + fonts[4]);
         Console.WriteLine("MICR (Check) font:              " + fonts[5]);
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrDocumentManager.GetFontNames-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public String[] getFontNames(String languageName)</pre>
      </java>
      <objectivec>
        <pre>
- (NSArray*)getFontNames:(NSString*)languageName
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])">
      <summary>Sets the font names used in the final document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <param name="fontNames">An array of six string values that contains the font names used in the final document.</param>
      <remarks>
        <para>You can also use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)" /> to get or set the font names individually.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows. The following table shows the array index and the font
            description:
            <list type="table"><listheader><term>Index</term><description>Description</description></listheader><item><term>0</term><description>The font used with proportional serif characters</description></item><item><term>1</term><description>The font used with proportional sans-serif characters</description></item><item><term>2</term><description>The font used with monospaced serif characters</description></item><item><term>3</term><description>The font used with monospaced sans-serif characters</description></item><item><term>4</term><description>The font used with ICR (hand-written) characters</description></item><item><term>5</term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Icr</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see>then the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalent of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the character position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void setFontNames(String languageName,
                         String[] fontNames)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)setFontNames:(NSString*)languageName
           fontNames:(NSArray*)fontNames
               error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType)">
      <summary>gets the specific type of font used in the final document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <param name="fontType">The type of font to get.</param>
      <returns>The font name.</returns>
      <remarks>
        <para>You can also use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get or set the font names using an array.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows:
            description:
            <list type="table"><listheader><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType" /></term><description>Description</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.ProportionalSerif</see></term><description>The font used with proportional serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.ProportionalSansSerif</see></term><description>The font used with proportional sans-serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.FixedSerif</see></term><description>The font used with monospaced serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.FixedSansSerif</see></term><description>The font used with monospaced sans-serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.MICR</see></term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Icr</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see>then the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalent of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the character position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)" />.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public String getFontName(String languageName, OcrDocumentFontType fontType)            </pre>
      </java>
      <objectivec>
        <pre>
- (NSString*)getFontName:(NSString*)languageName
                fontType:(OcrDocumentFontType)fontType
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)">
      <summary>Replaces the specific type of font used in the final document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <param name="fontName">The font name that will be used in final document.</param>
      <param name="fontType">The type of font to replace.</param>
      <remarks>
        <para>You can also use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get or set the font names using an array.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows:
            description:
            <list type="table"><listheader><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType" /></term><description>Description</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.ProportionalSerif</see></term><description>The font used with proportional serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.ProportionalSansSerif</see></term><description>The font used with proportional sans-serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.FixedSerif</see></term><description>The font used with monospaced serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.FixedSansSerif</see></term><description>The font used with monospaced sans-serif characters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType">OcrDocumentFontType.MICR</see></term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Icr</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see>then the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalent of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the character position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>
        <!---IOcrDocumentManager.SetFontName-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void setFontName(String languageName, OcrDocumentFontType fontType, String fontName)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)setFontName:(NSString*)languageName
           fontType:(OcrDocumentFontType)fontType
           fontName:(NSString*)fontName
              error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">
      <summary>Gets or sets the name of the engine native format to use when saving OCR documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that indicates the name of the engine native format to use when saving OCR documents.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the 
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional)</see>
            support saving the recognition results using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>It is recommended that you use the LEADTOOLS Document Writers supported formats always when saving OCR recognition data. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.
            Support for native engine formats may be deprecated in later versions of LEADTOOLS.</para>
        <para>To save the recognition results using the engine native format:
            <list type="bullet"><item><description>Obtain the engine native format name through the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</description></item><item><description>Set the engine format name in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property</description></item><item><description>Call the various save methods (<see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IAutoRecognizeManager.Run</see>) using
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> for the <i>format</i> parameter.</description></item></list></para>
        <para>Note that the LEADTOOLS default installation does not ship with native engine format support. You must download and install the "OCR Additional Features" setup
            available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> to add this feature. To get a list of the engine native formats available but not installed for
            the current OCR engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetAdditionalEngineFormats" />.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetSupportedEngineFormats" />.</para>
        <para>To determine whether a specific engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get a friendly name for a specific engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>
public String getEngineFormat()
public void setEngineFormat(String value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">
      <summary>Gets or sets the character used as a symbol for the rejected characters in the final output document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>The character used as a symbol for the rejected (i.e. unrecognized the recognition module used in the zone) characters in the final output document.</value>
      <remarks>
        <para>In <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> there is a special internal code for marking the unrecognized characters (called rejected characters). However, when exporting to the final output
            document, the recognition result must contain this information, as well. The character which will be used as a placeholder for rejected characters is the rejection symbol.</para>
        <para>The default rejection symbol is "~" (the tilde character)</para>
        <para>For more information on recognition and rejected and missing symbols, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>
          <strong>Note: This property is read only for the LEADTOOLS OCR Advantage Engine, setting this property will have no effect.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public char getRejectionSymbol()
public void setRejectionSymbol(char value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">
      <summary>Gets or sets the character used as a symbol for the missing characters in the final output document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>The character used as a symbol for the missing characters in the final output document.</value>
      <remarks>
        <para> The missing symbol is a special character that replaces another character that was recognized by the engine but could not be represented in the final output document,
            since the character does not exist in the current code page.</para>
        <para>During the conversion to the final output document the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> methods will try to find a replacement character
            with a similar shape for one not supported by the current code page. Only if this attempt was not successful the missing symbol will be sent into the final output document.</para>
        <para>The default missing symbol is "^" (the circumflex character)</para>
        <para>For more information on recognition and rejected and missing symbols, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public char getMissingSymbol()
public void setMissingSymbol(char value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCreateDocumentOptions">
      <summary>Options to use when creating a document using <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument(string, OcrCreateDocumentOptions)</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCreateDocumentOptions.None">
      <summary>(0x00000000)<para>Create a File-Based document. The document file name is used.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCreateDocumentOptions.InMemory">
      <summary>(0x00000001)<para>Create a Memory-Based document. The document file name is not used.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCreateDocumentOptions.AutoDeleteFile">
      <summary>(0x00000002)<para>Automatically delete the document file when the document is disposed. Not available if <strong>InMemory</strong> is specified.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCreateDocumentOptions.LoadExisting">
      <summary>(0x00000004)<para>Load document from the file specified. Not available if <strong>InMemory</strong> is specified.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrDocumentFontType">
      <summary>Font types used when saving the final document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrDocumentFontType" /> is used with <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType)">IOcrDocumentManager.GetFontName</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)">IOcrDocumentManager.SetFontName</see> to to get/set the fonts used in the final recognized document
            (PDF, DOC, HTML, etc)..</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontName(System.String,Leadtools.Forms.Ocr.OcrDocumentFontType,System.String)">IOcrDocumentManager.SetFontName</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrDocumentFontType.ProportionalSerif">
      <summary>(0x00000000)The font used with proportional serif characters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrDocumentFontType.ProportionalSansSerif">
      <summary>(0x00000001)The font used with proportional sans-serif characters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrDocumentFontType.FixedSerif">
      <summary>(0x00000002)The font used with monospaced serif characters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrDocumentFontType.FixedSansSerif">
      <summary>(0x00000003)The font used with monospaced sans-serif characters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrDocumentFontType.MICR">
      <summary>(0x00000004)The font used with MICR (check font) characters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions">
      <summary>Controls the format of the XML data obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
             The various <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>
             methods accept a combination of one or more of the OcrXmlOutputOptions enumeration members to control the format of the output XML data.
             </para>
        <para>The format of the result XML data is as follows:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page&gt;
                 &lt;zone&gt;
                   &lt;paragraph&gt;
                     &lt;line&gt;
                       &lt;word&gt;
                         &lt;character/&gt;
                         &lt;character/&gt;
                       &lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
        <para>The <c><strong>pages</strong></c> element is repeated once per document and it has no value and no additional attributes.</para>
        <para>The <c><strong>page</strong></c> element is repeated for every page in the document (<see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages.Count</see>). If
             this page has not been recognized or contains no zones, then the <c><strong>page</strong></c> element will not contain any child <c><strong>zone</strong></c> elements.</para>
        <para>The <c><strong>page</strong></c> element has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>horizontal_resolution</strong>
              </c>
            </term>
            <description>Horizontal resolution of the page. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">IOcrPage.DpiX</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>vertical_resolution</strong>
              </c>
            </term>
            <description>Vertical resolution of the page. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">IOcrPage.DpiY</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>width</strong>
              </c>
            </term>
            <description>Width of the page in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width">IOcrPage.Width</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>height</strong>
              </c>
            </term>
            <description>Height of the page in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height">IOcrPage.Height</see>.</description>
          </item>
        </list>
        <para>The <c><strong>zone</strong></c> element is repeated for every zone in the current page (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>). The
             <c><strong>zone</strong></c> element has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>type</strong>
              </c>
            </term>
            <description>The zone type. Either "text" or "graphics". If the zone element is of type "text", then it will contain zero
             or more <c><strong>paragraph</strong></c> child elements. If the zone is of type "graphics", then it will not contain and other child elements.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The zone left position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Left</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The zone top position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Top</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The zone right position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Right</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The zone bottom position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Bottom</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>subtype</strong>
              </c>
            </term>
            <description>The zone type. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>.</description>
          </item>
        </list>
        <para>The <c><strong>paragraph</strong></c> element is repeated for every text paragraph in the current zone and it has no attributes. If this zone
             has no recognition text, then the <c><strong>paragraph</strong></c> element will not contain any child <c><strong>line</strong></c> elements.</para>
        <para>The <c><strong>paragraph</strong></c> element has no attributes and no value.</para>
        <para>The <c><strong>line</strong></c> element is repeated for every line of text in the current paragraph. The <c><strong>line</strong></c> element
             has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The line left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The line top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The line right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The line bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is calculated from the
             summation of all the boundaries of the words that make up this line.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this line. The value is calculated from the summation of the baselines of all
             the words that make up this line.</description>
          </item>
        </list>
        <para>The <c><strong>word</strong></c> element is repeated for every word of text in the current line. If
             <strong>OcrXmlOutputOptions.Characters</strong> was not specified in the generation options; then the <c><strong>word</strong></c> element
             will contain the value of the word as its value. Otherwise, the <c><strong>word</strong></c> element will contain no value.</para>
        <para>The <c><strong>word</strong></c> element has the following attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The word left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The word top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The word right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The word bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is calculated from the
             summation of all the boundaries of the characters that make up this word.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this word. The value is calculated from the summation of the baselines of all
             the characters that make up this word.</description>
          </item>
        </list>
        <para>The <c><strong>character</strong></c> element is repeated for every character in the following word only if
             <strong>OcrXmlOutputOptions.Characters</strong> was specified in the generation options. Otherwise, the <c><strong>word</strong></c> element will
             contain no child <c><strong>character</strong></c> elements. If <strong>OcrXmlOutputOptions.Characters</strong> was specified in the generation options; then the <c><strong>character</strong></c>
             element will contain the value of the character as its value. Otherwise, the <c><strong>character</strong></c> element will contain no value.</para>
        <para>The <c><strong>character</strong></c> element contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The character left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The character top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The character right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The character bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is
             calculated from <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">OcrCharacter.Bounds</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this character. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Base">OcrCharacter.Base</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>confidence</strong>
              </c>
            </term>
            <description>The confidence of this character. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence">OcrCharacter.Confidence</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>font_size</strong>
              </c>
            </term>
            <description>The font size in points. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontSize">OcrCharacter.FontSize</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>proportional</strong>
              </c>
            </term>
            <description>"yes" if the character font is proportional, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>serif</strong>
              </c>
            </term>
            <description>"yes" if the character font is serif, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bold</strong>
              </c>
            </term>
            <description>"yes" if the character font is bold, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>italic</strong>
              </c>
            </term>
            <description>"yes" if the character font is italic, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>underline</strong>
              </c>
            </term>
            <description>"yes" if the character font is underline, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
        </list>
        <para>The following is an example of the XML output when <strong>OcrXmlOutputOptions.None</strong> is specified:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page horizontal_resolution="300" vertical_resolution="300" width="2544" height="3294"&gt;
                 &lt;zone type="Text" left="371" top="370" right="831" bottom="420" subtype="Text" recognition_module="Auto" fill_method="Default"&gt;
                   &lt;paragraph&gt;
                     &lt;line left="372" top="371" right="830" bottom="419" base="29"&gt;
                       &lt;word left="372" top="371" right="554" bottom="409" base="30"&gt;License&lt;/word&gt;
                       &lt;word left="570" top="372" right="830" bottom="419" base="29"&gt;Agreement&lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
        <para>Here is the same XML output when <strong>OcrXmlOutputOptions.Characters</strong> is specified:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page horizontal_resolution="300" vertical_resolution="300" width="2544" height="3294"&gt;
                 &lt;zone type="Text" left="371" top="370" right="831" bottom="420" subtype="Text" recognition_module="Auto" fill_method="Default"&gt;
                   &lt;paragraph&gt;
                     &lt;line left="372" top="371" right="830" bottom="419" base="29"&gt;
                       &lt;word left="372" top="371" right="554" bottom="409" base="30"&gt;
                         &lt;character left="372" top="372" right="398" bottom="408" base="36" confidence="100"&gt;L&lt;/character&gt;
                         &lt;character left="402" top="371" right="409" bottom="408" base="37" confidence="100"&gt;i&lt;/character&gt;
                         &lt;character left="414" top="381" right="438" bottom="409" base="27" confidence="100"&gt;c&lt;/character&gt;
                         &lt;character left="442" top="381" right="468" bottom="409" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="472" top="381" right="496" bottom="408" base="27" confidence="100"&gt;n&lt;/character&gt;
                         &lt;character left="501" top="381" right="525" bottom="408" base="27" confidence="100"&gt;s&lt;/character&gt;
                         &lt;character left="529" top="381" right="554" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                       &lt;/word&gt;
                       &lt;word left="570" top="372" right="830" bottom="419" base="29"&gt;
                         &lt;character left="570" top="372" right="604" bottom="408" base="36" confidence="100"&gt;A&lt;/character&gt;
                         &lt;character left="607" top="381" right="633" bottom="419" base="27" confidence="100"&gt;g&lt;/character&gt;
                         &lt;character left="639" top="381" right="655" bottom="408" base="27" confidence="100"&gt;r&lt;/character&gt;
                         &lt;character left="657" top="381" right="682" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="685" top="381" right="710" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="715" top="381" right="753" bottom="408" base="27" confidence="100"&gt;m&lt;/character&gt;
                         &lt;character left="758" top="381" right="783" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="788" top="381" right="812" bottom="408" base="27" confidence="100"&gt;n&lt;/character&gt;
                         &lt;character left="815" top="374" right="830" bottom="408" base="34" confidence="100"&gt;t&lt;/character&gt;
                       &lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
        <para>You can use the <strong>OcrXmlOutputOptions.CharacterAttributes</strong> option along with
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)">IOcrDocumentManager.GetFontNames</see> to obtain the font family name of each character. When
             performing OCR, the engine cannot distinguish similar fonts such as Arial and Calibri, instead, the engine gets information on whether the
             character has serif and whether the font is proportional or fixed.</para>
        <para>According to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" />, the returned value is an array of fonts as follows:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Index</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>0</term>
              <description>The font used with proportional serif characters</description>
            </item>
            <item>
              <term>1</term>
              <description>The font used with proportional sans-serif characters</description>
            </item>
            <item>
              <term>2</term>
              <description>The font used with monospaced serif characters</description>
            </item>
            <item>
              <term>3</term>
              <description>The font used with monospaced sans-serif characters</description>
            </item>
            <item>
              <term>4</term>
              <description>The font used with ICR (hand-written) characters</description>
            </item>
            <item>
              <term>5</term>
              <description>The font used with MICR (check font) characters</description>
            </item>
          </list>
        </para>
        <para>We are only interested in the first four values and with this information. As described above, using the <strong>CharacterAttributes</strong> option
             will add the following attributes to the element of each character in the XML: "proportional, serif, bold, italic". With this information and
             the font names obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" />, you can easily conclude the font family name. The following code
             snippet accomplishes this:</para>
        <para>
          <pre>
            <code>
             private static void ShowFontNames(IOcrDocumentManager ocrDocumentManager, string xmlFileName)
             {
                // Get the Latin font names
                string[] fontNames = ocrDocumentManager.GetFontNames("en");
            
                // Note, you can also use a fixed array for most cases. The font names are not changed by the OCR engines
                // unless changed manually by the user:
                /*
                string[] fontNames =
                {
                   "Times New Roman",   // Proportional Serif
                   "Arial",             // Proportional Sans-Serif
                   "Courier New",       // Monospace Serif
                   "Arial"              // Monospace Sans-Serif
                };
                */
            
                // Read the XML file
                XPathDocument xmlDoc = new XPathDocument(xmlFileName);
                XPathNavigator nav = xmlDoc.CreateNavigator();
                XPathNodeIterator charactersIter = nav.Select(@"//character");
                while(charactersIter.MoveNext())
                {
                   XPathNavigator characterNav = charactersIter.Current;
            
                   // Read its attributes
                   bool isSerif;
                   bool isPropertional;
            
                   if(string.Compare(characterNav.GetAttribute("serif", characterNav.NamespaceURI), "yes", StringComparison.InvariantCultureIgnoreCase) == 0)
                      isSerif = true;
                   else
                      isSerif = false;
            
                   if(string.Compare(characterNav.GetAttribute("proportional", characterNav.NamespaceURI), "yes", StringComparison.InvariantCultureIgnoreCase) == 0)
                      isPropertional = true;
                   else
                      isPropertional = false;
            
                   // Now find the font based on this info
                   int index;
            
                   if(isPropertional &amp;&amp; isSerif)
                      index = 0;
                   else if(isPropertional &amp;&amp; !isSerif)
                      index = 1;
                   else if(!isPropertional &amp;&amp; isSerif)
                      index = 2;
                   else
                      index = 3;
            
                   string fontName = fontNames[index];
                   Console.WriteLine("Character: {0} font: {1}", characterNav.Value, fontName);
                }
             }
             </code>
          </pre>
        </para>
      </remarks>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <example>For an example, refer to
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see>
             and <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.None">
      <summary>(0x00000000)<para>Default. Write the recognized word values in the result XML data.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.Characters">
      <summary>(0x00000001)<para>Write the recognized character values instead of the word values in the result XML data</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.CharacterAttributes">
      <summary>(0x00000002)<para>Only valid with <strong>Characters</strong>. Write the character attributes (font for example) in the result XML data.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrTypeManager">
      <summary>Helper class to create OCR struct values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrTypeManager" /> contains helper methods to create OCR struct values.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrCharacter">
      <summary>Returns an <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> with all values set to default. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The object this method creates.</returns>
      <remarks>
        <para>This method initializes the values of <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> as following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.WordIsCertain" />
            </term>
            <description>
              <para>false</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds" />
            </term>
            <description>
              <para>Empty rectangle</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrCharacterPosition">OcrCharacterPosition.None</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Base" />
            </term>
            <description>
              <para>Empty length</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.CellIndex" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontSize" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle">OcrCharacterFontStyle.Regular</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Color" />
            </term>
            <description>
              <para>Black</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language1" />
            </term>
            <description>
              <para>null (Empty string in Windows Runtime)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Language2" />
            </term>
            <description>
              <para>null (Empty string in Windows Runtime)</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrWord">
      <summary>Returns an <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> with all values set to default. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The object this method creates.</returns>
      <remarks>
        <para>This method initializes the values of <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> as following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWord.Value" />
            </term>
            <description>
              <para>null (Empty string in Windows Runtime)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" />
            </term>
            <description>
              <para>Empty rectangle</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrZone">
      <summary>Returns an <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> with all values set to default. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The object this method creates.</returns>
      <remarks>
        <para>This method initializes the values of <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> as following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.Id" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.Name" />
            </term>
            <description>
              <para>null (Empty string in Windows Runtime)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" />
            </term>
            <description>
              <para>Empty rectangle</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.None</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.Language" />
            </term>
            <description>
              <para>
                <strong>null</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.IsEngineZone" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.ForeColor" />
            </term>
            <description>
              <para>Black</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.BackColor" />
            </term>
            <description>
              <para>White</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.ViewPerspective" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrTextDirection">OcrTextDirection.LeftToRight</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextStyle" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrTextStyle">OcrTextStyle.Normal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.FontRatio" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultNativeOcrZone">
      <summary>Returns an <see cref="T:Leadtools.Forms.Ocr.NativeOcrZone" /> with all values set to default. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The object this method creates.</returns>
      <remarks>
        <para>This method initializes the values of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZone" /> as following:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Id" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Name" />
            </term>
            <description>
              <para>null (Empty string in Windows Runtime)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Selected" />
            </term>
            <description>
              <para>false</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds" />
            </term>
            <description>
              <para>Empty rectangle</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.ZoneType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.None</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions">NativeOcrZoneRecognitionOptions.None</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes">NativeOcrZoneAfterRecognitionNotes.None</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrConfidence" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrEngine">
      <summary>Provides support for OCR functionality in LEADTOOLS. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface is your application entry point to the OCR functionality provided by LEADTOOLS.</para>
        <para>LEADTOOLS OCR class library uses various interfaces to perform various OCR functions. These interfaces group logically related 
              operations and encapsulates them from the rest
            of the toolkit. By using interfaces, LEADTOOLS ensures that you can use an engine-independent approach when programming your OCR-based 
            application. At any time you can switch the
            engine type and ensure that your program will continue to function correctly. (Providing you have used the various "GetSupported" 
            and "IsSupported" methods when dealing
            with engine-specific capabilities).</para>
        <para>Obtain an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> by calling the 
              <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see> method with the appropriate
            engine type.</para>
        <para>Once an instance is obtained, use the members of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to perform various OCR tasks. OCR functions are grouped into
            "managers". Through these managers, you can create OCR documents (and add pages to these documents), perform zoning,
            recognition and saving the result documents. These managers are standard .NET interfaces with the
            implementation hidden inside the corresponding engine assembly. The following table lists the various "managers" and their main functionality:
            <list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" /> member</term><description><para>Allows you to create <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that encapsulate an OCR'ed document. Each <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> contains an
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> property that is an implementation of standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Use this member
            to add, remove or update image (raster) pages in the OCR document. Pages can be image files on disk, memory or even in a remote URL. Any file format supported by
            LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. At any time, use the various <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone
            the page (or pages) and recognize the objects in them in preparation to saved as a document. For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Once you are done with adding and preparing the pages, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save
            the document into its final format. LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others.
            For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />, <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para></description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager" /> member</term><description>Provides support for determining the various zone types, recognition modules and fill methods supported by this engine type.
              For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> member</term><description>Provides support for the one-shot "fire and forget" approach to OCR. The methods of this interface 
            will let you create a result document from an image file on disk with
            optional progress and status monitors. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> member</term><description>Provides access to the language environment used by the OCR engine. You can use the methods and properties of this member to set the character set used by the OCR
            engine as well as spell correction. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> member</term><description>Allows you to enable/disable the spell checking system as well to maintain language and user dictionaries. Also lets you set up a global callback for manual word or line
            verification when performing a recognition operation. </description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" /> member</term><description>Each OCR engine supported by LEADTOOLS has additional options and functionalities that can be accessed through this member. After setting up the engine, you can quickly save and later load the settings using the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" />. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager">IOcrSettingManager</see>.</description></item></list></para>
        <para>The LEADTOOLS OCR engine is generally used in the following ways:</para>
        <para>OCR an image file (or LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object) and obtain the text with optional formatting and position info. In this mode,
            an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object is not needed since the result is not going to be saved. The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>
            method can be used to quickly create an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> from the <see cref="T:Leadtools.RasterImage" /> directly, call the necessary method (such as
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>) and then obtain the text directly using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>. For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.</para>
        <para>Low-level OCRing of one or more pages and creating a final document such as PDF or DOCX. In this mode, the user generally creates an
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object (in memory or file based) and then add <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects to it. The pages can be previously recognized
            or are recognized at a later time. When all the pages are added and recognized, <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see> is called to convert the recognition data to the final document. For an example,
            refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</para>
        <para>High-level OCRing from an input image file to a final document such as PDF or DOCX. In this mode, you can use <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />
            to convert the document in one shot. Various events and logging mechanism can be used to modify and track the recognize operation. For an example,
            refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</para>
      </remarks>
      <keywords>OCR|OCR,Engines</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub OcrEngineExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.AutoZone(Nothing)
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void OcrEngineExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.AutoZone(null);
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task OcrEngineExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
            {
               ocrPage = ocrDocument.Pages.AddPage(image, null);
            }
         }

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.AutoZone(null);
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrEngine-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public class OcrEngine</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrEngine : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">
      <summary>Starts the OCR engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="rasterCodecs">Optional instance of a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to be used when loading image files from disk inside the engine. You can pass your own initialized
            instance of <see cref="T:Leadtools.Codecs.RasterCodecs" /> to be used. The same object will then be used internally by the OCR engine when loading raster image files. Otherwise, pass <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) and the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Codecs.RasterCodecs" /> when needed. Refer to <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance" />
            for more information on how this parameter is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</param>
      <param name="documentWriter">Optional instance of a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object to be used when saving OCR documents to disk inside the engine. You can pass your own initialized
            instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> to be used. The same object will then be used internally by the OCR engine when saving OCR documents to disk. Otherwise, pass <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) and the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> when needed. Refer to <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance" />
            for more information on how this parameter is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</param>
      <param name="workDirectory">
        <para>Optional path to a directory to be used when the engine saves temporary files. The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object will create various temporary files
            during recognition and document saving processes. It will use the path passed in <i>workDirectory</i> as the location where these temporary files will be created. You
            can pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to let the engine select the temporary directory of the current logged in user (<strong>TEMP</strong>).</para>
        <para>In either case, the value of working directory of the current started <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> can be obtained through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> property.</para>
        <para>The engine automatically deletes any temporary files created. However, if an unexpected error occurs (for example, an unhandled exception), some temporary files
            may still reside in the work directory after the application exits. A typical application may use a custom directory inside the application path and manually deletes
            any files that may reside there before calling <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> in case the previous instance of the application exited abnormally.</para>
        <para>If the value of the <i>workDirectory</i> parameter is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then it must refer to a valid
            directory that exists in the system and the process that created the engine must have enough access rights to read, write and delete files from this directory.</para>
      </param>
      <param name="startupParameters">Optional startup parameter. The value of this parameter depends on the type of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> as follows:
            <list type="table"><listheader><term>Engine</term><description>startupParameters</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>
            By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrAdvantageRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\LEADTOOLS 19</strong>).
            </para><para>
            If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.
            </para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Arabic</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrArabicRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\LEADTOOLS 19</strong>).</para><para>If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.</para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>
            By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrProfessionalRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\LEADTOOLS 19</strong>).
            </para><para>
            If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.
            </para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item></list></param>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the <strong>using</strong>
            statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The <see cref="M:System.IDisposable.Dispose" /> method will automatically
            shuts down the engine if it has been started.</para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub StartupEngineExample()
         ' Use RasterCodecs to load an image file
         ' Note: You can let the engine load the image file directly as shown in the other examples
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"))
         ' Assume you copied the engine runtime files to C:\MyApp\Ocr
         Dim engineDir As String = "C:\MyApp\Ocr"

         ' Store the engine work directory into a path inside our application
         Dim workDir As String = "C:\MyApp\OcrTemp"

         ' Delete all files in the work directory in case the previous version of our application exited abnormally and
         ' the engine did not get the chance to clean all of its temporary files (if any)
         Directory.Delete(workDir, True)

         ' Re-create the work directory
         Directory.CreateDirectory(workDir)

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Show that the engine has not been started yet
            Console.WriteLine("Before calling Startup, IsStarted = " &amp; ocrEngine.IsStarted)

            ' Start the engine using our parameters
            ' Since we already have a RasterCodecs object, we can re-use it to save memory and resources
            ocrEngine.Startup(codecs, Nothing, workDir, engineDir)

            ' Make sure the engine is using our working directory
            Console.WriteLine("workDir passed is {0}, the value of WorkDirectory after Startup is {1}", workDir, ocrEngine.WorkDirectory)

            ' Show that the engine has started fine
            Console.WriteLine("After calling Startup, EngineType is {0}, IsStarted = {1}", ocrEngine.EngineType, ocrEngine.IsStarted)

            ' Maks sure the engine is using our own version of RasterCodecs
            Debug.Assert(codecs Is ocrEngine.RasterCodecsInstance)

            ' Create a page from the raster image as page to the document
            Dim ocrPage As IOcrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose)
            ' image belongs to the page and will be dispose when the page is disposed

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Create a file based document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument(Nothing, OcrCreateDocumentOptions.AutoDeleteFile)
               ' Add the page
               ocrDocument.Pages.Add(ocrPage)
               ' No need for the page anymore
               ocrPage.Dispose()

               ' Save the document we have as PDF
               Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void StartupEngineExample()
      {
         // Use RasterCodecs to load an image file
         // Note: You can let the engine load the image file directly as shown in the other examples
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"));
         // Assume you copied the engine runtime files to C:\MyApp\Ocr
         string engineDir = @"C:\MyApp\Ocr";

         // Store the engine work directory into a path inside our application
         string workDir = @"C:\MyApp\OcrTemp";

         // Delete all files in the work directory in case the previous version of our application exited abnormally and
         // the engine did not get the chance to clean all of its temporary files (if any)
         Directory.Delete(workDir, true);

         // Re-create the work directory
         Directory.CreateDirectory(workDir);

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Show that the engine has not been started yet
            Console.WriteLine("Before calling Startup, IsStarted = " + ocrEngine.IsStarted);

            // Start the engine using our parameters
            // Since we already have a RasterCodecs object, we can re-use it to save memory and resources
            ocrEngine.Startup(codecs, null, workDir, engineDir);

            // Make sure the engine is using our working directory
            Console.WriteLine("workDir passed is {0}, the value of WorkDirectory after Startup is {1}", workDir, ocrEngine.WorkDirectory);

            // Show that the engine has started fine
            Console.WriteLine("After calling Startup, EngineType is {0}, IsStarted = {1}", ocrEngine.EngineType, ocrEngine.IsStarted);

            // Maks sure the engine is using our own version of RasterCodecs
            Debug.Assert(codecs == ocrEngine.RasterCodecsInstance);

            // Create a page from the raster image as page to the document
            IOcrPage ocrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose);
            // image belongs to the page and will be dispose when the page is disposed

            // Recognize the page
            // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            // check and automatically auto-zones the page
            ocrPage.Recognize(null);

            // Create a file based document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument(null,OcrCreateDocumentOptions.AutoDeleteFile))
            {
               // Add the page
               ocrDocument.Pages.Add(ocrPage);
               // No need for the page anymore
               ocrPage.Dispose();

               // Save the document we have as PDF
               string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task StartupEngineExample()
      {
         // Use RasterCodecs to load an image file
         // Note: You can let the engine load the image file directly as shown in the other examples
         RasterCodecs codecs = new RasterCodecs();
         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(@"Assets\Ocr1.tif");
         RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile));
         // Assume you coped the engine runtime files to a folder named "OcrRuntime" inside your project

         // Store the engine work directory into a path inside our application
         string tempFolderName = "OcrTemp";
         string workDir = Path.Combine(Tools.AppLocalFolder.Path, tempFolderName);

         // Create the work directory
         await Tools.AppLocalFolder.CreateFolderAsync(tempFolderName);

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Show that the engine has not been started yet
         Debug.WriteLine("Before calling Startup, IsStarted = " + ocrEngine.IsStarted);

         // Start the engine using our parameters
         // Since we already have a RasterCodecs object, we can re-use it to save memory and resources
         ocrEngine.Startup(codecs, null, workDir, Tools.OcrEnginePath);

         // Make sure the engine is using our working directory
         Debug.WriteLine("workDir passed is {0}, the value of WorkDirectory after Startup is {1}", workDir, ocrEngine.WorkDirectory);

         // Show that the engine has started fine
         Debug.WriteLine("After calling Startup, EngineType is {0}, IsStarted = {1}", ocrEngine.EngineType, ocrEngine.IsStarted);

         // Maks sure the engine is using our own version of RasterCodecs
         Debug.Assert(codecs == ocrEngine.RasterCodecsInstance);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add the raster image as page to the document
         IOcrPage ocrPage = ocrDocument.Pages.AddPage(image, null);

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         string pdfFileName = "Ocr1.pdf";
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrEngine.Startup-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <java>
        <pre>
public void startup(RasterCodecs rasterCodecs,
                    String workDirectory,
                    String startupParameters,
                    String sharedLibsFolder)            </pre>
      </java>
      <objectivec>
        <pre>
- (void)startup:(LTRasterCodecs*)rasterCodecs
  workDirectory:(NSString*)workDirectory
artupParameters:(NSString*)startupParameters;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">
      <summary>Shuts down the OCR engine and frees all resources and memory allocated to it. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the
            <strong>using</strong> statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The
            <see cref="M:System.IDisposable.Dispose" /> method will automatically shuts down the engine if it has been started.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <java>
        <pre>public void shutdown()</pre>
      </java>
      <objectivec>
        <pre>- (void)shutdown;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">
      <summary>Gets a string description of an engine-specific error code value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="code">engine-specific error code value. This is normally obtained as the <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member when an exception of type
            <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</param>
      <returns>A <see cref="T:System.String" /> that contains a short description of the error code value.</returns>
      <remarks>
        <para>When a runtime error occurs in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, an exception of type <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown with the engine-specific error code set in the
            <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member. This error code is engine-specific but a short description can be obtained using the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)" /> method.</para>
        <para>Logic errors such as invalid parameters to methods or invalid operations throw standard .NET exceptions (in this case, <see cref="T:System.ArgumentException" /> and
            <see cref="T:System.InvalidOperationException" /> respectively Errors caused by loading invalid image files using <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance" /> will throw exceptions of type
            <see cref="T:Leadtools.RasterException" />. Errors for missing features (support locked) will throw <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> exceptions. Any other runtime error in the engine
            will throw an <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub GetErrorCodeStringExample()
         ' Create a brand new directory
         Dim engineDir As String = "C:\MyApp\WrongOcrEngineDirectory"
         If Directory.Exists(engineDir) Then
            Directory.Delete(engineDir, True)
         End If

         Directory.CreateDirectory(engineDir)

         ' This directory exists, but it does not contain the OCR runtimes.
         ' Calling Startup passing this engine parameters should throw an OcrException

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start it up with our wrong engine directory (this should cause an exception)
            Try
               ocrEngine.Startup(Nothing, Nothing, Nothing, engineDir)
            Catch ex As OcrException
               ' Get and show a description of the error
               Dim code As Long = ex.Code
               Dim description As String = ocrEngine.GetErrorCodeString(code)
               Console.WriteLine(description)
            End Try
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void GetErrorCodeStringExample()
      {
         // Create a brand new directory
         string engineDir = @"C:\MyApp\WrongOcrEngineDirectory";
         if (Directory.Exists(engineDir))
            Directory.Delete(engineDir, true);

         Directory.CreateDirectory(engineDir);

         // This directory exists, but it does not contain the OCR runtimes.
         // Calling Startup passing this engine parameters should throw an OcrException

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start it up with our wrong engine directory (this should cause an exception)
            try
            {
               ocrEngine.Startup(null, null, null, engineDir);
            }
            catch (OcrException ex)
            {
               // Get and show a description of the error
               long code = ex.Code;
               string description = ocrEngine.GetErrorCodeString(code);
               Console.WriteLine(description);
            }
         }
      }</code>
        <!--IOcrEngine.GetErrorCodeString-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public String getErrorCodeString(long code)</pre>
      </java>
      <objectivec>
        <pre>- (NSString*)getErrorCodeString:(long long) code;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic">
      <summary>Gets the accuracy and timing data of the latest successful recognition process. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" /> object that contains accuracy and timing data of the latest successful recognition process.</returns>
      <remarks>
        <para>You can use this method after calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> to get the accuracy and timing data of the latest
            successful recognition process</para>
        <para>If you use the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.Recognize</see> method, the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" /> will return the statistic for the
            last page only.</para>
        <para>
          <strong>Note</strong>: When using the LEADTOOLS OCR Advantage Engine you can use this method ONLY after calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrStatistic" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrStatistic getLastStatistic()</pre>
      </java>
      <objectivec>
        <pre>- (LTOcrStatistic*)getLastStatistic;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">
      <summary>Create an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> from a raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="image">Source raster image. This parameter cannot be <strong>null</strong>.</param>
      <param name="sharingMode">Options to determine the ownership of <paramref name="image" />.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> ready to be used.</returns>
      <remarks>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)" /> to quickly create an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> from a <see cref="T:Leadtools.RasterImage" /> directly, call the necessary method
            (such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>) and then obtain the text directly using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">IOcrPage.GetText</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</para>
        <para>To save the result <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a document file such as PDF or Microsoft Word by directly, you must create an
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object in file mode and add the page to it using <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrDocument.Add</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the <strong>using</strong>
            statement in C# or <strong>Using</strong> statement in Visual Basic) after you finish using this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> instance.</para>
        <para>The value of <paramref name="sharingMode" /> determinds what happens to the raster image object after it has been used to create the page as
            follows:</para>
        <list type="table">
          <listheader>
            <term>Option</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrImageSharingMode">OcrImageSharingMode.None</see>
            </term>
            <description>
              <para>The result <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> does not own the image. When <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is disposed, the image is <strong>not disposed</strong>.
            This mode is useful for quickly creating an OCR page (and getting the recognition result) from an image that is already used in other
            parts of your application. For example, the image is being viewed in the image viewer. Using this option will
            save memory because you do not have to create a copy of the image and the page will use the same image data when performing recognition.</para>
              <para>
                <strong>Important</strong>: In this mode, it is the user responsibility to keep the raster image object alive for the whole duration the page
            is alive. Only dispose the raster image after the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object is disposed and no longer used.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Forms.Ocr.OcrImageSharingMode">OcrImageSharingMode.AutoDispose</see>
            </term>
            <description>
              <para>The result <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> owns the image. When <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is disposed, the image is <strong>disposed</strong> as well.
            This mode is useful when the image is no longer used by other parts of your application. For example, the image is obtained from scanning or the
            camera and is only to be used for OCRing. Using this option will transfer the ownership of the image object to the page and it will be disposed
            when the page is disposed.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <!--IOcrEngine.CreatePage-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager">IOcrDocumentManager</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrPage createPage(RasterImage image, OcrImageSharingMode sharingMode)</pre>
      </java>
      <objectivec>
        <pre>- (LTOcrPage*)createPage:(image)LTRasterImage* sharingMode:(LTOcrImageSharingMode)sharingMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">
      <summary>Determines whether this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has been started and is ready to be used. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has been started and is ready to be used, otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the
            <strong>using</strong>statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The
            <see cref="M:System.IDisposable.Dispose" /> method automatically shuts down the engine if it has been started.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <java>
        <pre>public boolean isStarted()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL isStarted;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType">
      <summary>Gets the type of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" /> enumeration member indicating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> type.</value>
      <remarks>
        <para>The value returned from the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType" /> property is the same value you pass to the <i>engineType</i> parameter of the
            <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see> method. If your application requires keeping track of the engine type (for example, to enable/disable
            user interface elements based on which OCR engine is being used), then you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType" /> property of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object instead of storing
            a variable in your program.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory">
      <summary>Gets the path to the work directory used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to store the engine temporary files. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The path to the work directory used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to store the engine temporary files.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> is passed as the <i>workDirectory</i> parameter to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This directory is used when the engine
            saves the its temporary files. The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object will create various temporary files during recognition and document saving processes. It will use the path passed in
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> as the location where these temporary files will be created. You can pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)
            to let the engine select the temporary directory of the current logged in user (<strong>TEMP</strong>).</para>
        <para>In either case, the value of working directory of the current started <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> can be obtained through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> property.</para>
        <para>The engine will automatically deletes any temporary files created. However, if an unexpected error occurs (for example, an unhandled exception), some temporary files
            may still reside in the work directory after the application exits. A typical application may use a custom directory inside the application path and manually deletes
            any files that may reside there before calling <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> in case the previous instance of the application exited abnormally.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then it must refer to a valid
            directory that exists in the system and the process that created the engine must have  access rights to read, write and delete files from this directory.</para>
        <para>The value <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> will hold the current work directory used by the OCR engine, if you passed <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)
            in the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method, the value of this property will be set to the current logged in user <strong>TEMP</strong> value.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public String getWorkDirectory()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* workDirectory;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">
      <summary>Gets the instance of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>You can pass an instance of an already initialized <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects will then
            be used internally by the engine when loading image files from disk or memory. Otherwise, when passing <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the
            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Codecs.RasterCodecs" /> during the startup procedure.</para>
        <para>The internal <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will be disposed of by the engine automatically when <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> or <see cref="M:System.IDisposable.Dispose" /> is called. If
            you passed your own instance of <see cref="T:Leadtools.Codecs.RasterCodecs" />, then the engine will not dispose it and you can continue to use it as normal after the engine instance has been disposed.
            When passing your own instance of <see cref="T:Leadtools.Codecs.RasterCodecs" />, make sure this instance stays valid as long as the engine is started.</para>
        <para>When new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects are created using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see>, a new
            object of type <see cref="T:Leadtools.Codecs.RasterCodecs" /> is created by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, and assigned to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.RasterCodecsInstance">IOcrDocument.RasterCodecsInstance</see>. All
            image load and save operation (such as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPage</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.AddPages</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPage</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.InsertPages</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">IOcrPageCollection.ExportPage</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">IOcrPageCollection.ExportPages</see>)
            that is performed inside by OCR document or objects inside the OCR document will use that object.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions">IOcrDocument.UseEngineInstanceOptions</see> is <strong>true</strong>, then
            the options will be copied from the engine's <see cref="T:Leadtools.Codecs.RasterCodecs" /> to the document <see cref="T:Leadtools.Codecs.RasterCodecs" /> before any methods is called.</para>
        <para>For more information on how this object is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public RasterCodecs getRasterCodecsInstance()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTRasterCodecs* rasterCodecsInstance;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">
      <summary>Gets the instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>You can pass an instance of an already initialized <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> objects will then
            be used internally by the engine when saving OCR documents to disk or memory. Otherwise, when passing <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the
            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> during the startup procedure.</para>
        <para>The internal <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object will be disposed of by the engine automatically when <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> or <see cref="M:System.IDisposable.Dispose" /> is called. If
            you passed your own instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />, then the engine will not dispose it and you can continue to use it as normal after the engine instance has been disposed.
            When passing your own instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />, make sure this instance stays valid as long as the engine is started.</para>
        <para>When new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects are created using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see>, a new
            object of type <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> is created by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, and assigned to <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.DocumentWriterInstance">IOcrDocument.DocumentWriterInstance</see>. All
            document creation operation (such as <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>)
            that is performed inside by OCR document or objects inside the OCR document will use that object.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.UseEngineInstanceOptions">IOcrDocument.UseEngineInstanceOptions</see> is <strong>true</strong>, then
            the options will be copied from the engine's <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> to the document <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> before any methods is called.</para>
        <para>For more information on how this object is used by the OCR engine during its lifetime, refer to
            <see cref="T:FO.Topics.OcrEngineAndRasterCodecsDocumentWriterUsage">OCR Engine and RasterCodecs/DocumentWriter Usage</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub DocumentWriterInstanceExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            ' You can change the output document options at any time after the engine has
            ' started. Here we will change the PDF options to be PDF/A format with image
            ' over text option turned on

            ' Get the DocumentWriter instance used in this OCR engine
            Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance

            ' Get the current PDF options, modify and then set it back
            Dim pdfOptions As PdfDocumentOptions = TryCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)

            pdfOptions.DocumentType = PdfDocumentType.PdfA
            pdfOptions.ImageOverText = True

            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

            ' At this point on, every call to IOcrDocument.Save with format equals to DocumentFormat.Pdf will
            ' use the options we set

            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.AutoZone(Nothing)
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ' This will use the options we set earlier (PDF/A with image over text)
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void DocumentWriterInstanceExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            // You can change the output document options at any time after the engine has
            // started. Here we will change the PDF options to be PDF/A format with image
            // over text option turned on

            // Get the DocumentWriter instance used in this OCR engine
            DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;

            // Get the current PDF options, modify and then set it back
            PdfDocumentOptions pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;

            pdfOptions.DocumentType = PdfDocumentType.PdfA;
            pdfOptions.ImageOverText = true;

            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

            // At this point on, every call to IOcrDocument.Save with format equals to DocumentFormat.Pdf will
            // use the options we set

            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.AutoZone(null);
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               // This will use the options we set earlier (PDF/A with image over text)
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task DocumentWriterInstanceExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // You can change the output document options at any time after the engine has
         // started. Here we will change the PDF options to be PDF/A format with image
         // over text option turned on

         // Get the DocumentWriter instance used in this OCR engine
         DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;

         // Get the current PDF options, modify and then set it back
         PdfDocumentOptions pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;

         pdfOptions.DocumentType = PdfDocumentType.PdfA;
         pdfOptions.ImageOverText = true;

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

         // At this point on, every call to IOcrDocument.SaveAsunc with format equals to DocumentFormat.Pdf will
         // use the options we set

         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
            {
               ocrPage = ocrDocument.Pages.AddPage(image, null);
            }
         }

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.AutoZone(null);
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         // This will use the options we set earlier (PDF/A with image over text)
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrEngine.DocumentWriterInstance-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">
      <summary>Manages the underlying engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> object used to manage the underlying OCR engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" /> allows you to do the following:
            <list type="bullet"><item><description>Get and set the underlying engine-specific settings. <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain additional
            features and functionalities specific to the current engine that can be queried and updated using the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</description></item><item><description>Load and save the engine settings. Once you set up the OCR engine you can re-use these settings by saving the engine state into memory or to
            an XML file on disk. You can later reload these settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> state is also saved when the engine settings are saved. For more information,
            refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <java>
        <pre>public OcrSettingManager getSettingManager()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrSettingManager* settingManager;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">
      <summary>Provides access to the language environment of the character sets used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> object used to manage the language environment of the character sets.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> allows you to do the following:
            <list type="bullet"><item><description>Query the languages supported by this OCR engine.</description></item><item><description>Enable or disable specific language character sets from participating in the spell checking subsystem.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> state is also saved when the engine settings are saved. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
      </remarks>
      <keywords>OCR,Languages</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrLanguageManager getLanguageManager()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrLanguageManager* languageManager;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">
      <summary>Manages the spell checking subsystem. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> object used to manage the spell checking system.</value>
      <remarks>
        <para>The spell checking system contains three parts:
            <list type="number"><item><description>The use of the language dictionary in spell checking.</description></item><item><description>The user dictionary setting.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> state is also saved when the engine settings are saved. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
      </remarks>
      <keywords>OCR|Spelling|correction</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrSpellCheckManager getSpellCheckManager()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrSpellCheckManager* spellCheckManager;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">
      <summary>Provides support for determining the various zone types, recognition modules and fill methods supported by this engine type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> object that provide support for determining the various zone types, recognition modules and fill methods supported
            by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>The zone manager contains information about the following:
            <list type="bullet"><item><description>The zone types supported by this engine. For example, "Text", "Graphics" or "Table". For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" />.</description></item><item><description>The options used when detecting OMR (Optical Mark Recognition) zones. For more information, refer to <see cref="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">IOcrZoneManager.OmrOptions</see>.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager" />.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrZones">Working with OCR Zones</seealso>
      <java>
        <pre>public OcrZoneManager getZoneManager()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrZoneManager* zoneManager;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">
      <summary>Allows you to create new OCR documents that are used to create final documents such as PDF or Microsoft Word from the recognition results. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> object that allow you to create final documents such as PDF or Microsoft Word from the recognition results.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" /> allows you to do the following:
            <list type="bullet"><item><description>Create instance of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that encapsulate an OCR'ed document. Each <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> contains an
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> property that is an implementation of standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Use this member
            to add, remove or update image (raster) pages in the OCR document. Pages can be image files on disk, memory or even in a remote URL. Any file format supported by
            LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. At any time, use the various <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone
            the page (or pages) and recognize the objects in them in preparation to saved as a document. For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Once you are done with adding and preparing the pages, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save
            the document into its final format. LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others.
            For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />, <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</description></item><item><description>Get or set the options to use when creating new documents such as the font names.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" />.</para>
      </remarks>
      <keywords>OCR,Document|OCR,PDF</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public OcrDocumentManager getDocumentManager()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrDocumentManager* documentManager;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager">
      <summary>Support for one shot "fire and forget" OCR operations. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> that allow you to do one shot "fire and forget" OCR operations.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> provides methods to convert a single or multi-page image file to an OCR'ed document using one call. This could be desired when the
            default setting of the engine provides the required final document and no fine tuning is required.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> also provide support for callbacks to monitor the various OCR operations, logging and tracing as well as
            allowing the user to abort at any time.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" />.</para>
      </remarks>
      <keywords>OCR,Document|OCR,PDF|OCR,Recognition</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrImageSharingMode">
      <summary>Options used with <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see> to determine the ownership of the
            source raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrImageSharingMode" /> determines the ownership of the source raster image object passed to
            <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.</para>
      </example>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrImageSharingMode.None">
      <summary>(0x00000000)<see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> will not dispose the <see cref="T:Leadtools.RasterImage" /> when it is disposed. The page does not own the raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrImageSharingMode.AutoDispose">
      <summary>(0x00000001)<see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> will dispose the <see cref="T:Leadtools.RasterImage" /> when it is disposed. The page owns the raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrEngineManager">
      <summary>Provides methods to create OCR engine instances. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" /> class and its methods are your entry point to using
            the <strong>Leadtools.Forms.Ocr</strong> class library.</para>
        <para>This class provides the methods you need to create an object of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface. Afterwards, you can use the properties and
            methods of this interface to perform your OCR tasks.</para>
        <para>Based on the engine type passed to the <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> methods, <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" /> will load the OCR
            engine defined in one of the supporting assemblies and return an interface to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. Use this interface and its included types
            to start using the <strong>Leadtools.Forms.Ocr</strong> class library. For more information about the engine types, refer to
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> method lets you create an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, loading the corresponding
            <strong>Leadtools.Forms.Ocr.[EngineName].dll</strong> assembly using the .NET <see cref="M:System.Reflection.Assembly.Load(System.String)">System.Reflection.Assembly.Load(string assemblyString)</see> method.
            You cannot unload this assembly once it has been successfully loaded.</para>
        <para>Depending on your application requirement, platform and OCR engine type; a "thunk" mechanism might be required. Refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>
            for more information and on how to use the <strong>useThunkServer</strong> parameter of <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Private Structure MyThreadData
         Public ImageFileName As String
         Public WaitHandle As AutoResetEvent
      End Structure
      Public Sub MultiThreadedOcrExample()
         ' The image file names we are going to OCR and convert to PDF
         Dim tifFileNames As String() = { _
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr3.tif"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr4.tif")}

         Dim threadCount As Integer = tifFileNames.Length

         ' Create the thread
         Dim threads As Thread() = New Thread(threadCount - 1) {}
         Dim waitHandles As AutoResetEvent() = New AutoResetEvent(threadCount - 1) {}
         For i As Integer = 0 To threadCount - 1
            threads(i) = New Thread(New ParameterizedThreadStart(AddressOf MyThreadProc))
            threads(i).Name = "OCR thread + " &amp; i.ToString()

            waitHandles(i) = New AutoResetEvent(False)
         Next

         Console.WriteLine("Starting the threads and waiting...")

         ' Start the threads
         For i As Integer = 0 To threadCount - 1
            Dim threadData As New MyThreadData()
            threadData.ImageFileName = tifFileNames(i)
            threadData.WaitHandle = waitHandles(i)
            threads(i).Start(threadData)
         Next

         ' Wait till all threads are done
         WaitHandle.WaitAll(waitHandles)
         Console.WriteLine("All threads finished")
      End Sub

      Private Sub MyThreadProc(data As Object)
         ' Grab the data
         Dim threadData As MyThreadData = CType(data, MyThreadData)
         Dim imageFileName As String = threadData.ImageFileName

         ' Show a status message
         Console.WriteLine("Begin: {0}", imageFileName)

         ' Create an instance of the OCR engine using. If you change the engine type from Advantage,
         ' then the last parameter indicates the use of the LEADTOOLS Thunk Server
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, True)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Get the PDf file name
            Dim pdfFileName As String = Path.ChangeExtension(imageFileName, "pdf")

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(imageFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         Console.WriteLine("End: {0}", imageFileName)

         ' Singal the main thread
         threadData.WaitHandle.Set()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      private struct MyThreadData
      {
         public string ImageFileName;
         public AutoResetEvent WaitHandle;
      }
      public void MultiThreadedOcrExample()
      {
         // The image file names we are going to OCR and convert to PDF
         string[] tifFileNames =
         {
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"),
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr2.tif"),
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr3.tif"),
            Path.Combine(LEAD_VARS.ImagesDir, "Ocr4.tif")
         };

         int threadCount = tifFileNames.Length;

         // Create the thread
         Thread[] threads = new Thread[threadCount];
         AutoResetEvent[] waitHandles = new AutoResetEvent[threadCount];
         for (int i = 0; i &lt; threadCount; i++)
         {
            threads[i] = new Thread(new ParameterizedThreadStart(MyThreadProc));
            threads[i].Name = "OCR thread + " + i.ToString();

            waitHandles[i] = new AutoResetEvent(false);
         }

         Console.WriteLine("Starting the threads and waiting...");

         // Start the threads
         for (int i = 0; i &lt; threadCount; i++)
         {
            MyThreadData threadData = new MyThreadData();
            threadData.ImageFileName = tifFileNames[i];
            threadData.WaitHandle = waitHandles[i];
            threads[i].Start(threadData);
         }

         // Wait till all threads are done
         WaitHandle.WaitAll(waitHandles);
         Console.WriteLine("All threads finished");
      }

      private void MyThreadProc(object data)
      {
         // Grab the data
         MyThreadData threadData = (MyThreadData)data;
         string imageFileName = threadData.ImageFileName;

         // Show a status message
         Console.WriteLine("Begin: {0}", imageFileName);

         // Create an instance of the OCR engine using. If you change the engine type from Advantage,
         // then the last parameter indicates the use of the LEADTOOLS Thunk Server
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, true))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Get the PDf file name
            string pdfFileName = Path.ChangeExtension(imageFileName, "pdf");

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {

               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(imageFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         Console.WriteLine("End: {0}", imageFileName);

         // Singal the main thread
         threadData.WaitHandle.Set();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Codecs;

      [TestMethod]
      public async Task MultiThreadedOcrExample()
      {
         try
         {
            string imageFileName = @"Multipage.tif";
            bool usePdf = true;
            System.Diagnostics.Debug.WriteLine(string.Format("Image: " + imageFileName));

            // First get the number of pages in the documents, then do each page in its own thread
            int pageCount;

            StorageFile imageFile = await Tools.AppInstallFolder.GetFileAsync(@"Assets\" + imageFileName);
            ILeadStream leadStream = LeadStreamFactory.Create(imageFile);
            using (IDisposable leadStreamDisposable = leadStream as IDisposable)
            {
               using (RasterCodecs codecs = new RasterCodecs())
               {
                  System.Diagnostics.Debug.WriteLine("RasterCodecs.GetInformationAsync");
                  using (CodecsImageInfo imageInfo = await codecs.GetInformationAsync(leadStream, true, 1))
                  {
                     pageCount = imageInfo.TotalPages;

                     System.Diagnostics.Debug.WriteLine(string.Format("{0} pages in the file", pageCount));
                  }
               }
            }

            // Create a LEADTOOLS IOcrEngine
            string engineDirectory = Path.Combine(Tools.AppInstallFolder.Path, @"OcrRuntime");

            IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            using (IDisposable ocrEngineDisposable = ocrEngine as IDisposable)
            {
               System.Diagnostics.Debug.WriteLine("IOcrEngine.Startup");
               ocrEngine.Startup(null, null, String.Empty, engineDirectory);

               // Counter to tell us how many pages are left
               int pagesLeft = pageCount;
               // Event to trigger when all pages are completed
               AutoResetEvent completedEvent = new AutoResetEvent(false);

               // Run a thread for each job
               for (int pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
               {
                  int workPageNumber = pageNumber;
                  Task.Factory.StartNew(async () =&gt;
                  {
                     System.Diagnostics.Debug.WriteLine(string.Format("Thread working on page {0} started", workPageNumber));

                     // Create the document
                     try
                     {
                        IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();
                        using (IDisposable ocrDocumentDisposable = ocrDocument as IDisposable)
                        {
                           IOcrPage ocrPage = null;

                           // Load the page
                           RasterCodecs codecs = ocrDocument.RasterCodecsInstance;
                           ILeadStream pageStream = LeadStreamFactory.Create(imageFile);
                           using (IDisposable pageStreamDisposable = pageStream as IDisposable)
                           {
                              System.Diagnostics.Debug.WriteLine(string.Format("Thread loading page {0}", workPageNumber));
                              using (RasterImage pageImage = await codecs.LoadAsync(pageStream, 0, CodecsLoadByteOrder.BgrOrGray, workPageNumber, workPageNumber))
                              {
                                 // Add it to the document
                                 System.Diagnostics.Debug.WriteLine(string.Format("Adding page {0}", workPageNumber));
                                 ocrPage = ocrDocument.Pages.AddPage(pageImage, null);
                              }
                           }

                           System.Diagnostics.Debug.WriteLine(string.Format("Recognize page {0}", workPageNumber));
                           ocrPage.Recognize(null);

                           System.Diagnostics.Debug.WriteLine(string.Format("Saving page {0}", workPageNumber));
                           string outputFileName;
                           DocumentFormat format;
                           if (usePdf)
                           {
                              outputFileName = string.Format("Page{0}.pdf", workPageNumber);
                              format = DocumentFormat.Pdf;
                           }
                           else
                           {
                              outputFileName = string.Format("Page{0}.txt", workPageNumber);
                              format = DocumentFormat.Text;
                           }

                           StorageFile outputFile = await Tools.AppLocalFolder.CreateFileAsync(outputFileName, CreationCollisionOption.ReplaceExisting);
                           leadStream = LeadStreamFactory.Create(outputFile);
                           using (IDisposable leadStreamDisposable = leadStream as IDisposable)
                           {
                              System.Diagnostics.Debug.WriteLine("IOcrDocument.SaveAsync");
                              System.Diagnostics.Debug.WriteLine(outputFile.Path);
                              // take the comment out, it hangs after saving the first file
                              await ocrDocument.SaveAsync(leadStream, format, null);
                           }
                        }
                     }
                     catch (Exception ex)
                     {
                        OutputError(ex);
                     }
                     finally
                     {
                        System.Diagnostics.Debug.WriteLine(string.Format("Thread working on page {0} completed", workPageNumber));

                        // Decrement the counter
                        if (Interlocked.Decrement(ref pagesLeft) == 0)
                        {
                           // We are done
                           completedEvent.Set();
                        }
                     }
                  });
               }

               // Wait on all work to finish
               completedEvent.WaitOne();
            }
         }
         catch (Exception ex)
         {
            OutputError(ex);
         }
      }

      private void OutputError(Exception error)
      {
         string message = string.Empty;

         RasterException rasterException = RasterException.FromHResult(error.HResult);
         if (rasterException != null)
            message = string.Format("ERROR LEADTOOLS: {0} - {1}", rasterException.Code, rasterException.Message);
         else
            message = string.Format("ERROR: {0} - {1}", error.HResult, error.Message);

         System.Diagnostics.Debug.WriteLine(message, true);
      }</code>
        <!--OcrEngineManager-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Engines</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public class OcrEngineManager</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrEngineManager : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">
      <summary>Creates an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="engineType">An <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" /> enumeration member that specifies the LEADTOOLS OCR engine type to use.</param>
      <param name="useThunkServer">
        <strong>true</strong> to use the
            <see cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</see> when loading the
            engine, otherwise, <strong>false</strong>. Refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>
            for more information.
            </param>
      <returns>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> that this method creates.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> should be the first method your application calls into the <strong>Leadtools.Forms.Ocr</strong> assembly. Afterwards,
            you can use the properties and methods of this interface to perform your OCR tasks.</para>
        <para>Based on the engine type passed to the <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> methods, <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" /> will load the OCR
            engine defined in one of the supporting assemblies and return an interface to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. Use this interface and its included types
            to start using the <strong>Leadtools.Forms.Ocr</strong> class library. For more information about the engine types, refer to
            <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> method lets you create an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, loading the corresponding
            <strong>Leadtools.Forms.Ocr.[EngineName].dll</strong> assembly using the .NET <see cref="M:System.Reflection.Assembly.Load(System.String)">System.Reflection.Assembly.Load(string assemblyString)</see> method.
            You cannot unload this assembly once it has been successfully loaded.</para>
        <para>Depending on your application requirement, platform and OCR engine type; a "thunk" mechanism might be required. Refer to
            <see cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</see>
            for more information and on how to use the <paramref name="useThunkServer" /> parameter.</para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub CreateEngineExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void CreateEngineExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Codecs;

      [TestMethod]
      public async Task CreateEngineExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--OcrEngineManager.CreateEngine-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.CreatingAnOcrEngineInstance">Creating an OCR Engine Instance</seealso>
      <seealso cref="T:FO.Topics.StartingAndShuttingDownTheOcrEngine">Starting and Shutting Down the OCR Engine</seealso>
      <seealso cref="T:FO.Topics.OcrMultiThreading">Multi-Threading with LEADTOOLS OCR</seealso>
      <seealso cref="T:FO.Topics.OcrThunkServer">LEADTOOLS OCR Thunk Server</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <java>
        <pre>public static OcrEngine createEngine(OcrEngineType engineType)</pre>
      </java>
      <objectivec>
        <pre>+ (LTOcrEngine*)createEngine:(LTOcrEngineType)engineType;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrEngineType">
      <summary>Specifies available OCR engine types. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>An <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" /> enumeration member is passed as a parameter to the <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see>
            method to determine the type of engine to use. When the engine is created successfully, the engine type will be store in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType">IOcrEngine.EngineType</see> property.</para>
        <para>
          <strong>Note:</strong> LEADTOOLS for Windows Runtime supports the Advantage OCR engine only.</para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public enum OcrEngineType</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrEngineType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Advantage">
      <summary>(0x00000000)<para>Specifies the <strong>LEADTOOLS OCR Advantage</strong> engine. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Advantage.dll</strong> is used.</para><para><strong>Note:</strong> in LEADTOOLS for Windows Runtime, the OCR library is inside <strong>Leadtools.Forms.Ocr.dll</strong> and the above assembly does not exist.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>Advantage</pre>
      </java>
      <objectivec>
        <pre>LTOcrEngineType_Advantage</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Professional">
      <summary>(0x00000001)Specifies the <strong>LEADTOOLS OCR Professional</strong> engine. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Professional.dll</strong> is used <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Arabic">
      <summary>(0x00000002)Specifies the <strong>LEADTOOLS OCR Arabic</strong> engine. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Arabic.dll</strong> is used <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrComponentMissingException">
      <summary>Represents the exception that is thrown when trying to use an OCR feature supported but not installed. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The default LEADTOOLS installation does not contain all the OCR features for size restrictions. When a feature that is not installed is used, <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
            will throw an <see cref="T:Leadtools.Forms.Ocr.OcrComponentMissingException" />.</para>
        <para>Note that LEADTOOLS default installation does not ship with native engine formats support, all languages and dictionaries, ICR and other optional features. You must
            download and install the "OCR Additional Features" setup available at <a href="http://www.leadtools.com">http://www.leadtools.com</a> first.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <java>
        <pre>public class OcrComponentMissingException extends LeadtoolsException</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrComponentMissingException : NSException</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrComponentMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrComponentMissingException" /> class with serialized data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to the topic
            "XML and SOAP Serialization" in the MSDN documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrComponentMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrComponentMissingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During deserialization, the exception is
            reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream. For more information, refer to the topic "XML and SOAP Serialization" in the MSDN
            documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrComponentMissingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrComponentMissingException" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrComponentMissingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrComponentMissingException" /> class with a specified error message. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="message">The message that describes the error.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrComponentMissingException(String message)</pre>
      </java>
      <objectivec>
        <pre>- (id)initWithMessage:(NSString*)message;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrComponentMissingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrComponentMissingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrException">
      <summary>Represents the exception that is thrown when a runtime error occurs inside the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <remarks>
        <para>When a runtime error occurs in the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, an exception of type <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown with the engine-specific error code set in the
            <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member. This error code is engine-specific but a short description can be obtained using the <see cref="P:System.Exception.Message" /> property of this
            class or by using the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</para>
        <para>Logic errors such as invalid parameters to methods or invalid operations throw standard .NET exceptions (in this case, <see cref="T:System.ArgumentException" /> and
            <see cref="T:System.InvalidOperationException" /> respectively Errors caused by loading invalid image files using <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</see>
            will throw exceptions of type <see cref="T:Leadtools.RasterException" />. Errors for missing features (support locked) will throw <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> exceptions. Any other
            runtime error in the engine will throw an <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</para>
      </remarks>
      <keywords>OCR,Errors|OCR,Exception</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub OcrExceptionExample()
         Try
            ' Create an instance of the engine
            Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
               ' Start the engine using default parameters
               ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
               Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
               Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

               ' Create a page
               ' Create an OCR document
               Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
                  ' Add a page to the document
                  Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

                  ' Recognize the page
                  ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  ' check and automatically auto-zones the page
                  ocrPage.Recognize(Nothing)

                  ' Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
               End Using

               ' Shutdown the engine
               ' Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown()
            End Using
         Catch ex As OcrSupportLockedException
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType)
         Catch ex As OcrException
            Console.WriteLine("OCR Error" &amp; vbLf &amp; "Code: {0}" &amp; vbLf &amp; "Message:{1}", ex.Code, ex.Message)
         Catch ex As RasterException
            Console.WriteLine("LEADTOOLS Error" &amp; vbLf &amp; "Code: {0}" &amp; vbLf &amp; "Message:{1}", ex.Code, ex.Message)
         Catch ex As Exception
            Console.WriteLine("System Error" &amp; vbLf &amp; "Message:{0}", ex.Message)
         End Try
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void OcrExceptionExample()
      {
         try
         {
            // Create an instance of the engine
            using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
            {
               // Start the engine using default parameters
               ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
               string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
               string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

               // Create a page
               // Create an OCR document
               using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to the document
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

                  // Recognize the page
                  // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  // check and automatically auto-zones the page
                  ocrPage.Recognize(null);

                  // Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
               }

               // Shutdown the engine
               // Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown();
            }
         }
         catch (OcrSupportLockedException ex)
         {
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType);
         }
         catch (OcrException ex)
         {
            Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch (RasterException ex)
         {
            Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch (Exception ex)
         {
            Console.WriteLine("System Error\nMessage:{0}", ex.Message);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--OcrException-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public class OcrException extends RuntimeException</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with serialized data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to the topic
            "XML and SOAP Serialization" in the MSDN documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During deserialization, the exception is
            reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream. For more information, refer to the topic "XML and SOAP Serialization" in the MSDN
            documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrException()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="message">The message that describes the error.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrException(String message)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>
public OcrException(String message,
                    RuntimeException innerException)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message and engine-specific error code that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="code">Engine-specific error code. To get a description of this code, use the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>
public OcrException(String message,
                    long code)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with an engine-specific error code that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="code">Engine-specific error code. To get a description of this code, use the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</param>
      <remarks>
        <para>The <see cref="P:System.Exception.Message" /> property of this <see cref="T:Leadtools.Forms.Ocr.OcrException" /> will contain the same description used in
            <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrException(long code)</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrException.Code">
      <summary>Gets or sets the engine-specific error code that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <value>An value that represents the engine-specific error code that is the cause of this exception.</value>
      <remarks>
        <para>The <see cref="P:System.Exception.Message" /> property of this <see cref="T:Leadtools.Forms.Ocr.OcrException" /> will contain the same description used in
            <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public final long getCode()
public final void setCode(long value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSupportLockedException">
      <summary>Represents the exception that is thrown when a support locked runtime error occurs inside the
                <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
                    Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. If
                    these features are used without first unlocking the specified feature, an
                    exception of type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown.
                    Examine the
                    <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                    property to determine which unlock support feature is required.
                </para>
        <para>
                    For a description of the support types, refer to
                    <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />.
                </para>
        <para>
                    For more information on feature support and how to obtain the unlock keys,
                    refer to
                    <a href="ms-xhelp:///?id=Leadtools.Topics~Leadtools.Topics.UnlockingSpecialLEADFeatures">
                    Unlocking Special LEAD Features</a>, <see cref="T:Leadtools.RasterSupport" /> and
                    <see cref="T:Leadtools.RasterSupportType" />.
                </para>
      </remarks>
      <keywords>OCR,Support</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub OcrExceptionExample()
         Try
            ' Create an instance of the engine
            Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
               ' Start the engine using default parameters
               ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
               Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
               Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

               ' Create a page
               ' Create an OCR document
               Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
                  ' Add a page to the document
                  Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

                  ' Recognize the page
                  ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  ' check and automatically auto-zones the page
                  ocrPage.Recognize(Nothing)

                  ' Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
               End Using

               ' Shutdown the engine
               ' Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown()
            End Using
         Catch ex As OcrSupportLockedException
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType)
         Catch ex As OcrException
            Console.WriteLine("OCR Error" &amp; vbLf &amp; "Code: {0}" &amp; vbLf &amp; "Message:{1}", ex.Code, ex.Message)
         Catch ex As RasterException
            Console.WriteLine("LEADTOOLS Error" &amp; vbLf &amp; "Code: {0}" &amp; vbLf &amp; "Message:{1}", ex.Code, ex.Message)
         Catch ex As Exception
            Console.WriteLine("System Error" &amp; vbLf &amp; "Message:{0}", ex.Message)
         End Try
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void OcrExceptionExample()
      {
         try
         {
            // Create an instance of the engine
            using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
            {
               // Start the engine using default parameters
               ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
               string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
               string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

               // Create a page
               // Create an OCR document
               using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to the document
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

                  // Recognize the page
                  // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  // check and automatically auto-zones the page
                  ocrPage.Recognize(null);

                  // Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
               }

               // Shutdown the engine
               // Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown();
            }
         }
         catch (OcrSupportLockedException ex)
         {
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType);
         }
         catch (OcrException ex)
         {
            Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch (RasterException ex)
         {
            Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch (Exception ex)
         {
            Console.WriteLine("System Error\nMessage:{0}", ex.Message);
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--OcrException-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <java>
        <pre>public class OcrSupportLockedException extends RuntimeException</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrSupportLockedException : NSException</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with serialized data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to the topic
            "XML and SOAP Serialization" in the MSDN documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrSupportLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During deserialization, the exception is
            reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream. For more information, refer to the topic "XML and SOAP Serialization" in the MSDN
            documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrSupportLockedException()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="message">The message that describes the error.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrSupportLockedException(String message)</pre>
      </java>
      <objectivec>
        <pre>- (id)initWithMessage:(NSString*)message;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>
public OcrSupportLockedException(String message,
                                 RuntimeException innerException)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String,Leadtools.Forms.Ocr.OcrSupportLockedExceptionType)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message and the support type required that is the cause of this exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="supportType">The support type required that is the cause of this exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>
public OcrSupportLockedException(String message,
                                 OcrSupportLockedExceptionType supportType)            </pre>
      </java>
      <objectivec>
        <pre>
- (id)initWithMessageAndSupportType:(NSString*)message
                        supportType:(LTOcrSupportLockedExceptionType)supportType;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(Leadtools.Forms.Ocr.OcrSupportLockedExceptionType)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class containing a support type enumeration value, the lack of which caused the exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="supportType">The support type, lack of which that caused the exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <java>
        <pre>public OcrSupportLockedException(OcrSupportLockedExceptionType supportType)</pre>
      </java>
      <objectivec>
        <pre>- (id)initWithSupportType:(LTOcrSupportLockedExceptionType)supportType;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">
      <summary>Gets or sets the support type that is needed, the lack of which causes the exception. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" /> enumeration type that represents the support type required that is the cause of this exception.</value>
      <remarks>
        <para>Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. If these features are used without first unlocking the specified feature, an exception of
            type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown. Examine the <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType" />
            property to determine which unlock support feature is required.</para>
        <para>For a description of the support types, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />.</para>
        <para>For more information on feature support and how to obtain the unlock keys, refer to <see cref="T:Leadtools.RasterSupport" /> and <see cref="T:Leadtools.RasterSupportType" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public final OcrSupportLockedExceptionType getSupportType()
public final void setSupportType(OcrSupportLockedExceptionType value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrSupportLockedExceptionType supportType;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">
      <summary>The type of support (feature) needing to be unlocked which caused the error. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
                    Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. When
                    using these features without first unlocking the specified feature, an
                    exception of type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown.
                    You can examine the
                    <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                    property to determine which unlock support feature is required.
                </para>
        <para>
                    The following table lists the action required when an error of type
                    <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> is thrown: s 
                    <table><tbody><tr><th>Engine type</th><th><see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                                    value
                                </th><th>Action required</th></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Ocr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Icr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.IcrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Omr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OmrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Pdf</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessionalPdfOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.PdfA</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessionalPdfLeadOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Ocr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantage</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Pdf</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantagePdfOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.PdfA</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantagePdfLeadOutput</see></td></tr></tbody></table></para>
        <para>
                    Note at this time, LEADTOOLS OCR Advantage Engine
                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>) is not supported.
                </para>
        <para>
                    For more information on feature support and how to obtain the unlock keys,
                    refer to
                    <a href="ms-xhelp:///?id=Leadtools.Topics~Leadtools.Topics.UnlockingSpecialLEADFeatures">
                    Unlocking Special LEAD Features</a>, <see cref="T:Leadtools.RasterSupport" /> and
                    <see cref="T:Leadtools.RasterSupportType" />.
                </para>
      </remarks>
      <keywords>OCR,Support</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <java>
        <pre>public enum OcrSupportLockedExceptionType</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrSupportLockedExceptionType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Ocr">
      <summary>(0x00000000)OCR support is required to use this feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>OCR</pre>
      </java>
      <objectivec>
        <pre>LTOcrSupportLockedExceptionType_Ocr</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Icr">
      <summary>(0x00000001)ICR (handprint)  support is required to use this feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>ICR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Omr">
      <summary>(0x00000002)OMR support is required to use this feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>OMR</pre>
      </java>
      <objectivec>
        <pre>LTOcrSupportLockedExceptionType_Omr</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Pdf">
      <summary>(0x00000003)PDF support is required to use this feature (When saving a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>PDF</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.PdfA">
      <summary>(0x00000004)<font color="red">(Deprecated)</font> Do not use. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>PDFA</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Arabic">
      <summary>(0x00000005)OCR Arabic support is required to use this feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>ARABIC</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.EnginePdf">
      <summary>(0x00000006)PDF support is required to use this feature (When saving a document using the engine native support, refer to <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>ENGINE_PDF</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.OcrProfessionalAsian">
      <summary>(0x00000007)Ocr Professional Asian support is required to use this feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>OCR_PROFESSIONAL_ASIAN</pre>
      </java>
    </member>
    <member name="T:Leadtools.ILeadStream">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.ILeadStream.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.IBuffer">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IBuffer.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.IStorageFile">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IStorageFile.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.IRandomAccessStream">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IRandomAccessStream.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.IInputStream">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IInputStream.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.IOutputStream">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IOutputStream.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.InMemoryRandomAccessStream">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.InMemoryRandomAccessStream.Foo">
      <exclude />
    </member>
    <member name="T:Leadtools.Junk.WriteOnlyArray`1">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.WriteOnlyArray`1.Foo">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.IVector`1">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IVector`1.Foo">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.IVectorView`1">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.IVectorView`1.Foo">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.IAsyncOperation`1">
      <exclude />
      <winrt />
    </member>
    <member name="P:Leadtools.Junk.IAsyncOperation`1.Completed">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.AsyncOperationCompletedHandler`1">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.AsyncActionCompletedHandler">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Junk.AsyncActionCompletedHandler.Foo">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Junk.IAsyncAction">
      <exclude />
      <winrt />
    </member>
    <member name="P:Leadtools.Junk.IAsyncAction.Completed">
      <exclude />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrLanguageManager">
      <summary>Provides access to the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Languages | OCR,Languages</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
             <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see> property.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German
             languages, the German characters (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine.
             The language environment does not perform spell checking however, for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> allows you to do the following:</para>
        <list type="bullet">
          <item>
            <description>Query the languages supported by the OCR engine using the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> and
             <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> methods.</description>
          </item>
          <item>
            <description>Enable or disable specific language character sets from participating in the spell checking subsystem using the
             <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> methods.</description>
          </item>
        </list>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could
             be an ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture
             code associated with a country or region.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see> method before you can use the
             <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see> property.</para>
        <para>Note: The <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> state is also saved when the engine settings are saved. For more information, refer to
             <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager">IOcrSettingManager</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr

      Public Sub OcrLanguageManagerExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            ' Show languages supported by this engine
            Dim supportedLanguages As String() = ocrEngine.LanguageManager.GetSupportedLanguages()

            Console.WriteLine("Supported languages:")
            For Each supportedLanguage As String In supportedLanguages
               ' Get the friendly name of this language using the .NET CultureInfo class
               Dim ci As New CultureInfo(supportedLanguage)
               Console.WriteLine("  {0} ({1})", supportedLanguage, ci.EnglishName)
            Next

            ' Check if current culture info language is supported
            Dim currentCulture As CultureInfo = CultureInfo.CurrentCulture
            Dim name As String = currentCulture.TwoLetterISOLanguageName
            Dim supported As Boolean = ocrEngine.LanguageManager.IsLanguageSupported(name)
            If Not supported Then
               name = currentCulture.Name
               supported = ocrEngine.LanguageManager.IsLanguageSupported(name)
            End If

            If supported Then
               Console.WriteLine("Current culture is {0}, and it is supported by this OCR engine. Enabling only this language and German now", _
                                 currentCulture.EnglishName)
               ocrEngine.LanguageManager.EnableLanguages(New String() {name, "de"})

               ' If this engine does not support enabling multiple languages (currently the LEADTOOLS Advantage OCR engine), then GetEnabledLanguages
               ' will always return an array of 1, make a note of this
               If Not ocrEngine.LanguageManager.SupportsEnablingMultipleLanguages Then
                  Console.WriteLine("This engine supports enabling only one language at a time, so only the first language we enabled will be used")
               End If

               Dim enabledLanguages As String() = ocrEngine.LanguageManager.GetEnabledLanguages()
               Console.WriteLine("Current enabled languages in the engine are:")
               For Each enabledLanguage As String In enabledLanguages
                  ' Get the friendly name of this language using the .NET CultureInfo class
                  Dim ci As New CultureInfo(enabledLanguage)
                  Console.WriteLine("  {0} ({1})", enabledLanguage, ci.EnglishName)
               Next
            Else
               Console.WriteLine("Current culture is {0}, and it is not supported by this OCR engine", currentCulture.EnglishName)
            End If

            ocrEngine.Shutdown()
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;

      public void OcrLanguageManagerExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            // Show languages supported by this engine
            string[] supportedLanguages = ocrEngine.LanguageManager.GetSupportedLanguages();

            Console.WriteLine("Supported languages:");
            foreach (string supportedLanguage in supportedLanguages)
            {
               // Get the friendly name of this language using the .NET CultureInfo class
               CultureInfo ci = new CultureInfo(supportedLanguage);
               Console.WriteLine("  {0} ({1})", supportedLanguage, ci.EnglishName);
            }

            // Check if current culture info language is supported
            CultureInfo currentCulture = CultureInfo.CurrentCulture;
            string name = currentCulture.TwoLetterISOLanguageName;
            bool supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
            if (!supported)
            {
               name = currentCulture.Name;
               supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
            }

            if (supported)
            {
               Console.WriteLine("Current culture is {0}, and it is supported by this OCR engine. Enabling only this language and German now", currentCulture.EnglishName);
               ocrEngine.LanguageManager.EnableLanguages(new string[] { name, "de" });

               // If this engine does not support enabling multiple languages (currently the LEADTOOLS Advantage OCR engine), then GetEnabledLanguages
               // will always return an array of 1, make a note of this
               if (!ocrEngine.LanguageManager.SupportsEnablingMultipleLanguages)
                  Console.WriteLine("This engine supports enabling only one language at a time, so only the first language we enabled will be used");

               string[] enabledLanguages = ocrEngine.LanguageManager.GetEnabledLanguages();
               Console.WriteLine("Current enabled languages in the engine are:");
               foreach (string enabledLanguage in enabledLanguages)
               {
                  // Get the friendly name of this language using the .NET CultureInfo class
                  CultureInfo ci = new CultureInfo(enabledLanguage);
                  Console.WriteLine("  {0} ({1})", enabledLanguage, ci.EnglishName);
               }
            }
            else
               Console.WriteLine("Current culture is {0}, and it is not supported by this OCR engine", currentCulture.EnglishName);

            ocrEngine.Shutdown();
         }
      }</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;

      [TestMethod]
      public void OcrLanguageManagerExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Show languages supported by this engine
         string[] supportedLanguages = ocrEngine.LanguageManager.GetSupportedLanguages();

         Debug.WriteLine("Supported languages:");
         foreach(string supportedLanguage in supportedLanguages)
         {
            // Get the friendly name of this language using the .NET CultureInfo class
            CultureInfo ci = new CultureInfo(supportedLanguage);
            Debug.WriteLine("  {0} ({1})", supportedLanguage, ci.EnglishName);
         }

         // Check if current culture info language is supported
         CultureInfo currentCulture = CultureInfo.CurrentCulture;
         string name = currentCulture.TwoLetterISOLanguageName;
         bool supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
         if(!supported)
         {
            name = currentCulture.Name;
            supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
         }

         if(supported)
         {
            Debug.WriteLine("Current culture is {0}, and it is supported by this OCR engine. Enabling only this language and German now", currentCulture.EnglishName);
            ocrEngine.LanguageManager.EnableLanguages(new string[] { name, "de" });

            // If this engine does not support enabling multiple languages (currently the LEADTOOLS Advantage OCR engine), then GetEnabledLanguages
            // will always return an array of 1, make a note of this
            if(!ocrEngine.LanguageManager.SupportsEnablingMultipleLanguages)
               Debug.WriteLine("This engine supports enabling only one language at a time, so only the first language we enabled will be used");

            string[] enabledLanguages = ocrEngine.LanguageManager.GetEnabledLanguages();
            Debug.WriteLine("Current enabled languages in the engine are:");
            foreach(string enabledLanguage in enabledLanguages)
            {
               // Get the friendly name of this language using the .NET CultureInfo class
               CultureInfo ci = new CultureInfo(enabledLanguage);
               Debug.WriteLine("  {0} ({1})", enabledLanguage, ci.EnglishName);
            }
         }
         else
            Debug.WriteLine("Current culture is {0}, and it is not supported by this OCR engine", currentCulture.EnglishName);

         ocrEngine.Shutdown();
      }</code>
        <!--IOcrLanguageManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine">IOcrEngine</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager">OcrEngineManager</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager">IOcrSettingManager</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public class OcrLanguageManager</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrLanguageManager : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages">
      <summary>Gets an array of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of <see cref="T:System.String" /> objects that contain the names of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> method to check if an individual language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The supported languages are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To check if there are
            additional languages that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetAdditionalLanguages" />.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public String[] getSupportedLanguages()</pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getSupportedLanguages:(NSError**)outError;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)">
      <summary>Gets a value that determine if a given language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="name">The name of the language to check. The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</param>
      <returns>
        <strong>true</strong> if the language specified by <paramref name="name" /> is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> method to get a list of all the language supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public boolean isLanguageSupported(String name)</pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)isLanguageSupported:(NSString*)name
                      error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetAdditionalLanguages">
      <summary>Gets an array of the additional languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of <see cref="T:System.String" /> objects that contain the names of the additional languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>The additional languages are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional language
            packs to be able to support these languages in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> to get an array of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> method to check if an individual language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public String[] getAdditionalLanguages()</pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getAdditionalLanguages:(NSError**)outError;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])">
      <summary>Enable the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="names">An array of <see cref="T:System.String" /> objects containing the name of the languages to be enabled inside the language environment of the character sets used
            by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </param>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> method is used to define the main part of the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The default value of the enabled languages is "en" (for English).</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> to obtain a list of the languages currently enabled in the language environment.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>
          <strong>Note: If you call this method when using the LEADTOOLS OCR Advantage Engine, then the user specified settings will be reset because this method will re-initialize the OCR engine using the specified language.</strong>
        </para>
        <para>Some of the OCR engines supported by LEADTOOLS do not allow enabling more than one engine at a time. To check if the OCR engine supports
            more than one language, you must first check the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" /> property. If the value of this property is <strong>false</strong>,
            then only the first item in the array passed to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> will be used.</para>
        <para>Note that you can only enable one Asian language at a time if the engine supports Asian languages. For example, the OCR Professional engine supports the
            following Asian character sets: Japanese (ja), Chinese Simplified (zh-Hans), Chinese Traditional (zh-Hant) and Korean (ko). All these character sets are
            disabled by default and you can only enable one of them only at any time.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public void enableLanguages(String[] names)</pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)enableLanguages:(NSArray*)names
                  error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">
      <summary>Gets the names of the current enabled languages environment of the character set used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>
            An array of <see cref="T:System.String" /> object that contains the names of the current enabled languages.
            <para><strong>Note: If you are using the LEADTOOLS OCR Advantage Engine, this array will contain only one item that represents the currently enabled language.</strong></para></returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> method is used to define the main part of the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The default value of the enabled languages is "en" (for English).</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> to obtain a list of the languages currently enabled in the language environment.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public String[] getEnabledLanguages() </pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getEnabledLanguages:(NSError**)outError;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.DetectLanguage(Leadtools.Forms.Ocr.IOcrPage,System.String[],System.Int32[],System.Int32)">
      <summary>Detects the language used in the specified <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> from a list of languages that is provided by the user. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="page">The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to detect its language.</param>
      <param name="languages"> An array of <see cref="T:System.String" /> objects that contain the names of the languages to check for. The language values used throughout the LEADTOOLS OCR toolkit are string values based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture codes associated with a country or region.</param>
      <param name="confidences"> An array of <see cref="T:System.Int32" /> objects updated by the confidences of the languages. The array size must be equivalent to the number of items in <paramref name="languages" /> array. If it is set to null it will be ignored. 
            The confidence value range is between -1 and 100. A value of -1 means the language is not supprted, 0 means it is not confident, and 100 is fully confident.</param>
      <param name="minimumConfidence"> The minimum confidence value to stop checking other languages when a language confidence is equal to or higher than its value.</param>
      <returns>
            The index of the language with the highest confidence in <paramref name="languages" /> parameter.
            </returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.DetectLanguage(Leadtools.Forms.Ocr.IOcrPage,System.String[],System.Int32[],System.Int32)" /> is supported in the LEADTOOLS OCR Advantage Engine only.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.DetectLanguage(Leadtools.Forms.Ocr.IOcrPage,System.String[],System.Int32[],System.Int32)" /> method is a dictionary based method that the recognition confidence has low contribution to its calculations. 
              The confidence of a language without a dictionay is low. To determine whether a given spell language (dictionary) is supported by the current spell checker engine 
              use <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellLanguageSupported(System.String)" />. In order to get a list of the languages (dictionaries) supported by the current spell checker engine use 
              <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> to obtain a list of the languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> to check if a given language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr

      Private Sub DetectLanguageExample(engine As IOcrEngine, page As IOcrPage)
         Dim languages As String() = New String(2) {}
         languages(0) = "en"
         languages(0) = "fr"
         languages(0) = "de"
         Dim confidences As Integer() = New Integer(languages.Length - 1) {}
         Dim maxIndex As Integer = engine.LanguageManager.DetectLanguage(page, languages, confidences, 90)
         If maxIndex = -1 Then
            Console.WriteLine("No language has been detected")
         Else
            Console.WriteLine("The page language with the highest confidence is: " &amp; languages(maxIndex) &amp; ", with confidence: " &amp; confidences(maxIndex))
         End If
         For i As Integer = 0 To languages.Length - 1
            Console.WriteLine("Language: " &amp; languages(i) &amp; ", with confidence: " &amp; confidences(i))
         Next
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;

      private void DetectLanguageExample(IOcrEngine engine, IOcrPage page)
      {
         string[] languages = new string[3];
         languages[0] = "en";
         languages[0] = "fr";
         languages[0] = "de";
         int[] confidences = new int[languages.Length];
         int maxIndex = engine.LanguageManager.DetectLanguage(page, languages, confidences, 90);
         if (maxIndex == -1)
            Console.WriteLine("No language has been detected");
         else
            Console.WriteLine("The page language with the highest confidence is: " + languages[maxIndex] + ", with confidence: " + confidences[maxIndex]);
         for (int i = 0; i &lt; languages.Length; i++)
            Console.WriteLine("Language: " + languages[i] + ", with confidence: " + confidences[i]);
      }</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;

      private void DetectLanguageExample(IOcrEngine engine, IOcrPage page)
      {
          string[] languages = new string[3];
          languages[0] = "en";
          languages[0] = "fr";
          languages[0] = "de";
          int[] confidences = new int[languages.Length];
          int maxIndex = engine.LanguageManager.DetectLanguage(page, languages, confidences, 90);
          if (maxIndex == -1)
              Debug.WriteLine("No language has been detected");
          else
              Debug.WriteLine("The page language with the highest confidence is: " + languages[maxIndex] + ", with confidence: " + confidences[maxIndex]);
          for (int i = 0; i &lt; languages.Length; i++)
              Debug.WriteLine("Language: " + languages[i] + ", with confidence: " + confidences[i]);
      }</code>
        <!--IOcrLanguageManager.DetectLanguage-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>
public int detectLanguage(OcrPage page,
                          String[] languages,
                          int[] confidences,
                          int minimumConfidence)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages">
      <summary>Gets a value to indicate whether this engine supports enabling multiple languages at the same time. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>True</strong> it this engine supports enabling multiple languages at the same time; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS do not allow enabling more than one engine at a time. To check if the OCR engine supports
             more than one language, you must first check the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" /> property. If the value of this property is <strong>false</strong>,
             then only the first item in the array passed to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> will be used.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <java>
        <pre>public boolean getSupportsEnablingMultipleLanguages()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL supportsEnablingMultipleLanguages;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrPageType">
      <summary>The type of the page's <see cref="T:Leadtools.RasterImage" /> to get. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> contains two versions of the image used to create it: the current and an optional processing version. The
            processing version usually black/white and has uniform resolution (if the original image is FAX for example) and it gets passed to the internal OCR
            engine during the zoning and recognition process. The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> method also uses the B/W image to determine if the page
            is inverted, skewed or has an orientation; however, it applies the correction to both the current and processing images.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType)</see> to get a copy of either of these
            images.</para>
        <para>You cannot set the processing image of a page; it is created automatically by the engine. This is why there is no
            <strong>IOcrPage.SetRasterImage(OcrPageType pageType)</strong> method.</para>
        <para>If the original image is black and white and has uniform vertical and horizontal resolution, then the engine will not create a processing image,
            in other words, <strong>IOcrPage.GetRasterImage(OcrPageType.Current)</strong> and <strong>IOcrPage.GetRasterImage(OcrPageType.Processing)</strong> will return identical
            <see cref="T:Leadtools.RasterImage" /> objects.</para>
        <para>If the original image has different horizontal and vertical resolution, such as a FAX image, the processing page will be have be resized to
            have uniform resolution.</para>
        <para>The LEADTOOLS C# and VB .NET Main OCR demos (Examples\DotNet\CS\OcrMainDemo and Examples\DotNet\VB\OcrMainDemo) have an option in the page menu
            to toggle between showing the current (default) or  processing image of each page.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Private Shared Sub OcrPageTypeExample()
         Dim engineType As OcrEngineType = OcrEngineType.Advantage
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(engineType, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            ' Load an image as 24-bpp
            Dim image As RasterImage = _
               ocrEngine.RasterCodecsInstance.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), 24, CodecsLoadByteOrder.Bgr, 1, 1)

            ' Show the original image properties
            Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel)
            System.Diagnostics.Debug.Assert(image.BitsPerPixel = 24)

            ' Create a page for it
            Using ocrPage As IOcrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose)
               ' Show the current OCR page size and color depth
               image = ocrPage.GetRasterImage(OcrPageType.Current)
               Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel)
               System.Diagnostics.Debug.Assert(image.BitsPerPixel = 24)


               ' Show the processing OCR page size and color depth
               image = ocrPage.GetRasterImage(OcrPageType.Processing)
               Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel)
               System.Diagnostics.Debug.Assert(image.BitsPerPixel = 1)

            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      private static void OcrPageTypeExample()
      {
         OcrEngineType engineType = OcrEngineType.Advantage;
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(engineType, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            // Load an image as 24-bpp
            RasterImage image = ocrEngine.RasterCodecsInstance.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"), 24, CodecsLoadByteOrder.Bgr, 1, 1);
            // Show the original image properties
            Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
            System.Diagnostics.Debug.Assert(image.BitsPerPixel == 24);

            // Create a page for it
            using (IOcrPage ocrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose))
            {
               // Show the current OCR page size and color depth
               using (image = ocrPage.GetRasterImage(OcrPageType.Current))
               {
                  Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
                  System.Diagnostics.Debug.Assert(image.BitsPerPixel == 24);
               }

               // Show the processing OCR page size and color depth
               using (image = ocrPage.GetRasterImage(OcrPageType.Processing))
               {
                  Console.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
                  System.Diagnostics.Debug.Assert(image.BitsPerPixel == 1);
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.ImageProcessing;

      private static async void OcrPageTypeExample()
      {
         OcrEngineType engineType = OcrEngineType.Advantage;
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(engineType, false);
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         IOcrPage ocrPage;

         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(@"Assets\Ocr1.tif");
         using (RasterImage image = await ocrDocument.RasterCodecsInstance.LoadAsync(LeadStreamFactory.Create(loadFile)))
         {
            // Convert the image to 24-bpp
            ColorResolutionCommand command = new ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 24, RasterByteOrder.Bgr, RasterDitheringMethod.None, ColorResolutionCommandPaletteFlags.None, null);
            command.Run(image);

            // Show the original image properties
            Debug.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
            System.Diagnostics.Debug.Assert(image.BitsPerPixel == 24);

            // Add it to the OCR engine
            ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Show the current OCR page size and color depth
         using (RasterImage image = ocrPage.GetRasterImage(OcrPageType.Current))
         {
            Debug.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
            System.Diagnostics.Debug.Assert(image.BitsPerPixel == 24);
         }

         // Show the processing OCR page size and color depth
         using (RasterImage image = ocrPage.GetRasterImage(OcrPageType.Processing))
         {
            Debug.WriteLine("Original size is {0} by {1} at {2} bits/pixel", image.ImageWidth, image.ImageHeight, image.BitsPerPixel);
            System.Diagnostics.Debug.Assert(image.BitsPerPixel == 1);
         }

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--OcrPageType-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrDocument.GetRasterImage</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)">IOcrPage.SetRasterImage</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>enum LTOcrPageType</pre>
      </objectivec>
      <java>
        <pre>public enum OcrPageType</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrPageType.Current">
      <summary>(0x00000000)<para>The current image, this is a clone of the original image and has the same properties as the original image used to create the page.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrPageType_Current</pre>
      </objectivec>
      <java>
        <pre>CURRENT</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrPageType.Processing">
      <summary>(0x00000001)<para>The processing image is created internally by the OCR engine and is passed to the zoning and recognition routines. This image is
            always black/white with uniform resolution.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrPageType_Processing</pre>
      </objectivec>
      <java>
        <pre>PROCESSING</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrPageType.Original">
      <summary>(0x00000002)<para>The original image reference. This image is used by the OCR engine internally and should not be disposed. The original image is not <strong>null</strong>
            when this page is created by adding an image from a file, URL or stream or when the value of the "Recognition.ShareOriginalImage" setting is <strong>true</strong>. Otherwise,
            the engine will return a <strong>null</strong> reference for this value.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrPageType_Original</pre>
      </objectivec>
      <java>
        <pre>ORIGINAL</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues">
      <summary>Holds data that describes any pre-processing performed on an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues" /> is used with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues">IOcrPage.GetPreprocessValues</see> to return the
            values of any pre-processing performed on the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</see>.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetOverlayImage">IOcrPage.GetOverlayImage</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>enum LTOcrPageAutoPreprocessValues</pre>
      </objectivec>
      <java>
        <pre>public enum OcrPageAutoPreprocessValues</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues.IsInverted">
      <summary>A value that indicate if this page has been inverted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this page has been inverted, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> will update this value if
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Invert</see> was used and the page was inverted.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</see>.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL isInverted;</pre>
      </objectivec>
      <java>
        <pre>
public Boolean getIsInverted()
public void setIsInverted(Boolean value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues.RotationAngle">
      <summary>A value that contain the rotation angle of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The rotation angle of this page in hundredths of a degree.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> will update this value if
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Rotate</see> was used and the page was rotated.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</see>.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) int rotationAngle;</pre>
      </objectivec>
      <java>
        <pre>
public int getRotationAngle()
public void setRotationAngle(int value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues.DeskewAngle">
      <summary>A value that contain the deskew angle of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The deskew angle of this page in hundredths of a degree.</value>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> will update this value if
            <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Deskew</see> was used and the page was deskewed.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">IOcrPage.SetOverlayImage</see>.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) int deskewAngle;</pre>
      </objectivec>
      <java>
        <pre>
public int getDeskewAngle()
public void setDeskewAngle(int value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPage">
      <summary>Defines an image page in an OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> defines a page currently added in the OCR engine. Each page contains the raster image used to create it (the image used when
             the page is loaded or added) and a group of OCR zones for the page either added manually or through auto-zoning.</para>
        <para>Pages can be stand-alone or part of an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />. To create a stand-alone page, use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.
             To create pages as part of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, use the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>For information on how to create memory-based or file-based documents or how to load file-based documents from disk refer to
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
             <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <h2>Memory-Based Documents</h2>
        <para>You can access the pages inside a memory-based OCR document (<see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />) through the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see>
             property. The value of this property is a <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface. This interface implements standard .NET
             <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces and hence, you can use the member of these
             interfaces to add, remove, get, set and iterate through the different pages of the document.</para>
        <para>In memory-based documents, you cannot create <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects directly. Instead, add pages to the engine through the various
             <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>,
             <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages</see> methods
             of the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface. Once a page is added, access it by index to get the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object
             associated with it. </para>
        <para>Pages obtained this way do not need to be disposed. The owner <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will automatically destroy the pages when it is
             disposed.</para>
        <h2>File-Based Documents</h2>
        <para>Usually, you create a page directly using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>. You can use all the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />
             methods to zone and recognize the document as listed below as usual. And if saving the page to a final output format is required, then you can
             add this page to a file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> using the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrPageCollection.Add</see> member of
             <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" />.</para>
        <para>Pages obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)" /> must be destroyed by the user using the
             <see cref="M:System.IDisposable.Dispose">Dispose</see> method.</para>
        <para>Each page contains a collection of OCR zones. This collection can be accessed with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> member. This member implements the
             <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface which also implements the same standard .NET collections interfaces as <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.
             Hence you can use <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> to add, remove, get, set and iterate through the various zones in the page.</para>
        <para>After optionally manipulating the zones inside a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to collect the recognition data of the page. This data
             is stored internally in the page and can later be saved to one of the many document file formats supported by the engine such as PDF or
             Microsoft Word.</para>
        <para>After a page is recognized, examine and modify the recognition data (characters and words) through the
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods. The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)" /> method can be used to obtain the
             recognition data as simple string object.</para>
        <para>Once an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object is obtained, you can do the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Get information regarding the page image, such its <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width" />, <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height" />,
             <see cref="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel" /> and the DPI (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />) values.
             </para>
            </description>
          </item>
          <item>
            <description>
              <para>Get a <see cref="T:Leadtools.RasterImage" /> object with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method that represents the page raster image data.
             Manipulate this image with other parts of LEADTOOLS such as the various image processing commands or show it in the Windows Forms viewer.
             You can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" /> to update the page raster image data.</para>
            </description>
          </item>
        </list>
      </remarks>
      <keywords>OCR,Pages|OCR,Recognition|OCR,Zoning|Pages</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Public Sub OcrPageExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Auto-recognize the zones in the page
               ocrPage.AutoZone(Nothing)

               ' Show its information
               Console.WriteLine("Size: {0} by {1} pixels", ocrPage.Width, ocrPage.Height)
               Console.WriteLine("Resolution: {0} by {1} dots/inch", ocrPage.DpiX, ocrPage.DpiX)
               Console.WriteLine("Bits/Pixel: {0}, Bytes/Line: {1}", ocrPage.BitsPerPixel, ocrPage.BytesPerLine)

               Dim palette As Byte() = ocrPage.GetPalette()
               Dim paletteEntries As Integer
               If palette IsNot Nothing Then
                  paletteEntries = palette.Length \ 3
               Else
                  paletteEntries = 0
               End If

               Console.WriteLine("Number of entries in the palette: {0}", paletteEntries)
               Console.WriteLine("Original format of this page: {0}", ocrPage.OriginalFormat)
               Console.WriteLine("Has this page been recognized? : {0}", ocrPage.IsRecognized)
               ShowZonesInfo(ocrPage)

               ' Recognize it and save it as PDF
               ocrPage.Recognize(Nothing)
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Private Sub ShowZonesInfo(ocrPage As IOcrPage)
         Console.WriteLine("Zones:")
         For Each ocrZone As OcrZone In ocrPage.Zones
            Dim index As Integer = ocrPage.Zones.IndexOf(ocrZone)
            Console.WriteLine("Zone index: {0}", index)
            Console.WriteLine("  Id                  {0}", ocrZone.Id)
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds)
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType)
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters)
            Console.WriteLine("----------------------------------")
         Next
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      public void OcrPageExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Auto-recognize the zones in the page
               ocrPage.AutoZone(null);

               // Show its information
               Console.WriteLine("Size: {0} by {1} pixels", ocrPage.Width, ocrPage.Height);
               Console.WriteLine("Resolution: {0} by {1} dots/inch", ocrPage.DpiX, ocrPage.DpiX);
               Console.WriteLine("Bits/Pixel: {0}, Bytes/Line: {1}", ocrPage.BitsPerPixel, ocrPage.BytesPerLine);

               byte[] palette = ocrPage.GetPalette();
               int paletteEntries;
               if (palette != null)
                  paletteEntries = palette.Length / 3;
               else
                  paletteEntries = 0;

               Console.WriteLine("Number of entries in the palette: {0}", paletteEntries);
               Console.WriteLine("Original format of this page: {0}", ocrPage.OriginalFormat);
               Console.WriteLine("Has this page been recognized? : {0}", ocrPage.IsRecognized);
               ShowZonesInfo(ocrPage);

               // Recognize it and save it as PDF
               ocrPage.Recognize(null);
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private void ShowZonesInfo(IOcrPage ocrPage)
      {
         Console.WriteLine("Zones:");
         foreach (OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Console.WriteLine("Zone index: {0}", index);
            Console.WriteLine("  Id                  {0}", ocrZone.Id);
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Console.WriteLine("----------------------------------");
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.ImageProcessing;

      [TestMethod]
      public async Task OcrPageExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Auto-recognize the zones in the page
         ocrPage.AutoZone(null);

         // Show its information
         Debug.WriteLine("Size: {0} by {1} pixels", ocrPage.Width, ocrPage.Height);
         Debug.WriteLine("Resolution: {0} by {1} dots/inch", ocrPage.DpiX, ocrPage.DpiX);
         Debug.WriteLine("Bits/Pixel: {0}, Bytes/Line: {1}", ocrPage.BitsPerPixel, ocrPage.BytesPerLine);

         byte[] palette = ocrPage.GetPalette();
         int paletteEntries;
         if(palette != null)
            paletteEntries = palette.Length / 3;
         else
            paletteEntries = 0;

         Debug.WriteLine("Number of entries in the palette: {0}", paletteEntries);
         Debug.WriteLine("Original format of this page: {0}", ocrPage.OriginalFormat);
         Debug.WriteLine("Has this page been recognized? : {0}", ocrPage.IsRecognized);
         ShowZonesInfo(ocrPage);

         // Recognize it and save it as PDF
         ocrPage.Recognize(null);
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }

      private void ShowZonesInfo(IOcrPage ocrPage)
      {
         Debug.WriteLine("Zones:");
         foreach(OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Debug.WriteLine("Zone index: {0}", index);
            Debug.WriteLine("  Id                  {0}", ocrZone.Id);
            Debug.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Debug.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Debug.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod);
            Debug.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule);
            Debug.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Debug.WriteLine("----------------------------------");
         }
      }</code>
        <!--IOcrPage-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>@interface LTOcrPage : NSObject</pre>
      </objectivec>
      <java>
        <pre>public class OcrPage</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetPalette">
      <summary>Gets the palette used by this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of bytes that contain the palette used by this page or a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if the page does not contain a palette.</returns>
      <remarks>
        <para>The page contains a palette if the value of <see cref="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel" /> is less than or equal to 8.</para>
        <para>The palette returned from this method is an array of bytes in the following format: <c>Red0, Green0, Blue0, Red1, Green1, Blue1 ... RedN, GreenN, BlueN</c>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (NSArray*)getPalette;</pre>
      </objectivec>
      <java>
        <pre>public Byte[] getPalette()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">
      <summary>Gets the current image data of this page as a raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that represent the current image data of this page.</returns>
      <remarks>
        <para>This method is the equivalent of calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">GetRasterImage(OcrPageType.Current)</see>. For more information
            on the various copies of raster images used by the OCR page, refer to <see cref="T:Leadtools.Forms.Ocr.OcrPageType" />.</para>
        <para>Once you add a page to an OCR document, the image data used to create the page is copied and stored inside the OCR engine even if the original object used to create the page
            was a <see cref="T:Leadtools.RasterImage" /> object. To get a <see cref="T:Leadtools.RasterImage" /> that represents this page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object that this method returns contains a copy of the page image data. Any modifications you make to the <see cref="T:Leadtools.RasterImage" /> object
            will not affect the page. To update the page image data, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />. Since the <see cref="T:Leadtools.RasterImage" /> object is a copy, you must dispose it by
            calling its <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method once you are done using it.</para>
        <para>Once you obtain a <see cref="T:Leadtools.RasterImage" /> object for this page, you can use it with other parts of LEADTOOLS, for example, you can set it in the <see cref="T:Leadtools.Controls.ImageViewer" /> or
            <see cref="T:Leadtools.Controls.RasterPictureBox" /> controls for viewing inside your Windows Forms-based application. You can also perform your own image processing on the page as follows:</para>
        <para>
          <code>
            // Flip the 2nd page added to the OCR document
            // Get the page (index is zero-based)
            IOcrPage page = ocrDocument.Pages[1];
            // Get a RasterImage object that represents this page
            Leadtools.RasterImage image = page.GetRasterImage();
            // Flip it vertically
            Leadtools.ImageProcessing.FlipCommand flip = new Leadtools.ImageProcessing.FlipCommand();
            flip.Horizontal = false;
            flip.Run(image);
            // Set it back into the page
            page.SetRasterImage(image);
            // Dispose the image
            image.Dispose();
            </code>
        </para>
        <para>You can also get a <see cref="T:Leadtools.RasterImage" /> object representation of a page with the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">IOcrPageCollection.ExportPage</see> methods.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object returned from this method will contain one page only. To get a multi-page <see cref="T:Leadtools.RasterImage" /> object containing the image data
            of all or a specific range of the pages added to the OCR document, you can either create a <see cref="T:Leadtools.RasterImage" /> from the first then loop through the pages of the document and
            add the returned <see cref="T:Leadtools.RasterImage" /> objects to the first object with the <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">RasterImage.AddPage</see> method. Or you can use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">IOcrPageCollection.ExportPages</see> methods.</para>
      </remarks>
      <keywords>OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>- (LTRasterImage*)getRasterImage;</pre>
      </objectivec>
      <java>
        <pre>public RasterImage getRasterImage()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">
      <summary>Gets the current or processing image data of this page as a raster image. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageType">The page type to get.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that represent the current or processing image data of this page.</returns>
      <remarks>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> contains two versions of the image used to create it: an original (current) and an optional processing version. The
            processing version usually black/white and has uniform resolution (if the original image is FAX for example) and it gets passed to the internal OCR
            engine during the zoning and recognition process. The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> method also uses the B/W image to determine if the page
            is inverted, skewed or has an orientation; however, it applies the correction to both the current and processing images.</para>
        <para>You can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">GetRasterImage(OcrPageType)</see> to get a copy of either of these
            images.</para>
        <para>You cannot set the processing image of a page; it is created automatically by the engine. This is why there is no
            <strong>IOcrPage.SetRasterImage(OcrPageType pageType)</strong> method.</para>
        <para>If the original image is black and white and has uniform vertical and horizontal resolution, then the engine will not create a processing image,
            in other words, <strong>GetRasterImage(OcrPageType.Current)</strong> and <strong>GetRasterImage(OcrPageType.Processing)</strong> will return identical
            <see cref="T:Leadtools.RasterImage" /> objects.</para>
        <para>If the original image has different horizontal and vertical resolution, such as a FAX image, the processing page will be have be resized to
            have uniform resolution.</para>
        <para>The LEADTOOLS C# and VB .NET Main OCR demos (Examples\DotNet\CS\OcrMainDemo and Examples\DotNet\VB\OcrMainDemo) have an option in the page menu
            to toggle between showing the current (default) or  processing image of each page.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrPageType" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrPageType" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)">SetRasterImage</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <objectivec>
        <pre>- (LTRasterImage*)getRasterImage:(LTOcrPageType)pageType;</pre>
      </objectivec>
      <java>
        <pre>public RasterImage getRasterImage(OcrPageType pageType)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)">
      <summary>Updates the page image data from a <see cref="T:Leadtools.RasterImage" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data that will be copied into this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</param>
      <remarks>
        <para>Once you add a page to an OCR document, the image data used to create the page is copied and stored inside the engine even if the original object used to create the page
            was a <see cref="T:Leadtools.RasterImage" /> object. To get a <see cref="T:Leadtools.RasterImage" /> that represents this page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object that the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method returns contains a copy of the page image data. Any modifications you make to the
            <see cref="T:Leadtools.RasterImage" /> object will not affect the page. To update the page image data, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />. Since the <see cref="T:Leadtools.RasterImage" /> object
            is a copy, you must dispose it by calling its <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method once you are done using it.</para>
        <para>Once you obtain a <see cref="T:Leadtools.RasterImage" /> object for this page, you can use it with other parts of LEADTOOLS, for example, you can set it in the <see cref="T:Leadtools.Controls.ImageViewer" /> or
            <see cref="T:Leadtools.Controls.RasterPictureBox" /> controls for viewing inside your Windows Forms-based application. You can also perform your own image processing on the page as follows:</para>
        <para>
          <code>
            // Flip the 2nd page added to the OCR document
            // Get the page (index is zero-based)
            IOcrPage page = ocrDocument.Pages[1];
            // Get a RasterImage object that represents this page
            Leadtools.RasterImage image = page.GetRasterImage();
            // Flip it vertically
            Leadtools.ImageProcessing.FlipCommand flip = new Leadtools.ImageProcessing.FlipCommand();
            flip.Horizontal = false;
            flip.Run(image);
            // Set it back into the page
            page.SetRasterImage(image);
            // Dispose the image
            image.Dispose();
            </code>
        </para>
        <para>You can also get a <see cref="T:Leadtools.RasterImage" /> object representation of a page with the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">IOcrPageCollection.ExportPage</see> method.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object returned from the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method will contain one page only. To get a multi-page <see cref="T:Leadtools.RasterImage" /> object containing the image data
            of all or a specific range of the pages added to the OCR document, you can either create a <see cref="T:Leadtools.RasterImage" /> from the first then loop through the pages of the document and
            add the returned <see cref="T:Leadtools.RasterImage" /> objects to the first object with the <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">RasterImage.AddPage</see> method. Or you can use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">IOcrPageCollection.ExportPages</see> methods.</para>
      </remarks>
      <keywords>OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">GetRasterImage</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (BOOL)setRasterImage:(LTRasterImage*)image
                 error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public void setRasterImage(RasterImage image)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.CreateThumbnail(System.Int32,System.Int32)">
      <summary>Creates a thumbnail image of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="thumbnailWidth">The desired maximum width of the thumbnail image in pixels.</param>
      <param name="thumbnailHeight">The desired maximum height of the thumbnail image in pixels.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that contains a thumbnail of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>The thumbnail image returned from this image always contain the correct aspect ratio. The width and height of the thumbnail is guaranteed to be at least
            <paramref name="thumbnailWidth" /> by <paramref name="thumbnailHeight" /> in size but never exceeding that. The only time you get a thumbnail that is exactly
            <paramref name="thumbnailWidth" /> by <paramref name="thumbnailHeight" /> pixels is when this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is a perfect square.</para>
        <para>The thumbnail image returned from this method will always contain 24 bits per pixel for best possible quality.</para>
        <para>One use of the thumbnail image of a page is if your application is a Windows Forms-based application containing the <see cref="T:Leadtools.Controls.ImageViewer" /> control. You can use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.CreateThumbnail(System.Int32,System.Int32)" /> to obtain thumbnails of the pages in the engine and use them as items to the <see cref="T:Leadtools.Controls.ImageViewer" />. For an example, refer to
            the C# or VB.NET Main OCR Demo that ships with LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">GetRasterImage</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (LTRasterImage*)createThumbnail:(int)thumbnailWidth
                  thumbnailHeight:(int)thumbnailHeight;            </pre>
      </objectivec>
      <java>
        <pre>
public RasterImage createThumbnail(int thumbnailWidth,
                                   int thumbnailHeight)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Performs automatic image processing clean up on the image to enhance the quality of the page before beginning recognition. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>Use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on a page, you can improve the image
            quality of draft mode faxes.</para>
        <para>Use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>Call this method prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>This method will call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" /> to determine whether the page needs
            processing, if the page does, this method will internally deskews, rotates or inverts the image accordingly.</para>
        <para>If the image is skewed, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" /> will return the angle needed to deskew the image, if you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
            on the page, all subsequent calls to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" /> will return 0 since the image is no longer skewed. Same with
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to obtain the accumulative pre-processing values applied to this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
        <para>This method works on both the current and processing version of the image. For example, if you add a page that is skewed and call
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> width <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Deskew</see>, then obtain either
            the current or processing images with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)" />, you will get two raster image objects that are both rotated (deskewed).</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Public Sub AutoPreprocessExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Clean.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Clean.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Auto-preprocess it
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, Nothing)
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Invert, Nothing)
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Rotate, Nothing)

               ' Recognize it and save it as PDF
               ocrPage.Recognize(Nothing)
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      public void AutoPreprocessExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Clean.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Clean.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Auto-preprocess it
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Invert, null);
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Rotate, null);

               // Recognize it and save it as PDF
               ocrPage.Recognize(null);
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.ImageProcessing;

      [TestMethod]
      public async Task AutoPreprocessExample()
      {
         string tifFileName = @"Assets\Clean.tif";
         string pdfFileName = "Clean.pdf";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Auto-preprocess it
         ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);
         ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Invert, null);
         ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Rotate, null);

         // Recognize it and save it as PDF
         ocrPage.Recognize(null);
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrPage.AutoPreprocess-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (void)autoPreprocess:(LTOcrAutoPreprocessPageCommand)command
                target:(id)target
              selector:(SEL)selector;            </pre>
      </objectivec>
      <java>
        <pre>
public void autoPreprocess(OcrAutoPreprocessPageCommand command,
                           OcrProgressListener callback)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">
      <summary>Gets the angle of the skew of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>The angle of the skew of this image expressed in tenth of degrees.</returns>
      <remarks>
        <para>If the page is not skewed, this method will return 0</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> with <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Deskew</see> to automatically deskew the page image prior to
            calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This could enhance the quality of the image before starting its recognition.</para>
        <para>If the image is skewed, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" /> will return the angle needed to deskew the image, if you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
            on the page, all subsequent calls to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" /> will return 0 since the image is no longer skewed. Hence, you must use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" /> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to obtain the accumulative pre-processing values applied to this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (int)getDeskewAngle:(NSError**)outError;</pre>
      </objectivec>
      <java>
        <pre>public int getDeskewAngle()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted">
      <summary>Gets a value that indicate whether this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is inverted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is inverted; otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>You can use this method to detect if the page is inverted (has white text over black background). This method will work on the processing
            version of the image inside the page (<see cref="T:Leadtools.Forms.Ocr.OcrPageType">OcrPageType.Processing</see>).</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> with <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Invert</see> to automatically
            invert the page image prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This could enhance the quality of the image
            before starting its recognition.</para>
        <para>If the image is inverted, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" /> will return <strong>true</strong>, if you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
            on the page, all subsequent calls to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" /> will return <strong>false</strong> since the image is no inverted. Hence, you must use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" /> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to obtain the accumulative pre-processing values applied to this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (BOOL)isInverted;</pre>
      </objectivec>
      <java>
        <pre>public boolean isInverted()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">
      <summary>Gets the angle of the rotation of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>The angle of the rotation of this image in degrees.</returns>
      <remarks>
        <para>This method will return one of the following values:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>0</term>
            <description>The image is not rotated.</description>
          </item>
          <item>
            <term>90</term>
            <description>The image is rotated 90 degrees.</description>
          </item>
          <item>
            <term>180</term>
            <description>The image is rotated 180 degrees (upside down).</description>
          </item>
          <item>
            <term>270</term>
            <description>The image is rotated 270 degrees.</description>
          </item>
        </list>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> with <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Rotate</see> to automatically rotate the page image
            prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This could enhance the quality of the image before starting its recognition.</para>
        <para>If the image is rotated, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" /> will return the angle required to fix the orientation of the page, if you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
            on the page, all subsequent calls to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" /> will return 0 since the image is no rotated. Hence, you must use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" /> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to obtain the accumulative pre-processing values applied to this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (int)getRotateAngle:(NSError**)outError;</pre>
      </objectivec>
      <java>
        <pre>public int getRotateAngle()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">
      <summary>Gets the bounding rectangle of a zone in pixels <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneIndex">The zero-based index of the zone.</param>
      <returns>A <see cref="T:Leadtools.LeadRect" /> object that contains the zone bounding rectangle in pixels.</returns>
      <remarks>
            This method returns the zone bounding rectangle in pixels based on the zone's <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> value and this image DPI (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />). The rectangle value returned is always in top-left coordinates.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>- (LeadRect)getZoneBoundsInPixels:(int)zoneIndex;</pre>
      </objectivec>
      <java>
        <pre>public LeadRect getZoneBoundsInPixels(int zoneIndex)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">
      <summary>Gets the zero-based index of the zone under a certain point. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="point">The test point in logical coordinates.</param>
      <returns>The zero-based index of the zone under <paramref name="point" />, if no zone is under the test point, this method will return -1.</returns>
      <remarks>
        <para>You can use this method to check whether a zone (either added manually or automatically) is under a given test point. For example, if you have a Windows Forms based application
            with the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in a <see cref="T:Leadtools.Controls.ImageViewer" /> control. You might want to draw the zones on the surface of the viewer. For this, you can use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)" /> methods. If you want to allow the user to click with the mouse on the viewer to select and de-select zones, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)" />.</para>
      </remarks>
      <example>
        <code lang="VB">         Imports Leadtools
         Imports Leadtools.Codecs
         Imports Leadtools.Forms.Ocr
         Imports Leadtools.Forms
         Imports Leadtools.Forms.DocumentWriters
         Imports Leadtools.WinForms
         Imports Leadtools.Drawing

         ' Assume Form1 is a Windows.Forms form in your application
         ' The OCR engine we are using
         Private _ocrEngine As IOcrEngine
         ' The OCR page we are using
         Private _ocrPage As IOcrPage

         ' Our raster image viewer instance
         Private _viewer As RasterImageViewer

         Public Sub New()
            InitializeComponent()

            ' Initialize the raster image viewer
            ' Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
            ' independent on all of those extra options
            _viewer = New RasterImageViewer()
            _viewer.Dock = DockStyle.Fill
            _viewer.BackColor = SystemColors.AppWorkspace
            _viewer.UseDpi = True
            _viewer.BorderPadding.All = 8
            _viewer.FrameSize = New SizeF(1, 1)
            _viewer.FrameShadowSize = New SizeF(2, 2)
            _viewer.SizeMode = RasterPaintSizeMode.Normal
            _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center
            _viewer.VerticalAlignMode = RasterPaintAlignMode.Center
            _viewer.AutoDisposeImages = True
            _viewer.InteractiveMode = RasterViewerInteractiveMode.None

            ' Turn on scale to gray painting in the viewer
            Dim props As RasterPaintProperties = _viewer.PaintProperties
            props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
            _viewer.PaintProperties = props

            ' Subscribe to the viewer events we need
            AddHandler _viewer.KeyDown, AddressOf _viewer_KeyDown
            AddHandler _viewer.MouseDown, AddressOf _viewer_MouseDown
            AddHandler _viewer.PostImagePaint, AddressOf _viewer_PostImagePaint

            Controls.Add(_viewer)
            _viewer.BringToFront()

            ' Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            _ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Load an image into the OCR document
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            _ocrPage = _ocrEngine.CreatePage(_ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose)

            ' Do auto zone
            _ocrPage.AutoZone(Nothing)

            ' AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            ' to a unique value. We will use the name in the paint code later
            Dim ocrZones As IOcrZoneCollection = _ocrPage.Zones
            For i As Integer = 0 To ocrZones.Count - 1
               Dim ocrZone As OcrZone = ocrZones(i)

               ' Construct the name from the ID
               ocrZone.Name = String.Format("Zone {0}", ocrZone.Id)

               ocrZones(i) = ocrZone
            Next

            ' Show the same image in the viewer
            _viewer.Image = _ocrPage.GetRasterImage()

            ' Note, the image we got from GetRasterImage is a copy of the image in the engine
            ' Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
            ' when the viewer is disposed at application termination

            Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse"
         End Sub

         Protected Overrides Sub OnFormClosed(e As FormClosedEventArgs)
            ' Dispose the page
            _ocrPage.Dispose()

            ' Shutdown the OCR engine
            _ocrEngine.Dispose()

            MyBase.OnFormClosed(e)
         End Sub

         Private Sub _viewer_KeyDown(sender As Object, e As KeyEventArgs)
            Const zoomRatio As Double = 1.2
            Dim scaleFactor As Double = _viewer.ScaleFactor

            Select Case e.KeyCode
               Case Keys.Add, Keys.Oemplus
                  ' Zoon in
                  scaleFactor *= zoomRatio
                  e.Handled = True
                  Exit Select

               Case Keys.Subtract, Keys.OemMinus
                  ' Zone out
                  scaleFactor /= zoomRatio
                  e.Handled = True
                  Exit Select

               Case Keys.Enter
                  scaleFactor = 1
                  e.Handled = True
                  Exit Select
            End Select

            Const minimumScaleFactor As Double = 0.05
            Const maximumScaleFactor As Double = 11

            scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor))

            ' Check if scale factor has changed
            If scaleFactor &lt;&gt; _viewer.ScaleFactor Then
               _viewer.BeginUpdate()

               ' Yes, zoom keeping the center of the image

               ' Get what you see in physical coordinates
               Dim rc As Rectangle = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle)
               ' Get the center of what you see in physical coordinates
               Dim center As New PointF(rc.Left + rc.Width \ 2, rc.Top + rc.Height \ 2)
               Dim t As New Transformer(_viewer.Transform)
               ' Get the center of what you see in logical coordinates
               center = t.PointToLogical(center)

               _viewer.ScaleFactor = scaleFactor

               ' Bring the original center into the view center
               t = New Transformer(_viewer.Transform)
               ' Get the center of what you saw before the zoom in physical coordinates
               center = t.PointToPhysical(center)
               ' Bring the old center into the center of the view
               _viewer.CenterAtPoint(Point.Round(center))

               _viewer.EndUpdate()
            End If
         End Sub

         Private Sub _viewer_MouseDown(sender As Object, e As MouseEventArgs)
            ' Perform hit-testing on the zones
            If _ocrEngine IsNot Nothing AndAlso _ocrEngine.IsStarted AndAlso _ocrPage IsNot Nothing AndAlso e.Button = MouseButtons.Left Then
               ' Get the transform of the viewer
               ' Use the transform that takes the DPI into consideration since we turned that on
               Using matrix As Matrix = _viewer.GetTransformWithDpi()
                  Dim t As New Transformer(matrix)

                  ' Convert the mouse click coordinates from physical (viewer) to logical (image)
                  Dim point As New PointF(e.X, e.Y)
                  point = t.PointToLogical(point)

                  ' Hit test the zones
                  ' An alternitave to calling HitTestZone is to loop through all the zones
                  ' and get the value of .Bounds in pixels, then check if the point is inside
                  ' the boundaries.
                  Dim lPoint As New LeadPoint(CInt(Math.Truncate(point.X)), CInt(Math.Truncate(point.Y)))
                  Dim zoneIndex As Integer = _ocrPage.HitTestZone(New LogicalPoint(lPoint))
                  If zoneIndex &lt;&gt; -1 Then
                     ' We hit a zone, loop through all the zones, unselect all but the hit tested zone
                     For index As Integer = 0 To _ocrPage.Zones.Count - 1
                        ' Since OcrZone is a structure, we cannot simply do
                        ' ocrZone.Zones[index].Name = value
                        ' We have to get a copy of the structure, modify it and set it back

                        Dim ocrZone As OcrZone = _ocrPage.Zones(index)

                        If index &lt;&gt; zoneIndex Then
                           ocrZone.Name = Nothing
                        Else
                           ocrZone.Name = "Selected"
                        End If

                        _ocrPage.Zones(index) = ocrZone
                     Next

                     ' Re-paint the viewer to show the new zones
                     _viewer.Invalidate()
                  End If
               End Using
            End If
         End Sub

         Private Sub _viewer_PostImagePaint(sender As Object, e As PaintEventArgs)
            ' Draw the zones on the viewer in their correct location
            If _ocrEngine IsNot Nothing AndAlso _ocrEngine.IsStarted AndAlso _ocrPage IsNot Nothing Then
               ' Get the transform of the viewer
               ' Use the transform that takes the DPI into consideration since we turned that on
               Using matrix As Matrix = _viewer.GetTransformWithDpi()
                  Dim t As New Transformer(matrix)

                  Dim normalPen As New Pen(Color.Blue, 1)
                  Dim selectedPen As New Pen(Color.Red, 2)
                  selectedPen.DashStyle = DashStyle.Dash

                  For Each ocrZone As OcrZone In _ocrPage.Zones
                     ' Get the zone bounds in pixels
                     ' You can also use _ocrPage.GetZoneBoundsInPixels here
                     Dim ltzoneBounds As LeadRect = ocrZone.Bounds.ToRectangle(_ocrPage.DpiX, _ocrPage.DpiY)
                     Dim zoneBounds As New RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height)

                     ' This rectangle is in image (logical) coordinates with top-left view perspective
                     ' Convert to the physical coordinates of the viewer
                     zoneBounds = t.RectangleToPhysical(zoneBounds)

                     ' Now draw this zone on the viewer surface
                     If ocrZone.Name = "Selected" Then
                        e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                     Else
                        e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                     End If

                     ' Draw the zone name on the left hand corner of the zone
                     ' Note, in a real application you might want to have an option to show/hide the zone names (labels)
                     Dim labelSize As SizeF = e.Graphics.MeasureString(ocrZone.Name, Font)
                     Dim labelRectangle As New RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height)
                     e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle)
                     e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y)
                  Next
               End Using
            End If
         End Sub

         Public NotInheritable Class LEAD_VARS
         Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
         Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
         End Class
</code>
        <code lang="CS">         using Leadtools;
         using Leadtools.Codecs;
         using Leadtools.Forms.Ocr;
         using Leadtools.Forms;
         using Leadtools.Forms.DocumentWriters;
         using Leadtools.WinForms;
         using Leadtools.Drawing;

         // Assume Form1 is a Windows.Forms form in your application
         // The OCR engine we are using
         private IOcrEngine _ocrEngine;
         // The OCR page we are using
         private IOcrPage _ocrPage;

         // Our raster image viewer instance
         private RasterImageViewer _viewer;

         public Form1()
         {
            InitializeComponent();

            // Initialize the raster image viewer
            // Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
            // independent on all of those extra options
            _viewer = new RasterImageViewer();
            _viewer.Dock = DockStyle.Fill;
            _viewer.BackColor = SystemColors.AppWorkspace;
            _viewer.UseDpi = true;
            _viewer.BorderPadding.All = 8;
            _viewer.FrameSize = new SizeF(1, 1);
            _viewer.FrameShadowSize = new SizeF(2, 2);
            _viewer.SizeMode = RasterPaintSizeMode.Normal;
            _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center;
            _viewer.VerticalAlignMode = RasterPaintAlignMode.Center;
            _viewer.AutoDisposeImages = true;
            _viewer.InteractiveMode = RasterViewerInteractiveMode.None;

            // Turn on scale to gray painting in the viewer
            RasterPaintProperties props = _viewer.PaintProperties;
            props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
            _viewer.PaintProperties = props;

            // Subscribe to the viewer events we need
            _viewer.KeyDown += new KeyEventHandler(_viewer_KeyDown);
            _viewer.MouseDown += new MouseEventHandler(_viewer_MouseDown);
            _viewer.PostImagePaint += new PaintEventHandler(_viewer_PostImagePaint);

            Controls.Add(_viewer);
            _viewer.BringToFront();

            // Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            _ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Load an image into the OCR document
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            _ocrPage = _ocrEngine.CreatePage(_ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose);

            // Do auto zone
            _ocrPage.AutoZone(null);

            // AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            // to a unique value. We will use the name in the paint code later
            IOcrZoneCollection ocrZones = _ocrPage.Zones;
            for (int i = 0; i &lt; ocrZones.Count; i++)
            {
               OcrZone ocrZone = ocrZones[i];

               // Construct the name from the ID
               ocrZone.Name = string.Format("Zone {0}", ocrZone.Id);

               ocrZones[i] = ocrZone;
            }

            // Show the same image in the viewer
            _viewer.Image = _ocrPage.GetRasterImage();

            // Note, the image we got from GetRasterImage is a copy of the image in the engine
            // Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
            // when the viewer is disposed at application termination

            Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse";
         }

         protected override void OnFormClosed(FormClosedEventArgs e)
         {
            // Dispose the page
            _ocrPage.Dispose();

            // Shutdown the OCR engine
            _ocrEngine.Dispose();

            base.OnFormClosed(e);
         }

         private void _viewer_KeyDown(object sender, KeyEventArgs e)
         {
            const double zoomRatio = 1.2;
            double scaleFactor = _viewer.ScaleFactor;

            switch (e.KeyCode)
            {
               case Keys.Add:
               case Keys.Oemplus:
                  // Zoon in
                  scaleFactor *= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Subtract:
               case Keys.OemMinus:
                  // Zone out
                  scaleFactor /= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Enter:
                  scaleFactor = 1;
                  e.Handled = true;
                  break;
            }

            const double minimumScaleFactor = 0.05;
            const double maximumScaleFactor = 11;

            scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor));

            // Check if scale factor has changed
            if (scaleFactor != _viewer.ScaleFactor)
            {
               _viewer.BeginUpdate();

               // Yes, zoom keeping the center of the image

               // Get what you see in physical coordinates
               Rectangle rc = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle);
               // Get the center of what you see in physical coordinates
               PointF center = new PointF(rc.Left + rc.Width / 2, rc.Top + rc.Height / 2);
               Transformer t = new Transformer(_viewer.Transform);
               // Get the center of what you see in logical coordinates
               center = t.PointToLogical(center);

               _viewer.ScaleFactor = scaleFactor;

               // Bring the original center into the view center
               t = new Transformer(_viewer.Transform);
               // Get the center of what you saw before the zoom in physical coordinates
               center = t.PointToPhysical(center);
               // Bring the old center into the center of the view
               _viewer.CenterAtPoint(Point.Round(center));

               _viewer.EndUpdate();
            }
         }

         private void _viewer_MouseDown(object sender, MouseEventArgs e)
         {
            // Perform hit-testing on the zones
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrPage != null &amp;&amp; e.Button == MouseButtons.Left)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using (Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  // Convert the mouse click coordinates from physical (viewer) to logical (image)
                  PointF point = new PointF(e.X, e.Y);
                  point = t.PointToLogical(point);

                  // Hit test the zones
                  // An alternitave to calling HitTestZone is to loop through all the zones
                  // and get the value of .Bounds in pixels, then check if the point is inside
                  // the boundaries.
                  LeadPoint lPoint = new LeadPoint((int)point.X, (int)point.Y);
                  int zoneIndex = _ocrPage.HitTestZone(new LogicalPoint(lPoint));
                  if (zoneIndex != -1)
                  {
                     // We hit a zone, loop through all the zones, unselect all but the hit tested zone
                     for (int index = 0; index &lt; _ocrPage.Zones.Count; index++)
                     {
                        // Since OcrZone is a structure, we cannot simply do
                        // ocrZone.Zones[index].Name = value
                        // We have to get a copy of the structure, modify it and set it back

                        OcrZone ocrZone = _ocrPage.Zones[index];

                        if (index != zoneIndex)
                           ocrZone.Name = null;
                        else
                           ocrZone.Name = "Selected";

                        _ocrPage.Zones[index] = ocrZone;
                     }

                     // Re-paint the viewer to show the new zones
                     _viewer.Invalidate();
                  }
               }
            }
         }

         private void _viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // Draw the zones on the viewer in their correct location
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrPage != null)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using (Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  Pen normalPen = new Pen(Color.Blue, 1);
                  Pen selectedPen = new Pen(Color.Red, 2);
                  selectedPen.DashStyle = DashStyle.Dash;

                  foreach (OcrZone ocrZone in _ocrPage.Zones)
                  {
                     // Get the zone bounds in pixels
                     // You can also use _ocrPage.GetZoneBoundsInPixels here
                     LeadRect ltzoneBounds = ocrZone.Bounds.ToRectangle(_ocrPage.DpiX, _ocrPage.DpiY);
                     RectangleF zoneBounds = new RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height);

                     // This rectangle is in image (logical) coordinates with top-left view perspective
                     // Convert to the physical coordinates of the viewer
                     zoneBounds = t.RectangleToPhysical(zoneBounds);

                     // Now draw this zone on the viewer surface
                     if (ocrZone.Name == "Selected")
                        e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);
                     else
                        e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);

                     // Draw the zone name on the left hand corner of the zone
                     // Note, in a real application you might want to have an option to show/hide the zone names (labels)
                     SizeF labelSize = e.Graphics.MeasureString(ocrZone.Name, Font);
                     RectangleF labelRectangle = new RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height);
                     e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle);
                     e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y);
                  }
               }
            }
         }

         static class LEAD_VARS
         {
         public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
         public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
         }
</code>
        <code lang="CSWinRT">         using Leadtools;
         using Leadtools.Codecs;
         using Leadtools.Controls;
         using Leadtools.Forms.Ocr;
         using Leadtools.Forms;
         using Leadtools.Forms.DocumentWriters;
         using Leadtools.ImageProcessing;

         // Assume MainPage is a Windows.UI.Xaml.Controls.Page in your application
         // Assume this is your main page canvas
         private Canvas _canvas = null;

         // The OCR engine we are using
         private IOcrEngine _ocrEngine;
         // The document we are using
         private IOcrDocument _ocrDocument;

         // Our raster image viewer instance
         private RasterImageViewer _viewer = null;

         public MainPage()
         {
            InitializeComponent();

            _viewer.ImageHorizontalAlignment = ControlAlignment.Center;
            _viewer.ImageVerticalAlignment = ControlAlignment.Center;
            _viewer.Background = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 255, 255));
            _viewer.AutoDisposeImages = true;

            // Subscribe to the viewer events we need
            _viewer.PointerPressed += _viewer_PointerPressed;
            _viewer.TransformChanged += _viewer_TransformChanged;
            _viewer.Loaded += _viewer_Loaded;

            _canvas.Children.Add(_viewer);
         }

         private async void _viewer_Loaded(object sender, RoutedEventArgs e)
         {
            // Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            _ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

            // Create the OCR document
            _ocrDocument = _ocrEngine.DocumentManager.CreateDocument();

            // Load an image into the OCR document
            IOcrPage ocrPage = null;
            string tifFileName = @"Assets\Ocr1.tif";
            using (RasterCodecs codecs = new RasterCodecs())
            {
               StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
               using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
                  ocrPage = _ocrDocument.Pages.AddPage(image, null);
            }

            // Do auto zone
            ocrPage.AutoZone(null);

            // AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            // to a unique value. We will use the name in the paint code later
            IOcrZoneCollection ocrZones = ocrPage.Zones;
            for (int i = 0; i &lt; ocrZones.Count; i++)
            {
               OcrZone ocrZone = ocrZones[i];

               // Construct the name from the ID
               ocrZone.Name = string.Format("Zone {0}", ocrZone.Id);

               ocrZones[i] = ocrZone;
            }

            // Show the same image in the viewer
            _viewer.Image = ocrPage.GetRasterImage();

            // Note, the image we got from GetRasterImage is a copy of the image in the engine
            // Since we set the AutoDisposeImages of the viewer to "true", the image will be disposed
            // when the viewer is disposed at application termination
            this.Name = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse";
         }

         protected override void OnNavigatedFrom(NavigationEventArgs e)
         {
            // Shutdown the OCR engine
            _ocrEngine.Shutdown();

            base.OnNavigatedFrom(e);
         }

         private void _viewer_PointerPressed(object sender, PointerRoutedEventArgs e)
         {
            // Perform hit-testing on the zones
            if(_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0)
            {
               PointerPoint pp = e.GetCurrentPoint(_viewer);
               LeadPointD leadPointD = LeadPointDHelper.Create(pp.Position.X, pp.Position.Y);
               LeadMatrix matrix = new LeadMatrix(_viewer.Transform.M11, _viewer.Transform.M12,
                  _viewer.Transform.M21, _viewer.Transform.M22,
                  _viewer.Transform.OffsetX, _viewer.Transform.OffsetY);

               leadPointD = matrix.TransformPoint(leadPointD);

               // Hit test the zones
               // An alternitave to calling HitTestZone is to loop through all the zones
               // and get the value of .Bounds in pixels, then check if the point is inside
               // the boundaries.
               IOcrPage ocrPage = _ocrDocument.Pages[0];

               LeadPoint lPoint = LeadPointHelper.Create((int)leadPointD.X, (int)leadPointD.Y);
               int zoneIndex = ocrPage.HitTestZone(lPoint);
               if(zoneIndex != -1)
               {
                  // We hit a zone, loop through all the zones, unselect all but the hit tested zone
                  for(int index = 0; index &lt; ocrPage.Zones.Count; index++)
                  {
                     // Since OcrZone is a structure, we cannot simply do
                     // ocrZone.Zones[index].Selected = value
                     // We have to get a copy of the structure, modify it and set it back
                     OcrZone ocrZone = ocrPage.Zones[index];

                     if(index != zoneIndex)
                        ocrZone.Selected = false;
                     else
                        ocrZone.Selected = true;

                     ocrPage.Zones[index] = ocrZone;
                  }

                  // Re-paint the viewer to show the new zones
                  _viewer.Invalidate();
               }
            }
         }

         void _viewer_TransformChanged(object sender, EventArgs e)
         {
            // Draw the zones on the viewer in their correct location
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0)
            {
               IOcrPage ocrPage = _ocrDocument.Pages[0];

               foreach (OcrZone ocrZone in ocrPage.Zones)
               {
                  // Get the zone bounds
                  LeadRectD ltzoneBounds = new LeadRectD
                  {
                     X = ocrZone.Bounds.X,
                     Y = ocrZone.Bounds.Y,
                     Height = ocrZone.Bounds.Height,
                     Width = ocrZone.Bounds.Width,
                  };

                  LeadMatrix matrix = new LeadMatrix(_viewer.Transform.M11, _viewer.Transform.M12,
                     _viewer.Transform.M21, _viewer.Transform.M22,
                     _viewer.Transform.OffsetX, _viewer.Transform.OffsetY);

                  ltzoneBounds = matrix.TransformRect(ltzoneBounds);

                  SolidColorBrush normalBrush = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 0, 0));
                  SolidColorBrush selectedBrush = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 0, 0));

                  Rectangle rect = new Rectangle
                  {
                     Width = ltzoneBounds.Width,
                     Height = ltzoneBounds.Height,
                     Stroke = (ocrZone.Selected) ? selectedBrush : normalBrush,
                     StrokeThickness = (ocrZone.Selected) ? 2 : 1
                  };

                  _canvas.Children.Add(rect);
                  Canvas.SetLeft(rect, ltzoneBounds.X);
                  Canvas.SetTop(rect, ltzoneBounds.Y);

                  // Add the zone name TextBlock on the left hand corner of the zone
                  // Note, in a real application you might want to have an option to show/hide the zone names (labels)
                  TextBlock textBlock = new TextBlock();
                  textBlock.Name = ocrZone.Name;
                  textBlock.InvalidateMeasure();
                  textBlock.RenderTransformOrigin = new Point(ltzoneBounds.X, ltzoneBounds.Y - textBlock.Height);
               }
            }
         }</code>
        <!--IOcrPage.HitTestZone-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (int)hitTestZone:(LeadPoint)point;</pre>
      </objectivec>
      <java>
        <pre>public int hitTestZone(LeadPoint point)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone_WinRT(Leadtools.LeadPoint)">
      <summary>
            Gets the zero-based index of the zone under a certain point.
            </summary>
      <param name="point">The test point in pixels.</param>
      <returns>The zero-based index of the zone under <paramref name="point" />, if no zone is under the test point, this method will return -1.</returns>
      <remarks>
        <para>You can use this method to check whether a zone (either added manually or automatically) is under a given test point. For example, if you have a Windows Forms based application
            with the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in a <see cref="T:Leadtools.Controls.ImageViewer" /> control. You might want to draw the zones on the surface of the viewer. For this, you can use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)" /> methods. If you want to allow the user to click with the mouse on the viewer to select and de-select zones, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)" />.</para>
      </remarks>
      <example>
        <code lang="VB">         Imports Leadtools
         Imports Leadtools.Codecs
         Imports Leadtools.Forms.Ocr
         Imports Leadtools.Forms
         Imports Leadtools.Forms.DocumentWriters
         Imports Leadtools.WinForms
         Imports Leadtools.Drawing

         ' Assume Form1 is a Windows.Forms form in your application
         ' The OCR engine we are using
         Private _ocrEngine As IOcrEngine
         ' The OCR page we are using
         Private _ocrPage As IOcrPage

         ' Our raster image viewer instance
         Private _viewer As RasterImageViewer

         Public Sub New()
            InitializeComponent()

            ' Initialize the raster image viewer
            ' Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
            ' independent on all of those extra options
            _viewer = New RasterImageViewer()
            _viewer.Dock = DockStyle.Fill
            _viewer.BackColor = SystemColors.AppWorkspace
            _viewer.UseDpi = True
            _viewer.BorderPadding.All = 8
            _viewer.FrameSize = New SizeF(1, 1)
            _viewer.FrameShadowSize = New SizeF(2, 2)
            _viewer.SizeMode = RasterPaintSizeMode.Normal
            _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center
            _viewer.VerticalAlignMode = RasterPaintAlignMode.Center
            _viewer.AutoDisposeImages = True
            _viewer.InteractiveMode = RasterViewerInteractiveMode.None

            ' Turn on scale to gray painting in the viewer
            Dim props As RasterPaintProperties = _viewer.PaintProperties
            props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
            _viewer.PaintProperties = props

            ' Subscribe to the viewer events we need
            AddHandler _viewer.KeyDown, AddressOf _viewer_KeyDown
            AddHandler _viewer.MouseDown, AddressOf _viewer_MouseDown
            AddHandler _viewer.PostImagePaint, AddressOf _viewer_PostImagePaint

            Controls.Add(_viewer)
            _viewer.BringToFront()

            ' Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            _ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Load an image into the OCR document
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            _ocrPage = _ocrEngine.CreatePage(_ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose)

            ' Do auto zone
            _ocrPage.AutoZone(Nothing)

            ' AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            ' to a unique value. We will use the name in the paint code later
            Dim ocrZones As IOcrZoneCollection = _ocrPage.Zones
            For i As Integer = 0 To ocrZones.Count - 1
               Dim ocrZone As OcrZone = ocrZones(i)

               ' Construct the name from the ID
               ocrZone.Name = String.Format("Zone {0}", ocrZone.Id)

               ocrZones(i) = ocrZone
            Next

            ' Show the same image in the viewer
            _viewer.Image = _ocrPage.GetRasterImage()

            ' Note, the image we got from GetRasterImage is a copy of the image in the engine
            ' Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
            ' when the viewer is disposed at application termination

            Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse"
         End Sub

         Protected Overrides Sub OnFormClosed(e As FormClosedEventArgs)
            ' Dispose the page
            _ocrPage.Dispose()

            ' Shutdown the OCR engine
            _ocrEngine.Dispose()

            MyBase.OnFormClosed(e)
         End Sub

         Private Sub _viewer_KeyDown(sender As Object, e As KeyEventArgs)
            Const zoomRatio As Double = 1.2
            Dim scaleFactor As Double = _viewer.ScaleFactor

            Select Case e.KeyCode
               Case Keys.Add, Keys.Oemplus
                  ' Zoon in
                  scaleFactor *= zoomRatio
                  e.Handled = True
                  Exit Select

               Case Keys.Subtract, Keys.OemMinus
                  ' Zone out
                  scaleFactor /= zoomRatio
                  e.Handled = True
                  Exit Select

               Case Keys.Enter
                  scaleFactor = 1
                  e.Handled = True
                  Exit Select
            End Select

            Const minimumScaleFactor As Double = 0.05
            Const maximumScaleFactor As Double = 11

            scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor))

            ' Check if scale factor has changed
            If scaleFactor &lt;&gt; _viewer.ScaleFactor Then
               _viewer.BeginUpdate()

               ' Yes, zoom keeping the center of the image

               ' Get what you see in physical coordinates
               Dim rc As Rectangle = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle)
               ' Get the center of what you see in physical coordinates
               Dim center As New PointF(rc.Left + rc.Width \ 2, rc.Top + rc.Height \ 2)
               Dim t As New Transformer(_viewer.Transform)
               ' Get the center of what you see in logical coordinates
               center = t.PointToLogical(center)

               _viewer.ScaleFactor = scaleFactor

               ' Bring the original center into the view center
               t = New Transformer(_viewer.Transform)
               ' Get the center of what you saw before the zoom in physical coordinates
               center = t.PointToPhysical(center)
               ' Bring the old center into the center of the view
               _viewer.CenterAtPoint(Point.Round(center))

               _viewer.EndUpdate()
            End If
         End Sub

         Private Sub _viewer_MouseDown(sender As Object, e As MouseEventArgs)
            ' Perform hit-testing on the zones
            If _ocrEngine IsNot Nothing AndAlso _ocrEngine.IsStarted AndAlso _ocrPage IsNot Nothing AndAlso e.Button = MouseButtons.Left Then
               ' Get the transform of the viewer
               ' Use the transform that takes the DPI into consideration since we turned that on
               Using matrix As Matrix = _viewer.GetTransformWithDpi()
                  Dim t As New Transformer(matrix)

                  ' Convert the mouse click coordinates from physical (viewer) to logical (image)
                  Dim point As New PointF(e.X, e.Y)
                  point = t.PointToLogical(point)

                  ' Hit test the zones
                  ' An alternitave to calling HitTestZone is to loop through all the zones
                  ' and get the value of .Bounds in pixels, then check if the point is inside
                  ' the boundaries.
                  Dim lPoint As New LeadPoint(CInt(Math.Truncate(point.X)), CInt(Math.Truncate(point.Y)))
                  Dim zoneIndex As Integer = _ocrPage.HitTestZone(New LogicalPoint(lPoint))
                  If zoneIndex &lt;&gt; -1 Then
                     ' We hit a zone, loop through all the zones, unselect all but the hit tested zone
                     For index As Integer = 0 To _ocrPage.Zones.Count - 1
                        ' Since OcrZone is a structure, we cannot simply do
                        ' ocrZone.Zones[index].Name = value
                        ' We have to get a copy of the structure, modify it and set it back

                        Dim ocrZone As OcrZone = _ocrPage.Zones(index)

                        If index &lt;&gt; zoneIndex Then
                           ocrZone.Name = Nothing
                        Else
                           ocrZone.Name = "Selected"
                        End If

                        _ocrPage.Zones(index) = ocrZone
                     Next

                     ' Re-paint the viewer to show the new zones
                     _viewer.Invalidate()
                  End If
               End Using
            End If
         End Sub

         Private Sub _viewer_PostImagePaint(sender As Object, e As PaintEventArgs)
            ' Draw the zones on the viewer in their correct location
            If _ocrEngine IsNot Nothing AndAlso _ocrEngine.IsStarted AndAlso _ocrPage IsNot Nothing Then
               ' Get the transform of the viewer
               ' Use the transform that takes the DPI into consideration since we turned that on
               Using matrix As Matrix = _viewer.GetTransformWithDpi()
                  Dim t As New Transformer(matrix)

                  Dim normalPen As New Pen(Color.Blue, 1)
                  Dim selectedPen As New Pen(Color.Red, 2)
                  selectedPen.DashStyle = DashStyle.Dash

                  For Each ocrZone As OcrZone In _ocrPage.Zones
                     ' Get the zone bounds in pixels
                     ' You can also use _ocrPage.GetZoneBoundsInPixels here
                     Dim ltzoneBounds As LeadRect = ocrZone.Bounds.ToRectangle(_ocrPage.DpiX, _ocrPage.DpiY)
                     Dim zoneBounds As New RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height)

                     ' This rectangle is in image (logical) coordinates with top-left view perspective
                     ' Convert to the physical coordinates of the viewer
                     zoneBounds = t.RectangleToPhysical(zoneBounds)

                     ' Now draw this zone on the viewer surface
                     If ocrZone.Name = "Selected" Then
                        e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                     Else
                        e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                     End If

                     ' Draw the zone name on the left hand corner of the zone
                     ' Note, in a real application you might want to have an option to show/hide the zone names (labels)
                     Dim labelSize As SizeF = e.Graphics.MeasureString(ocrZone.Name, Font)
                     Dim labelRectangle As New RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height)
                     e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle)
                     e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y)
                  Next
               End Using
            End If
         End Sub

         Public NotInheritable Class LEAD_VARS
         Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
         Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
         End Class
</code>
        <code lang="CS">         using Leadtools;
         using Leadtools.Codecs;
         using Leadtools.Forms.Ocr;
         using Leadtools.Forms;
         using Leadtools.Forms.DocumentWriters;
         using Leadtools.WinForms;
         using Leadtools.Drawing;

         // Assume Form1 is a Windows.Forms form in your application
         // The OCR engine we are using
         private IOcrEngine _ocrEngine;
         // The OCR page we are using
         private IOcrPage _ocrPage;

         // Our raster image viewer instance
         private RasterImageViewer _viewer;

         public Form1()
         {
            InitializeComponent();

            // Initialize the raster image viewer
            // Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
            // independent on all of those extra options
            _viewer = new RasterImageViewer();
            _viewer.Dock = DockStyle.Fill;
            _viewer.BackColor = SystemColors.AppWorkspace;
            _viewer.UseDpi = true;
            _viewer.BorderPadding.All = 8;
            _viewer.FrameSize = new SizeF(1, 1);
            _viewer.FrameShadowSize = new SizeF(2, 2);
            _viewer.SizeMode = RasterPaintSizeMode.Normal;
            _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center;
            _viewer.VerticalAlignMode = RasterPaintAlignMode.Center;
            _viewer.AutoDisposeImages = true;
            _viewer.InteractiveMode = RasterViewerInteractiveMode.None;

            // Turn on scale to gray painting in the viewer
            RasterPaintProperties props = _viewer.PaintProperties;
            props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
            _viewer.PaintProperties = props;

            // Subscribe to the viewer events we need
            _viewer.KeyDown += new KeyEventHandler(_viewer_KeyDown);
            _viewer.MouseDown += new MouseEventHandler(_viewer_MouseDown);
            _viewer.PostImagePaint += new PaintEventHandler(_viewer_PostImagePaint);

            Controls.Add(_viewer);
            _viewer.BringToFront();

            // Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            _ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Load an image into the OCR document
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            _ocrPage = _ocrEngine.CreatePage(_ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose);

            // Do auto zone
            _ocrPage.AutoZone(null);

            // AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            // to a unique value. We will use the name in the paint code later
            IOcrZoneCollection ocrZones = _ocrPage.Zones;
            for (int i = 0; i &lt; ocrZones.Count; i++)
            {
               OcrZone ocrZone = ocrZones[i];

               // Construct the name from the ID
               ocrZone.Name = string.Format("Zone {0}", ocrZone.Id);

               ocrZones[i] = ocrZone;
            }

            // Show the same image in the viewer
            _viewer.Image = _ocrPage.GetRasterImage();

            // Note, the image we got from GetRasterImage is a copy of the image in the engine
            // Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
            // when the viewer is disposed at application termination

            Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse";
         }

         protected override void OnFormClosed(FormClosedEventArgs e)
         {
            // Dispose the page
            _ocrPage.Dispose();

            // Shutdown the OCR engine
            _ocrEngine.Dispose();

            base.OnFormClosed(e);
         }

         private void _viewer_KeyDown(object sender, KeyEventArgs e)
         {
            const double zoomRatio = 1.2;
            double scaleFactor = _viewer.ScaleFactor;

            switch (e.KeyCode)
            {
               case Keys.Add:
               case Keys.Oemplus:
                  // Zoon in
                  scaleFactor *= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Subtract:
               case Keys.OemMinus:
                  // Zone out
                  scaleFactor /= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Enter:
                  scaleFactor = 1;
                  e.Handled = true;
                  break;
            }

            const double minimumScaleFactor = 0.05;
            const double maximumScaleFactor = 11;

            scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor));

            // Check if scale factor has changed
            if (scaleFactor != _viewer.ScaleFactor)
            {
               _viewer.BeginUpdate();

               // Yes, zoom keeping the center of the image

               // Get what you see in physical coordinates
               Rectangle rc = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle);
               // Get the center of what you see in physical coordinates
               PointF center = new PointF(rc.Left + rc.Width / 2, rc.Top + rc.Height / 2);
               Transformer t = new Transformer(_viewer.Transform);
               // Get the center of what you see in logical coordinates
               center = t.PointToLogical(center);

               _viewer.ScaleFactor = scaleFactor;

               // Bring the original center into the view center
               t = new Transformer(_viewer.Transform);
               // Get the center of what you saw before the zoom in physical coordinates
               center = t.PointToPhysical(center);
               // Bring the old center into the center of the view
               _viewer.CenterAtPoint(Point.Round(center));

               _viewer.EndUpdate();
            }
         }

         private void _viewer_MouseDown(object sender, MouseEventArgs e)
         {
            // Perform hit-testing on the zones
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrPage != null &amp;&amp; e.Button == MouseButtons.Left)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using (Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  // Convert the mouse click coordinates from physical (viewer) to logical (image)
                  PointF point = new PointF(e.X, e.Y);
                  point = t.PointToLogical(point);

                  // Hit test the zones
                  // An alternitave to calling HitTestZone is to loop through all the zones
                  // and get the value of .Bounds in pixels, then check if the point is inside
                  // the boundaries.
                  LeadPoint lPoint = new LeadPoint((int)point.X, (int)point.Y);
                  int zoneIndex = _ocrPage.HitTestZone(new LogicalPoint(lPoint));
                  if (zoneIndex != -1)
                  {
                     // We hit a zone, loop through all the zones, unselect all but the hit tested zone
                     for (int index = 0; index &lt; _ocrPage.Zones.Count; index++)
                     {
                        // Since OcrZone is a structure, we cannot simply do
                        // ocrZone.Zones[index].Name = value
                        // We have to get a copy of the structure, modify it and set it back

                        OcrZone ocrZone = _ocrPage.Zones[index];

                        if (index != zoneIndex)
                           ocrZone.Name = null;
                        else
                           ocrZone.Name = "Selected";

                        _ocrPage.Zones[index] = ocrZone;
                     }

                     // Re-paint the viewer to show the new zones
                     _viewer.Invalidate();
                  }
               }
            }
         }

         private void _viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // Draw the zones on the viewer in their correct location
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrPage != null)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using (Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  Pen normalPen = new Pen(Color.Blue, 1);
                  Pen selectedPen = new Pen(Color.Red, 2);
                  selectedPen.DashStyle = DashStyle.Dash;

                  foreach (OcrZone ocrZone in _ocrPage.Zones)
                  {
                     // Get the zone bounds in pixels
                     // You can also use _ocrPage.GetZoneBoundsInPixels here
                     LeadRect ltzoneBounds = ocrZone.Bounds.ToRectangle(_ocrPage.DpiX, _ocrPage.DpiY);
                     RectangleF zoneBounds = new RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height);

                     // This rectangle is in image (logical) coordinates with top-left view perspective
                     // Convert to the physical coordinates of the viewer
                     zoneBounds = t.RectangleToPhysical(zoneBounds);

                     // Now draw this zone on the viewer surface
                     if (ocrZone.Name == "Selected")
                        e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);
                     else
                        e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);

                     // Draw the zone name on the left hand corner of the zone
                     // Note, in a real application you might want to have an option to show/hide the zone names (labels)
                     SizeF labelSize = e.Graphics.MeasureString(ocrZone.Name, Font);
                     RectangleF labelRectangle = new RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height);
                     e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle);
                     e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y);
                  }
               }
            }
         }

         static class LEAD_VARS
         {
         public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
         public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
         }
</code>
        <code lang="CSWinRT">         using Leadtools;
         using Leadtools.Codecs;
         using Leadtools.Controls;
         using Leadtools.Forms.Ocr;
         using Leadtools.Forms;
         using Leadtools.Forms.DocumentWriters;
         using Leadtools.ImageProcessing;

         // Assume MainPage is a Windows.UI.Xaml.Controls.Page in your application
         // Assume this is your main page canvas
         private Canvas _canvas = null;

         // The OCR engine we are using
         private IOcrEngine _ocrEngine;
         // The document we are using
         private IOcrDocument _ocrDocument;

         // Our raster image viewer instance
         private RasterImageViewer _viewer = null;

         public MainPage()
         {
            InitializeComponent();

            _viewer.ImageHorizontalAlignment = ControlAlignment.Center;
            _viewer.ImageVerticalAlignment = ControlAlignment.Center;
            _viewer.Background = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 255, 255));
            _viewer.AutoDisposeImages = true;

            // Subscribe to the viewer events we need
            _viewer.PointerPressed += _viewer_PointerPressed;
            _viewer.TransformChanged += _viewer_TransformChanged;
            _viewer.Loaded += _viewer_Loaded;

            _canvas.Children.Add(_viewer);
         }

         private async void _viewer_Loaded(object sender, RoutedEventArgs e)
         {
            // Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
            _ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

            // Create the OCR document
            _ocrDocument = _ocrEngine.DocumentManager.CreateDocument();

            // Load an image into the OCR document
            IOcrPage ocrPage = null;
            string tifFileName = @"Assets\Ocr1.tif";
            using (RasterCodecs codecs = new RasterCodecs())
            {
               StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
               using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
                  ocrPage = _ocrDocument.Pages.AddPage(image, null);
            }

            // Do auto zone
            ocrPage.AutoZone(null);

            // AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            // to a unique value. We will use the name in the paint code later
            IOcrZoneCollection ocrZones = ocrPage.Zones;
            for (int i = 0; i &lt; ocrZones.Count; i++)
            {
               OcrZone ocrZone = ocrZones[i];

               // Construct the name from the ID
               ocrZone.Name = string.Format("Zone {0}", ocrZone.Id);

               ocrZones[i] = ocrZone;
            }

            // Show the same image in the viewer
            _viewer.Image = ocrPage.GetRasterImage();

            // Note, the image we got from GetRasterImage is a copy of the image in the engine
            // Since we set the AutoDisposeImages of the viewer to "true", the image will be disposed
            // when the viewer is disposed at application termination
            this.Name = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse";
         }

         protected override void OnNavigatedFrom(NavigationEventArgs e)
         {
            // Shutdown the OCR engine
            _ocrEngine.Shutdown();

            base.OnNavigatedFrom(e);
         }

         private void _viewer_PointerPressed(object sender, PointerRoutedEventArgs e)
         {
            // Perform hit-testing on the zones
            if(_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0)
            {
               PointerPoint pp = e.GetCurrentPoint(_viewer);
               LeadPointD leadPointD = LeadPointDHelper.Create(pp.Position.X, pp.Position.Y);
               LeadMatrix matrix = new LeadMatrix(_viewer.Transform.M11, _viewer.Transform.M12,
                  _viewer.Transform.M21, _viewer.Transform.M22,
                  _viewer.Transform.OffsetX, _viewer.Transform.OffsetY);

               leadPointD = matrix.TransformPoint(leadPointD);

               // Hit test the zones
               // An alternitave to calling HitTestZone is to loop through all the zones
               // and get the value of .Bounds in pixels, then check if the point is inside
               // the boundaries.
               IOcrPage ocrPage = _ocrDocument.Pages[0];

               LeadPoint lPoint = LeadPointHelper.Create((int)leadPointD.X, (int)leadPointD.Y);
               int zoneIndex = ocrPage.HitTestZone(lPoint);
               if(zoneIndex != -1)
               {
                  // We hit a zone, loop through all the zones, unselect all but the hit tested zone
                  for(int index = 0; index &lt; ocrPage.Zones.Count; index++)
                  {
                     // Since OcrZone is a structure, we cannot simply do
                     // ocrZone.Zones[index].Selected = value
                     // We have to get a copy of the structure, modify it and set it back
                     OcrZone ocrZone = ocrPage.Zones[index];

                     if(index != zoneIndex)
                        ocrZone.Selected = false;
                     else
                        ocrZone.Selected = true;

                     ocrPage.Zones[index] = ocrZone;
                  }

                  // Re-paint the viewer to show the new zones
                  _viewer.Invalidate();
               }
            }
         }

         void _viewer_TransformChanged(object sender, EventArgs e)
         {
            // Draw the zones on the viewer in their correct location
            if (_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0)
            {
               IOcrPage ocrPage = _ocrDocument.Pages[0];

               foreach (OcrZone ocrZone in ocrPage.Zones)
               {
                  // Get the zone bounds
                  LeadRectD ltzoneBounds = new LeadRectD
                  {
                     X = ocrZone.Bounds.X,
                     Y = ocrZone.Bounds.Y,
                     Height = ocrZone.Bounds.Height,
                     Width = ocrZone.Bounds.Width,
                  };

                  LeadMatrix matrix = new LeadMatrix(_viewer.Transform.M11, _viewer.Transform.M12,
                     _viewer.Transform.M21, _viewer.Transform.M22,
                     _viewer.Transform.OffsetX, _viewer.Transform.OffsetY);

                  ltzoneBounds = matrix.TransformRect(ltzoneBounds);

                  SolidColorBrush normalBrush = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 0, 0));
                  SolidColorBrush selectedBrush = new SolidColorBrush(Windows.UI.Color.FromArgb(255, 255, 0, 0));

                  Rectangle rect = new Rectangle
                  {
                     Width = ltzoneBounds.Width,
                     Height = ltzoneBounds.Height,
                     Stroke = (ocrZone.Selected) ? selectedBrush : normalBrush,
                     StrokeThickness = (ocrZone.Selected) ? 2 : 1
                  };

                  _canvas.Children.Add(rect);
                  Canvas.SetLeft(rect, ltzoneBounds.X);
                  Canvas.SetTop(rect, ltzoneBounds.Y);

                  // Add the zone name TextBlock on the left hand corner of the zone
                  // Note, in a real application you might want to have an option to show/hide the zone names (labels)
                  TextBlock textBlock = new TextBlock();
                  textBlock.Name = ocrZone.Name;
                  textBlock.InvalidateMeasure();
                  textBlock.RenderTransformOrigin = new Point(ltzoneBounds.X, ltzoneBounds.Y - textBlock.Height);
               }
            }
         }</code>
        <!--IOcrPage.HitTestZone-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Performs auto decomposition of the page to find the text and graphics zones using predefined parameters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The zones found by this method are added to the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection of this page. Any previously added zones will be removed from <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> first.</para>
        <para>This method finds the zone coordinates (<see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> which will always have units of <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>) and
            type (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>). The type of the zone determines its role in the page layout and can be classified into three different groups:
            <list type="number"><item><description>
            The text zone types: <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>. This type means that the zone contains textual information without
            a table type structure inside (it is flowed text).
              </description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type. A zone having this type means that the zone is detected as containing a table,
            i.e. with columns, with or without a grid. Such zones will be handled differently from those of flowed text type zones.
              </description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type means a zone contains graphics, i.e. this zone will not be recognized at all. The only reason to have such a zone is to
            save or export the image inside the zone area.
              </description></item></list></para>
        <para>Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words, when the OCR engine performs automatic page decomposing with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method will fail with
            an exception. It is recommended you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if there is at least one zone found by the engine (using
            <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>If a recognition module is not able to recognize an object (i.e. character, or checkmark etc.), this object will be marked as a rejected one. It will become marked by a
            rejection symbol during conversion to the final output document. Note that <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> can be set
            to specify the rejection symbol used in the final document.</para>
        <para>
          <strong>Note on AutoZone/Recognize and the page image:</strong> In certain cases, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> will perform image processing on the page that might result in the page being manipulated. For
            example, if you add a zone of type table, the engine might automatically deskew the page if required. This result in the image representation of the
            image to be different after <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> is called. If your
            application has a requirement to view the image of the page, then call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to get the
            latest version of the image representation of the page in case it has changed. The LEADTOOLS Main OCR C# and VB demos do exactly that.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Public Sub OcrAutoZoneExample()
         ' Create an image with some text in it
         Dim image As New RasterImage(RasterMemoryFlags.Conventional, 320, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, _
          Nothing, IntPtr.Zero, 0)
         Dim imageRect As New Rectangle(0, 0, image.ImageWidth, image.ImageHeight)
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
         Using g As Graphics = Graphics.FromHdc(hdc)
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
            g.FillRectangle(Brushes.White, imageRect)

            Using f As New Font("Arial", 20, FontStyle.Regular)
               g.DrawString("Normal line", f, Brushes.Black, 0, 0)
            End Using

            Using f As New Font("Courier New", 20, FontStyle.Regular)
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80)
            End Using
         End Using

         RasterImagePainter.DeleteLeadDC(hdc)

         Dim zonesFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MyZones.xml")

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR page
            Using ocrPage As IOcrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose)
               ' Show the zones, there should be no zones yet
               ShowZones("Right after the page was created", ocrPage)

               ' Perform default AutoZoning on the page
               ocrPage.AutoZone(Nothing)

               ' Show the zones, there should be two zones, one for each line
               ShowZones("AutoZone with default parameters", ocrPage)

               ' Update the first zone manually
               Dim ocrZone As OcrZone = ocrPage.Zones(0)
               ocrZone.ZoneType = OcrZoneType.Text
               ocrPage.Zones(0) = ocrZone

               ' Show the zones
               ShowZones("After updating the type of the first zone", ocrPage)

               ' Save the zones to a file and then clear them
               ocrPage.SaveZones(zonesFileName)
               ocrPage.Zones.Clear()

               ' Show the zones, there should be no zones since we just cleared them
               ShowZones("After calling save and clear", ocrPage)

               ' Re-load the zones
               ocrPage.LoadZones(zonesFileName)
               ShowZones("After re-loading the zones", ocrPage)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Private Sub ShowZones(message As String, ocrPage As IOcrPage)
         Console.WriteLine("Zones after {0}:", message)
         For Each ocrZone As OcrZone In ocrPage.Zones
            Dim index As Integer = ocrPage.Zones.IndexOf(ocrZone)
            Console.WriteLine("Zone index: {0}", index)
            Console.WriteLine("  Id                  {0}", ocrZone.Id)
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds)
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType)
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters)
            Console.WriteLine("----------------------------------")
         Next

         Console.WriteLine("Hit enter to continue")
         Console.ReadLine()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      public void OcrAutoZoneExample()
      {
         // Create an image with some text in it
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 320, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Rectangle imageRect = new Rectangle(0, 0, image.ImageWidth, image.ImageHeight);
         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using (Graphics g = Graphics.FromHdc(hdc))
         {
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.FillRectangle(Brushes.White, imageRect);

            using (Font f = new Font("Arial", 20, FontStyle.Regular))
               g.DrawString("Normal line", f, Brushes.Black, 0, 0);

            using (Font f = new Font("Courier New", 20, FontStyle.Regular))
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80);
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         string zonesFileName = Path.Combine(LEAD_VARS.ImagesDir, "MyZones.xml");

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR page
            using (IOcrPage ocrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose))
            {
               // Show the zones, there should be no zones yet
               ShowZones("Right after the page was created", ocrPage);

               // Perform default AutoZoning on the page
               ocrPage.AutoZone(null);

               // Show the zones, there should be two zones, one for each line
               ShowZones("AutoZone with default parameters", ocrPage);

               // Update the first zone manually
               OcrZone ocrZone = ocrPage.Zones[0];
               ocrZone.ZoneType = OcrZoneType.Text;
               ocrPage.Zones[0] = ocrZone;

               // Show the zones
               ShowZones("After updating the type of the first zone", ocrPage);

               // Save the zones to a file and then clear them
               ocrPage.SaveZones(zonesFileName);
               ocrPage.Zones.Clear();

               // Show the zones, there should be no zones since we just cleared them
               ShowZones("After calling save and clear", ocrPage);

               // Re-load the zones
               ocrPage.LoadZones(zonesFileName);
               ShowZones("After re-loading the zones", ocrPage);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private void ShowZones(string message, IOcrPage ocrPage)
      {
         Console.WriteLine("Zones after {0}:", message);
         foreach (OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Console.WriteLine("Zone index: {0}", index);
            Console.WriteLine("  Id                  {0}", ocrZone.Id);
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Console.WriteLine("----------------------------------");
         }

         Console.WriteLine("Hit enter to continue");
         Console.ReadLine();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.ImageProcessing;

      [TestMethod]
      public async Task OcrAutoZoneExample()
      {
         string imageFileName = @"Assets\OCR1.TIF";
         string zonesFileName = "MyZones.xml";

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Load the image
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(imageFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Show the zones, there should be no zones yet
         ShowZones("Right after the page was created", ocrPage);

         // Perform default AutoZoning on the page
         ocrPage.AutoZone(null);

         // Show the zones, there should be nine zones
         ShowZones("AutoZone image", ocrPage);

         // Update the first zone manually
         OcrZone ocrZone = ocrPage.Zones[0];
         ocrZone.ZoneType = OcrZoneType.Graphic;
         ocrPage.Zones[0] = ocrZone;

         // Show the zones
         ShowZones("After updating the type of the first zone", ocrPage);

         // Save the zones to a file and then clear them
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(zonesFileName);
         await ocrDocument.SaveZonesAsync(saveFile);
         ocrPage.Zones.Clear();

         // Show the zones, there should be no zones since we just cleared them
         ShowZones("After calling save and clear", ocrPage);

         // Re-load the zones
         await ocrPage.LoadZonesAsync(saveFile);
         ShowZones("After re-loading the zones", ocrPage);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }

      private void ShowZones(string message, IOcrPage ocrPage)
      {
         Debug.WriteLine("Zones after {0}:", message);
         foreach(OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Debug.WriteLine("Zone index: {0}", index);
            Debug.WriteLine("  Id                  {0}", ocrZone.Id);
            Debug.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Debug.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Debug.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod);
            Debug.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule);
            Debug.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Debug.WriteLine("----------------------------------");
         }
      }</code>
        <!--IOcrPage.AutoZone-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (BOOL)autoZone:(id)target
        selector:(SEL)selector
           error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public void autoZone(OcrProgressListener callback)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Performs auto decomposition of the page to find the text and graphics zones using specified parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneParser">The parser used for auto zoning.
            <para><strong>Note: This parameter will always contain <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">NativeOcrZoneParser.Default</see> when using the LEADTOOLS OCR Advantage Engine.</strong></para></param>
      <param name="fillMethod">The fill method used in the zones found.</param>
      <param name="zonesUnit">The units for the bounding rectangle of the new zones.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method differs from <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> as follows:
            <list type="number"><item><description>
            The new zones found by this method will always have the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see> value set to <paramref name="fillMethod" />
            instead of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see>.
              </description></item><item><description>
            The new zones found will have their bounding rectangle (the value of the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds">NativeOcrZone.Bounds</see> in the units specified by <paramref name="zonesUnit" />
            instead of <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>. For example, you can specify <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Inch</see> and the zones coordinates will be in inches using the page
            DPI value (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />) to calculate the values.
              </description></item></list></para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The zones found by this method are added to the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection of this page. Any previously added zones will be removed from <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> first.</para>
        <para>This method finds the zone coordinates (<see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds">NativeOcrZone.Bounds</see>) and type (<see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.ZoneType">NativeOcrZone.ZoneType</see>). The type of the zone
            determines the role of the zone in the page layout and can be classified into three different groups:
            <list type="number"><item><description>
            The flowed text zone types: <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Column</see>, 
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Header</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Footer</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Caption</see>,
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Title</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.VerticalText</see>,
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.LeftRotatedText</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.RightRotatedText</see> and
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Other</see>. These types mean that the zone contains textual information without
            a table type structure inside (it is flowed text). These types listed above are considered the same, they will not be differentiated from each other during the later processing
            stages.
            <para><strong>Note: Only <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see> is currently supported for the LEADTOOLS OCR Advantage Engine.</strong></para></description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see> type. A zone having this type means that the zone is detected as containing a table,
            i.e. with columns, with or without a grid. Such zones will be handled differently from those of flowed text type zones.
              </description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> type means a zone contains graphics, i.e. this zone will not be recognized at all. The only reason to have such a zone is to
            save or export the image inside the zone area.
              </description></item></list></para>
        <para>The new zones found by this method will always have the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see> and <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see>
            set to <paramref name="fillMethod" /> and <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see> respectively. In order to override
            this automatic fill method and recognition module, you must update each zone in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> by getting the zone with the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> getter, update and
            set it back with the setter. You can get the number of zones found by this method with the <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see> property.</para>
        <para>To update the zones of a page with fill method set to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see>, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod" />.</para>
        <para>To detect the global fill method of a page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectNativeFillMethod" />.</para>
        <para>Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words, when the OCR engine performs automatic page decomposing with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method will fail with
            an exception. It is recommended you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if there is at least one zone found by the engine (using
            <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>If a recognition module is not able to recognize an object (i.e. character, or checkmark etc.), this object will be marked as a rejected one. It will become marked by a
            rejection symbol during conversion to the final output document. Note that <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> can be set
            to specify the rejection symbol used in the final document.</para>
        <para>
          <strong>Note on AutoZone/Recognize and the page image:</strong> In certain cases, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> will perform image processing on the page that might result in the page being manipulated. For
            example, if you add a zone of type table, the engine might automatically deskew the page if required. This result in the image representation of the
            image to be different after <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> is called. If your
            application has a requirement to view the image of the page, then call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to get the
            latest version of the image representation of the page in case it has changed. The LEADTOOLS Main OCR C# and VB demos do exactly that.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (BOOL)autoZone:(LTNativeOcrZoneFillMethod)fillMethod
          target:(id)target
        selector:(SEL)selector
           error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void autoZone(NativeOcrZoneFillMethod fillMethod,
                     OcrProgressListener callback)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">
      <summary>Update the type of text in the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>This method tries to determine the type of the text in the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> (e.g. hand printed, machine printed or dot-matrix printed text). This
            method only looks into zones having the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see> value in their <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see>
            property. When a zone with this qualification is found, this method will update the following:
            <ul><li><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see> will be updated to the detected value.</li><li><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see> will be updated to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Default</see>.</li></ul></para>
        <para>If the detection was unsuccessful, both properties of the zone remain intact.</para>
        <para>The types of zones that can be detected with this method are:
            <ul><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OmniFont</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix9</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix24</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Icr</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.NoRecognition</see></li></ul></para>
        <para>To detect the global fill method of a page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectNativeFillMethod" /></para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (void)updateNativeFillMethod;</pre>
      </objectivec>
      <java>
        <pre>public void updateNativeFillMethod()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.DetectNativeFillMethod">
      <summary>Detects the native type of zone text in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" /> enumeration member that specifies the type of text in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>This method tries to determine the type of the text in the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> globally (e.g. hand printed, machine printed or dot-matrix printed text).</para>
        <para>This method is useful when this is a page with an unknown or uncertain type of text. (This case quite often occurs when you work with filled forms.) The types of zones
            that can be detected with this method are:
            <ol><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OmniFont</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix9</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix24</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Icr</see></li><li><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.NoRecognition</see></li></ol></para>
        <para>Note, you must either add zones manually or automatically to this page (with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>) before you can call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectNativeFillMethod" />.</para>
        <para>To update the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> with the detected fill method, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod" /></para>
        <para>
          <strong>Note: This method will always return <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see>for the LEADTOOLS OCR Advantage Engine since this engine doesn't support fill methods.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (LTNativeOcrZoneFillMethod)detectNativeFillMethod;</pre>
      </objectivec>
      <java>
        <pre>public NativeOcrZoneFillMethod detectNativeFillMethod()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">
      <summary>Loads zones from a single-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the zones to load.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method. This method
            will load the zones in the first page found in the file. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">LoadZones(fileName, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see>, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">LoadZones(stream, pageNumber)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">
      <summary>Loads zones from a single-page zones .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream containing the zones to load.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a .NET stream with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see> method. This method
            will load the zones in the first page found in the stream. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">LoadZones(stream, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">
      <summary>Loads zones from a multi-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the zones to load.</param>
      <param name="pageNumber">1-based page number.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> method. This method
            will load the zones associated with <paramref name="pageNumber" /> found in the file name. If the file does not contain any zones associated with this
            page, then no zones are loaded and the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property will contain 0 items.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">
      <summary>Loads zones from a multi-page zones .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream containing the zones to load.</param>
      <param name="pageNumber">1-based page number.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones. (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a multi-page zones stream file with the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see> method. This method
            will load the zones associated with <paramref name="pageNumber" /> found in the stream. If the stream does not contain any zones associated with this
            page, then no zones are loaded and the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property will contain 0 items.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a single-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file to save the zones to.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method to save zones to a single-page zones file name.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a single-page zones .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The .NET stream that will contain the single-page zones data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see> method to save zones to a single-page zones .NET stream.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a multi-page zones disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file to save the zones to. The file must exist and must contain a valid multi-page zones file.</param>
      <param name="pageNumber">The 1-based page number of the zones in the file to replace (or append). If the zones file contain zones for page 'pageNumber', then this method will replace
            these zones with the zones of the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for page 'pageNumber', then this method will append these zones
            at the end of the file.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method to save zones to a single-page zones file name.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a multi-page zones disk file with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file to save the zones to. The file must exist and must contain a valid multi-page zones file.</param>
      <param name="pageNumber">The 1-based page number of the zones in the file to replace (or append). If the zones file contain zones for page 'pageNumber', then this method will replace
            these zones with the zones of the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for page 'pageNumber', then this method will append these zones
            at the end of the file.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method to save zones to a single-page zones file name.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a multi-page zones disk stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The stream to save the zones to. The stream must exist and must contain a valid multi-page zones file.</param>
      <param name="pageNumber">The 1-based page number of the zones in the stream to replace (or append). If the zones stream contain zones for page 'pageNumber', then this method will replace
            these zones with the zones of the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the stream does not contain zones for page 'pageNumber', then this method will append these zones
            at the end of the file.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method to save zones to a single-page zones file name.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a multi-page zones disk stream with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The stream to save the zones to. The stream must exist and must contain a valid multi-page zones file.</param>
      <param name="pageNumber">The 1-based page number of the zones in the stream to replace (or append). If the zones stream contain zones for page 'pageNumber', then this method will replace
            these zones with the zones of the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the stream does not contain zones for page 'pageNumber', then this method will append these zones
            at the end of the file.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</see>: These methods
            save the zones of a particular OCR page to a single-page disk file or stream. These methods will not use the page number, and hence, the file or stream
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(stream)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream,System.Int32)">IOcrPage.SaveZones(stream, pageNumber)</see>: These methods
            save the zones of a particular OCR page to a multi-page disk file or stream. If the file or stream exist previously, these methods will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file or stream does not contain zones for the specified page number, the zones will be appended to the file
            or stream at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(stream)</see>: These methods
            save the zones of all the OCR pages in a document to a multi-page disk file or stream. The saved data will contain the page number of the zones. To load these zones, you can
            either use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(stream)</see> to
            load the zones from a multi-page file or stream back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(stream, pageNumber)</see> to load any single page from a multi-page OCR document into
            a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see> method to save zones to a single-page zones file name.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones(stream)</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones(stream)</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones(fileName)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones(fileName)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">IOcrPage.LoadZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.String)">IOcrDocument.LoadZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">IOcrPage.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream,System.Int32)">IOcrPage.LoadZones(Stream, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZones(System.IO.Stream)">IOcrDocument.LoadZones(Stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">IOcrPage.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">IOcrPage.SaveZones(stream)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String,System.Int32)">IOcrPage.SaveZones(fileName, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.String)">IOcrDocument.SaveZones(fileName)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZones(System.IO.Stream)">IOcrDocument.SaveZones(Stream)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">
      <summary>
            Loads zones from a single-page zones Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage file object containing the zones to load.</param>
      <returns>The <strong>IAsyncAction</strong> object for this operation.</returns>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</see>: This method
            save the zones of a particular OCR page to a single-page file. These methods will not use the page number, and hence, the file
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, this method will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
            to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see> method. This method
            will load the zones in the first page found in the file. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">LoadZones(fileName, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>Saving zones to an external file could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">
      <summary>
            Loads zones from a multi-page zones Windows Runtime StorageFile.
            </summary>
      <param name="file">The Windows Runtime storage file object containing the zones to load.</param>
      <param name="pageNumber">1-based page number.</param>
      <returns>The <strong>IAsyncAction</strong> object for this operation.</returns>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</see>: This method
            save the zones of a particular OCR page to a single-page file. These methods will not use the page number, and hence, the file
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, this method will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
            to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see> method. This method
            will load the zones in the first page found in the file. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">LoadZones(fileName, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>Saving zones to an external file could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">
      <summary>
            Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a single-page zones Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage file object to save the zones to.</param>
      <returns>The <strong>IAsyncAction</strong> object for this operation.</returns>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</see>: This method
            save the zones of a particular OCR page to a single-page file. These methods will not use the page number, and hence, the file
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, this method will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
            to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see> method. This method
            will load the zones in the first page found in the file. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">LoadZones(fileName, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>Saving zones to an external file could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">
      <summary>
            Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a multi-page zones Windows Runtime StorageFile object.
            </summary>
      <param name="file">The Windows Runtime storage file object to save the zones to.</param>
      <param name="pageNumber">The 1-based page number of the zones in the file to replace (or append). If the zones file contain zones for page 'pageNumber', then this method will replace
            these zones with the zones of the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for page 'pageNumber', then this method will append these zones
            at the end of the file.</param>
      <returns>The <strong>IAsyncAction</strong> object for this operation.</returns>
      <remarks>
        <para>To save and load the zones of OCR pages, you can use one of these methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</see>: This method
            save the zones of a particular OCR page to a single-page file. These methods will not use the page number, and hence, the file
            will contain zones that are not tied to any particular page and can be loaded back into any OCR page regardless of its number. To load these zones back
            into any OCR page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</see>: This method
            save the zones of a particular OCR page to a multi-page file. If the file exists previously, this method will replace the zones specified in
            'pageNumber' with the zones of the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If the file does not contain zones for the specified page number, the zones will be appended to the file
            at the end and can be loaded later using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</see>: This method
            save the zones of all the OCR pages in a document to a multi-page file. The saved data will contain the page number of the zones. To load these zones, you can
            use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</see> to
            load the zones from a multi-page file back into a multi-page OCR document. Or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</see>
            to load any single page from a multi-page OCR document into a particular OCR page.</para>
            </description>
          </item>
        </list>
        <para>Note on loading zones from a multi-page zone file: If the file does not contain zones data with the correct page number, the engine will not
            load any zones for this page. After the method returns, any OCR page that did not have zones data will contain zero zones (the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property contains 0 items).
            You can then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>
            if required to re-zone this page.</para>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see> method. This method
            will load the zones in the first page found in the file. To load the zones of a particular page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String,System.Int32)">LoadZones(fileName, pageNumber)</see>.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>Saving zones to an external file could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">SaveZonesAsync(file)</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">LoadZonesAsync(file)</see>.</description></item><item><description>Skip calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.LoadZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.LoadZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.LoadZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrPage.SaveZonesAsync(file)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZonesAsync(Leadtools.Junk.IStorageFile,System.Int32)">IOcrPage.SaveZonesAsync(file, pageNumber)</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveZonesAsync(Leadtools.Junk.IStorageFile)">IOcrDocument.SaveZonesAsync(file)</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Recognizes the OCR data found on this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Perform image pre-processing by calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method prior to calling
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> utilizes the zone information to activate the appropriate recognition module on every zone <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" />
             property. Each recognition module recognizes the page parts assigned to it in the zones.</para>
        <para>If the zone collection <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is empty (i.e. there are no zones defined), then the
             page-layout decomposition process will be activated automatically in order to create a zone list for the image, before recognition. Hence,
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> will be implicitly called.</para>
        <para>Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words, when the OCR engine performs automatic page decomposing with the
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method will
             fail with an exception. It is recommended you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if there is at
             least one zone found by the engine (using <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do not call
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>If a recognition module is not able to recognize an object (i.e. character, or checkmark etc.), this object will be marked as a rejected
             one. It will become marked by a rejection symbol during conversion to the final output document. Note that
             <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> can be set to specify the rejection symbol used in
             the final document.</para>
        <para>This method uses the checking subsystem (<see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />) to either flag suspicious characters or words, or to allow
             auto-correction during the recognition process.</para>
        <para>After having recognized all the zones on the page, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> stores the necessary information about the recognized
             characters internally. You can later use the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that owns this page to save the data to a file or memory using the
             many formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> such as Text, PDF or Microsoft Word.</para>
        <para>To recognize a multi-page document you can iterate through the pages of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object and call
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> on each page. You can The <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.Recognize</see> method will
             also loop through the pages in the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the order they are stored in the engine and call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> once for
             each page. If you save the result <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> to a disk file, you will get a document file containing as many pages as the
             number of items in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more
             information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>Since the format of the recognized data file is not documented, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> to examine or modify the data. Any changes you make to the recognition data will be saved in
             the result document when you save <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</para>
        <para>After the page is successfully recognized, the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property should be <strong>true</strong>.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> to clear the recognition data stored in a page.</para>
        <para>If you are only interested in the recognition data as text (in other words, you are not planning to save the result document to disk),
             then you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)" /> method and obtain the result data as a string. A common technique in OCR is to perform form
             processing by adding a zone manually around the required "field" and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)" /> to get the string value of the field.</para>
        <para>Since the recognition algorithm may use the checking subsystem, you must set up the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> prior to
             calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>To get the accuracy and timing data of the latest successful recognition process use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" /> after
             calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>
          <strong>Note on AutoZone/Recognize and the page image:</strong> In certain cases, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> will perform image processing on the page that might result in the page being manipulated. For
             example, if you add a zone of type table, the engine might automatically deskew the page if required. This result in the image representation of the
             image to be different after <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> is called. If your
             application has a requirement to view the image of the page, then call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> after
             <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to get the
             latest version of the image representation of the page in case it has changed. The LEADTOOLS Main OCR C# and VB demos do exactly that.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.RecognizingOcrPages">Recognizing OCR Pages</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <param name="callback">Optional callback to show operation progress.</param>
      <objectivec>
        <pre>
- (BOOL)recognize:(id)target
         selector:(SEL)selector
            error:(NSError**)outError;             </pre>
      </objectivec>
      <java>
        <pre>public void recognize(OcrProgressListener callback)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)">
      <summary>Gets the recognition OCR data for a zone in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> as a string. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneIndex">0-based index of the zone.</param>
      <returns>A <see cref="T:System.String" /> containing the recognized characters found (or an empty string if zones on the page contains no recognition data).</returns>
      <remarks>
        <para>Use this method to get the document result in a simple <see cref="T:System.String" /> object. Getting the result as text is helpful in situations
             when adding zones manually for form processing. For example, suppose the form you are processing has two areas of interests, a name
             field at coordinates 100, 100, 400, 120 and a social security number at coordinates 100, 200, 400, 220. You can structure your application as
             follows:</para>
        <list type="number">
          <item>
            <description>
              <para>Create a new <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object from the form image using <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.CreatePage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrImageSharingMode)">IOcrEngine.CreatePage</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Add the name zone manually:</para>
              <para>
                <pre>
                  <code>
             OcrZone nameZone = new OcrZone();
             nameZone.ZoneType = OcrZoneType.Text;
             nameZone.Bounds = new LogicalRectangle(100, 100, 400, 120);
             ocrPage.Zones.Add(nameZone);
             </code>
                </pre>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>Recognize the page (only this one zone will recognized):</para>
              <para>
                <pre>
                  <code>
             ocrPage.Recognize();
             </code>
                </pre>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>Get the value of the name field:</para>
              <para>
                <pre>
                  <code>
             string name = ocrPage.GetText(0);
             </code>
                </pre>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>Remove the name zone from the page:</para>
              <para>
                <pre>
                  <code>
             ocrPage.Zones.Clear();
             </code>
                </pre>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>Repeat the steps from (2) above to get the social security field.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <!--IOcrPage.GetText-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.RecognizingOcrPages">Recognizing OCR Pages</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <objectivec>
        <pre>
- (NSString*)getText:(int)zonendex
               error:(NSError**)outError;             </pre>
      </objectivec>
      <java>
        <pre>public String getText(int zoneIndex)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize">
      <summary>Destroy the recognized data internally stored in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The effect of calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> method is the same as if the application had not called the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>After <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> is called, the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is set to <strong>false</strong>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetText(System.Int32)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.RecognizingOcrPages">Recognizing OCR Pages</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <objectivec>
        <pre>- (void)unrecognize;</pre>
      </objectivec>
      <java>
        <pre>public void unrecognize()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">
      <summary>Gets the last recognized character data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> containing the last recognized characters data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>You must call this method after the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method. i.e., if the value of the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is <strong>false</strong>, then calling this method will throw an exception.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> to examine the recognized character data. This data contain information about the character codes, their confidence,
            guess codes, location and position in the page as well as font information. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method returns an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />, this instance is a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. 
            The <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see> property contains the zero-based index of the zone. You can get the zone information by using the same
            index as the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
        <para>If you wish to modify and the apply recognition data back to the page, Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> to get the recognized words of a zone.</para>
        <para>
          <strong>Notes on spaces</strong>: The LEADTOOLS Advantage OCR engine will not return any space characters when using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method.</para>
        <para>The LEADTOOLS Professional OCR engine will not return space characters if the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong>
            setting value is <strong>false</strong> (the default). If you absolutely require space characters in the recognition results when using the LEADTOOLS
            Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong> (
            <i>ocrEngineInstance.SettingManager.SetBooleanValue("Recognition.SpaceIsValidCharacter", true)</i>). For more information on OCR settings, refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> and <see cref="T:FO.Topics.OcrEngineSpecificSettingsProfessional">LEADTOOLS OCR Professional Engine Settings</see>.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> method will accept space characters in the LEADTOOLS Advantage engine. However, these space characters
            will be used when generating the final document (PDF) and might affect the final output. Therefore, it is not recommended that you insert space characters when
            using the LEADTOOLS Advantage engine.</para>
        <para>The LEADTOOLS Professional OCR engine will strip any space characters from the results passed to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> if the value of the
            boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting value is <strong>false</strong> (the default). If you absolutely require space characters in
            the recognition results when using the LEADTOOLS Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting
            to <strong>true</strong> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>If you use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to modify the recognition result prior to saving to an
            output file, and you are planning on using the engine native save capability (through setting the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>
            property and using <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> in the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> method),
            then you must change the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> interface also contains the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">IOcrPageCharacters.UpdateWord</see> method that allow to modify the
            OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Public Sub RecognizedCharactersExample()
         ' Create an image with some text in it
         Dim image As New RasterImage(RasterMemoryFlags.Conventional, _
                                      640, 200, 24, _
                                      RasterByteOrder.Bgr, _
                                      RasterViewPerspective.TopLeft, _
                                      Nothing, IntPtr.Zero, 0)
         Dim imageRect As New Rectangle(0, 0, image.ImageWidth, image.ImageHeight)
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
         Using g As Graphics = Graphics.FromHdc(hdc)
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
            g.FillRectangle(Brushes.White, imageRect)

            Using f As New Font("Arial", 20, FontStyle.Regular)
               g.DrawString("Normal line", f, Brushes.Black, 0, 0)
            End Using

            Using f As New Font("Arial", 20, FontStyle.Bold)
               g.DrawString("Bold, italic and underline", f, Brushes.Black, 0, 40)
            End Using

            Using f As New Font("Courier New", 20, FontStyle.Regular)
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80)
            End Using
         End Using

         RasterImagePainter.DeleteLeadDC(hdc)

         Dim textFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MyImageWithTest.txt")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MyImageWithTest.pdf")

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR page
            Dim ocrPage As IOcrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose)

            ' Recognize this page
            ocrPage.Recognize(Nothing)

            ' Dump the characters into a text file
            Using writer As StreamWriter = File.CreateText(textFileName)
               Dim ocrPageCharacters As IOcrPageCharacters = ocrPage.GetRecognizedCharacters()
               For Each ocrZoneCharacters As IOcrZoneCharacters In ocrPageCharacters
                  ' Show the words found in this zone. Get the word boundaries in inches
                  Dim words As ICollection(Of OcrWord) = ocrZoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Inch)
                  Console.WriteLine("Words:")
                  For Each word As OcrWord In words
                     Console.WriteLine("Word: {0}, at {1}, characters index from {2} to {3}", _
                                       word.Value, word.Bounds, word.FirstCharacterIndex, word.LastCharacterIndex)
                  Next

                  Dim nextCharacterIsNewWord As Boolean = True

                  For i As Integer = 0 To ocrZoneCharacters.Count - 1
                     Dim ocrCharacter As OcrCharacter = ocrZoneCharacters(i)

                     ' Capitalize the first letter if this is a new word
                     If nextCharacterIsNewWord Then
                        ocrCharacter.Code = [Char].ToUpper(ocrCharacter.Code)
                     End If

                     writer.WriteLine("Code: {0}, Confidence: {1}, WordIsCertain: {2}, Bounds: {3}, Position: {4}, FontSize: {5}, FontStyle: {6}", _
                                      ocrCharacter.Code, _
                                      ocrCharacter.Confidence, _
                                      ocrCharacter.WordIsCertain, _
                                      ocrCharacter.Bounds, _
                                      ocrCharacter.Position, _
                                      ocrCharacter.FontSize, _
                                      ocrCharacter.FontStyle)

                     ' If the charcater is bold, make it underline
                     If (ocrCharacter.FontStyle And OcrCharacterFontStyle.Bold) = OcrCharacterFontStyle.Bold Then
                        ocrCharacter.FontStyle = ocrCharacter.FontStyle Or OcrCharacterFontStyle.Italic
                        ocrCharacter.FontStyle = ocrCharacter.FontStyle Or OcrCharacterFontStyle.Underline
                     End If

                     ' Check if next character is the start of a new word
                     If (ocrCharacter.Position And OcrCharacterPosition.EndOfWord) = OcrCharacterPosition.EndOfWord OrElse _
                        (ocrCharacter.Position And OcrCharacterPosition.EndOfLine) = OcrCharacterPosition.EndOfLine Then
                        nextCharacterIsNewWord = True
                     Else
                        nextCharacterIsNewWord = False
                     End If

                     ocrZoneCharacters(i) = ocrCharacter
                  Next
               Next

               ' Replace the characters with the modified one before we save
               ocrPage.SetRecognizedCharacters(ocrPageCharacters)
            End Using

            ' Create an OCR document so we can save the results
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument(Nothing, OcrCreateDocumentOptions.AutoDeleteFile)
               ' Add the page and dispose it
               ocrDocument.Pages.Add(ocrPage)
               ocrPage.Dispose()

               ' Show the recognition results
               ' Set the PDF options to save as PDF/A text only
               Dim pdfOptions As PdfDocumentOptions = TryCast(ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
               pdfOptions.DocumentType = PdfDocumentType.PdfA
               pdfOptions.ImageOverText = False
               ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions)


               ' Open and check the result file, it should contain the following text
               ' "Normal Line"
               ' "Bold And Italic Line"
               ' "Monospaced Line"
               ' With the second line bold and underlined now
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      public void RecognizedCharactersExample()
      {
         // Create an image with some text in it
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 640, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Rectangle imageRect = new Rectangle(0, 0, image.ImageWidth, image.ImageHeight);
         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using (Graphics g = Graphics.FromHdc(hdc))
         {
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.FillRectangle(Brushes.White, imageRect);

            using (Font f = new Font("Arial", 20, FontStyle.Regular))
               g.DrawString("Normal line", f, Brushes.Black, 0, 0);

            using (Font f = new Font("Arial", 20, FontStyle.Bold))
               g.DrawString("Bold, italic and underline", f, Brushes.Black, 0, 40);

            using (Font f = new Font("Courier New", 20, FontStyle.Regular))
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80);
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         string textFileName = Path.Combine(LEAD_VARS.ImagesDir, "MyImageWithTest.txt");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "MyImageWithTest.pdf");

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR page
            IOcrPage ocrPage = ocrEngine.CreatePage(image, OcrImageSharingMode.AutoDispose);

            // Recognize this page
            ocrPage.Recognize(null);

            // Dump the characters into a text file
            using (StreamWriter writer = File.CreateText(textFileName))
            {
               IOcrPageCharacters ocrPageCharacters = ocrPage.GetRecognizedCharacters();
               foreach (IOcrZoneCharacters ocrZoneCharacters in ocrPageCharacters)
               {
                  // Show the words found in this zone. Get the word boundaries in inches
                  ICollection&lt;OcrWord&gt; words = ocrZoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Inch);
                  Console.WriteLine("Words:");
                  foreach (OcrWord word in words)
                     Console.WriteLine("Word: {0}, at {1}, characters index from {2} to {3}", word.Value, word.Bounds, word.FirstCharacterIndex, word.LastCharacterIndex);

                  bool nextCharacterIsNewWord = true;

                  for (int i = 0; i &lt; ocrZoneCharacters.Count; i++)
                  {
                     OcrCharacter ocrCharacter = ocrZoneCharacters[i];

                     // Capitalize the first letter if this is a new word
                     if (nextCharacterIsNewWord)
                        ocrCharacter.Code = Char.ToUpper(ocrCharacter.Code);

                     writer.WriteLine("Code: {0}, Confidence: {1}, WordIsCertain: {2}, Bounds: {3}, Position: {4}, FontSize: {5}, FontStyle: {6}",
                        ocrCharacter.Code,
                        ocrCharacter.Confidence,
                        ocrCharacter.WordIsCertain,
                        ocrCharacter.Bounds,
                        ocrCharacter.Position,
                        ocrCharacter.FontSize,
                        ocrCharacter.FontStyle);

                     // If the charcater is bold, make it underline
                     if ((ocrCharacter.FontStyle &amp; OcrCharacterFontStyle.Bold) == OcrCharacterFontStyle.Bold)
                     {
                        ocrCharacter.FontStyle |= OcrCharacterFontStyle.Italic;
                        ocrCharacter.FontStyle |= OcrCharacterFontStyle.Underline;
                     }

                     // Check if next character is the start of a new word
                     if ((ocrCharacter.Position &amp; OcrCharacterPosition.EndOfWord) == OcrCharacterPosition.EndOfWord ||
                        (ocrCharacter.Position &amp; OcrCharacterPosition.EndOfLine) == OcrCharacterPosition.EndOfLine)
                        nextCharacterIsNewWord = true;
                     else
                        nextCharacterIsNewWord = false;

                     ocrZoneCharacters[i] = ocrCharacter;
                  }
               }

               // Replace the characters with the modified one before we save
               ocrPage.SetRecognizedCharacters(ocrPageCharacters);
            }

            // Create an OCR document so we can save the results
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument(null, OcrCreateDocumentOptions.AutoDeleteFile))
            {
               // Add the page and dispose it
               ocrDocument.Pages.Add(ocrPage);
               ocrPage.Dispose();

               // Show the recognition results
               // Set the PDF options to save as PDF/A text only
               PdfDocumentOptions pdfOptions = ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
               pdfOptions.DocumentType = PdfDocumentType.PdfA;
               pdfOptions.ImageOverText = false;
               ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions);

               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);

               // Open and check the result file, it should contain the following text
               // "Normal Line"
               // "Bold And Italic Line"
               // "Monospaced Line"
               // With the second line bold and underlined now
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Controls;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.ImageProcessing;

      [TestMethod]
      public async Task RecognizedCharactersExample()
      {
         string imageFileName = @"Assets\OCR1.TIF";
         string textFileName = "OCR1.txt";
         string pdfFileName = "OCR1.pdf";
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add this image to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(imageFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize this page
         ocrPage.Recognize(null);

         // Dump the characters into a text file
         StorageFile file = await Tools.AppLocalFolder.CreateFileAsync(textFileName);
         using (IRandomAccessStream fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
         {
            using (IOutputStream outputStream = fileStream.GetOutputStreamAt(0))
            {
               using (DataWriter writer = new DataWriter(outputStream))
               {
                  IOcrPageCharacters ocrPageCharacters = ocrPage.GetRecognizedCharacters();
                  foreach (IOcrZoneCharacters ocrZoneCharacters in ocrPageCharacters)
                  {
                     // Show the words found in this zone.
                     ICollection&lt;OcrWord&gt; words = ocrZoneCharacters.GetWords();
                     Debug.WriteLine("Words:");
                     foreach (OcrWord word in words)
                        Debug.WriteLine("Word: {0}, at {1}, characters index from {2} to {3}", word.Value, word.Bounds, word.FirstCharacterIndex, word.LastCharacterIndex);

                     bool nextCharacterIsNewWord = true;

                     for (int i = 0; i &lt; ocrZoneCharacters.Count; i++)
                     {
                        OcrCharacter ocrCharacter = ocrZoneCharacters[i];

                        // Capitalize the first letter if this is a new word
                        if (nextCharacterIsNewWord)
                           ocrCharacter.Code = Char.ToUpper(ocrCharacter.Code);

                        writer.WriteString(string.Format("Code: {0}, Confidence: {1}, WordIsCertain: {2}, Bounds: {3}, Position: {4}, FontSize: {5}, FontStyle: {6}",
                           ocrCharacter.Code,
                           ocrCharacter.Confidence,
                           ocrCharacter.WordIsCertain,
                           ocrCharacter.Bounds,
                           ocrCharacter.Position,
                           ocrCharacter.FontSize,
                           ocrCharacter.FontStyle));

                        // If the charcater is bold, make it underline
                        if ((ocrCharacter.FontStyle &amp; OcrCharacterFontStyle.Bold) == OcrCharacterFontStyle.Bold)
                        {
                           ocrCharacter.FontStyle |= OcrCharacterFontStyle.Italic;
                           ocrCharacter.FontStyle |= OcrCharacterFontStyle.Underline;
                        }

                        // Check if next character is the start of a new word
                        if ((ocrCharacter.Position &amp; OcrCharacterPosition.EndOfWord) == OcrCharacterPosition.EndOfWord ||
                           (ocrCharacter.Position &amp; OcrCharacterPosition.EndOfLine) == OcrCharacterPosition.EndOfLine)
                           nextCharacterIsNewWord = true;
                        else
                           nextCharacterIsNewWord = false;

                        ocrZoneCharacters[i] = ocrCharacter;
                     }
                  }

                  // Replace the characters with the modified one before we save
                  ocrPage.SetRecognizedCharacters(ocrPageCharacters);

                  await writer.StoreAsync();
                  writer.DetachStream();
               }

               await outputStream.FlushAsync();
            }
         }

         // Show the recognition results
         // Set the PDF options to save as PDF/A text only
         PdfDocumentOptions pdfOptions = ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.PdfA;
         pdfOptions.ImageOverText = false;
         ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions);

         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrPage.RecognizedCharacters-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition|OCR,Confidence</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrConfidenceReporting">OCR Confidence Reporting</seealso>
      <objectivec>
        <pre>- (LTOcrPageCharacters*)getRecognizedCharacters:(NSError**)outError;</pre>
      </objectivec>
      <java>
        <pre>public OcrPageCharacters getRecognizedCharacters()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">
      <summary>Sets the recognized character data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageCharacters">The modified page characters to set.</param>
      <remarks>
        <para>Use this method to set the recognized characters of a page after you modify them. To get the recognized characters of a page use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />.</para>
        <para>You must call this method after the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method. i.e., if the value of the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is <strong>false</strong>, then calling this method will throw an exception.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> to examine the recognized character data. This data contain information about the character codes, their confidence,
            guess codes, location and position in the page as well as font information. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method returns an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />, this instance is a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
            objects. Each of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> objects will contain the collection of the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> that forms a zone in the page. The
            <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see> property contains the zero-based index of the zone. You can get the zone information by using the same
            index with the getter of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">IOcrZoneCharacters.GetWords</see> to get the recognized words of a zone.</para>
        <para>
          <strong>Notes on spaces</strong>: The LEADTOOLS Advantage OCR engine will not return any space characters when using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method.</para>
        <para>The LEADTOOLS Professional OCR engine will not return space characters if the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong>
            setting value is <strong>false</strong> (the default). If you absolutely require space characters in the recognition results when using the LEADTOOLS
            Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong> (
            <i>ocrEngineInstance.SettingManager.SetBooleanValue("Recognition.SpaceIsValidCharacter", true)</i>). For more information on OCR settings, refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> and <see cref="T:FO.Topics.OcrEngineSpecificSettingsProfessional">LEADTOOLS OCR Professional Engine Settings</see>.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> method will accept space characters in the LEADTOOLS Advantage engine. However, these space characters
            will be used when generating the final document (PDF) and might affect the final output. Therefore, it is not recommended that you insert space characters when
            using the LEADTOOLS Advantage engine.</para>
        <para>The LEADTOOLS Professional OCR engine will strip any space characters from the results passed to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> if the value of the
            boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting value is <strong>false</strong> (the default). If you absolutely require space characters in
            the recognition results when using the LEADTOOLS Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting
            to <strong>true</strong> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>If you use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to modify the recognition result prior to saving to an
            output file, and you are planning on using the engine native save capability (through setting the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>
            property and using <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> in the <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> method),
            then you must change the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> interface also contains the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.UpdateWord(System.Collections.Generic.IList{Leadtools.Forms.Ocr.OcrWord},System.Int32,System.Int32,System.String)">IOcrPageCharacters.UpdateWord</see> method that allow to modify the
            OCR recognition results by updating or deleting the words before optionally saving the results to the final output document.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /></example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition|OCR,Confidence</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (BOOL)setRecognizedCharacters:(LTOcrPageCharacters*)pageCharacters
                          error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public void setRecognizedCharacters(OcrPageCharacters pageCharacters)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.DetectLanguages(System.String[])">
      <summary>Detects the language of the page from a list of languages that is provided by the user. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="languages">
        <para>An array of <see cref="T:System.String" /> objects that contains the names of the languages to check for. The language values used throughout the LEADTOOLS OCR toolkit are string values based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture codes associated with a country or region.</para>
        <para>It's suggested to use few (fewer than 5) languages only. The recognition engine will use all those language dictionaries to recognize the words in the document.</para>
      </param>
      <returns>
            An array of <see cref="T:System.String" /> objects that contains the names of the detected page language(s).
            </returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectLanguages(System.String[])" /> is only supported in the LEADTOOLS Professional and Advantage OCR engines.</para>
        <para>The page may contain a single language only, but it can be any Latin-alphabet or Asian language.</para>
        <para>
          <strong>Note:</strong> Automatic detection of Greek and Cyrillic is not proposed.</para>
        <para>If the language can not be determined, the language of the previous page will be used.</para>
        <para>To improve the detection accuracy, set an array with possible languages to be used, then pass it through the <paramref name="languages" /> parameter.</para>
        <para>Automatic language detection is performed as a relatively fast initial processing step before character recognition. Therefore, the accuracy will dependent on the image quality and many other conditions.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> to obtain a list of the languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> to check if a given language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms
      Imports Leadtools.Drawing

      Public Sub DetectLanguagesExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.tif")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add this image to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Auto detect page language.
               Dim languages As String() = {"en", "fr", "de"}
               Dim pageLanguages As String() = ocrPage.DetectLanguages(languages)

               If pageLanguages IsNot Nothing AndAlso pageLanguages.Length &gt; 0 Then
                  Console.WriteLine("Page language(s):{0}", Environment.NewLine)
                  For Each lang As String In pageLanguages
                     ' Get the friendly name of this language using the .NET CultureInfo class
                     Dim ci As New CultureInfo(lang)
                     Console.WriteLine("{0}{1}", ci.EnglishName, Environment.NewLine)
                  Next
               End If
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;
      using Leadtools.Drawing;

      public void DetectLanguagesExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.tif");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Auto detect page language.
               string[] languages = { "en", "fr", "de" };
               string[] pageLanguages = ocrPage.DetectLanguages(languages);

               if (pageLanguages != null &amp;&amp; pageLanguages.Length &gt; 0)
               {
                  Console.WriteLine("Page language(s):{0}", Environment.NewLine);
                  foreach (string lang in pageLanguages)
                  {
                     // Get the friendly name of this language using the .NET CultureInfo class
                     CultureInfo ci = new CultureInfo(lang);
                     Console.WriteLine("{0}{1}", ci.EnglishName, Environment.NewLine);
                  }
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPage.DetectLanguages-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrLanguages">Working with OCR Languages</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveXml(System.String,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in this page  to XML data and stores it in a disk file with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The output file name to save the XML data to.</param>
      <param name="pageNumber">1-based page number to use.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <param name="outputOptions">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the recognition results as XML to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveXml(System.IO.Stream,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrPage.SaveXml(Stream stream, int pageNumber, OcrWriteXmlOptions xmlOptions, OcrXmlOutputOptions outputOptions)</see>.</para>
        <para>For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>.</para>
      </remarks>
      <noexample />
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveXml(System.IO.Stream,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>Converts the accumulated recognition results stored in this page to XML data and stores it in an output stream with XML options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The output stream to save the XML data to.</param>
      <param name="pageNumber">1-based page number to use.</param>
      <param name="xmlOptions">Options to use when creating the XML data.</param>
      <param name="outputOptions">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the recognition results as XML to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveXml(System.String,System.Int32,Leadtools.Forms.Ocr.OcrWriteXmlOptions,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrPage.SaveXml(stringFileName, int pageNumber, OcrWriteXmlOptions xmlOptions, OcrXmlOutputOptions outputOptions)</see>.</para>
        <para>For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see>.</para>
      </remarks>
      <noexample />
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)">
      <summary>Sets the overlay image of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="image">The overlay image. This value can be <strong>null</strong>.</param>
      <remarks>
        <para>The overlay image of an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> will be used when the image is saved by an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> in the following
            situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If the page contains a graphics zone (<see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>. The document will
            get the image to store in the document from the overlay image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the output format supports the "Image over text" feature. Such as PDF with Image/Text option.
            The document will get the image to store in the document from the overlay image.</para>
            </description>
          </item>
        </list>
        <para>By the default, the overlay image is the original image used to create the page. It is the same value obtained by calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> with <see cref="T:Leadtools.Forms.Ocr.OcrPageType">OcrPageType.Original</see>.</para>
        <para>In some situation, the user might want use a different image as the overlay. For example, a smaller version is passed to the OCR engine
            to conserve memory while the original version will only be used on save purposes in a PDF with image/text option. You can call
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> before saving the document (memory-based) or adding the page to the document (file-based) and the engine will
            use this new image as the overlay value. If auto-preprocessing was performed on the page through <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />, then the same
            values might need to be applied to the overlay as well. Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to get the accumulative values of any inversion,
            rotation or deskewing applied by the pre-processor.</para>
        <para>To clear the temporarly overlay image, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> with a <strong>null</strong> value.</para>
        <para>To get the overlay image at any time, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetOverlayImage" />. Note that this property will the same image reference passed to the
            last <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> call. It will not return the original image.</para>
        <para>The overlay image is not disposed by this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>
        <!--IOcrPage.SetOverlayImage-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <objectivec>
        <pre>
- (void)setOverlayImage:(LTRasterImage*)image
                  error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public void setOverlayImage(RasterImage value)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetOverlayImage">
      <summary>Gets the overlay image of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>The overlay image or <strong>null</strong> of the page does not have one.</returns>
      <remarks>
        <para>The overlay image of an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> will be used when the image is saved by an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> in the following
            situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>If the page contains a graphics zone (<see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>. The document will
            get the image to store in the document from the overlay image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>If the output format supports the "Image over text" feature. Such as PDF with Image/Text option.
            The document will get the image to store in the document from the overlay image.</para>
            </description>
          </item>
        </list>
        <para>By the default, the overlay image is the original image used to create the page. It is the same value obtained by calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> with <see cref="T:Leadtools.Forms.Ocr.OcrPageType">OcrPageType.Original</see>.</para>
        <para>In some situation, the user might want use a different image as the overlay. For example, a smaller version is passed to the OCR engine
            to conserve memory while the original version will only be used on save purposes in a PDF with image/text option. You can call
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> before saving the document (memory-based) or adding the page to the document (file-based) and the engine will
            use this new image as the overlay value. If auto-preprocessing was performed on the page through <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />, then the same
            values might need to be applied to the overlay as well. Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues" /> to get the accumulative values of any inversion,
            rotation or deskewing applied by the pre-processor.</para>
        <para>To clear the temporarly overlay image, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> with a <strong>null</strong> value.</para>
        <para>To get the overlay image at any time, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetOverlayImage" />. Note that this property will the same image reference passed to the
            last <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" /> call. It will not return the original image.</para>
        <para>The overlay image is not disposed by this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" />.</para>
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <objectivec>
        <pre>
- (LTRasterImage*)getOverlayImage:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public RasterImage getOverlayImage()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetPreprocessValues">
      <summary>Gets the accumulative values of any inversion, rotation or deskew applied to this page by the preprocessor. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrPageAutoPreprocessValues" /> containing the accumulative values of any inversion, rotation or deskew applied to this page by the preprocessor.</returns>
      <remarks>
        <para>Use this method to obtain the values applied by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> on this page. This method is useful when replacing the image to be
            used when saving a document using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetOverlayImage(Leadtools.RasterImage)" />.</para>
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <objectivec>
        <pre>
- (LTOcrPageAutoPreprocessValues*)getPreprocessValues:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public OcrPageAutoPreprocessValues getPreprocessValues()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Document">
      <summary>Gets the OCR document that own this page <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that own this page.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrDocument* document;</pre>
      </objectivec>
      <java>
        <pre>public OcrDocument getDocument()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Width">
      <summary>Gets the width in pixels of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The width in pixels of this page.</value>
      <remarks>
        <para>You can get the height of this page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int width;</pre>
      </objectivec>
      <java>
        <pre>public int getWidth()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Height">
      <summary>Gets the height in pixels of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The height in pixels of this page.</value>
      <remarks>
        <para>You can get the width of this page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int height;</pre>
      </objectivec>
      <java>
        <pre>public int getHeight()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel">
      <summary>Gets the number of bits per pixel of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of bits per pixel of this page.</value>
      <remarks>
        <para>You can get the palette used by this page (if any) with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPalette" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int BitsPerPixel;</pre>
      </objectivec>
      <java>
        <pre>public int getBitsPerPixel()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.BytesPerLine">
      <summary>Gets the number of bytes per line (stride) of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of bytes per line (stride) of this page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int BytesPerLine;</pre>
      </objectivec>
      <java>
        <pre>public int getBytesPerLine()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">
      <summary>Gets the horizontal resolution value in dots per inch of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The horizontal resolution value in dots per inch of this page.</value>
      <remarks>
            You can get the vertical resolution of the page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" /> property.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int dpiX;</pre>
      </objectivec>
      <java>
        <pre>public int getDpiX()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">
      <summary>Gets the vertical resolution value in dots per inch of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The vertical resolution value in dots per inch of this page.</value>
      <remarks>
            You can get the horizontal resolution of the page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> property.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int dpiY;</pre>
      </objectivec>
      <java>
        <pre>public int getDpiY()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.OriginalFormat">
      <summary>Gets the original file format of the page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImageFormat" /> enumeration member indicating the original file format of this page.</value>
      <remarks>
        <para>The original file format of the page is the format of the original file on disk, memory or URL, used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If this 
            page was created from a <see cref="T:Leadtools.RasterImage" /> object created directly in memory, the format will be <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>.</para>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.OriginalFormat" /> property can be useful when exporting the page back into a disk file with the format it was originally loaded from.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTRasterImageFormat originalFormat;</pre>
      </objectivec>
      <java>
        <pre>public RasterImageFormat getOriginalFormat()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">
      <summary>Gets a value that indicates whether this page has been recognized at least once. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized at least once, otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>You can recognize a page with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method. The OCR recognition data is collected and stored internally in the
            page. You can also recognize all or some of the pages in the engine with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPageCollection.Recognize</see>
            method of the collection that owns this page (<see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see>).</para>
        <para>Once a page is recognized, you can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to examine and manipulate the recognition data.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> method to clear the recognition data stored inside the page. Calling this method after the page is recognized will have
            the same effect as having a page that never been recognized. The value of <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> will be set back to <strong>false</strong> after calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL isRecognized;</pre>
      </objectivec>
      <java>
        <pre>public boolean getIsRecognized()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Zones">
      <summary>Gets the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> object that contains the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</value>
      <remarks>
        <para>An OCR zone is a rectangular area on a page containing a feature of interest to the user</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object contains one instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface. <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> will contain all the zones added to the page
            either manually through the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrZoneCollection.Add</see> or <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">IOcrZoneCollection.Insert</see> methods
            or the zones automatically generated with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different zones of this page.</para>
        <para>Each zone is defined by the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> structure.</para>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> will clear the zones of the page before adding the new zones found.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrZones">Working with OCR Zones</seealso>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrZoneCollection* zones;</pre>
      </objectivec>
      <java>
        <pre>public OcrZoneCollection getZones()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.TableZoneManager">
      <summary>Gets the table zone manager associated with the zones of this page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An instance of <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> that can be used to manipulate the cells of table zones inside this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />, or a
            <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic), if the current OCR engine does not support manipulating the cells of table zones.</value>
      <remarks>
        <para>Currently, only the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see> OCR engine supports manipulating the cells of table zones.</para>
        <para>This object contains method auto-detect, get information, update, split and merge the cells of a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> 
            contained in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneCell" />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPageCollection">
      <summary>Represents the pages of an OCR document object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> holds the pages currently added into an OCR document (<see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />). <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> holds a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object. Each of these <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />
            objects contains the raster image used to create it (the image used when the page is loaded or added) and a group of OCR zones for the page either added manually or through
            auto-zoning.</para>
        <para>In memory-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> holds the pages. The user can recognize any or all of the pages at
            any time and pages can be added or removed at will.</para>
        <para>In file-based <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> is a store-only view of the pages. when page is added, a snap
            shot of the current recognition data is saved into the document. This data cannot be modified any more and the page is no longer needed. The user
            must recognize the pages before they are added to the document and pages can only be added but not removed. In this mode, you can only use
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrPageCollection.Add</see> and <see cref="P:System.Collections.Generic.ICollection`1.Count">IOcrPageCollection.Count</see>. No other method
            or property is supported.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different pages of the OCR document (if the document
            is memory-based).</para>
        <h2>Memory-Based Documents</h2>
        <para>The following list contains the major functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface of a memory-based document:</para>
        <list type="bullet">
          <item>
            <description>
            Add new pages to an OCR document from raster image files. These files can be in disk files, a .NET stream (memory or otherwise) or even in a remote URL. The following table lists
            all the page addition method groups:
                 <list type="table"><listheader><term>Methods</term><description>Description</description></listheader><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see></term><description>Adds a single page from a <see cref="T:Leadtools.RasterImage" />, DIB or an image file in disk file, .NET stream, remote URL.</description></item><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see></term><description>Adds multiple pages from a multi-page <see cref="T:Leadtools.RasterImage" /> or an image file in disk file, .NET stream or remote URL.</description></item><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see></term><description>Inserts into a specific location a single page from a <see cref="T:Leadtools.RasterImage" />, DIB or an image file in disk file, .NET stream, remote URL.</description></item><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages</see></term><description>Inserts into a specific location multiple pages from a multi-page <see cref="T:Leadtools.RasterImage" /> or an image file in disk file, .NET stream or remote URL.</description></item></list></description>
          </item>
          <item>
            <description>
            Export pages from the OCR document to raster image files. You can save the pages in disk files, .NET streams or as a single or multi-page <see cref="T:Leadtools.RasterImage" /> object with any of the
            file formats supported by LEADTOOLS. The following table list all the page exporting method groups:
                 <list type="table"><listheader><term>Methods</term><description>Description</description></listheader><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">ExportPage</see></term><description>Saves a single page from the OCR document to a <see cref="T:Leadtools.RasterImage" /> object, an image file in disk file or a .NET stream.</description></item><item><term><see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">ExportPages</see></term><description>Saves multiple pages from the OCR document to a multi-page <see cref="T:Leadtools.RasterImage" /> object,  an image file in disk file or a .NET stream.</description></item></list></description>
          </item>
          <item>
            <description>
            Perform auto image preprocessing on a single or multiple pages in the OCR document through <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess</see>. These methods
            provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.
            </description>
          </item>
          <item>
            <description>
            Perform auto-zoning on a single or multiple pages in the OCR document through <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. These methods
            provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> on each page.
            </description>
          </item>
          <item>
            <description>
            Recognize a single or multiple pages in the OCR document through <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</see>. These
            methods provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.
            </description>
          </item>
        </list>
        <h2>File-Based Documents</h2>
        <para>Only the following members are supported in file-based documents:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">Add</see>: Adds an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to the document by taking a snapshot of its correct recognition data.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:System.Collections.Generic.ICollection`1.Count">Count</see>: Gets the numerb of pages in the document.</para>
            </description>
          </item>
        </list>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub PageCollectionExamples()
         ' For this example, we need a multi-page TIF file.
         ' Create a muti-page TIF from Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.tif")
         If File.Exists(tifFileName) Then
            File.Delete(tifFileName)
         End If
         Using codecs As New RasterCodecs()
            For i As Integer = 0 To 3
               Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
               Using image As RasterImage = codecs.Load(pageFileName)
                  codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1, 1, 1, _
                   -1, CodecsSavePageMode.Append)
               End Using
            Next
         End Using

         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.pdf")

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Load all the pages of the multi-page tif file we created into the form
               ocrDocument.Pages.AddPages(tifFileName, 1, -1, Nothing)
               Console.WriteLine("{0} pages added to the document", ocrDocument.Pages.Count)

               ' Auto-zone
               ocrDocument.Pages.AutoZone(Nothing)

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void PageCollectionExamples()
      {
         // For this example, we need a multi-page TIF file.
         // Create a muti-page TIF from Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.tif");
         if (File.Exists(tifFileName))
            File.Delete(tifFileName);
         using (RasterCodecs codecs = new RasterCodecs())
         {
            for (int i = 0; i &lt; 4; i++)
            {
               string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
               using (RasterImage image = codecs.Load(pageFileName))
                  codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1, 1, 1, -1, CodecsSavePageMode.Append);
            }
         }

         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr.pdf");

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Load all the pages of the multi-page tif file we created into the form
               ocrDocument.Pages.AddPages(tifFileName, 1, -1, null);
               Console.WriteLine("{0} pages added to the document", ocrDocument.Pages.Count);

               // Auto-zone
               ocrDocument.Pages.AutoZone(null);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task PageCollectionExamples()
      {
         // For this example, we need a multi-page TIF file.
         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr.pdf";

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Load all the pages of the multi-page tif file we created into the form
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
            {
               ocrDocument.Pages.AddPage(image, null);
               Debug.WriteLine("{0} pages added to the document", ocrDocument.Pages.Count);
            }
         }

         // Auto-zone
         ocrDocument.Pages.AutoZone(null);

         // Recognize
         ocrDocument.Pages.Recognize(null);

         // Save
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrPageCollection-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrPages">Working with OCR Pages</seealso>
      <java>
        <pre>public class OcrPageCollection implements List&lt;OcrPage&gt;</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrPageCollection : NSMutableArray</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds a page from a <see cref="T:Leadtools.RasterImage" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the page to add.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>If <paramref name="image" /> contains more than one page, then the current page as defined in <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is the one added to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page <see cref="T:Leadtools.RasterImage" /> object to the OCR document, either iterate through the pages by changing to the value
            of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> to go from 1 to <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> or use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(RasterImage image, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: If the value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is supported and is set to <strong>true</strong>, then calling this method will
            store the reference image inside the page and the image reference must be kept alive as long as the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is alive. In this mode, the original image reference can be obtained from the
            page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during
            OCR operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddPageOcrExample()
         ' For this example, we will use the Clean.tif image. This image is skewed so we will do that using the
         ' LEADTOOLS Deskew command before we add it to the document
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Clean.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Clean.pdf")
         ' Load the TIF file
         Dim codecs As New RasterCodecs()

         Dim image As RasterImage = codecs.Load(tifFileName)

         ' Check if the image needs to be deskewed
         Dim deskewCommand As New DeskewCommand()
         deskewCommand.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White)
         deskewCommand.Flags = DeskewCommandFlags.ReturnAngleOnly
         deskewCommand.Run(image)

         If deskewCommand.Angle &lt;&gt; 0 Then
            ' Deskew it
            deskewCommand.Flags = DeskewCommandFlags.RotateLinear
            deskewCommand.Run(image)
         End If

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               ocrDocument.Pages.AddPage(image, Nothing)

               ' We do not need the image anymore
               image.Dispose()

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddPageOcrExample()
      {
         // For this example, we will use the Clean.tif image. This image is skewed so we will do that using the
         // LEADTOOLS Deskew command before we add it to the document
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Clean.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Clean.pdf");
         // Load the TIF file
         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = codecs.Load(tifFileName);

         // Check if the image needs to be deskewed
         DeskewCommand deskewCommand = new DeskewCommand();
         deskewCommand.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White);
         deskewCommand.Flags = DeskewCommandFlags.ReturnAngleOnly;
         deskewCommand.Run(image);

         if (deskewCommand.Angle != 0)
         {
            // Deskew it
            deskewCommand.Flags = DeskewCommandFlags.RotateLinear;
            deskewCommand.Run(image);
         }

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(image, null);

               // We do not need the image anymore
               image.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task AddPageOcrExample()
      {
         // For this example, we will use the Clean.tif image. This image is skewed so we will do that using the
         // LEADTOOLS Deskew command before we add it to the document
         string tifFileName = @"Assets\Clean.tif";
         string pdfFileName = "Clean.pdf";
         // Load the TIF file
         RasterCodecs codecs = new RasterCodecs();

         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
         RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile));

         // Check if the image needs to be deskewed
         DeskewCommand deskewCommand = new DeskewCommand();
         deskewCommand.FillColor = RasterColorHelper.FromKnownColor(RasterKnownColor.White);
         deskewCommand.Flags = DeskewCommandFlags.ReturnAngleOnly;
         deskewCommand.Run(image);

         if(deskewCommand.Angle != 0)
         {
            // Deskew it
            deskewCommand.Flags = DeskewCommandFlags.RotateLinear;
            deskewCommand.Run(image);
         }

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         // this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add the image
         ocrDocument.Pages.AddPage(image, null);

         // We do not need the image anymore
         image.Dispose();

         // Recognize
         ocrDocument.Pages.Recognize(null);

         // Save
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();

         codecs.Dispose();
      }</code>
        <!--IOcrPageCollection.AddPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public OcrPage addPage(RasterImage image,
                       OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTOcrPage*)addPageWithImage:(LTRasterImage*)image
                        target:(id)target
                      selector:(SEL)selector
                         error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds a page from a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file on disk and adds it to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page image file to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(string fileName, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds a page from a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="stream">A .NET stream containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image stored inside a .NET stream and adds it to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page image file stored in a .NET stream to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(Stream stream, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddPageFromStreamExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Load the TIF image into a memory stream
         Dim ms As New MemoryStream()

         Using fs As FileStream = File.OpenRead(tifFileName)
            Const bufferSize As Integer = 1024 * 4
            Dim buffer As Byte() = New Byte(bufferSize - 1) {}
            Dim bytes As Integer = 0
            Do
               bytes = fs.Read(buffer, 0, bufferSize)
               If bytes &gt; 0 Then
                  ms.Write(buffer, 0, bytes)
               End If
            Loop While bytes &gt; 0
         End Using

         ' Reset the stream position
         ms.Position = 0

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               ocrDocument.Pages.AddPage(ms, Nothing)

               ' We do not need the stream anymore
               ms.Dispose()

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddPageFromStreamExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Load the TIF image into a memory stream
         MemoryStream ms = new MemoryStream();

         using (FileStream fs = File.OpenRead(tifFileName))
         {
            const int bufferSize = 1024 * 4;
            byte[] buffer = new byte[bufferSize];
            int bytes = 0;
            do
            {
               bytes = fs.Read(buffer, 0, bufferSize);
               if (bytes &gt; 0)
                  ms.Write(buffer, 0, bytes);
            }
            while (bytes &gt; 0);
         }

         // Reset the stream position
         ms.Position = 0;

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(ms, null);

               // We do not need the stream anymore
               ms.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.AddPage(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <java>
        <pre>
public OcrPage addPage(ILeadStream stream,
                       OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTOcrPage*)addPage:(LTLeadStream*)stream
               target:(id)target
             selector:(SEL)selector
                error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds a page from a URI. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image stored in a URI and adds it to the OCR document.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To add all or specific range of the pages of a multi-page image file stored in a URI to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(Uri uri, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddPageFromUriExample()
         ' Change this URI to the location of the image you want to load
         Dim uri As New Uri("http://localhost/MyImages/Ocr1.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               ocrDocument.Pages.AddPage(uri, Nothing)

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddPageFromUriExample()
      {
         // Change this URI to the location of the image you want to load
         Uri uri = new Uri(@"http://localhost/MyImages/Ocr1.tif");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(uri, null);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.AddPage(Uri)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds a page from a DIB (Device-independent bitmap) stored in unmanaged memory. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="dib">An unmanaged pointer to the DIB (device-independent bitmap).</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will add a device independent bitmap (DIB) stored in an unmanaged memory pointer to the OCR document.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddPageFromDibExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim bmpFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.bmp")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Get a DIB
         ' In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         ' The result is a valid Windows DIB

         Using codecs As New RasterCodecs()
            codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, _
             Nothing)
         End Using


         ' From MSDN
         Const bitmapFileHeaderStructSize As Integer = 14
         Dim dib As IntPtr = IntPtr.Zero

         Using fs As FileStream = File.OpenRead(bmpFileName)
            ' Allocate the DIB
            Dim dibSize As Integer = CInt(fs.Length) - bitmapFileHeaderStructSize
            dib = Marshal.AllocHGlobal(dibSize)
            Dim dibOffset As Integer = 0

            ' Now read it
            fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin)

            Const bufferSize As Integer = 1024 * 4
            Dim buffer As Byte() = New Byte(bufferSize - 1) {}
            Dim bytes As Integer = 0
            Do
               bytes = fs.Read(buffer, 0, bufferSize)
               If bytes &gt; 0 Then
                  Dim dibPtr As New IntPtr(dib.ToInt64() + dibOffset)
                  Marshal.Copy(buffer, 0, dibPtr, bytes)
                  dibOffset += bytes
               End If
            Loop While bytes &gt; 0
         End Using

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               ocrDocument.Pages.AddDib(dib, Nothing)

               ' Free the DIB since we do not need it anymore
               Marshal.FreeHGlobal(dib)

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddPageFromDibExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string bmpFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.bmp");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Get a DIB
         // In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         // The result is a valid Windows DIB

         using (RasterCodecs codecs = new RasterCodecs())
            codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, null);


         // From MSDN
         const int bitmapFileHeaderStructSize = 14;
         IntPtr dib = IntPtr.Zero;

         using (FileStream fs = File.OpenRead(bmpFileName))
         {
            // Allocate the DIB
            int dibSize = (int)fs.Length - bitmapFileHeaderStructSize;
            dib = Marshal.AllocHGlobal(dibSize);
            int dibOffset = 0;

            // Now read it
            fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin);

            const int bufferSize = 1024 * 4;
            byte[] buffer = new byte[bufferSize];
            int bytes = 0;
            do
            {
               bytes = fs.Read(buffer, 0, bufferSize);
               if (bytes &gt; 0)
               {
                  IntPtr dibPtr = new IntPtr(dib.ToInt64() + dibOffset);
                  Marshal.Copy(buffer, 0, dibPtr, bytes);
                  dibOffset += bytes;
               }
            }
            while (bytes &gt; 0);
         }

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddDib(dib, null);

               // Free the DIB since we do not need it anymore
               Marshal.FreeHGlobal(dib);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task AddPageFromDibExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string bmpFileName = "Ocr1.bmp";
         string pdfFileName = "Ocr1.pdf";
         // Get a DIB
         // In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         // The result is a valid Windows DIB
         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(bmpFileName, CreationCollisionOption.ReplaceExisting);

         RasterCodecs codecs = new RasterCodecs();
         await codecs.ConvertAsync(LeadStreamFactory.Create(loadFile), LeadStreamFactory.Create(saveFile), RasterImageFormat.Bmp, 0, 0, 1, null);

         Windows.Storage.Streams.IBuffer dib;
         loadFile = await Tools.AppLocalFolder.GetFileAsync(bmpFileName);
         using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
         {
            dib = image.ToDib(RasterConvertToDibType.BitmapInfoHeader);
         }

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add the image
         ocrDocument.Pages.AddDib(dib, null);

         // Recognize
         ocrDocument.Pages.Recognize(null);

         // Save
         saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrPageCollection.AddPage(Dib)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(Leadtools.Junk.IBuffer,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a DIB (Device-independent bitmap) stored in a Windows Runtime IBuffer object.
            </summary>
      <param name="dib">A Windows Runtime IBuffer containing the DIB (device-independent bitmap).</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will add a device independent bitmap (DIB) stored in Windows Runtime IBuffer to the OCR document.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddPageFromDibExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim bmpFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.bmp")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Get a DIB
         ' In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         ' The result is a valid Windows DIB

         Using codecs As New RasterCodecs()
            codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, _
             Nothing)
         End Using


         ' From MSDN
         Const bitmapFileHeaderStructSize As Integer = 14
         Dim dib As IntPtr = IntPtr.Zero

         Using fs As FileStream = File.OpenRead(bmpFileName)
            ' Allocate the DIB
            Dim dibSize As Integer = CInt(fs.Length) - bitmapFileHeaderStructSize
            dib = Marshal.AllocHGlobal(dibSize)
            Dim dibOffset As Integer = 0

            ' Now read it
            fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin)

            Const bufferSize As Integer = 1024 * 4
            Dim buffer As Byte() = New Byte(bufferSize - 1) {}
            Dim bytes As Integer = 0
            Do
               bytes = fs.Read(buffer, 0, bufferSize)
               If bytes &gt; 0 Then
                  Dim dibPtr As New IntPtr(dib.ToInt64() + dibOffset)
                  Marshal.Copy(buffer, 0, dibPtr, bytes)
                  dibOffset += bytes
               End If
            Loop While bytes &gt; 0
         End Using

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               ocrDocument.Pages.AddDib(dib, Nothing)

               ' Free the DIB since we do not need it anymore
               Marshal.FreeHGlobal(dib)

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddPageFromDibExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string bmpFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.bmp");
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Get a DIB
         // In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         // The result is a valid Windows DIB

         using (RasterCodecs codecs = new RasterCodecs())
            codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, null);


         // From MSDN
         const int bitmapFileHeaderStructSize = 14;
         IntPtr dib = IntPtr.Zero;

         using (FileStream fs = File.OpenRead(bmpFileName))
         {
            // Allocate the DIB
            int dibSize = (int)fs.Length - bitmapFileHeaderStructSize;
            dib = Marshal.AllocHGlobal(dibSize);
            int dibOffset = 0;

            // Now read it
            fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin);

            const int bufferSize = 1024 * 4;
            byte[] buffer = new byte[bufferSize];
            int bytes = 0;
            do
            {
               bytes = fs.Read(buffer, 0, bufferSize);
               if (bytes &gt; 0)
               {
                  IntPtr dibPtr = new IntPtr(dib.ToInt64() + dibOffset);
                  Marshal.Copy(buffer, 0, dibPtr, bytes);
                  dibOffset += bytes;
               }
            }
            while (bytes &gt; 0);
         }

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddDib(dib, null);

               // Free the DIB since we do not need it anymore
               Marshal.FreeHGlobal(dib);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task AddPageFromDibExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string bmpFileName = "Ocr1.bmp";
         string pdfFileName = "Ocr1.pdf";
         // Get a DIB
         // In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         // The result is a valid Windows DIB
         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(bmpFileName, CreationCollisionOption.ReplaceExisting);

         RasterCodecs codecs = new RasterCodecs();
         await codecs.ConvertAsync(LeadStreamFactory.Create(loadFile), LeadStreamFactory.Create(saveFile), RasterImageFormat.Bmp, 0, 0, 1, null);

         Windows.Storage.Streams.IBuffer dib;
         loadFile = await Tools.AppLocalFolder.GetFileAsync(bmpFileName);
         using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
         {
            dib = image.ToDib(RasterConvertToDibType.BitmapInfoHeader);
         }

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add the image
         ocrDocument.Pages.AddDib(dib, null);

         // Recognize
         ocrDocument.Pages.Recognize(null);

         // Save
         saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrPageCollection.AddPage(Dib)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds one or more pages from a multi-page <see cref="T:Leadtools.RasterImage" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the pages to add.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="image" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="image" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="image" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>A short-cut to add all the pages of a <see cref="T:Leadtools.RasterImage" /> object to the OCR document is <c>AddPages(image, 1, -1, callback)</c>.</para>
        <para>To add a single page from a <see cref="T:Leadtools.RasterImage" /> object, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(RasterImage image, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine will make a copy of <paramref name="image" /> and store
            it in the page. Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see> on the page will return a <strong>null</strong>
            reference.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub AddMultiPageRasterImageExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         Dim codecs As New RasterCodecs()

         Dim image As RasterImage = Nothing
         For i As Integer = 0 To 3
            Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
            Dim tempImage As RasterImage = codecs.Load(pageFileName)
            If image Is Nothing Then
               image = tempImage
            Else
               image.AddPage(tempImage)
            End If
         Next

         Console.WriteLine("RasterImage has {0} pages", image.PageCount)

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the 2nd and 3rd pages to the document
               Console.WriteLine("Adding the pages from 2 to 3 to the document")
               ocrDocument.Pages.AddPages(image, 2, 3, Nothing)
               Console.WriteLine("Document has {0} pages", ocrDocument.Pages.Count)

               ' We do not need the image anymore
               image.Dispose()

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void AddMultiPageRasterImageExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = null;
         for (int i = 0; i &lt; 4; i++)
         {
            string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
            RasterImage tempImage = codecs.Load(pageFileName);
            if (image == null)
               image = tempImage;
            else
               image.AddPage(tempImage);
         }

         Console.WriteLine("RasterImage has {0} pages", image.PageCount);

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the 2nd and 3rd pages to the document
               Console.WriteLine("Adding the pages from 2 to 3 to the document");
               ocrDocument.Pages.AddPages(image, 2, 3, null);
               Console.WriteLine("Document has {0} pages", ocrDocument.Pages.Count);

               // We do not need the image anymore
               image.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.AddPages(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void addPages(RasterImage image,
                     int imageFirstPageNumber,
                     int imageLastPageNumber,
                     OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)addPagesWithImage:(LTRasterImage*)image
     imageFirstPageNumber:(int)imageFirstPageNumber 
      imageLastPageNumber:(int)imageLastPageNumber
                   target:(id)target
                 selector:(SEL)selector
                    error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds one or more pages from a multi-page image file on disk. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="fileName" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="fileName" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="fileName" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages of a disk file to the OCR document is <c>AddPages(fileName, 1, -1, callback)</c>.</para>
        <para>To add the first page from a multi-page disk file, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(string fileName, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds one or more pages from a .NET stream containing a multi-page image file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="stream">The .NET stream containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="stream" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="stream" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="stream" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages in a .NET stream to the OCR document is <c>AddPages(stream, 1, -1, callback)</c>.</para>
        <para>To add the first page from a multi-page file stored in a .NET stream, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(Stream stream, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <java>
        <pre>
public void addPages(ILeadStream stream,
                     int imageFirstPageNumber,
                     int imageLastPageNumber,
                     OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)addPages:(LTLeadStream*)stream
eFirstPageNumber:(int)imageFirstPageNumber
geLastPageNumber:(int)imageLastPageNumber
          target:(id)target
        selector:(SEL)selector
           error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Adds one or more pages from a URI containing a multi-page image file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="uri">A URI containing the path to the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="uri" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="uri" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="uri" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages in a URI to the OCR document is <c>AddPages(uri, 1, -1, callback)</c>.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To add the first page from a multi-page file stored in a URI, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(Uri uri, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Inserts a <see cref="T:Leadtools.RasterImage" /> object to the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which <paramref name="image" /> should be inserted.</param>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the page to insert.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>If <paramref name="image" /> contains more than one page, then the current page as defined in <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is the one inserted to the OCR document.</para>
        <para>To insert all or specific range of the pages of a multi-page <see cref="T:Leadtools.RasterImage" /> object to the OCR document, either iterate through the pages by changing to the value
            of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> to go from 1 to <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> or use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, RasterImage image, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: If the value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is supported and is set to <strong>true</strong>, then calling this method will
            store the reference image inside the page and the image reference must be kept alive as long as the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is alive. In this mode, the original image reference can be obtained from the
            page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during
            OCR operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub InsertPageFromRasterImageExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         Dim codecs As New RasterCodecs()

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Loop through the images, insert them in the reverse order
               For i As Integer = 0 To 3
                  Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
                  Using image As RasterImage = codecs.Load(pageFileName)
                     ocrDocument.Pages.InsertPage(0, image, Nothing)
                  End Using
               Next

               ' Recognize
               ocrDocument.Pages.Recognize(Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void InsertPageFromRasterImageExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, insert them in the reverse order
               for (int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
                  using (RasterImage image = codecs.Load(pageFileName))
                     ocrDocument.Pages.InsertPage(0, image, null);
               }

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task InsertPageFromRasterImageExample()
      {
         string pdfFileName = "Ocr1.pdf";
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         // this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Loop through the images, insert them in the reverse order
         for(int i = 0; i &lt; 4; i++)
         {
            string pageFileName = string.Format(@"Assets\Ocr{0}.tif", i + 1);
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(pageFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrDocument.Pages.InsertPage(0, image, null);
         }

         // Recognize
         ocrDocument.Pages.Recognize(null);

         // Save
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();

         codecs.Dispose();
      }</code>
        <!--IOcrPageCollection.InsertPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public OcrPage insertPage(int pageIndex,
                          RasterImage image,
                          OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTOcrPage*)insertPage:(int)pageIndex
                   image:(LTRasterImage*)image
                  target:(id)target
                selector:(SEL)selector
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Inserts the image stored in a disk file to the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which <paramref name="fileName" /> should be inserted.</param>
      <param name="fileName">The name of the file containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file on disk and inserts it to the OCR document at the specified location.</para>
        <para>To insert all or specific range of the pages of a multi-page image file to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, string fileName, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub InsertPageFromFileExample()
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")
         ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         Dim codecs As New RasterCodecs()

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Loop through the images, insert them in the reverse order
               For i As Integer = 0 To 3
                  Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
                  ocrDocument.Pages.InsertPage(0, pageFileName, Nothing)
               Next

               ' Recognize
               ocrDocument.Pages.Recognize(0, 1, Nothing)

               ' Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void InsertPageFromFileExample()
      {
         string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");
         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, insert them in the reverse order
               for (int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.InsertPage(0, pageFileName, null);
               }

               // Recognize
               ocrDocument.Pages.Recognize(0, 1, null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.InsertPage(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Inserts the image stored in a .NET stream to the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which <paramref name="stream" /> should be inserted.</param>
      <param name="stream">The .NET stream object containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file in the stream and inserts it to the OCR document at the specified location.</para>
        <para>To insert all or specific range of the pages of a multi-page image from a stream to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, Stream stream, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a stream,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public OcrPage insertPage(int pageIndex,
                          ILeadStream stream,
                          OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTOcrPage*)insertPage:(int)pageIndex
                  stream:(LTLeadStream*)stream
                  target:(id)target
                selector:(SEL)selector
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Inserts the image stored in a URI to the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which <paramref name="uri" /> should be inserted.</param>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file in the URI and inserts it to the OCR document at the specified location.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To insert all or specific range of the pages of a multi-page image from a URI to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, Uri uri, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a URI,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertDib(System.Int32,Leadtools.Junk.IBuffer,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts a DIB (Device-independent bitmap) stored in unmanaged memory to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="dib" /> should be inserted.</param>
      <param name="dib">An unmanaged pointer to the DIB (device-independent bitmap).</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will insert a device independent bitmap (DIB) stored in an unmanaged memory pointer to the OCR document.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a DIB,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">AddDib</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertDib(System.Int32,System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Inserts a DIB (Device-independent bitmap) stored in a Winodws Runtime IBuffer object to the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which <paramref name="dib" /> should be inserted.</param>
      <param name="dib">A DIB (device-independent bitmap) stored in a Winodws Runtime IBuffer object.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will insert a device independent bitmap (DIB) stored in a Winodws Runtime IBuffer object.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a DIB,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">AddDib</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Insert one or more pages from a multi-page <see cref="T:Leadtools.RasterImage" /> object at the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="image" /> should be inserted.</param>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the pages to insert.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="image" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="image" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="image" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method gurantees that no changes will be made to <paramref name="image" />.</para>
        <para>A short-cut to insert all the pages of a <see cref="T:Leadtools.RasterImage" /> object to the OCR document is <c>InsertPages(index, image, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a <see cref="T:Leadtools.RasterImage" /> object, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage(int pageIndex, RasterImage image, OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine will make a copy of <paramref name="image" /> and store
            it in the page. Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see> on the page will return a <strong>null</strong>
            reference.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a RasterImage,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void insertPages(int pageIndex,
                        RasterImage image,
                        int imageFirstPageNumber,
                        int imageLastPageNumber,
                        OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)insertPages:(int)pageIndex
              image:(LTRasterImage*)image
mageFirstPageNumber:(int)imageFirstPageNumber
imageLastPageNumber:(int)imageLastPageNumber
             target:(id)target
           selector:(SEL)selector
              error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Insert one or more pages from a multi-page file on disk at the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="fileName" /> should be inserted.</param>
      <param name="fileName">The name of the file containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="fileName" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="fileName" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="fileName" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to insert all the pages of a disk file to the OCR document is <c>InsertPages(index, fileName, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page disk file, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, string fileName, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a disk file,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Insert one or more pages from a multi-page image file stored in a .NET stream at the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="stream" /> should be inserted.</param>
      <param name="stream">The .NET stream containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="stream" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="stream" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="stream" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to insert all the pages of an image file stored in a stream to the OCR document is <c>InsertPages(index, stream, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page image stored in a stream, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, Stream stream, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a .NET stream,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <java>
        <pre>
public void insertPages(int pageIndex,
                        ILeadStream stream,
                        int imageFirstPageNumber,
                        int imageLastPageNumber,
                        OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)insertPages:(int)pageIndex
             stream:(LTLeadStream*)stream
mageFirstPageNumber:(int)imageFirstPageNumber
imageLastPageNumber:(int)imageLastPageNumber
             target:(id)target
           selector:(SEL)selector
              error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Insert one or more pages from a multi-page image file stored in a URI at the specified location. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="uri" /> should be inserted.</param>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="uri" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="uri" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="uri" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>A short-cut to insert all the pages of an image file stored in a URI is <c>InsertPages(index, uri, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page image stored in a URI, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, Uri uri, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note: The value of the <strong>"Recognition.ShareOriginalImage"</strong> (only supported by the Advantage OCR engine) setting is not used when calling this method. The engine loads the image(s) and sets them in
            the pages internally. The original image reference can be obtained from the page using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage(Leadtools.Forms.Ocr.OcrPageType)">IOcrPage.GetRasterImage(OcrPageType.Original)</see>. Sharing the original image minimizes the memory used during OCR
            operations.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a URI,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">
      <summary>Export the page at the specified index to a <see cref="T:Leadtools.RasterImage" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object containing a copy of the image data of the specified page.</returns>
      <remarks>
        <para>This method copies the image data to the created <see cref="T:Leadtools.RasterImage" /> object image. Therefore, after this method returns, there is no
            relationship between the returned value and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. The returned <see cref="T:Leadtools.RasterImage" /> object will need to be disposed.</para>
        <para>To export more than one page to a multi-page <see cref="T:Leadtools.RasterImage" /> object, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">ExportPages(int firstPageIndex, int lastPageIndex)</see>.</para>
        <para>This method is identical to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">IOcrPage.GetRasterImage()</see> on the page whose index is at <paramref name="pageIndex" />.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPageToRasterImageExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim exportedFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg")
         Dim codecs As New RasterCodecs()

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

               ' Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Export it back as a RasterImage
               Dim image As RasterImage = ocrDocument.Pages.ExportPage(0)

               ' Save this image to disk
               codecs.Save(image, exportedFileName, RasterImageFormat.Jpeg, 0)

               ' We need to dispose the image ourselves
               image.Dispose()
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPageToRasterImageExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string exportedFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg");
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {

               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Export it back as a RasterImage
               RasterImage image = ocrDocument.Pages.ExportPage(0);

               // Save this image to disk
               codecs.Save(image, exportedFileName, RasterImageFormat.Jpeg, 0);

               // We need to dispose the image ourselves
               image.Dispose();
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task ExportPageToRasterImageExample()
      {
         string tifFileName = @"Assets\Ocr1.tif";
         string exportedFileName = "OcrExported.jpg";
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         // this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add the image to the document
         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
         using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
         {
            ocrDocument.Pages.AddPage(image, null);
         }

         // Export it back as a RasterImage
         RasterImage exportedImage = ocrDocument.Pages.ExportPage(0);

         // Save this image to disk
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(exportedFileName);
         await codecs.SaveAsync(exportedImage, LeadStreamFactory.Create(saveFile), RasterImageFormat.Jpeg, 0);

         // We need to dispose the image ourselves
         exportedImage.Dispose();

         // Shutdown the engine
         ocrEngine.Shutdown();

         codecs.Dispose();
      }</code>
        <!--IOcrPageCollection.ExportPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public RasterImage exportPage(int pageIndex)</pre>
      </java>
      <objectivec>
        <pre>
- (LTRasterImage*)exportPage:(int)pageIndex
                       error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">
      <summary>Export one or more pages at the specified index to a multi-page <see cref="T:Leadtools.RasterImage" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object containing a copy of the image data of the specified page or pages.</returns>
      <remarks>
        <para>This method copies the image data to the created <see cref="T:Leadtools.RasterImage" /> object image. Therefore, after this method returns, there is no
            relationship between the returned value and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects inside the OCR document. The returned <see cref="T:Leadtools.RasterImage" /> object will need to be disposed.</para>
        <para>To export a single page to a <see cref="T:Leadtools.RasterImage" /> object, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">ExportPage(int pageIndex)</see>.</para>
        <para>A short-cut to export all the pages in the OCR document to a multi-page <see cref="T:Leadtools.RasterImage" /> object is <c>ExportPages(1, -1)</c>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPagesToRasterImageExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif")
         Dim codecs As New RasterCodecs()

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Loop through the images, add them to the document
               For i As Integer = 0 To 3
                  Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
                  ocrDocument.Pages.AddPage(pageFileName, Nothing)
               Next

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count)

               ' Export the pages from index 1 to 3 to a RasterImage object
               Dim image As RasterImage = ocrDocument.Pages.ExportPages(1, 3)

               Console.WriteLine("Image contains {0} pages", image.PageCount)

               ' Save this image to multi-page TIF file
               codecs.Save(image, tifFileName, RasterImageFormat.Tif, 1, 1, -1, _
                1, CodecsSavePageMode.Overwrite)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         codecs.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPagesToRasterImageExample()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif");
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for (int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to a RasterImage object
               RasterImage image = ocrDocument.Pages.ExportPages(1, 3);

               Console.WriteLine("Image contains {0} pages", image.PageCount);

               // Save this image to multi-page TIF file
               codecs.Save(image, tifFileName, RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      [TestMethod]
      public async Task ExportPagesToRasterImageExample()
      {
         string tifFileName = "OcrMultiPage.tif";
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);

         // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         // this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, null, String.Empty, Tools.OcrEnginePath);

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Loop through the images, add them to the document
         for(int i = 0; i &lt; 4; i++)
         {
            string pageFileName = string.Format(@"Assets\Ocr{0}.tif", i + 1);
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(pageFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrDocument.Pages.AddPage(image, null);
         }

         Debug.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

         // Export the pages from index 1 to 3 to a RasterImage object
         RasterImage exportedImage = ocrDocument.Pages.ExportPages(1, 3);

         Debug.WriteLine("Image contains {0} pages", exportedImage.PageCount);

         // Save this image to multi-page TIF file
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(tifFileName);
         await codecs.SaveAsync(exportedImage, LeadStreamFactory.Create(saveFile), RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite);

         // Shutdown the engine
         ocrEngine.Shutdown();

         codecs.Dispose();
      }</code>
        <!--IOcrPageCollection.ExportPages(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public RasterImage exportPages(int firstPageIndex,
                               int lastPageIndex)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTRasterImage*)exportPages:(int)firstPageIndex
                lastPageIndex:(int)lastPageIndex
                        error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Export the page at the specified index to a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <param name="fileName">The name of the file to save the page to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <remarks>
        <para>To export more than one page to a multi-page disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">ExportPages(int firstPageIndex, int lastPageIndex, string fileName, RasterImageFormat format, int bitsPerPixel, int firstSavePageNumber, CodecsSavePageMode pageMode)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPageToFile()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim exportedFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Save it to disk
               ocrDocument.Pages.ExportPage(0, exportedFileName, RasterImageFormat.Jpeg, 0)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPageToFile()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string exportedFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Save it to disk
               ocrDocument.Pages.ExportPage(0, exportedFileName, RasterImageFormat.Jpeg, 0);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.ExportPage(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Exports one of more page at the specified index to a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <param name="fileName">The name of the file to save the pages to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this parameter lets you control which pages to overwrite
            and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>To export one page to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32)">ExportPages(int pageIndex, string fileName, RasterImageFormat format, int bitsPerPixel)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPagesToFile()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Loop through the images, add them to the document
               For i As Integer = 0 To 3
                  Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
                  ocrDocument.Pages.AddPage(pageFileName, Nothing)
               Next

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count)

               ' Export the pages from index 1 to 3 to disk
               ocrDocument.Pages.ExportPages(1, 3, tifFileName, RasterImageFormat.Tif, 1, 1, _
                CodecsSavePageMode.Overwrite)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPagesToFile()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for (int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to disk
               ocrDocument.Pages.ExportPages(1, 3, tifFileName, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.ExportPages(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Export the page at the specified index to a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <param name="stream">The .NET stream to save the page to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <remarks>
        <para>To export more than one page to a multi-page file to a stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">ExportPages(int firstPageIndex, int lastPageIndex, Stream stream, RasterImageFormat format, int bitsPerPixel, int firstSavePageNumber, CodecsSavePageMode pageMode)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPageToStream()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim exportedFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Save it to a file stream
               Using fs As FileStream = File.Create(exportedFileName)
                  ocrDocument.Pages.ExportPage(0, fs, RasterImageFormat.Jpeg, 0)
               End Using
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPageToStream()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string exportedFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrExported.jpg");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Save it to a file stream
               using (FileStream fs = File.Create(exportedFileName))
               {
                  ocrDocument.Pages.ExportPage(0, fs, RasterImageFormat.Jpeg, 0);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.ExportPage(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <java>
        <pre>
public void exportPage(int pageIndex,
                       ILeadStream stream,
                       RasterImageFormat format,
                       int bitsPerPixel)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)exportPage:(int)pageIndex
            stream:(LTLeadStream*)stream
            format:(LTRasterImageFormat)format
      bitsPerPixel:(int)bitsPerPixel
             error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Exports one of more page at the specified index to a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <param name="stream">The .NET stream to save the pages to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this parameter lets you control which pages to overwrite
            and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>To export one page to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32)">ExportPages(int pageIndex, Stream stream, RasterImageFormat format, int bitsPerPixel)</see></para>.
            <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-xhelp:///?id=Leadtools.Topics.Leadtools~L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</a>.</para><para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para></remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms
      Imports Leadtools.ImageProcessing.Core

      Public Sub ExportPagesToStream()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            ' this demo will not use it, it is always a good practice
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Loop through the images, add them to the document
               For i As Integer = 0 To 3
                  Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Ocr{0}.tif", i + 1))
                  ocrDocument.Pages.AddPage(pageFileName, Nothing)
               Next

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count)

               ' Export the pages from index 1 to 3 to disk
               Using fs As FileStream = File.Create(tifFileName)
                  ocrDocument.Pages.ExportPages(1, 3, fs, RasterImageFormat.Tif, 1, 1, _
                   CodecsSavePageMode.Overwrite)
               End Using
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms;
      using Leadtools.ImageProcessing.Core;

      public void ExportPagesToStream()
      {
         string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "OcrMultiPage.tif");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for (int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to disk
               using (FileStream fs = File.Create(tifFileName))
               {
                  ocrDocument.Pages.ExportPages(1, 3, fs, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrPageCollection.ExportPages(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <java>
        <pre>
public void exportPages(int firstPageIndex,
                        int lastPageIndex,
                        ILeadStream stream,
                        RasterImageFormat format,
                        int bitsPerPixel,
                        int firstSavePageNumber,
                        CodecsSavePageMode pageMode)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)exportPages:(int)firstPageIndex
      lastPageIndex:(int)lastPageIndex
             stream:(LTLeadStream*)stream
             format:(LTRasterImageFormat)format
       bitsPerPixel:(int)bitsPerPixel
firstSavePageNumber:(int)firstSavePageNumber
           pageMode:(LTCodecsSavePageMode)pageMode
              error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Perform auto image processing clean up on all the pages in the OCR document to enhance the quality of the pages before starting its recognition. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will iterate through all the pages in this OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.</para>
        <para>You can use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on the page, you can improve the
            image quality of draft mode faxes.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>You should call this method prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</see>.</para>
        <para>To perform auto-preprocessing to a range of pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess(OcrAutoPreprocessPageCommand command, int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">IOcrPage.GetDeskewAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">IOcrPage.GetRotateAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted">IOcrPage.IsInverted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void autoPreprocess(OcrAutoPreprocessPageCommand command,
                           OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)autoPreprocess:(LTOcrAutoPreprocessPageCommand)command
                target:(id)target
              selector:(SEL)selector
                 error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Perform auto image processing clean up on a range of the pages in the OCR document to enhance the quality of the pages before starting its recognition. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="firstPageIndex">The zero-based index of the first page to preprocess.</param>
      <param name="lastPageIndex">The zero-based index of the last page to preprocess. A value of -1 means preprocess up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will iterate through pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> in this OCR document and run
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.</para>
        <para>You can use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on the page, you can improve the
            image quality of draft mode faxes.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>You should call this method prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</see>.</para>
        <para>To perform auto-preprocessing on all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess(OcrAutoPreprocessPageCommand command, OcrProgressCallback callback)</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">IOcrPage.GetDeskewAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">IOcrPage.GetRotateAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.IsInverted">IOcrPage.IsInverted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void autoPreprocess(OcrAutoPreprocessPageCommand command,
                           int firstPageIndex,
                           int lastPageIndex,
                           OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)autoPreprocess:(LTOcrAutoPreprocessPageCommand)command
        firstPageIndex:(int)firstPageIndex
         lastPageIndex:(int)lastPageIndex
                target:(id)target
              selector:(SEL)selector
                 error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Performs auto decomposition of all the pages in the OCR document to find the text and graphics zones using predefined parameters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on auto zoning and decomposition, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</para>
        <para>This method will iterate through all the pages in this OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> on each page.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public void autoZone(OcrProgressListener callback)</pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)autoZone:(id)target
        selector:(SEL)selector
           error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Performs auto decomposition of a range of pages in the OCR document to find the text and graphics zones using predefined parameters <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneParser">The parser used for auto zoning.
            <para><strong>Note: This parameter will always contain <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">NativeOcrZoneParser.Default</see> when using the LEADTOOLS OCR Advantage Engine.</strong></para></param>
      <param name="fillMethod">The fill method used in the zones found.</param>
      <param name="zonesUnit">The units for the bounding rectangle of the new zones.</param>
      <param name="firstPageIndex">The zero-based index of the first page to decompose.</param>
      <param name="lastPageIndex">The zero-based index of the last page to decompose. A value of -1 means decompose up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on auto zoning and decomposition, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.NativeAutoZone</see>.</para>
        <para>This method will iterate through the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.NativeAutoZone</see> on each page.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>To perform auto decomposition to all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone(OcrProgressCallback callback)</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void autoZone(NativeOcrZoneParser zoneParser,
                     NativeOcrZoneFillMethod fillMethod,
                     int firstPageIndex,
                     int lastPageIndex,
                     OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)autoZone:(LTNativeOcrZoneFillMethod)fillMethod
  firstPageIndex:(int)firstPageIndex
   lastPageIndex:(int)lastPageIndex
          target:(id)target
        selector:(SEL)selector
           error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateNativeFillMethod">
      <summary>Update the type of text in the zones for all the pages in the OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>For more information on fill method updating of a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see>.</para>
        <para>This method will iterate through all the pages in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see> on each page.</para>
        <para>To update the fill method of a range of the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateNativeFillMethod(System.Int32,System.Int32)">UpdateNativeFillMethod(int firstPageIndex, int lastPageIndex)</see>.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateNativeFillMethod(System.Int32,System.Int32)">
      <summary>Update the type of text in the zones for all the pages in the OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="firstPageIndex">The zero-based index of the first page to update.</param>
      <param name="lastPageIndex">The zero-based index of the last page to update. A value of -1 means update up to and including the last page in the OCR document.</param>
      <remarks>
        <para>For more information on fill method updating of a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see>.</para>
        <para>This method will iterate through the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see> on each page.</para>
        <para>To update the fill method of all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateNativeFillMethod">UpdateNativeFillMethod()</see>.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Recognizes the OCR data found on all the pages in the OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on recognition of OCR data a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>This method will iterate through all the pages in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.</para>
        <para>To recognize a range of the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public void recognize(OcrProgressListener callback)</pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)recognize:(id)target
         selector:(SEL)selector
            error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>Recognizes the OCR data found on a range of pages in the OCR document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="firstPageIndex">The zero-based index of the first page to recognize.</param>
      <param name="lastPageIndex">The zero-based index of the last page to recognize. A value of -1 means recognize up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on recognition of OCR data a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>This method will iterate through all the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.</para>
        <para>To recognize all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</seealso>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void recognize(int firstPageIndex,
                      int lastPageIndex,
                      OcrProgressListener callback)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)recognize:(int)firstPageIndex
    lastPageIndex:(int)lastPageIndex
           target:(id)target
         selector:(SEL)selector
            error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.MovePage(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">
      <summary>Move a page to new index <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="page">Page to move. Must be already a member of this collection.</param>
      <param name="index">New 0-based index of the page</param>
      <remarks>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public void movePage(OcrPage page,
                     int index)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)movePage:(LTOcrPage)page
           index:(int)index
           error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPageCollection.Item(System.Int32)">
      <summary>Gets the page at the specified index. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="index">zero-based index of the page to get.</param>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object at the specified index.</value>
      <remarks>
        <para>The "setter" of this collection is hidden and should not be called.</para>
        <para>This member only works with memory-based documents and will throw an exception otherwise. For more information, refer to
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument(System.String,Leadtools.Forms.Ocr.OcrCreateDocumentOptions)">IOcrDocumentManager.CreateDocument</see> and
            <see cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>@Override public OcrPage get(int location)</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneCharacters">
      <summary>The recognized characters collection of a zone inside a page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see>,
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveAsync(Leadtools.ILeadStream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.SaveAsync</see>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> or
            or <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXmlAsync(Leadtools.Junk.IStorageFile,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXmlAsync</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters of a particular zones.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>For example, if you are interested in iterating through the characters of the 2nd zone in the page, you can do the following:</para>
        <para>
          <code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, the index is zero-based so the 2nd zone is at index 1
            // You can also iterate through the pageCharacters collection and fine the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public class OcrZoneCharacters implements List&lt;OcrCharacter&gt;</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrZoneCharacters : NSMutableArray</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords">
      <summary>Gets a list of recognized the words for this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>A list of <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> structures that contain the recognized words of this zone.</returns>
      <remarks>
        <para>This is a helper method that iterate through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> list of the zone and constructs the words based on the
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The returned words contain bound values in pixels.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public List&lt;OcrWord&gt; getWords()</pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getWords;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">
      <summary>Gets a list of recognized the words for this zone in the specified units. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <param name="dpiX">Horizontal resolution to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" /> if <paramref name="unit" /> is <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>.</param>
      <param name="dpiY">Vertical resolution to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" /> if <paramref name="unit" /> is <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>.</param>
      <param name="unit">Desired unit to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" />.</param>
      <returns>A list of <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> structures that contain the recognized words of this zone.</returns>
      <remarks>
        <para>This is a helper method that iterate through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> list of the zone and constructs the words based on the
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The returned words contain bound values in <paramref name="unit" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>
public List&lt;OcrWord&gt; getWords(int dpiX,
                                    int dpiY)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.ExtractMicrData">
      <summary>Extracts the Magnetic ink character recognition (MICR) data for this zone recognition data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The MICR data for this zone recognition data.</returns>
      <remarks>
        <para>This method will try to extract the Magnetic ink character recognition (MICR) data from this zone recognition data by reading the characters and formatting them into
            an <see cref="T:Leadtools.Forms.Ocr.OcrMicrData" /> data structure.</para>
        <para>This method should typically be used only if the zone type is set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see>. The method will use
            the MICR standard to parse the result such as 'Amount' and 'Routing number' and put them into the equivalent properties of <see cref="T:Leadtools.Forms.Ocr.OcrMicrData" />.</para>
        <para>In OCR Advantage, the related "Recognition.CharacterFilter.PostprocessMICR" setting controls how the page will process MICR data. When the value if this setting is <strong>true</strong>,
            then the engine will drop any characters not in the MICR standard from the result.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">
      <summary>Gets the index of the zone associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The zero-based index of the zone associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.</value>
      <remarks>
        <para>This is the index of the zone in <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <java>
        <pre>public int getZoneIndex()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int zoneIndex;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">
      <summary>Performs page pre-processing commands <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The OCR engine can perform a series of image pre-processing steps in order to enhance the quality of the image before starting its recognition.</para>
        <para>Perform these image pre-processing steps by calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method. Call this method prior to
            calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see>.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>public enum OcrAutoPreprocessPageCommand</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrAutoPreprocessPageCommand</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Deskew">
      <summary>(0x00000000)Automatic deskewing. If the image is skewed, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method will try to deskew it <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>DESKEW</pre>
      </java>
      <objectivec>
        <pre>LTOcrAutoPreprocessPageCommand_Deskew</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Rotate">
      <summary>(0x00000001)Automatic rotation. If the image is rotated (its view perspective is anything other than top-left), the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method
            will auto orient it to top-left. This command is especially useful if the image upside-down. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>ROTATE</pre>
      </java>
      <objectivec>
        <pre>LTOcrAutoPreprocessPageCommand_Rotate</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Invert">
      <summary>(0x00000002)Automatic inversion. If the image is black and white and is inverted (contains white on black data), the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method
            will automatically convert the image data to be black on white <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>INVERT</pre>
      </java>
      <objectivec>
        <pre>LTOcrAutoPreprocessPageCommand_Invert</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.All">
      <summary>(0x00000003)Run all the commands (Deskew, Rotate, Invert) <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>ALL</pre>
      </java>
      <objectivec>
        <pre>LTOcrAutoPreprocessPageCommand_All</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrStatistic">
      <summary>Represents processing statistic data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>This structure contains the accuracy and timing data of the latest successful recognition process.</para>
        <para>To obtain the statistic, use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" />.</para>
        <para>Note that the time spent for the text post-processing can be calculated as follows: <c>PostProcessingTime = statistic.ReadingTime - statistic.RecognitionTime.</c></para>
        <para>
          <strong>Note: Only the following members are available for the LEADTOOLS OCR Advantage Engine</strong>
        </para>
        <ul>
          <li>
            <see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedCharacters" />
          </li>
          <li>
            <see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedWords" />
          </li>
          <li>
            <see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RejectedCharacters" />
          </li>
        </ul>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub OcrStatisticExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf")

            ' Create an OCR page
            Using ocrPage As IOcrPage = ocrEngine.CreatePage(ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose)
               ' Process the page
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.Recognize(Nothing)

               ' Show the statistic about the last recognize operation
               Dim statistic As OcrStatistic = ocrEngine.GetLastStatistic()
               Console.WriteLine("Recognized characters: {0}", statistic.RecognizedCharacters)
               Console.WriteLine("Recognized words: {0}", statistic.RecognizedWords)
               Console.WriteLine("Rejected characters: {0}", statistic.RejectedCharacters)
               Console.WriteLine("Corrected words: {0}", statistic.CorrectedWords)
               Console.WriteLine("Recognition time: {0} ms", statistic.RecognitionTime)
               Console.WriteLine("Reading time: {0} ms", statistic.ReadingTime)
               Console.WriteLine("Image Preprocessing time: {0} ms", statistic.ImagePreprocessingTime)
               Console.WriteLine("Decomposition time: {0} ms", statistic.DecompositionTime)
               Console.WriteLine("Post processing time: {0} ms", statistic.ReadingTime - statistic.RecognitionTime)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void OcrStatisticExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            string pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.pdf");

            // Create an OCR page
            using (IOcrPage ocrPage = ocrEngine.CreatePage(ocrEngine.RasterCodecsInstance.Load(tifFileName, 1), OcrImageSharingMode.AutoDispose))
            {
               // Process the page
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Show the statistic about the last recognize operation
               OcrStatistic statistic = ocrEngine.GetLastStatistic();
               Console.WriteLine("Recognized characters: {0}", statistic.RecognizedCharacters);
               Console.WriteLine("Recognized words: {0}", statistic.RecognizedWords);
               Console.WriteLine("Rejected characters: {0}", statistic.RejectedCharacters);
               Console.WriteLine("Corrected words: {0}", statistic.CorrectedWords);
               Console.WriteLine("Recognition time: {0} ms", statistic.RecognitionTime);
               Console.WriteLine("Reading time: {0} ms", statistic.ReadingTime);
               Console.WriteLine("Image Preprocessing time: {0} ms", statistic.ImagePreprocessingTime);
               Console.WriteLine("Decomposition time: {0} ms", statistic.DecompositionTime);
               Console.WriteLine("Post processing time: {0} ms", statistic.ReadingTime - statistic.RecognitionTime);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task OcrStatisticExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
            {
               ocrPage = ocrDocument.Pages.AddPage(image, null);
            }
         }

         // Process the page
         ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Show the statistic about the last recognize operation
         OcrStatistic statistic = ocrEngine.GetLastStatistic();
         Debug.WriteLine("Recognized characters: {0}", statistic.RecognizedCharacters);
         Debug.WriteLine("Recognized words: {0}", statistic.RecognizedWords);
         Debug.WriteLine("Rejected characters: {0}", statistic.RejectedCharacters);
         Debug.WriteLine("Corrected words: {0}", statistic.CorrectedWords);
         Debug.WriteLine("Recognition time: {0} ms", statistic.RecognitionTime);
         Debug.WriteLine("Reading time: {0} ms", statistic.ReadingTime);
         Debug.WriteLine("Image Preprocessing time: {0} ms", statistic.ImagePreprocessingTime);
         Debug.WriteLine("Decomposition time: {0} ms", statistic.DecompositionTime);
         Debug.WriteLine("Post processing time: {0} ms", statistic.ReadingTime - statistic.RecognitionTime);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--OcrStatistic-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic">IOcrEngine.GetLastStatistic</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <java>
        <pre>public class OcrStatistic</pre>
      </java>
      <objectivec>
        <pre>@interface LTOcrStatistic : NSObject</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedCharacters">
      <summary>Gets or sets the number of recognized characters on the last page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of recognized characters on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public int getRecognizedCharacters()
public void setRecognizedCharacters(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int recognizedCharacters;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedWords">
      <summary>Gets or sets the number of recognized words on the last page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of recognized words on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public int getRecognizedWords()
public void setRecognizedWords(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int recognizedWords;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RejectedCharacters">
      <summary>Gets or sets the number of rejected characters on the last page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of rejected characters on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public int getRejectedCharacters()
public void setRejectedCharacters(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int rejectedCharacters;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.CorrectedWords">
      <summary>Gets or sets the number of words corrected by the checking subsystem. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The number of words corrected by the checking subsystem.</value>
      <remarks>
        <para>Note: This property is not supported in the LEADTOOLS OCR Professional or Advantage Engines.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public int getCorrectedWords()
public void setCorrectedWords(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int correctedWords;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognitionTime">
      <summary>Gets or sets the recognition time in milliseconds. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The recognition time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public long getRecognitionTime()
public void setRecognitionTime(long value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) long recognitionTime;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.ReadingTime">
      <summary>Gets or sets the reading time in milliseconds. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The reading time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public long getReadingTime()
public void setReadingTime(long value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) long readingTime;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.ImagePreprocessingTime">
      <summary>Gets or sets the image preprocessing time in milliseconds. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The image preprocessing time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public long getImagePreprocessingTime ()
public void setImagePreprocessingTime(long value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) long imagePreprocessingTime;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.DecompositionTime">
      <summary>Gets or sets the page-layout decomposition time in milliseconds. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The page-layout decomposition time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
      <java>
        <pre>
public long getDecompositionTime()
public void setDecompositionTime(long value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) long decompositionTime;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrXmlEncoding">
      <summary>Encoding to use when saving XML data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlEncoding.UTF8">
      <summary>(0x00000000)UTF8 encoding <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlEncoding.UTF16">
      <summary>(0x00000001)UTF16 encoding <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrWriteXmlOptions">
      <summary>Options to use when saving XML data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrWriteXmlOptions" /> allows to control how XML data is written. It has the following members:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Encoding" />
            </term>
            <description>
              <para>Set the encoding of the XML data. UTF8 or UTF16</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Formatted" />
            </term>
            <description>
              <para>Format the document for human reading</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Indent" />
            </term>
            <description>
              <para>The string to use for indentation when saving the XML data.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <!--OcrWriteXmlOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrWriteXmlOptions.#ctor">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrWriteXmlOptions" /> with default values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This constructor will initialize the members as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Formatted" />
            </term>
            <description>
              <para>
                <strong>true</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Indent" />
            </term>
            <description>
              <para>Two spaces "  "</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Encoding" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Forms.Ocr.OcrXmlEncoding">OcrXmlEncoding.UTF8</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrWriteXmlOptions" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrWriteXmlOptions.#ctor(Leadtools.Forms.Ocr.OcrXmlEncoding,System.Boolean,System.String)">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Forms.Ocr.OcrWriteXmlOptions" /> with specified values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="encoding">Encoding value to use</param>
      <param name="formatted">
        <strong>true</strong> if final document is to be formatted for human reading, otherwise; <strong>false</strong>.</param>
      <param name="indent">String to use for indentation when saving the XML data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Encoding">
      <summary>Gets or sets the text encoding to use when saving XML data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The text encoding to use when saving XML data. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrXmlEncoding">OcrXmlEncoding.UTF8</see>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrXmlEncoding" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Formatted">
      <summary>Gets or sets a value that indicates whether the final XML document is formatted for human reading. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> the final XML document is formatted for human reading, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Formatted" /> is <strong>true</strong> each element of the XML will be in its own line. The value of
            <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Indent" /> will be used to indent the elements in the hierarchy.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrXmlEncoding" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Indent">
      <summary>Gets or sets the string to use for indentation when saving XML data. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The string to use for indentation when saving XML data. Default value is two spaces "  ".</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Formatted" /> must be <strong>true</strong> to use this property.</para>
        <para>To use a standard Tab character, set the value of <see cref="P:Leadtools.Forms.Ocr.OcrWriteXmlOptions.Indent" /> to "\t".</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrXmlEncoding" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrTablePointInformation">
      <summary>Contains cell index and the nearest border for a given point. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrTablePointInformation" /> structure is returned from <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see>
            and contains the cell index the nearest border for the given point.</para>
      </remarks>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrTablePointInformation.CellIndex">
      <summary>Gets or sets the cell index in which the given point is located. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the 0-based cell index in which the given point is located.</value>
      <noremarks />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrTablePointInformation.NearestBorder">
      <summary>Gets or sets the nearest border to the given point. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorder" /> enumeration that specifies the nearest border to the given point.</value>
      <remarks>
        <para>The value of this property is always <see cref="T:Leadtools.Forms.Ocr.OcrCellBorder">OcrCellBorder.NoBorder</see> when the distance is greater than
            <i>distance</i> passed to <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see>.</para>
      </remarks>
      <noremarks />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see>.</example>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCellBorderDragLimit">
      <summary>Defines the maximum and minimum movement allowed by a given cell border. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>An object of type <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderDragLimit" /> is returned by <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)">IOcrTableZoneManager.GetCellBorderDragLimit</see>
            that contains the maximum and minimum movement allowed by a given cell border to make sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCellBorderDragLimit.CurrentPosition">
      <summary>Gets or sets the current (old) position of the border. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains the current (old) position of the border.</value>
      <remarks>
        <para>For a horizontal border, this is the old vertical position and vice versa.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCellBorderDragLimit.From">
      <summary>Gets or sets the start position of the line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains the start position of the line.</value>
      <remarks>
        <para>For a horizontal border this is the starting x-coordinate of the border and vice versa</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCellBorderDragLimit.To">
      <summary>Gets or sets the end position of the line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains end start position of the line.</value>
      <remarks>
        <para>For a horizontal border this is the ending x-coordinate of the border and vice versa</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCellBorderDragLimit.MinimumLimit">
      <summary>Gets or sets the minimum limit the border can move. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains the minimum limit the border can move.</value>
      <remarks>
        <para>For a horizontal border this is the minimum y-coordinate the border can move to and vice versa.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCellBorderDragLimit.MaximumLimit">
      <summary>Gets or sets the maximum limit the border can move. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains the maximum limit the border can move.</value>
      <remarks>
        <para>For a horizontal border this is the maximum y-coordinate the border can move to and vice versa.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrTableZoneManager">
      <summary>Represents an Object used to manipulate cells inside a table zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can access the <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> of an OCR page through the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.TableZoneManager">IOcrPage.TableZoneManager</see>
            property. If the value of this property is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then the current OCR engine does
            not support table cell manipulation.</para>
        <para>You can use table cells in one of two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Perform auto-zoning on the page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>,
            if the page contains a detected table, the a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> is created for this table. If the engine
            successfully detects the cells of the table, then it will fill the an internal <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" /> array with the properties
            of the detected cells.</para>
            </description>
          </item>
          <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see> to get/set this array.</para>
          <item>
            <description>
              <para>Manually add a new <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> with its type set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> to the
            zones collection of a page. Leave the value of the cells to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            now use the <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.AutoDetectCells(System.Int32)">IOcrTableZoneManager.AutoDetectCells</see> method to instruct the engine to detect
            any cells in this zone and fill the array with the data.</para>
            </description>
          </item>
        </list>
        <para>To manipulate a cell properties other than its bound (<see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">OcrZoneCell.Bounds</see>), get the array of detected cells
            through <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see>, change the cell background color, style or any border color, style or with. When you are done,
            re-set the array using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see>.</para>
        <para>It is not recommended that you manually remove or add cells to the array, the engine is very sensitive
            to zone boundaries and any non-accurate information will cause an error. Instead, use the various methods of <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
            to manipulate the cell location and size.</para>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Drawing

      Private Shared Sub IOcrTableZoneManageExample(ocrEngine As IOcrEngine, documentFileName As String)
         ' Create a document and add the page to it
         Using ocrPage As IOcrPage = ocrEngine.CreatePage(ocrEngine.RasterCodecsInstance.Load(documentFileName, 1), OcrImageSharingMode.AutoDispose)
            ' The coordinate for the table has been previously determined:
            Dim tableBounds As New LogicalRectangle(266, 554, 404, 647, LogicalUnit.Pixel)
            ' Add a table zone with these bounds
            Dim zone As New OcrZone()
            zone.ZoneType = OcrZoneType.Table
            zone.Bounds = tableBounds
            ocrPage.Zones.Add(zone)

            ' Detect the cells inside this table
            Dim ocrTableZoneManager As IOcrTableZoneManager = ocrPage.TableZoneManager
            ocrTableZoneManager.AutoDetectCells(0)

            ' Show the cells for this zone (if any)
            zone = ocrPage.Zones(0)

            Console.WriteLine("Detected values:")
            ShowCells(ocrPage, zone)

            ' Change the style of the first cell to have no borders
            Dim cells As OcrZoneCell() = ocrPage.Zones.GetZoneCells(zone)
            If cells IsNot Nothing AndAlso cells.Length &gt; 0 Then
               Dim cell As OcrZoneCell = cells(0)
               cell.LeftBorderStyle = OcrCellBorderLineStyle.None
               cell.TopBorderStyle = OcrCellBorderLineStyle.None
               cell.RightBorderStyle = OcrCellBorderLineStyle.None
               cell.BottomBorderStyle = OcrCellBorderLineStyle.None
               cells(0) = cell
            End If

            ocrPage.Zones.SetZoneCells(zone, cells)

            Console.WriteLine("Updated values:")
            ShowCells(ocrPage, zone)
         End Using
      End Sub

      Private Shared Sub ShowCells(ocrPage As IOcrPage, zone As OcrZone)
         Dim cells As OcrZoneCell() = ocrPage.Zones.GetZoneCells(zone)
         If cells IsNot Nothing Then
            Console.WriteLine("Table contains {0} zones", cells.Length)

            For i As Integer = 0 To cells.Length - 1
               Console.WriteLine("  Cell {0}:", i)

               Dim cell As OcrZoneCell = cells(i)
               Console.WriteLine("    Type: {0}", cell.CellType)
               Console.WriteLine("    Bounds: {0}", cell.Bounds)
               Console.WriteLine("    Background color: {0}", cell.BackgroundColor)
               Console.WriteLine("    Left border color: {0}", cell.LeftBorderColor)
               Console.WriteLine("    Left border width: {0}", cell.LeftBorderWidth)
               Console.WriteLine("    Left border style: {0}", cell.LeftBorderStyle)
               Console.WriteLine("    Top border color: {0}", cell.TopBorderColor)
               Console.WriteLine("    Top border width: {0}", cell.TopBorderWidth)
               Console.WriteLine("    Top border style: {0}", cell.TopBorderStyle)
               Console.WriteLine("    Right border color: {0}", cell.RightBorderColor)
               Console.WriteLine("    Right border width: {0}", cell.RightBorderWidth)
               Console.WriteLine("    Right border style: {0}", cell.RightBorderStyle)
               Console.WriteLine("    Bottom border color: {0}", cell.BottomBorderColor)
               Console.WriteLine("    Bottom border width: {0}", cell.BottomBorderWidth)
               Console.WriteLine("    Bottom border style: {0}", cell.BottomBorderStyle)
            Next
         End If
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms;
      using Leadtools.Forms.Ocr;
      using Leadtools.Drawing;

      private static void IOcrTableZoneManageExample(IOcrEngine ocrEngine, string documentFileName)
      {
         // Create a document and add the page to it
         using(IOcrPage ocrPage = ocrEngine.CreatePage(ocrEngine.RasterCodecsInstance.Load(documentFileName, 1), OcrImageSharingMode.AutoDispose))
         {
            // The coordinate for the table has been previously determined:
            LogicalRectangle tableBounds = new LogicalRectangle(266, 554, 404, 647, LogicalUnit.Pixel);
            // Add a table zone with these bounds
            OcrZone zone = new OcrZone();
            zone.ZoneType = OcrZoneType.Table;
            zone.Bounds = tableBounds;
            ocrPage.Zones.Add(zone);

            // Detect the cells inside this table
            IOcrTableZoneManager ocrTableZoneManager = ocrPage.TableZoneManager;
            ocrTableZoneManager.AutoDetectCells(0);

            // Show the cells for this zone (if any)
            zone = ocrPage.Zones[0];

            Console.WriteLine("Detected values:");
            ShowCells(ocrPage, zone);

            // Change the style of the first cell to have no borders
            OcrZoneCell[] cells = ocrPage.Zones.GetZoneCells(zone);
            if(cells != null &amp;&amp; cells.Length &gt; 0)
            {
               OcrZoneCell cell = cells[0];
               cell.LeftBorderStyle = OcrCellBorderLineStyle.None;
               cell.TopBorderStyle = OcrCellBorderLineStyle.None;
               cell.RightBorderStyle = OcrCellBorderLineStyle.None;
               cell.BottomBorderStyle = OcrCellBorderLineStyle.None;
               cells[0] = cell;
            }

            ocrPage.Zones.SetZoneCells(zone, cells);

            Console.WriteLine("Updated values:");
            ShowCells(ocrPage, zone);
         }
      }

      private static void ShowCells(IOcrPage ocrPage, OcrZone zone)
      {
         OcrZoneCell[] cells = ocrPage.Zones.GetZoneCells(zone);
         if(cells != null)
         {
            Console.WriteLine("Table contains {0} zones", cells.Length);

            for(int i = 0; i &lt; cells.Length; i++)
            {
               Console.WriteLine("  Cell {0}:", i);

               OcrZoneCell cell = cells[i];
               Console.WriteLine("    Type: {0}", cell.CellType);
               Console.WriteLine("    Bounds: {0}", cell.Bounds);
               Console.WriteLine("    Background color: {0}", cell.BackgroundColor);
               Console.WriteLine("    Left border color: {0}", cell.LeftBorderColor);
               Console.WriteLine("    Left border width: {0}", cell.LeftBorderWidth);
               Console.WriteLine("    Left border style: {0}", cell.LeftBorderStyle);
               Console.WriteLine("    Top border color: {0}", cell.TopBorderColor);
               Console.WriteLine("    Top border width: {0}", cell.TopBorderWidth);
               Console.WriteLine("    Top border style: {0}", cell.TopBorderStyle);
               Console.WriteLine("    Right border color: {0}", cell.RightBorderColor);
               Console.WriteLine("    Right border width: {0}", cell.RightBorderWidth);
               Console.WriteLine("    Right border style: {0}", cell.RightBorderStyle);
               Console.WriteLine("    Bottom border color: {0}", cell.BottomBorderColor);
               Console.WriteLine("    Bottom border width: {0}", cell.BottomBorderWidth);
               Console.WriteLine("    Bottom border style: {0}", cell.BottomBorderStyle);
            }
         }
      }</code>
        <!--IOcrTableZoneManager-->
      </example>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetSupportedCellTypes">
      <summary>Gets the cell types supported by this OCR engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> enumeration members that specify the cell types supported by this OCR engine.</returns>
      <remarks>
        <para>Currently, on the LEADTOOLS Professional OCR engine support manipulating the cells of a table zone.</para>
        <para>These are the only cell types that may be returned from the engine when table cells are auto-detected or you can manually set into
            <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.CellType">OcrZoneCell.CellType</see>. Setting any other cell type will result in an exception being thrown.</para>
        <para>In the future, this restriction might be removed when more cell types are supported, it is recommended that you use
            <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetSupportedCellTypes" /> to programatically get a list of the supported types and construct and user interface from
            the values returned from this method (for example, a combo box for cell type selection in your application).</para>
        <para>You can use table cells in one of two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Perform auto-zoning on the page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>,
            if the page contains a detected table, the a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> is created for this table. If the engine
            successfully detects the cells of the table, then it will fill the an internal <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" /> array with the properties
            of the detected cells.</para>
            </description>
          </item>
          <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see> to get/set this array.</para>
          <item>
            <description>
              <para>Manually add a new <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> with its type set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> to the
            zones collection of a page. Leave the value of the cells to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            now use the <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.AutoDetectCells(System.Int32)">IOcrTableZoneManager.AutoDetectCells</see> method to instruct the engine to detect
            any cells in this zone and fill the array with the data.</para>
            </description>
          </item>
        </list>
        <para>To manipulate a cell properties other than its bound (<see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">OcrZoneCell.Bounds</see>), get the array of detected cells
            through <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see>, change the cell background color, style or any border color, style or with. When you are done,
            re-set the array using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see>.</para>
        <para>It is not recommended that you manually remove or add cells to the array, the engine is very sensitive
            to zone boundaries and any non-accurate information will cause an error. Instead, use the various methods of <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
            to manipulate the cell location and size.</para>
      </remarks>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneCell" />
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZoneCell.CellType">OcrZoneCell.CellType</seealso>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Drawing

      Private Shared Sub GetSupportedCellTypesExample(ocrPage As IOcrPage)
         Console.WriteLine("The engine of type {0} supports these zone cell types:", ocrPage.Document.Engine.EngineType)
         Dim ocrTableZoneManager As IOcrTableZoneManager = ocrPage.TableZoneManager
         If ocrTableZoneManager IsNot Nothing Then
            Dim cellTypes As OcrZoneType() = ocrTableZoneManager.GetSupportedCellTypes()
            For Each cellType As OcrZoneType In cellTypes
               Console.WriteLine(cellType.ToString())
            Next
         Else
            Console.WriteLine("Cells not supported.")
         End If
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms;
      using Leadtools.Forms.Ocr;
      using Leadtools.Drawing;

      private static void GetSupportedCellTypesExample(IOcrPage ocrPage)
      {
         Console.WriteLine("The engine of type {0} supports these zone cell types:", ocrPage.Document.Engine.EngineType);
         IOcrTableZoneManager ocrTableZoneManager = ocrPage.TableZoneManager;
         if(ocrTableZoneManager != null)
         {
            OcrZoneType[] cellTypes = ocrTableZoneManager.GetSupportedCellTypes();
            foreach(OcrZoneType cellType in cellTypes)
            {
               Console.WriteLine(cellType.ToString());
            }
         }
         else
         {
            Console.WriteLine("Cells not supported.");
         }
      }</code>
        <!--IOcrTableZoneManager.GetSupportedCellTypes-->
      </example>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.AutoDetectCells(System.Int32)">
      <summary>Detects the cells within a table zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <remarks>
        <para>When this method returns, an internal array of the cells is stored in the engine containing the detected cells and their properties.</para>
        <para>You can use table cells in one of two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Perform auto-zoning on the page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>,
            if the page contains a detected table, the a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> is created for this table. If the engine
            successfully detects the cells of the table, then it will fill the an internal <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" /> array with the properties
            of the detected cells.</para>
            </description>
          </item>
          <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see> to get/set this array.</para>
          <item>
            <description>
              <para>Manually add a new <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> with its type set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> to the
            zones collection of a page. Leave the value of the cells to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            now use the <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.AutoDetectCells(System.Int32)">IOcrTableZoneManager.AutoDetectCells</see> method to instruct the engine to detect
            any cells in this zone and fill the array with the data.</para>
            </description>
          </item>
        </list>
        <para>To manipulate a cell properties other than its bound (<see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">OcrZoneCell.Bounds</see>), get the array of detected cells
            through <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see>, change the cell background color, style or any border color, style or with. When you are done,
            re-set the array using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see>.</para>
        <para>It is not recommended that you manually remove or add cells to the array, the engine is very sensitive
            to zone boundaries and any non-accurate information will cause an error. Instead, use the various methods of <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
            to manipulate the cell location and size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)">
      <summary>Split the cells in a given area inside a table zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="vertical">Split direction, if <strong>true</strong> means split vertically, otherwise; split horizontally.</param>
      <param name="bounds">The cells intersected or contained by this area are selected for this method.</param>
      <param name="splitterPosition">The position of the splitter.</param>
      <param name="splitterWidth">The width of the splitter.</param>
      <param name="splitterStyle">The style of the splitter.</param>
      <param name="splitterColor">The color of the splitter line.</param>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MergeCells(System.Int32,Leadtools.Forms.LogicalRectangle)">
      <summary>Merges the selected cells if they make up a rectangle. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="bounds">The cells intersected or contained by this area are selected for this method.</param>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">
      <summary>Gets the cell index and the nearest border for a given point. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="point">The point inquired.</param>
      <param name="distance">Maximum distance threshold to use.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrTablePointInformation" /> that contains the cell index and nearest border of the given point.</returns>
      <remarks>
        <para>If the distance of <paramref name="point" /> from the left or right border and top or right border is less than this, then the output nearest
            border value (<see cref="P:Leadtools.Forms.Ocr.OcrTablePointInformation.NearestBorder">OcrTablePointInformation.NearestBorder</see>)
            will be the nearest one. Otherwise, if the distance is greater than <paramref name="distance" />, the value of
            <see cref="P:Leadtools.Forms.Ocr.OcrTablePointInformation.NearestBorder">OcrTablePointInformation.NearestBorder</see> will be <see cref="T:Leadtools.Forms.Ocr.OcrCellBorder">OcrCellBorder.NoBorder</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)">
      <summary>Moves the border of a cell. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="cellIndex">The 0-based index of the cell inside the zone. This cell must exist
            in the array, otherwise, this method will throw an exception.</param>
      <param name="border">The border to move. This cannot be <see cref="T:Leadtools.Forms.Ocr.OcrCellBorder">OcrCellBorder.NoBorder</see>.</param>
      <param name="newPosition">The new position of the given border.</param>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)">
      <summary>Get the moving limits of a cell border. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="cellIndex">The 0-based index of the cell inside the zone. This cell must exist
            in the array, otherwise, this method will throw an exception.</param>
      <param name="border">The border to move. This cannot be <see cref="T:Leadtools.Forms.Ocr.OcrCellBorder">OcrCellBorder.NoBorder</see>.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderDragLimit" /> that contains the maximum and minimum movement values.</returns>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)">
      <summary>Gets the first tabulator position after the given position in a table zone. The tabulator has only a horizontal position. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="point">The point inquired.</param>
      <returns>A <see cref="T:Leadtools.Forms.LogicalPoint" /> that contains position of the tabulator following <paramref name="point" />.</returns>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SetCellBackgroundColor(System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>Sets the background color of a cell inside a given zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <param name="cellIndex">The 0-based index of the cell inside the zone. This cell must exist
            in the array, otherwise, this method will throw an exception.</param>
      <param name="color">The color to be set.</param>
      <remarks>
        <para>This method is the equivalent of changing <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.BackgroundColor">OcrZoneCell.BackgroundColor</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)">
      <summary>Get the number and position of horizontal splitters in a table zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <returns>An array of <see cref="T:System.Int32" /> that contains the y positions of the splitters.</returns>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)">
      <summary>Get the number and position of vertical splitters in a table zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneIndex">The 0-based index of the zone inside this page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>. This zone must exist
            in the list and its type must be a table (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> must be <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>)
            otherwise, this method will throw an exception.</param>
      <returns>An array of <see cref="T:System.Int32" /> that contains the x positions of the splitters.</returns>
      <remarks>
        <para>Manipulating cells position and size inside a table zone is a very sensitive matter and any non-accurate information will cause an error. The
            <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> contains methods to easily accomplish these tasks with minimum error. These methods are built around what is expected
            to be accomplished by an application that manipulates the cells of a zone through a user-interface, such as clicking and dragging with the mouse.</para>
        <para>The following methods can be used to manipulate the cells position and size:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SplitCells(System.Int32,System.Boolean,Leadtools.Forms.LogicalRectangle,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalLength,Leadtools.Forms.Ocr.OcrCellBorderLineStyle,Leadtools.RasterColor)" /> and merge cells to split/merge the cells inside a given area in a table zone. This makes it easy to add/remove cells to the
            zone.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)" /> to Gets the cell index and the nearest border for a given point. This can be used by selecting a cell or a border
            using a mouse click.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)" /> to move a cell border while making sure it does not get run over adjuscent cells
            or the table area. This can be used to change the size of a cell by clicking and dragging the mouse.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetTabulatorPosition(System.Int32,Leadtools.Forms.LogicalPoint)" /> to get the tabulator position. The tabulator has only a horizontal position.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetHorizontalSplitters(System.Int32)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetVerticalSplitters(System.Int32)" /> to get the number and positions of horizontal and vertical splitters. You
            can these methods to draw splitter guidelines in your user interface, or change the mouse cursor to a different shape if it is located over
            a splitter and dragging is allowed.
            </para>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZone">
      <summary>Represents a native zone rectangular area on a page containing a feature of interest to the user. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
             <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZone" /> structure contains all the necessary information for describing a zone. A zone is a rectangular area on an image
             containing a feature of interest to the user. The image data covered by each zone is handled and processed (typically recognized) separately.</para>
        <para>Zones can be divided into two basic categories: whether a zone is to be recognized or whether it should be treated as graphic. Zones containing
             text information can be considered to be either of the flowing type or of a table type. This basic classification of zones helps the OCR engine handle
             text information correctly.</para>
        <para>Zones are always associated with a filling method (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />) and one of the available recognition
             modules (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />). These determine which recognition algorithm will be applied to the zone during its processing.</para>
        <para>Use the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.CharacterFilters" /> property to modify the set of valid characters for recognition of the zone. Specifying the character
             set correctly is a recognition accuracy issue.</para>
        <para>Other members of the zone structure specify how the checking subsystem will function for the particular zone.</para>
        <para>Construct the zones of a page automatically using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>. You must call this method and finish any
             modification you might have to the zones before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>Do not modify the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Id">NativeOcrZone.Id</see> property. When adding zones, leave this value to the default of 0.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.ZoneType">NativeOcrZone.ZoneType</see> property of the updating zone should be one of the following:
             <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see> or
             <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphics</see>.</para>
        <para>The preferred method of updating a zone is as illustrated in the code snippet above, first get the zone of interest, update it and set it
             back into the collection.</para>
        <para>It is the developers responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have
             no recognition result. For more information, refer to <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.</para>
        <para>LEADTOOLS OCR .NET also supports OMR (Optical Mark Recognition) in all the engines. For more information, refer to
             <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrZones">Working with OCR Zones</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@interface LTNativeOcrZone : NSObject&lt;NSCopying&gt;</pre>
      </objectivec>
      <java>
        <pre>public class NativeOcrZone</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Id">
      <summary>Gets the zone ID. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An integer value specifying the zone ID.</value>
      <remarks>
        <para>The zone ID is managed by the engine and so the application is not allowed to change its value.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) int id;</pre>
      </objectivec>
      <java>
        <pre>
public int getId()
public void setId(int value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Name">
      <summary>Gets or sets the optional zone name. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> value that specifies the optional zone name.</value>
      <remarks>
        <para>The name is a user-defined value and is not used by the OCR engine. Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will always fill the page with
            zones whose <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Name" /> is set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* name;</pre>
      </objectivec>
      <java>
        <pre>
public String getName()
public void setName(String value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Selected">
      <summary>Gets or sets a value indicating whether this zone is selected. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>True if the zone is selected; otherwise it is false.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Selected" /> is a user-defined value and is not used by the OCR engine. Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will always fill
            the page with zones whose <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Selected" /> value is set to <strong>false</strong>.</para>
        <para>You can use <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Selected" /> if the application uses the zones in its user interface, refer to the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see> example
            for more information.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL selected;</pre>
      </objectivec>
      <java>
        <pre>
public boolean getSelected()
public void setSelected(boolean value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds">
      <summary>Gets or sets the coordinates of the zone in logical units. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that contain the coordinates of the zone in logical units.</value>
      <remarks>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will return zones with <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds" /> coordinates that do not overlap with each other. It
            is the developers responsibility when modifying the zones of the page to make sure the coordinates of those zones follow the same rule.</para>
        <para>The coordinates of the zone is in logical (page) coordinates. If the <see cref="T:Leadtools.Forms.LogicalUnit" /> value of the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds" /> property is not
            <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>, then use the page resolution stored in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">IOcrPage.DpiX</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">IOcrPage.DpiY</see> if conversion to pixels is required.</para>
        <para>Also the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">IOcrPage.GetZoneBoundsInPixels</see> method can get the coordinates of any zone in pixels.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds_WinRT">
      <summary>
            Gets or sets the coordinates of the zone in pixels.
            </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> that contain the coordinates of the zone in pixels.</value>
      <remarks>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will return zones with <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds" /> coordinates that do not overlap with each other. It
            is the developers responsibility when modifying the zones of the page to make sure the coordinates of those zones follow the same rule.</para>
        <para>The coordinates of the zone is in pixels.</para>
        <para>Also the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">IOcrPage.GetZoneBoundsInPixels</see> method can get the coordinates of any zone in pixels.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.ZoneType">
      <summary>Gets or sets the zone type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" /> enumeration member that specifies the zone type.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.ZoneType" /> property is used to classify the zone into one of the three basic zone-categories: flowed text, table or graphics.
             To set this, use <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see> abd
             <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see>, respectively.</para>
        <para>For flowed text, any of the following text types can appear instead of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Column</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Header</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Footer</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Caption</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Title</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.VerticalText</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.LeftRotatedText</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.RightRotatedText</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Other</see>
            </description>
          </item>
        </list>
        <para>One of these values is typically created by the page-layout decomposition (auto-zoning) process, however they have the same
             meaning for the recognition algorithms: the zone contains flowed text.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see> type is for table-type zones. In the case of this type of zone, the OCR engine will
             try to reconstruct the original table text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> is
             specified, no recognition will run on the zone and all other recognition related settings will be ignored.</para>
        <para>For horizontal text recognition you can set the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType</see> to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>.</para>
        <para>The related <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.AutoGraphic</see> type can appear as the result of the page-layout decomposition
             (auto-zoning) process, and also signifies a graphic zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTNativeOcrZoneType zoneType;</pre>
      </objectivec>
      <java>
        <pre>
public NativeOcrZoneType getZoneType()
public void setZoneType(NativeOcrZoneType value)             </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">
      <summary>Gets or sets the zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" /> enumeration member that indicate the zone fill method.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod" /> property is used to define what kind of zone filling method has been used originally on the document to fill the zone's area. (i.e. whether it
            contains a barcode, machine print, handprint, graphic, etc.).</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule" /> property specifies the recognition module to be used for this zone.</para>
        <para>Since any recognition module supports only a limited set of the zone filling methods, the module specified in <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule" /> should be able to deal with
            the specified <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />. It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have
            no recognition result. For more information, refer to <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.
            </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneFillMethod fillMethod;</pre>
      </objectivec>
      <java>
        <pre>
public NativeOcrZoneFillMethod getFillMethod()
public void setFillMethod(NativeOcrZoneFillMethod value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">
      <summary>Gets or sets the zone recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> enumeration member that indicate the zone recognition module.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod" /> property is used to define what kind of zone filling method has been used originally on the document to fill the zone's area. (i.e. whether it
            contains a barcode, machine print, handprint, graphic, etc.).</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule" /> property specifies the recognition module to be used for this zone.</para>
        <para>Since any recognition module supports only a limited set of the zone filling methods, the module specified in <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule" /> should be able to deal with
            the specified <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />. It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have
            no recognition result. For more information, refer to <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.
            </para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always contain <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTNativeOcrZoneRecognitionModule recognitionModule;</pre>
      </objectivec>
      <java>
        <pre>
public NativeOcrZoneRecognitionModule getRecognitionModule()
public void setRecognitionModule(NativeOcrZoneRecognitionModule value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.CharacterFilters">
      <summary>Gets or sets the character set filter for the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" /> enumeration members that specify the character set filter for the zone.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.CharacterFilters" /> can be used to the Language environment for this zone by by specifying character set filters. For more information, refer to
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" />.</para>
        <para>
          <strong>Note:</strong> LEADTOOLS OCR Advantage Engine only supports <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Digit</see> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Plus</see> to indicate a numeric zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneCharacterFilters characterFilters;</pre>
      </objectivec>
      <java>
        <pre>
public OcrZoneCharacterFilters getCharacterFilters()
public void setCharacterFilters(OcrZoneCharacterFilters value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.UserDictionarySectionName">
      <summary>Not used by this version of LEADTOOLS. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>For future use.</value>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* userDictionarySectionName;</pre>
      </objectivec>
      <java>
        <pre>
public String getUserDictionarySectionName()
public void setUserDictionarySectionName(String value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions">
      <summary>Gets or sets the extra recognition options for this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions" /> enumeration member that indicate the extra recognition options for this zone.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions">NativeOcrZone.RecognitionOptions</see> property can be used to control how the checking subsystem will check the recognized result for
            the zone. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions" />.</para>
        <para>
          <strong>Note: This property is not supported for the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions" />
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTNativeOcrZoneRecognitionOptions recognitionOptions;</pre>
      </objectivec>
      <java>
        <pre>
public NativeOcrZoneRecognitionOptions getRecognitionOptions()
public void setRecognitionOptions(NativeOcrZoneRecognitionOptions value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes">
      <summary>Gets or sets the after recognition notes for this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes" /> enumeration member that indicate the after recognition notes for this zone.</value>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes" /> will be updated if any of the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions" /> values set in
            <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions" /> is used during the recognition process.</para>
        <para>
          <strong>Note: This property is not supported for the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes" />
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTNativeOcrZoneAfterRecognitionNotes afterRecognitionNotes;</pre>
      </objectivec>
      <java>
        <pre>
public NativeOcrZoneAfterRecognitionNotes getAfterRecognitionNotes()
public void setAfterRecognitionNotes(NativeOcrZoneAfterRecognitionNotes value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState">
      <summary>Gets or sets the after-recognition state of the OMR mark if this is an OMR zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState" /> enumeration member that indicate the after-recognition state (filled or unfilled) of the mark of this zone.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>After <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called, all the OMR zones in the page will have the OMR properties updated as follows:
            <table><tr><th>Property</th><th>Description</th></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState">NativeOcrZone.OmrState</see></td><td>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
                      is recognized to be unfilled or unchecked.</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrConfidence">NativeOcrZone.OmrConfidence</see></td><td>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState">NativeOcrZone.OmrState</see>.</td></tr></table></para>
        <para>The OMR zones of a page are zones with the following properties:
            <table><tr><th>Property</th><th>Value</th></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see></td><td>Set to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Omr</see>.</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see></td><td>Set to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Omr</see>.</td></tr></table></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there isn't any current support for auto-detecting OMR zones in a page. To do that, add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds">NativeOcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrOmrZoneState omrState;</pre>
      </objectivec>
      <java>
        <pre>
public OcrOmrZoneState getOmrState()
public void setOmrState(OcrOmrZoneState value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrConfidence">
      <summary>Gets or sets the confidence value of the after-recognition state of the OMR mark if this is an OMR zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A number between 0 and 100 (where 100 is maximum confidence) that indicate the after-recognition confidence this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has in the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState" /> value of this zone.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>After you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, all the OMR zones in the page will have the OMR properties updated as follows:
            <table><tr><th>Property</th><th>Description</th></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState">NativeOcrZone.OmrState</see></td><td>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized to be unfilled or unchecked.</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrConfidence">NativeOcrZone.OmrConfidence</see></td><td>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.OmrState">NativeOcrZone.OmrState</see>.</td></tr></table></para>
        <para>The OMR zones of a page are zones with the following properties:
            <table><tr><td>Property</td><td>Value</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see></td><td>Set to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Omr</see>.</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see></td><td>Set to <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Omr</see>.</td></tr></table></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there isn't any current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Bounds">NativeOcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) int omrConfidence;</pre>
      </objectivec>
      <java>
        <pre>
public int getOmrConfidence()
public void setOmrConfidence(int value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.Language">
      <summary>Gets or sets the zone language. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A string that indicate the zone language. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Language" /> property is supported in LEADTOOLS OCR Advantage Engine only.</para>
        <para>This property can be used to set or get the language of a zone. Setting the language of zone: The zone language must be set before the recognition process and the value returned
            will depend on the initial value and number of languages enabled in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> as follows:</para>
        <table>
          <tr>
            <th>Input value</th>
            <th>Number of languages enabled</th>
            <th>Output value</th>
            <th>Recognition language used</th>
          </tr>
          <tr>
            <td>Null or empty string (default)</td>
            <td>1</td>
            <td>Null or empty string (default) since no language detection is performed</td>
            <td>Enabled language</td>
          </tr>
          <tr>
            <td>Null or empty string (default)</td>
            <td>Greater than 1</td>
            <td>Detection is perform, <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.Language" /> will contain the detected language name (even if the language is not enabled but supported)</td>
            <td>Language detected in the zone</td>
          </tr>
          <tr>
            <td>A supported language name, such "en" or "de"</td>
            <td>1 or greater</td>
            <td>No language detection is performed</td>
            <td>Input language value</td>
          </tr>
        </table>
        <para>Zone language detection is a dictionary based method. For more information on OCR languages and spell
            checkers, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneLanguage.language;</pre>
      </objectivec>
      <java>
        <pre>
public String getLanguage()
public void setLanguage(string value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.NativeOcrZone.IsEngineZone">
      <summary>Gets or sets a value that indicate whether this is an engine zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this is an engine zone, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>An engine zone is one created by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> and not added or modified by the user. If you
            add or modify a zone, the value of <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.IsEngineZone" /> will always be <strong>false</strong>. The engine uses this property internally
            for storing internal data used for extra processing.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL isEngineZone;</pre>
      </objectivec>
      <java>
        <pre>
public Boolean getIsEngineZone()
public void setIsEngineZone(Boolean value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrBackgroundFillStyle">
      <summary>Indicates the background fill style of a cell border. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
      <java>
        <pre>public enum OcrBackgroundFillStyle</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrBackgroundFillStyle</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrBackgroundFillStyle.None">
      <summary>(0x00000000)There is no fill style. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>NONE</pre>
      </java>
      <objectivec>
        <pre>LTOcrBackgroundFillStyle_None</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrBackgroundFillStyle.Solid">
      <summary>(0x00000001)Solid fill. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SOLID</pre>
      </java>
      <objectivec>
        <pre>LTOcrBackgroundFillStyle_Solid</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrBackgroundFillStyle.Hatch">
      <summary>(0x00000002)Hatch fill style. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>HATCH</pre>
      </java>
      <objectivec>
        <pre>LTOcrBackgroundFillStyle_Hatch</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCellBorder">
      <summary>Indicates the cell border location <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
      <objectivec>
        <pre>enum LTOcrCellBorder</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorder.Left">
      <summary>(0x00000000)<para>Left border.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrCellBorder_Left</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorder.Top">
      <summary>(0x00000001)<para>Top border.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrCellBorder_Top</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorder.Right">
      <summary>(0x00000002)<para>Right border.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrCellBorder_Right</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorder.Bottom">
      <summary>(0x00000003)<para>Bottom border.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrCellBorder_Bottom</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorder.NoBorder">
      <summary>(0x00000004)<para>No border. This value have a special meaning in <see cref="P:Leadtools.Forms.Ocr.OcrTablePointInformation.NearestBorder">OcrTablePointInformation.NearestBorder</see> returned by
            <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetPointInformation(System.Int32,Leadtools.Forms.LogicalPoint,Leadtools.Forms.LogicalSize)">IOcrTableZoneManager.GetPointInformation</see> in certain
            situations and should not be used as in input to <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.MoveCellBorder(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder,Leadtools.Forms.LogicalPoint)">IOcrTableZoneManager.MoveCellBorder</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetCellBorderDragLimit(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrCellBorder)">IOcrTableZoneManager.GetCellBorderDragLimit</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrCellBorder_NoBorder</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle">
      <summary>Indicates the line style of a cell border. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
      <java>
        <pre>public enum OcrCellBorderLineStyle</pre>
      </java>
      <objectivec>
        <pre>enum LTOcrCellBorderLineStyle</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorderLineStyle.None">
      <summary>(0x00000000)There is no line. For example a cell without visible borders, or a frame indicated by only a different background color. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>NONE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCellBorderLineStyle_None</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorderLineStyle.Solid">
      <summary>(0x00000001)Solid line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>SOLID</pre>
      </java>
      <objectivec>
        <pre>LTOcrCellBorderLineStyle_Solid</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorderLineStyle.Double">
      <summary>(0x00000002)Double line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>DOUBLE</pre>
      </java>
      <objectivec>
        <pre>LTOcrCellBorderLineStyle_Double</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorderLineStyle.Dashed">
      <summary>(0x00000003)Dashed line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>DASHED</pre>
      </java>
      <objectivec>
        <pre>LTOcrCellBorderLineStyle_Dashed</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCellBorderLineStyle.Dotted">
      <summary>(0x00000004)Dotted line. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <java>
        <pre>DOTTED</pre>
      </java>
      <objectivec>
        <pre>LTOcrCellBorderLineStyle_Dotted</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneCell">
      <summary>Contains information of a cell in a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>This class contains the information for one cell:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">OcrZoneCell.Bounds</see>
            </term>
            <description>
              <para>The bounding rectangle of the cell in logical (page) units</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.CellType">OcrZoneCell.CellType</see>
            </term>
            <description>
              <para>The type of the cell.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.BackgroundColor">OcrZoneCell.BackgroundColor</see>
            </term>
            <description>
              <para>The background color of the cell.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderColor">OcrZoneCell.LeftBorderColor</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderColor">OcrZoneCell.LeftBorderStyle</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderColor">OcrZoneCell.LeftBorderWidth</see></term>
            <description>
              <para>The properties of the left border of the cell: Its color, style (none, solid, dashed, etc.) and its width.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderColor">OcrZoneCell.TopBorderColor</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderColor">OcrZoneCell.TopBorderStyle</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderColor">OcrZoneCell.TopBorderWidth</see></term>
            <description>
              <para>The properties of the top border of the cell: Its color, style (none, solid, dashed, etc.) and its width.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderColor">OcrZoneCell.RightBorderColor</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderColor">OcrZoneCell.RightBorderStyle</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderColor">OcrZoneCell.RightBorderWidth</see></term>
            <description>
              <para>The properties of the right border of the cell: Its color, style (none, solid, dashed, etc.) and its width.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderColor">OcrZoneCell.BottomBorderColor</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderColor">OcrZoneCell.BottomBorderStyle</see>,
              <see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderColor">OcrZoneCell.BottomBorderWidth</see></term>
            <description>
              <para>The properties of the bottom border of the cell: Its color, style (none, solid, dashed, etc.) and its width.</para>
            </description>
          </item>
        </list>
        <para>You can use table cells in one of two ways:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Perform auto-zoning on the page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>,
            if the page contains a detected table, the a zone of type <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> is created for this table. If the engine
            successfully detects the cells of the table, These cells can be accessed using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see>
            and <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Manually add a new <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> with its type set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> to the
            zones collection of a page. Set the cells to to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            now use the <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.AutoDetectCells(System.Int32)">IOcrTableZoneManager.AutoDetectCells</see> method to instruct the engine to detect
            any cells in this zone and fill the array with the data.</para>
            </description>
          </item>
        </list>
        <para>To manipulate a cell properties other than its bound (<see cref="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">OcrZoneCell.Bounds</see>), get the array of detected cells
            through <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">IOcrZoneCollection.GetZoneCells</see>, change the cell background color, style or any border color, style or with.
            When you are done, re-set the array using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">IOcrZoneCollection.SetZoneCells</see>.</para>
        <para>It is not recommended that you manually remove or add cells to the array, the engine is very sensitive
            to zone boundaries and any non-accurate information will cause an error. Instead, use the various methods of <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />
            to manipulate the cell location and size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" />.</example>
      <objectivec>
        <pre>@interface LTOcrZoneCell : NSObject&lt;NSCopying&gt;</pre>
      </objectivec>
      <java>
        <pre>public class OcrZoneCell</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrZoneCell.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" /> class with default parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>- (id) init;</pre>
      </objectivec>
      <java>
        <pre>public OcrZoneCell()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds">
      <summary>Gets or sets the bounding rectangle of the cell. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the bounding rectangle of the cell in logical (page) units. Default
            value is an empty rectangle.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.Bounds_WinRT">
      <summary>
            Gets or sets the bounding rectangle of the cell.
            </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> that specifies the bounding rectangle of the cell in pixels. Default
            value is an empty rectangle.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.CellType">
      <summary>Gets or sets the type of the cell. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> enumeration member that specifies the type of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>.</value>
      <remarks>
        <para>To get a list of cell types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.GetSupportedCellTypes">IOcrTableZoneManager.GetSupportedCellTypes</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneType cellType;</pre>
      </objectivec>
      <java>
        <pre>
public OcrZoneType getCellType()
public void setCellType(OcrZoneType value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BackgroundColor">
      <summary>Gets or sets the background color of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the background color of the cell. Default value is White.</value>
      <remarks>
        <para>You can also change the background color of a cell directly by using <see cref="M:Leadtools.Forms.Ocr.IOcrTableZoneManager.SetCellBackgroundColor(System.Int32,System.Int32,Leadtools.RasterColor)">IOcrTableZoneManager.SetCellBackgroundColor</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* backgroundColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getBackgroundColor()
public void setBackgroundColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderColor">
      <summary>Gets or sets the left border color of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the left border color of the cell. Default value is Black.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* leftBorderColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getLeftBorderColor()
public void setLeftBorderColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderColor">
      <summary>Gets or sets the top border color of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the top border color of the cell. Default value is Black.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* topBorderColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getTopBorderColor()
public void setTopBorderColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderColor">
      <summary>Gets or sets the right border color of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the right border color of the cell. Default value is Black.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* rightBorderColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getRightBorderColor()
public void setRightBorderColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderColor">
      <summary>Gets or sets the bottom border color of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the bottom border color of the cell. Default value is Black.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* bottomBorderColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getBottomBorderColor()
public void setBottomBorderColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderStyle">
      <summary>Gets or sets the style of the left border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle" /> enumeration member that specifies the style of the left border of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle">OcrCellBorderLineStyle.Solid</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCellBorderLineStyle leftBorderStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrCellBorderLineStyle getLeftBorderStyle()
public void setLeftBorderStyle(OcrCellBorderLineStyle value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderStyle">
      <summary>Gets or sets the style of the top border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle" /> enumeration member that specifies the style of the top border of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle">OcrCellBorderLineStyle.Solid</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCellBorderLineStyle topBorderStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrCellBorderLineStyle getTopBorderStyle()
public void setTopBorderStyle(OcrCellBorderLineStyle value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderStyle">
      <summary>Gets or sets the style of the right border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle" /> enumeration member that specifies the style of the right border of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle">OcrCellBorderLineStyle.Solid</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCellBorderLineStyle rightBorderStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrCellBorderLineStyle getRightBorderStyle()
public void setRightBorderStyle(OcrCellBorderLineStyle value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderStyle">
      <summary>Gets or sets the style of the bottom border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle" /> enumeration member that specifies the style of the bottom border of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrCellBorderLineStyle">OcrCellBorderLineStyle.Solid</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrCellBorderLineStyle bottomBorderStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrCellBorderLineStyle getBottomBorderStyle()
public void setBottomBorderStyle(OcrCellBorderLineStyle value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderWidth">
      <summary>Gets or sets the width of the left border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalLength" /> that specifies the width of the left border of the cell in logical (page) coordinates. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) double leftBorderWidth;</pre>
      </objectivec>
      <java>
        <pre>
public double getLeftBorderWidth()
public void setLeftBorderWidth(double value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderWidth">
      <summary>Gets or sets the width of the top border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalLength" /> that specifies the width of the top border of the cell in logical (page) coordinates. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) double topBorderWidth;</pre>
      </objectivec>
      <java>
        <pre>
public double getTopBorderWidth()
public void setTopBorderWidth(double value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderWidth">
      <summary>Gets or sets the width of the right border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalLength" /> that specifies the width of the right border of the cell in logical (page) coordinates. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) double rightBorderWidth;</pre>
      </objectivec>
      <java>
        <pre>
public double getRightBorderWidth()
public void setRightBorderWidth(double value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderWidth">
      <summary>Gets or sets the width of the bottom border of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalLength" /> that specifies the width of the bottom border of the cell in logical (page) coordinates. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) double bottomBorderWidth;</pre>
      </objectivec>
      <java>
        <pre>
public double getBottomBorderWidth()
public void setBottomBorderWidth(double value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.LeftBorderWidth_WinRT">
      <summary>
            Gets or sets the width of the left border of the cell
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the width of the left border of the cell in pixels. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.TopBorderWidth_WinRT">
      <summary>
            Gets or sets the width of the top border of the cell
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the width of the top border of the cell in pixels. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.RightBorderWidth_WinRT">
      <summary>
            Gets or sets the width of the right border of the cell
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the width of the right border of the cell in pixels. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BottomBorderWidth_WinRT">
      <summary>
            Gets or sets the width of the bottom border of the cell
            </summary>
      <value>A <see cref="T:System.Int32" /> that specifies the width of the bottom border of the cell in pixels. Default value is 1 pixel.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZoneCell.BackgroundFillStyle">
      <summary>Gets or sets the style of the background fill of the cell <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrBackgroundFillStyle" /> enumeration member that specifies the style of the background fill of the cell. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrBackgroundFillStyle">OcrBackgroundFillStyle.Solid</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /></example>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrBackgroundFillStyle backgroundFillStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrBackgroundFillStyle getBackgroundFillStyle()
public void setBackgroundFillStyle(OcrBackgroundFillStyle value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">
      <summary>The zone parser used when automatically performing page-layout decomposition (auto-zoning). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The zone parser is used when automatically performing page-layout decomposition (auto-zoning) with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.NativeAutoZone(NativeOcrZoneParser zoneParser, NativeOcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, OcrProgressCallback callback)</see>
            method.</para>
        <para>Note: <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">NativeOcrZoneParser.Leadtools</see> is not supported in this version of LEADTOOLS.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneParser.Default">
      <summary>(0x00000000)The OCR engine will determine at runtime which algorithm will be applied. It depends from trade-off and language setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneParser.Legacy">
      <summary>(0x00000001)Simple page decomposition. It is faster but less accurate than <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">NativeOcrZoneParser.Standard</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneParser.Standard">
      <summary>(0x00000002)The most accurate page parsing algorithm. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneParser.Fast">
      <summary>(0x00000003)This algorithm can be treated as a simplified variant of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneParser">NativeOcrZoneParser.Legacy</see>. This algorithm does not try to find tables on the page.
            It is the fastest (but least accurate) parsing algorithm available. Use it only for simple page parsing tasks. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneParser.Leadtools">
      <summary>(0x00000004)Use LEADTOOLS MRC zoning. This option is not supported in this version of LEADTOOLS. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor">
      <summary>Defines a setting name, friendly name, type and range. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> contains the properties of a setting. You can get the settings supported by the OCR engine by calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see> and you can get the descriptor (an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />) of a
            setting by calling <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see>.</para>
        <para>The following table lists the members of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> and their meaning:
            <table><tr><th>Member</th><th>Description</th><th>Valid For</th></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Name">IOcrSettingDescriptor.Name</see></td><td>The unique name of setting. This is the same name you pass to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see></td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType">IOcrSettingDescriptor.ValueType</see></td><td>One of the <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration member specifying the setting type</td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.FriendlyName">IOcrSettingDescriptor.FriendlyName</see></td><td>Friendly name of the setting. You can use this name in your user application</td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units">IOcrSettingDescriptor.Units</see></td><td>Name of the unit of the value</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue">IOcrSettingDescriptor.IntegerMinimumValue</see></td><td>Minimum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue">IOcrSettingDescriptor.IntegerMaximumValue</see></td><td>Maximum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see></td><td>If <strong>true</strong>, the enum setting members can be combined together (OR'ed), otherwise; only one enum member can be set at a time</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see></td><td>Returns an array of strings containing the enumeration members friendly names. You can use these name in your user application</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see></td><td>Returns an array of integers containing the enumeration members values</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue">IOcrSettingDescriptor.DoubleMinimumValue</see></td><td>Minimum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue">IOcrSettingDescriptor.DoubleMaximumValue</see></td><td>Maximum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength">IOcrSettingDescriptor.StringMaximumLength</see></td><td>Maximum number of characters in the value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringNullAllowed">IOcrSettingDescriptor.StringNullAllowed</see></td><td>A <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for this setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see></td></tr></table></para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see>
            method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see> method returns a description of the setting (its type, friendly name and
            value range), you can then use the various setting get and set methods to query and change the value of a certain setting. For example, if the setting type is
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">IOcrSettingManager.GetIntegerValue</see> to get
            the current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">IOcrSettingManager.SetIntegerValue</see> to change its value. Refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@interface LTOcrSettingDescriptor : NSObject</pre>
      </objectivec>
      <java>
        <pre>public class OcrSettingDescriptor</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">
      <summary>Gets an array of strings containing the enumeration members friendly names. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of strings containing the enumeration members friendly names.</returns>
      <remarks>
        <para>If the enum members can be OR'ed together, you can OR multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>- (NSArray*)getEnumMemberFriendlyNames;</pre>
      </objectivec>
      <java>
        <pre>public ArrayList&lt;String&gt; getEnumMemberFriendlyNames()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">
      <summary>Gets an array containing the enumeration members values. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of integers containing the enumeration members values.</returns>
      <remarks>
        <para>If the enum members can be OR'ed together, you can OR multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)getEnumMemberValues:(int**)enumMemberValues
                valuesCount:(unsigned int*)valuesCount
                      error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public int[] getEnumMemberValues()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.freeEnumMemberValues_ObjectiveC(System.Int32[])">
      <summary>Free enumMemberValues array allocated by getEnumMemberValues method <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="enumMemberValues">The int array to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>- (void)freeEnumMemberValues:(int*)enumMemberValues;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Name">
      <summary>Gets the unique name of setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The unique name of setting.</value>
      <remarks>
        <para>This is the same name you pass to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* name;</pre>
      </objectivec>
      <java>
        <pre>public String getName()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType">
      <summary>Gets the setting value type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration member specifying the setting type.</value>
      <remarks>
        <para>You can also get the setting value type by calling <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingValueType(System.String)">IOcrSettingManager.GetSettingValueType</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTOcrSettingValueType valueType;</pre>
      </objectivec>
      <java>
        <pre>public OcrSettingValueType getValueType()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.FriendlyName">
      <summary>Gets the friendly name of the setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The friendly name of the setting.</value>
      <remarks>
        <para>The friendly name of a setting provides more description and is suitable for using it directly in your UI. For example, the LEADTOOLS OCR Professional engine contain the setting
            "Recognition.DefaultCharacterFilter", the friendly name of this setting is "Default fill character".</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
      <java>
        <pre>public String getFriendlyName()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units">
      <summary>Gets the name of the unit of the value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The name of the unit of the value.</value>
      <remarks>
        <para>The unit name gives you hint on what value to pass. For example, the LEADTOOLS OCR Professional engine contains the integer setting "Recognition.IcrNumeral.CharacterBoxData.Width", the 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units" /> value of this setting is reported as "Inch". Hence, you know that the integer value you pass must be in inches.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* units;</pre>
      </objectivec>
      <java>
        <pre>public String getUnits()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue">
      <summary>Gets the minimum allowed value for the integer setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The minimum allowed value for the integer setting.</value>
      <remarks>
        <para>You should not pass a value less than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue" /> when setting the value of the integer setting.</para>
        <para>If the integer setting has no minimum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue" /> will be set to <see cref="F:System.Int32.MinValue">Int32.MinValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int integerMinimumValue;</pre>
      </objectivec>
      <java>
        <pre>public int getIntegerMinimumValue()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue">
      <summary>Gets the maximum allowed value for the integer setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The maximum allowed value for the integer setting.</value>
      <remarks>
        <para>You should not pass a value greater than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue" /> when setting the value of the integer setting.</para>
        <para>If the integer setting has no maximum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue" /> will be set to <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int integerMaximumValue;</pre>
      </objectivec>
      <java>
        <pre>public int getIntegerMaximumValue()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">
      <summary>Gets a value indicating whether the enum members can be OR'ed together. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>True</strong> if the enum members can be OR'ed {|}together (the enum has a flag type); otherwise it it <strong>false</strong>.</value>
      <remarks>
        <para>If the enum members can be OR'ed{|} together, you can OR{|} multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member from obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL enumIsFlags;</pre>
      </objectivec>
      <java>
        <pre>public boolean getEnumIsFlags()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue">
      <summary>Gets the minimum allowed value for the double setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The minimum allowed value for the double setting.</value>
      <remarks>
        <para>You should not pass a value less than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue" /> when setting the value of the double setting.</para>
        <para>If the double setting has no minimum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue" /> will be set to <see cref="F:System.Double.MinValue">Double.MinValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) double doubleMinimumValue;</pre>
      </objectivec>
      <java>
        <pre>public double getDoubleMinimumValue()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue">
      <summary>Gets the maximum allowed value for the double setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The maximum allowed value for the double setting.</value>
      <remarks>
        <para>You should not pass a value greater than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue" /> when setting the value of the double setting.</para>
        <para>If the double setting has no maximum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue" /> will be set to <see cref="F:System.Double.MaxValue">Double.MaxValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) double doubleMaximumValue;</pre>
      </objectivec>
      <java>
        <pre>public double getDoubleMaximumValue()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength">
      <summary>Gets the maximum number of characters allowed in the value of the string setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>Maximum number of characters allowed in the value of the string setting.</value>
      <remarks>
        <para>You should not pass a string that contain more characters than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength" /> when setting the value of a string setting.</para>
        <para>If the string setting has no limit on the number of characters allowed, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength" /> will be set to -1.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) int stringMaximumLength;</pre>
      </objectivec>
      <java>
        <pre>public int getStringMaximumLength()</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringNullAllowed">
      <summary>Gets a value that indicates whether a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for a string setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>True</strong> if a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for a string setting; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL stringNullAllowed;</pre>
      </objectivec>
      <java>
        <pre>public boolean getStringNullAllowed()</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSettingManager">
      <summary>Manages the underlying engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Loading settings|Saving settings|OCR settings|Settings | OCR,Settings</keywords>
      <remarks>
        <para>Access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see> property.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> allows you to do the following:
            <list type="bullet"><item><description>Get and set the underlying engine-specific settings. <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain additional specific 
            features and functionalities that can be queried and updated using the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</description></item><item><description>Load and save the engine settings. Once you set up the OCR engine, re-use these settings by saving the engine state into memory or to
            an XML file on disk. You can later reload these settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</description></item></list></para>
        <para>Use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). Get all of the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method returns
            a description of the setting (its type, friendly name and value range). You can then use the various get and set methods to query and change the values of specific settings.
            For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the current value of the
            setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to the example below for a complete demo.</para>
        <para>This interface also contains methods to load and save the engine state to a .NET stream or an XML file on disk. The following table lists all the states saved:
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>, <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">IOcrEngine.ZoneManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrZoneManager.OmrOptions.FrameDetectionMethod</see>,
            <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrZoneManager.OmrOptions.Sensitivity</see> and the state characters of
            <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrZoneManager.OmrOptions.GetStateRecognitionCharacter</see>.</td></tr></table></para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see> property.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see> state is also
            saved when the engine settings are saved. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">IOcrSettingManager.Save</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Shared Sub OcrSettingManagerExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

            ' Dump all the settings supported by this engine to a text file on disk
            DumpAllSettings(settingManager)

            ' Image file to OCR
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")

            ' File formats to save
            Dim formats As DocumentFormat() = {DocumentFormat.Text, DocumentFormat.Pdf}

            For Each format As DocumentFormat In formats
               ' Generate the output file name
               Dim outFileName As String = Path.ChangeExtension(tifFileName, DocumentWriter.GetFormatFileExtension(format))

               Console.WriteLine("Format: {0}" &amp; vbLf &amp; "Output file: {1}", format, outFileName)

               Dim detectFontStyles As Integer = 0
               Dim recognizeFontAttributes As Boolean = False

               If format = DocumentFormat.Text Then
                  ' This is 'text' format, we dont need to recognize fonts attributes such as bold and italic
                  ' This will make the recognition process faster

                  Console.WriteLine("Turning off font attributes")

                  ' Save the old settings
                  detectFontStyles = settingManager.GetEnumValue("Recognition.Fonts.DetectFontStyles")
                  recognizeFontAttributes = settingManager.GetBooleanValue("Recognition.Fonts.RecognizeFontAttributes")

                  ' Turn them off now
                  settingManager.SetEnumValue("Recognition.Fonts.DetectFontStyles", "None")
                  settingManager.SetBooleanValue("Recognition.Fonts.RecognizeFontAttributes", False)
               End If

               ' Show the settings we are using
               Console.WriteLine("Recognizing using these font attributes settings:")
               Console.WriteLine("Recognition.Fonts.DetectFontStyles: {0}", _
                                 settingManager.GetEnumValueAsString("Recognition.Fonts.DetectFontStyles"))
               Console.WriteLine("Recognition.Fonts.RecognizeFontAttributes: {0}", _
                                 settingManager.GetBooleanValue("Recognition.Fonts.RecognizeFontAttributes"))


               ' Recognize and save the file to the output format
               Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
                  ' Add a page to the document
                  Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

                  ' Recognize the page
                  ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  ' check and automatically auto-zones the page
                  ocrPage.Recognize(Nothing)

                  ' Save the document we have as PDF
                  ocrDocument.Save(outFileName, format, Nothing)
               End Using

               ' Re-set the original settings
               If format = DocumentFormat.Text Then
                  Console.WriteLine("Resetting original settings")
                  settingManager.SetEnumValue("Recognition.Fonts.DetectFontStyles", detectFontStyles)
                  settingManager.SetBooleanValue("Recognition.Fonts.RecognizeFontAttributes", recognizeFontAttributes)
               End If
            Next

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Private Shared Sub DumpAllSettings(settingManager As IOcrSettingManager)
         ' Write all the settings into a disk file
         Dim settingsFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Settings.txt")
         Using writer As StreamWriter = File.CreateText(settingsFileName)
            writer.WriteLine("Settings")
            Dim settingNames As String() = settingManager.GetSettingNames()

            For Each settingName As String In settingNames
               Dim sd As IOcrSettingDescriptor = settingManager.GetSettingDescriptor(settingName)

               writer.WriteLine("  Name:           {0}", sd.Name)
               writer.WriteLine("  ValueType:      {0}", sd.ValueType)
               writer.WriteLine("  FriendlyName:   {0}", sd.FriendlyName)

               Select Case sd.ValueType
                  Case OcrSettingValueType.BeginCategory
                     writer.WriteLine("-------------------------------------")
                     Exit Select

                  Case OcrSettingValueType.[Integer]
                     writer.WriteLine("    Units: {0}", sd.Units)
                     writer.WriteLine("    IntegerMinimumValue: {0}", sd.IntegerMinimumValue)
                     writer.WriteLine("    IntegerMaximumValue: {0}", sd.IntegerMaximumValue)
                     Exit Select

                  Case OcrSettingValueType.[Enum]
                     writer.WriteLine("    EnumIsFlags: {0}", sd.EnumIsFlags)
                     writer.WriteLine("    EnumMemberFriendlyNames")
                     If True Then
                        Dim values As Integer() = sd.GetEnumMemberValues()
                        Dim names As String() = sd.GetEnumMemberFriendlyNames()
                        For i As Integer = 0 To values.Length - 1
                           writer.WriteLine("      {0} : {1}", names(i), values(i))
                        Next
                     End If
                     Exit Select

                  Case OcrSettingValueType.[Double]
                     writer.WriteLine("    Units: {0}", sd.Units)
                     writer.WriteLine("    DoubleMinimumValue: {0}", sd.DoubleMinimumValue)
                     writer.WriteLine("    DoubleMaximumValue: {0}", sd.DoubleMaximumValue)
                     Exit Select

                  Case OcrSettingValueType.[Boolean]
                     Exit Select

                  Case OcrSettingValueType.Character
                     Exit Select

                  Case OcrSettingValueType.[String]
                     writer.WriteLine("    StringMaximumLength:   {0}", sd.StringMaximumLength)
                     writer.WriteLine("    StringNullAllowed:     {0}", sd.StringNullAllowed)
                     Exit Select

                  Case OcrSettingValueType.Rectangle
                     Exit Select

                  Case OcrSettingValueType.EndCategory
                     Exit Select
                  Case Else

                     Exit Select
               End Select
            Next
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public static void OcrSettingManagerExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Dump all the settings supported by this engine to a text file on disk
            DumpAllSettings(settingManager);

            // Image file to OCR
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");

            // File formats to save
            DocumentFormat[] formats = { DocumentFormat.Text, DocumentFormat.Pdf };

            foreach (DocumentFormat format in formats)
            {
               // Generate the output file name
               string outFileName = Path.ChangeExtension(tifFileName, DocumentWriter.GetFormatFileExtension(format));

               Console.WriteLine("Format: {0}\nOutput file: {1}", format, outFileName);

               int detectFontStyles = 0;
               bool recognizeFontAttributes = false;

               if (format == DocumentFormat.Text)
               {
                  // This is 'text' format, we dont need to recognize fonts attributes such as bold and italic
                  // This will make the recognition process faster

                  Console.WriteLine("Turning off font attributes");

                  // Save the old settings
                  detectFontStyles = settingManager.GetEnumValue("Recognition.Fonts.DetectFontStyles");
                  recognizeFontAttributes = settingManager.GetBooleanValue("Recognition.Fonts.RecognizeFontAttributes");

                  // Turn them off now
                  settingManager.SetEnumValue("Recognition.Fonts.DetectFontStyles", "None");
                  settingManager.SetBooleanValue("Recognition.Fonts.RecognizeFontAttributes", false);
               }

               // Show the settings we are using
               Console.WriteLine("Recognizing using these font attributes settings:");
               Console.WriteLine("Recognition.Fonts.DetectFontStyles: {0}", settingManager.GetEnumValueAsString("Recognition.Fonts.DetectFontStyles"));
               Console.WriteLine("Recognition.Fonts.RecognizeFontAttributes: {0}", settingManager.GetBooleanValue("Recognition.Fonts.RecognizeFontAttributes"));


               // Recognize and save the file to the output format
               using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to the document
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

                  // Recognize the page
                  // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  // check and automatically auto-zones the page
                  ocrPage.Recognize(null);

                  // Save the document we have as PDF
                  ocrDocument.Save(outFileName, format, null);
               }

               // Re-set the original settings
               if (format == DocumentFormat.Text)
               {
                  Console.WriteLine("Resetting original settings");
                  settingManager.SetEnumValue("Recognition.Fonts.DetectFontStyles", detectFontStyles);
                  settingManager.SetBooleanValue("Recognition.Fonts.RecognizeFontAttributes", recognizeFontAttributes);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private static void DumpAllSettings(IOcrSettingManager settingManager)
      {
         // Write all the settings into a disk file
         string settingsFileName = Path.Combine(LEAD_VARS.ImagesDir, "Settings.txt");
         using (StreamWriter writer = File.CreateText(settingsFileName))
         {
            writer.WriteLine("Settings");
            string[] settingNames = settingManager.GetSettingNames();

            foreach (string settingName in settingNames)
            {
               IOcrSettingDescriptor sd = settingManager.GetSettingDescriptor(settingName);

               writer.WriteLine("  Name:           {0}", sd.Name);
               writer.WriteLine("  ValueType:      {0}", sd.ValueType);
               writer.WriteLine("  FriendlyName:   {0}", sd.FriendlyName);

               switch (sd.ValueType)
               {
                  case OcrSettingValueType.BeginCategory:
                     writer.WriteLine("-------------------------------------");
                     break;

                  case OcrSettingValueType.Integer:
                     writer.WriteLine("    Units: {0}", sd.Units);
                     writer.WriteLine("    IntegerMinimumValue: {0}", sd.IntegerMinimumValue);
                     writer.WriteLine("    IntegerMaximumValue: {0}", sd.IntegerMaximumValue);
                     break;

                  case OcrSettingValueType.Enum:
                     writer.WriteLine("    EnumIsFlags: {0}", sd.EnumIsFlags);
                     writer.WriteLine("    EnumMemberFriendlyNames");
                     {
                        int[] values = sd.GetEnumMemberValues();
                        string[] names = sd.GetEnumMemberFriendlyNames();
                        for (int i = 0; i &lt; values.Length; i++)
                        {
                           writer.WriteLine("      {0} : {1}", names[i], values[i]);
                        }
                     }
                     break;

                  case OcrSettingValueType.Double:
                     writer.WriteLine("    Units: {0}", sd.Units);
                     writer.WriteLine("    DoubleMinimumValue: {0}", sd.DoubleMinimumValue);
                     writer.WriteLine("    DoubleMaximumValue: {0}", sd.DoubleMaximumValue);
                     break;

                  case OcrSettingValueType.Boolean:
                     break;

                  case OcrSettingValueType.Character:
                     break;

                  case OcrSettingValueType.String:
                     writer.WriteLine("    StringMaximumLength:   {0}", sd.StringMaximumLength);
                     writer.WriteLine("    StringNullAllowed:     {0}", sd.StringNullAllowed);
                     break;

                  case OcrSettingValueType.Rectangle:
                     break;

                  case OcrSettingValueType.EndCategory:
                     break;

                  default:
                     break;
               }
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public async Task OcrSettingManagerExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         IOcrSettingManager settingManager = ocrEngine.SettingManager;

         // Dump all the settings supported by this engine to a text file on disk
         await DumpAllSettings(settingManager);

         // Change the RecognitionModuleTradeoff to drop
         string settingName = "Recognition.RecognitionModuleTradeoff";
         settingManager.SetEnumValue(settingName, "Fast");

         // Now use the new settings, notice that the result PDF file should not contain images
         string tifFileName = @"Assets\Ocr1.tif";
         string pdfFileName = "Ocr1.pdf";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
         using (RasterCodecs codecs = new RasterCodecs())
         {
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Recognize the page
         // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
         // check and automatically auto-zones the page
         ocrPage.Recognize(null);

         // Save the document we have as PDF
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }

      private async Task DumpAllSettings(IOcrSettingManager settingManager)
      {
         // Write all the settings into a disk file
         string settingsFileName = "Settings.txt";

         StorageFile file = await Tools.AppLocalFolder.CreateFileAsync(settingsFileName);
         using (IRandomAccessStream fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))
         {
             using (IOutputStream outputStream = fileStream.GetOutputStreamAt(0))
             {
                 using (DataWriter writer = new DataWriter(outputStream))
                 {
                    writer.WriteString("Settings");

                     string[] settingNames = settingManager.GetSettingNames();

                     foreach (string settingName in settingNames)
                     {
                        IOcrSettingDescriptor sd = settingManager.GetSettingDescriptor(settingName);

                        writer.WriteString(string.Format("  Name:           {0}", sd.Name));
                        writer.WriteString(string.Format("  ValueType:      {0}", sd.ValueType));
                        writer.WriteString(string.Format("  FriendlyName:   {0}", sd.FriendlyName));

                        switch (sd.ValueType)
                        {
                           case OcrSettingValueType.BeginCategory:
                              writer.WriteString("-------------------------------------");
                              break;

                           case OcrSettingValueType.Integer:
                              writer.WriteString(string.Format("    Units: {0}", sd.Units));
                              writer.WriteString(string.Format("    IntegerMinimumValue: {0}", sd.IntegerMinimumValue));
                              writer.WriteString(string.Format("    IntegerMaximumValue: {0}", sd.IntegerMaximumValue));
                              break;

                           case OcrSettingValueType.Enum:
                              writer.WriteString(string.Format("    EnumIsFlags: {0}", sd.EnumIsFlags));
                              writer.WriteString("    EnumMemberFriendlyNames");
                              {
                                 int[] values = sd.GetEnumMemberValues();
                                 string[] names = sd.GetEnumMemberFriendlyNames();
                                 for (int i = 0; i &lt; values.Length; i++)
                                 {
                                    writer.WriteString(string.Format("      {0} : {1}", names[i], values[i]));
                                 }
                              }
                              break;

                           case OcrSettingValueType.Double:
                              writer.WriteString(string.Format("    Units: {0}", sd.Units));
                              writer.WriteString(string.Format("    DoubleMinimumValue: {0}", sd.DoubleMinimumValue));
                              writer.WriteString(string.Format("    DoubleMaximumValue: {0}", sd.DoubleMaximumValue));
                              break;

                           case OcrSettingValueType.Boolean:
                              break;

                           case OcrSettingValueType.Character:
                              break;

                           case OcrSettingValueType.String:
                              writer.WriteString(string.Format("    StringMaximumLength:   {0}", sd.StringMaximumLength));
                              writer.WriteString(string.Format("    StringNullAllowed:     {0}", sd.StringNullAllowed));
                              break;

                           case OcrSettingValueType.Rectangle:
                              break;

                           case OcrSettingValueType.EndCategory:
                              break;

                           default:
                              break;
                        }
                     }

                     await writer.StoreAsync();
                     writer.DetachStream();
                 }

                 await outputStream.FlushAsync();
             }
         }
      }</code>
        <!--IOcrSettingManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>@interface LTOcrSettingManager : NSObject</pre>
      </objectivec>
      <java>
        <pre>public class OcrSettingManager</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">
      <summary>Gets all the names of the supported engine-specific settings. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of <see cref="T:System.String" /> that contains the names of the supported engine-specific settings.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>- (NSArray*)getSettingNames:(NSError**)outError;</pre>
      </objectivec>
      <java>
        <pre>public ArrayList&lt;String&gt; getSettingNames()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)">
      <summary>Gets a value indicating whether the given setting name is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name.</param>
      <returns>
        <strong>True</strong> if the setting name given by <paramref name="settingName" /> is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)isSettingNameSupported:(NSString*)settingName
                         error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public boolean isSettingNameSupported(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingValueType(System.String)">
      <summary>Gets a value indicating the type of the given setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <returns>A <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration value indicating the type of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (LTOcrSettingValueType)getSettingValueType:(NSString*)settingName
                                       error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public OcrSettingValueType getSettingValueType(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">
      <summary>Gets the descriptor of the given setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>An instance of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> that describe the type of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (LTOcrSettingDescriptor*)getSettingDescriptor:(NSString*)settingName
                                          error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public OcrSettingDescriptor getSettingDescriptor(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">
      <summary>Gets the current value of an integer setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current integer value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "integer" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of an integer setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (int)getIntegerValue:(NSString*)settingName
                 error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public int getIntegerValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">
      <summary>Sets the value of an integer setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "integer" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of an integer setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setIntegerValue:(NSString*)settingName
                  value:(int)value
                  error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setIntegerValue(String settingName,
                            int value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)">
      <summary>Gets the current value of an enum setting as an integer. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current enum value of the setting with the unique name <paramref name="settingName" /> as an integer.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method returns the value as an integer, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the integer value of the setting is the integer value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>).</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the integer value of the setting is the sum of the OR'ed flagged set.</para>
        <para>To set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>To get or set the enum value from a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (int)getEnumValue:(NSString*)settingName
              error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public int getEnumValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)">
      <summary>Sets the value of an enum setting from an integer. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">The new setting value as an integer.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method sets the value as an integer, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>), then the integer value of the setting is the integer value of the enum member.</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>), then the integer value of the setting is the sum of the OR'ed flagged set.</para>
        <para>The enum member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>.</para>
        <para>To get the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" />.</para>
        <para>To get or set the enum value from a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setEnumValue:(NSString*)settingName
                 val:(int)val
               error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setEnumValue(String settingName,
                         int value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)">
      <summary>Gets the current value of an enum setting as string. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current enum value of the setting with the unique name <paramref name="settingName" /> as a string.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "enum" type setting; otherwise, this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method returns the value as a string, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the string value of the setting is the friendly name value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>)</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the string value of the setting is the friendly names of the flagged set separated by a comma.</para>
        <para>The string enum values are case-sensitive.</para>
        <para>To get the enum value as a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" />.</para>
        <para>To get or set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (NSString*)getEnumValueAsString:(NSString*)settingName
                            error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public String getEnumValueAsString(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)">
      <summary>Sets the value of an enum setting from string. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">The new setting value as a string</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>If the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the string value of the setting is the friendly name value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>)</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the string value of the setting is the friendly names of the flagged set separated by a comma.</para>
        <para>The string enum values are case-sensitive.</para>
        <para>To set the enum value as a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>To get or set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setEnumValue:(NSString*)settingName
               value:(NSString*)value
               error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setEnumValue(String settingName,
                         String value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetDoubleValue(System.String)">
      <summary>Gets the current value of a double setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current double value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "double" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a double setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetDoubleValue(System.String,System.Double)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (double)getDoubleValue:(NSString*)settingName
                   error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public double getDoubleValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetDoubleValue(System.String,System.Double)">
      <summary>Sets the value of a double setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "double" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a double setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetDoubleValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setDoubleValue:(NSString*)settingName
                 value:(double)value
                 error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setDoubleValue(String settingName,
                           double value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetBooleanValue(System.String)">
      <summary>Gets the current value of a boolean setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current boolean value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "boolean" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a boolean setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetBooleanValue(System.String,System.Boolean)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)getBooleanValue:(NSString*)settingName
                  error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public boolean getBooleanValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetBooleanValue(System.String,System.Boolean)">
      <summary>Sets the value of a boolean setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "boolean" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a boolean setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetBooleanValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setBooleanValue:(NSString*)settingName
                  value:(BOOL)value
                  error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setBooleanValue(String settingName,
                            boolean value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetCharacterValue(System.String)">
      <summary>Gets the current value of a character setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. Check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current character value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "character" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a character setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetCharacterValue(System.String,System.Char)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" />. Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetCharacterValue(System.String,System.Char)">
      <summary>Sets the value of a character setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "character" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a character setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetCharacterValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetStringValue(System.String)">
      <summary>Gets the current value of a string setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current string value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "string" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a string setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetStringValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (NSString*)getStringValue:(NSString*)settingName
                      error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public String getStringValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetStringValue(System.String,System.String)">
      <summary>Sets the value of a string setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "string" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a string setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetStringValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setStringValue:(NSString*)settingName
                 value:(NSString*)value
                 error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setStringValue(String settingName,
                           String value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue(System.String)">
      <summary>Gets the current value of a logical rectangle setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current logical rectangle value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "logical rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a logical rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue(System.String,Leadtools.Forms.LogicalRectangle)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (LeadRect)getRectangleValue:(NSString*)settingName
                        error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public LeadRect getRectangleValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue_WinRT(System.String)">
      <summary>
            Gets the current value of a rectangle setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current rectangle value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue(System.String,Leadtools.Forms.LogicalRectangle)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue(System.String,Leadtools.Forms.LogicalRectangle)">
      <summary>Sets the value of a logical rectangle setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "logical rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a logical rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setRectangleValue:(NSString*)settingName 
                    value:(LeadRect)value 
                    error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setRectangleValue(String settingName,
                              LeadRect value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue_WinRT(System.String,Leadtools.LeadRect)">
      <summary>
            Sets the value of a rectangle setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="settingName" /> setting must be a "rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)">
      <summary>Sets the value of a setting from a string. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value as a string.</param>
      <remarks>
        <para>To get the type of a setting along with other information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" />.</para>
        <para> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see>
            have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <paramref name="value" /> must be convertible to the correct setting type. For example, if the setting is a <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>
            value, <paramref name="value" /> can be "1" or "193". If the value cannot be converted, an exception will be thrown.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (BOOL)setValue:(NSString*)settingName
           value:(NSString*)value
           error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>
public void setValue(String settingName,
                     String value)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)">
      <summary>Gets the current value of a setting as a string. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current value of the setting with the unique name <paramref name="settingName" /> as a string.</returns>
      <remarks>
        <para>To get the type of a setting along with other information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />.</para>
        <para> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see>
            have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
      <objectivec>
        <pre>
- (NSString*)getValue:(NSString*)settingName
                error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public String getValue(String settingName)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)">
      <summary>Loads the OCR engine settings from a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the settings.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. You can later reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all of the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                          <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
        <para>You can save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />, you can load and save the settings into any .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub LoadSettingsExample1()
         Dim settingsFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PlusSettings.xml")
         Dim userDictionaryFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MyDictionary.ud")
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

            ' Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(New String() {"en", "de"})

            ' Set the spell checking options
            ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native
            ocrEngine.SpellCheckManager.SpellLanguage = "en"

            ' Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part")
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", False)
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400)
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont")
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark")
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", Nothing)
            ' Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7)
            ' Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red")

            ' Save the settings
            settingManager.Save(settingsFileName)

            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         ' Now create another instance of the engine, load the settings and make sure they are the same
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

            ' Load the settings
            settingManager.Load(settingsFileName)

            ' Check the character set
            Dim languages As String() = ocrEngine.LanguageManager.GetEnabledLanguages()
            Debug.Assert(languages(0) = "en" AndAlso languages(1) = "de")

            ' Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native)
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage = "en")

            ' Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") = "Part")
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") = False)
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") = 2400)
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") = "MyFont")
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") = "MyMark")
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") Is Nothing)
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") = 7)
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") = "Blue, Green, Red")

            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void LoadSettingsExample1()
      {
         string settingsFileName = Path.Combine(LEAD_VARS.ImagesDir, "PlusSettings.xml");
         string userDictionaryFileName = Path.Combine(LEAD_VARS.ImagesDir, "MyDictionary.ud");
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(new string[] { "en", "de" });

            // Set the spell checking options
            ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native;
            ocrEngine.SpellCheckManager.SpellLanguage = "en";

            // Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part");
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", false);
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400);
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont");
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark");
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", null);
            // Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7);
            // Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red");

            // Save the settings
            settingManager.Save(settingsFileName);

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         // Now create another instance of the engine, load the settings and make sure they are the same
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Load the settings
            settingManager.Load(settingsFileName);

            // Check the character set
            string[] languages = ocrEngine.LanguageManager.GetEnabledLanguages();
            Debug.Assert(languages[0] == "en" &amp;&amp; languages[1] == "de");

            // Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.SpellCheckEngine == OcrSpellCheckEngine.Native);
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage == "en");

            // Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") == "Part");
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") == false);
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") == 2400);
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") == "MyFont");
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") == "MyMark");
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") == null);
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") == 7);
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") == "Blue, Green, Red");

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrSettingManager.Load(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)">
      <summary>Loads the OCR engine settings from a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The stream to read the settings from.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                          <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
        <para>You can save the settings to a .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />, you can load and save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms.DocumentWriters

      Public Sub LoadSettingsExample2()
         Dim userDictionaryFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MyDictionary.ud")
         ' Stream to save the settings to
         Dim ms As New MemoryStream()

         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

            ' Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(New String() {"en", "de"})

            ' Set the spell checking options
            ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.None
            ocrEngine.SpellCheckManager.SpellLanguage = "en"

            ' Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part")
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", False)
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400)
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont")
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark")
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", Nothing)
            ' Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7)
            ' Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red")

            ' Save the settings
            settingManager.Save(ms)

            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using

         ' Reset the stream position to the beginning
         ms.Position = 0

         ' Now create another instance of the engine, load the settings and make sure they are the same
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

            ' Load the settings
            settingManager.Load(ms)

            ' Check the character set
            Dim languages As String() = ocrEngine.LanguageManager.GetEnabledLanguages()
            Debug.Assert(languages(0) = "en" AndAlso languages(1) = "de")

            ' Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native)
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage = "en")

            ' Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") = "Part")
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") = False)
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") = 2400)
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") = "MyFont")
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") = "MyMark")
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") Is Nothing)
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") = 7)
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") = "Blue, Green, Red")

            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms.DocumentWriters;

      public void LoadSettingsExample2()
      {
         string userDictionaryFileName = Path.Combine(LEAD_VARS.ImagesDir, "MyDictionary.ud");
         // Stream to save the settings to
         MemoryStream ms = new MemoryStream();

         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(new string[] { "en", "de" });

            // Set the spell checking options
            ocrEngine.SpellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.None;
            ocrEngine.SpellCheckManager.SpellLanguage = "en";

            // Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part");
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", false);
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400);
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont");
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark");
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", null);
            // Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7);
            // Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red");

            // Save the settings
            settingManager.Save(ms);

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         // Reset the stream position to the beginning
         ms.Position = 0;

         // Now create another instance of the engine, load the settings and make sure they are the same
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Load the settings
            settingManager.Load(ms);

            // Check the character set
            string[] languages = ocrEngine.LanguageManager.GetEnabledLanguages();
            Debug.Assert(languages[0] == "en" &amp;&amp; languages[1] == "de");

            // Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.SpellCheckEngine == OcrSpellCheckEngine.Native);
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage == "en");

            // Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") == "Part");
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") == false);
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") == 2400);
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") == "MyFont");
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") == "MyMark");
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") == null);
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") == 7);
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") == "Blue, Green, Red");

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <!--IOcrSettingManager.Load(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)">
      <summary>Saves the OCR engine current settings to a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the settings to read.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                          <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
      </remarks>
      <para>You can load the settings from a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" />, you can load and save the settings into any .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream)">
      <summary>Saves the OCR engine current settings to a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The stream to write the settings to.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                      <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
      </remarks>
      <para>You can load the settings from a .NET stream <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" />, you can load and save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves the OCR engine current settings to a disk file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of the file containing the settings to read.</param>
      <param name="xmlOptions">XML options to use.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                          <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
      </remarks>
      <para>You can load the settings from a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" />, you can load and save the settings into any .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream,Leadtools.Forms.Ocr.OcrWriteXmlOptions)">
      <summary>Saves the OCR engine current settings to a .NET stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">The stream to write the settings to.</param>
      <param name="xmlOptions">XML options to use.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <table><tr><th>Part</th><th>Members</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></td><td>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></td><td>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></td><td>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> and
                         <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></td><td>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
                      <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</td></tr></table></para>
      </remarks>
      <para>You can load the settings from a .NET stream <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" />, you can load and save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSettingValueType">
      <summary>Defines a setting type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see>
            method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see> method returns a description of the setting (its type, friendly name and
            value range), you can then use the various setting get and set methods to query and change the value of a certain setting. For example, if the setting type is
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">IOcrSettingManager.GetIntegerValue</see> to get
            the current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">IOcrSettingManager.SetIntegerValue</see> to change its value. Refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine specific settings and their meanings, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettings">OCR Engine Specific Settings</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrEngineSpecificSettings">OCR Engine Specific Settings</seealso>
      <objectivec>
        <pre>enum LTOcrSettingValueType</pre>
      </objectivec>
      <java>
        <pre>public enum OcrSettingValueType</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.BeginCategory">
      <summary>(0x00000000)Beginning of a new category. This setting has no value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_BeginCategory</pre>
      </objectivec>
      <java>
        <pre>BEGIN_CATEGORY</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.EndCategory">
      <summary>(0x00000001)End of the current category. This setting has no value. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_EndCategory</pre>
      </objectivec>
      <java>
        <pre>END_CATEGORY</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Integer">
      <summary>(0x00000002)An integer setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Integer</pre>
      </objectivec>
      <java>
        <pre>INTEGER</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Enum">
      <summary>(0x00000003)An enum setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Enum</pre>
      </objectivec>
      <java>
        <pre>ENUM</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Double">
      <summary>(0x00000004)A double value setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Double</pre>
      </objectivec>
      <java>
        <pre>DOUBLE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Boolean">
      <summary>(0x00000005)A boolean setting (<strong>true</strong> or <strong>false</strong>). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Boolean</pre>
      </objectivec>
      <java>
        <pre>BOOLEAN</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Character">
      <summary>(0x00000006)A character (UNICODE) setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Character</pre>
      </objectivec>
      <java>
        <pre>CHARACTER</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.String">
      <summary>(0x00000007)A string (UNICODE) setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_String</pre>
      </objectivec>
      <java>
        <pre>STRING</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Rectangle">
      <summary>(0x00000008)A <see cref="T:Leadtools.Forms.LogicalRectangle" /> setting. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrSettingValueType_Rectangle</pre>
      </objectivec>
      <java>
        <pre>RECTANGLE</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">
      <summary>OCR spell checker type <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> for more information on the type of spell check engines available and any restrictions.</para>
        <para>Set <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> to <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.None</see> to disable the spell
            checking sub system.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see> engine supports the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.None</see> only.
            This is the native spell checker that ship with the Professional OCR runtimes. User words and dictionaries are not supported. Only one spell check
            language can be enabled at a time using <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see> engine supports all the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine"> types.
            User words and dictionaries are supported and the engine automatically loads the dictionaries based on the language(s) currently
            enabled in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />. <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> is not used
            and will have no effect.</see></para>
        <para>The following information are for the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see> engine only.</para>
        <para>All OCR Advantage spell checker engines support adding user words to create custom dictionaries through
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.AddUserWords(System.String,System.String[])">IOcrSpellCheckManager.AddUserWords</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Native</see> engine uses the internal LEADTOOLS cross-platform spell checker. The dictionary
            files ship with LEADTOOLS in the Advantage runtime in the following format <c>Advantage.[Language].dic</c> where [Language] is the
            specific language such as "en" for English or "de" for German. This engine has no extra dependencies besides the dictionary files.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.OS</see> engine uses the Operating System specific spell checker if any. In the Windows
            environment, this is the .NET spell checker (requires .NET 3.0 or later to be installed on the machine) and supports English, French, German and Spanish
            only. In order to use this engine, <strong>Leadtools.Forms.SpellCheckers.OS.dll</strong> must exist in your Bin folder next to
            <strong>Leadtools.Forms.Ocr.Advantage.dll</strong>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Hunspell</see> uses the popular Hunspell spell checker (through the standard .NET
            NHunspell wrapper). LEADTOOLS setup does not contain the NHunspell binaries or any language dictionaries. You must download the required assemblies
            from the NHunspell page as well as the dictionaries for the languages you are interested in. Visit the NHunspell home page at <a href="http://nhunspell.sourceforge.net">http://nhunspell.sourceforge.net</a> for more information.</para>
        <para>The following prerequisites must exist in order for you to use the Hunspell engine with LEADTOOLS Advantage OCR engine:</para>
        <list type="bullet">
          <item>
            <para>The <strong>Leadtools.Forms.SpellChecker.Hunspell.dll</strong> assembly must be in your Bin folder next to
            <strong>Leadtools.Forms.Ocr.Advantage.dll</strong>.</para>
          </item>
          <item>
            <para>
              <strong>NHunspell.dll</strong>: NHunspell .NET wrapper. Must be in your bin folder next to <strong>Leadtools.Forms.SpellChecker.Hunspell.dll</strong>.</para>
          </item>
          <item>
            <para>
              <strong>Hunspellx86.dll</strong> or <strong>Hunspellx64.dll</strong>: Hunspell native DLL. The correct version for your platform must exist in the
            OCR Advantage runtime folder. By default, the location is:</para>
            <para>"&lt;LEADTOOLS_INSTALLDIR&gt;\Bin\Common\OcrAdvantageRuntime"</para>
          </item>
          <item>
            <para>
              <strong>
                <i>lang.aff</i>
              </strong> and <strong><i>lang.dic</i></strong> dictionary files: Language dictionary files for the Hunspell engine.
            Visit <b>http://wiki.services.openoffice.org/wiki/Dictionaries</b> to download the files for the languages you are interested in. You can use the same
            name as the original dictionary file, for example, "en_US" for English US dictionary.</para>
            <para>The dictionary file must reside in the OCR Advantage runtime folder. By default, the location is:</para>
            <para>"&lt;LEADTOOLS_INSTALLDIR&gt;\Bin\Common\OcrAdvantageRuntime"</para>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </example>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckEngine.None">
      <summary>(0x00000000)<para>No spell checker (disables the spell check sub system)</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckEngine.Native">
      <summary>(0x00000001)<para>Native engine spell checker.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckEngine.OS">
      <summary>(0x00000002)<para>The operating system spell checker.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckEngine.Hunspell">
      <summary>(0x00000003)<para>Hunspell spell checker.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager">
      <summary>Manages the spell checking sub system of the OCR engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Spell language|Languages|Checking spelling | OCR,Spelling and correction</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
             <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see> property.</para>
        <para>LEADTOOLS OCR supports spell checking and correction through the use of external dictionaries. The value of
             <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> acts as a global switch to use a particular spell checker or turn spell
             checking off.</para>
        <para>If the value of this property is <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.None</see>, then no spell checking is performed during the recognition process. When you set
             the value of this property to one of the supported engines, then the spell checking system is enabled and correction will be performed during the recognition process.</para>
        <para>When you set the <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> property to a value other than <strong>None</strong>, the OCR
             engine will automatically try to load the spell checker requested and queries the language dictionaries found on your machine. You can change
             <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" /> at any time during the life of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> depending on your
             application needs. For example, to disable spell checking while recognition certain types of documents only and then re-enable it for other types.</para>
        <para>All the OCR engines allow you to turn spell checking off (set <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" /> to <see cref="F:Leadtools.Forms.Ocr.OcrSpellCheckEngine.None">OcrSpellCheckEngine.None</see>). The
             additional spell checker support is as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <strong>Advantage OCR engine</strong>: <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Native</see>, 
               <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.OS</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Hunspell</see>
             are supported. The Hunspell engine is not installed by LEADTOOLS. You must download this engine separately from NHunspell web site.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <strong>Professional OCR engine</strong>: <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Native</see> only. This is the native spell checker
             that ship with the Professional OCR runtimes.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <strong> Arabic OCR engine</strong>: Spell checker is not currently supported.</para>
            </description>
          </item>
        </list>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellCheckEngines">IOcrSpellCheckManager.GetSupportedSpellCheckEngines</see> to query at runtime the spell check engines supported by the current OCR engine.</para>
        <para>The default LEADTOOLS installation will only ship with <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Native</see> dictionaries for the
             following languages: English, German, French, Spanish and Italian. Additional language dictionaries are included in the LEADTOOLS Additional OCR
             Features setup available at <a href="http://www.leadtools.com">http://www.leadtools.com</a>.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages">IOcrSpellCheckManager.GetSupportedSpellLanguages</see> to query at runtime the spell check languages
             (dictionaries) installed on the current machine and <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetAdditionalSpellLanguages">IOcrSpellCheckManager.GetAdditionalSpellLanguages</see> to query at
             runtime the extra spell check languages (dictionaries) available to the engine but not installed (included in the Additional OCR Features Setup described above).</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Drawing

      Public Sub OcrSpellCheckManagerExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            Dim spellCheckManager As IOcrSpellCheckManager = ocrEngine.SpellCheckManager

            ' Get the spell language supported (languages with a dictionary)
            Dim spellLanguages As String() = spellCheckManager.GetSupportedSpellLanguages()
            For Each spellLanguage As String In spellLanguages
               Console.WriteLine(spellLanguage)
            Next

            ' Check if English is supported
            Dim language As String = "en"
            If spellCheckManager.IsSpellLanguageSupported(language) Then
               ' Yes, set it
               spellCheckManager.SpellLanguage = language
               Console.WriteLine("Current spell language: {0}", spellCheckManager.SpellLanguage)
            End If

            ' Enable the spell checking system
            spellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native

            ' Now perform other OCR functions here

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms;
      using Leadtools.Forms.Ocr;
      using Leadtools.Drawing;

      public void OcrSpellCheckManagerExample()
      {
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            IOcrSpellCheckManager spellCheckManager = ocrEngine.SpellCheckManager;

            // Get the spell language supported (languages with a dictionary)
            string[] spellLanguages = spellCheckManager.GetSupportedSpellLanguages();
            foreach(string spellLanguage in spellLanguages)
               Console.WriteLine(spellLanguage);

            // Check if English is supported
            string language = "en";
            if(spellCheckManager.IsSpellLanguageSupported(language))
            {
               // Yes, set it
               spellCheckManager.SpellLanguage = language;
               Console.WriteLine("Current spell language: {0}", spellCheckManager.SpellLanguage);
            }

            // Enable the spell checking system
            spellCheckManager.SpellCheckEngine = OcrSpellCheckEngine.Native;

            // Now perform other OCR functions here

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrSpellCheckManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine" />
      <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager">IOcrSettingManager</see>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrSpellLanguageDictionaries">OCR Spell Language Dictionaries</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <objectivec>
        <pre>@interface LTOcrSpellCheckManager : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellCheckEngines">
      <summary>Gets a list of the spell checker supported by this OCR engine type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine" /> that contains the spell checker supported by this OCR engine type.</returns>
      <remarks>
        <para>To get and set the current spell checker, use <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" /> and to query if a certain spell checker is supported by this OCR engine, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellCheckEngineSupported(Leadtools.Forms.Ocr.OcrSpellCheckEngine)" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </example>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellCheckEngineSupported(Leadtools.Forms.Ocr.OcrSpellCheckEngine)">
      <summary>Checks if a certain spell checker is supported this OCR engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="spellCheckEngine">Spell checker type to query.</param>
      <returns>
        <strong>true</strong> if <paramref name="spellCheckEngine" /> is supported by this OCR engine, otherwise; <strong>false</strong>.</returns>
      <remarks>
        <para>To get and set the current spell checker, use <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" /> and to query the list of spell checkers supported by this OCR engine, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellCheckEngines" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </example>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages">
      <summary>Gets the languages supported by the current spell checker. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An array of string values containing the names of the languages supported by the current spell checker.</value>
      <remarks>
        <para>This method returns the names of all the languages that is supported by a dictionary in the current spell checker.</para>
        <para>The Professional OCR engine supports using one spell language at time, use <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />. The value you set in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" /> property must be one of the values returned by the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method (along
            with two special values). The available languages (dictionaries) depends on the current spell check engine set in
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" />.</para>
        <para>The Advantage OCR engine supports using multiple spell languages and the engine automatically loads the dictionaries based on the
            enabled language set in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrSpellLanguageDictionaries"> OCR Spell Language Dictionaries</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <objectivec>
        <pre>- (NSArray*)getSupportedSpellLanguages:(NSError**)outError;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetAdditionalSpellLanguages">
      <summary>Gets the additional languages supported by the current spell checker but not installed. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An array of string values containing the names of the additional languages supported by the current spell checker but not installed in the current machine.</value>
      <remarks>
        <para>This method returns the names of all the languages that is supported by a dictionary in the current spell checker. By default, LEADTOOLS does
            not install all the language dictionaries for all the supported languages. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> for more information.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrSpellLanguageDictionaries"> OCR Spell Language Dictionaries</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <objectivec>
        <pre>- (NSArray*)getAdditionalSpellLanguages:(NSError**)outError;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellLanguageSupported(System.String)">
      <summary>Gets a value that determine whether a given spell language is supported by the current spell checker. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="name">The language name. For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</param>
      <returns>
        <strong>True</strong> if this language can be used as the spell language; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>You can get the names of all the spell languages supported by the engine with the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:FO.Topics.OcrSpellLanguageDictionaries">OCR Spell Language Dictionaries</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <objectivec>
        <pre>
- (BOOL)isSpellLanguageSupported:(NSString*)name
                           error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.AddUserWords(System.String,System.String[])">
      <summary>Adds user words to a language dictionary. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="language">The language name. For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</param>
      <param name="words">Array of words to add.</param>
      <remarks>
        <para>Only supported by the LEADTOOLS OCR Advantage engine.</para>
        <para>Use this method to add user words to the current loaded dictionary. Note that the OCR engine does not automatically correct the misspelling of
            words unless the confidence of the characters are low.</para>
      </remarks>
      <example>
        <!--IOcrSpellCheckManager.AddUserWords-->
      </example>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">
      <summary>Gets or sets the current spell checker. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine" /> enumeration member that specifies the current spell checker. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.Native</see>.</value>
      <remarks>
        <para>Set the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" /> to <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.None</see> to globally disable any spell checking and correction during
            the recognition process.</para>
        <para>Not all OCR engine types support all available spell check engines, use <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellCheckEngines" /> to get a list of the supported spell check engins by this
            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellCheckEngineSupported(Leadtools.Forms.Ocr.OcrSpellCheckEngine)" /> to check if a certain spell checker is supported.</para>
        <para>For more information on the spell check engines supported by the various LEADTOOLS OCR engines, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </example>
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">
      <summary>Gets or sets a value that indicate the current language (dictionary) to use for spell checking. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> value that represent the name of the language (dictionary) to use for spell checking.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see> supports only one spell check language at a time. This language must be
            enabled using <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see> engine supports multiple spell check languages and the engine automatically loads the
            language dictionaries based on the language(s) currently enabled in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />. <strong>Important</strong>:
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" /> is not used and will have no effect.</para>
        <para>The name of the spelling language should be in the same format used in specifying character set languages as described in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />. Once you set
            a spell language and assuming the spell checking system is enabled, the engine will now use this language dictionary to check and correct the spelling of the recognized text.</para>
        <para>You can get the names of the spelling languages supported by the system with the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method. The available languages (dictionaries) depends
            on the current spell check engine set in <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine" />.</para>
        <para>In addition to the values returned by <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />, you can use the following special string case-sensitive values:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>A <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) string reference</term><description>Automatic spell language selection. If only one language has been enabled in the language environment with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])">IOcrLanguageManager.EnableLanguages</see> method, then this language will be automatically selected for spelling too providing
            it is one of the languages supported by the spelling check system (one of the values returned by <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />).</description></item><item><term>none</term><description>The checking subsystem will not use the Language dictionary at all.</description></item></list></para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.OcrSpellLanguageDictionaries">OCR Spell Language Dictionaries</seealso>
      <seealso cref="T:FO.Topics.OcrLanguagesAndSpellChecking">OCR Languages and Spell Checking</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* spellLanguage;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneCollection">
      <summary>Contains the zones in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> holds the zones currently added into an OCR page. You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> used by a
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> through the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different zones in the page.</para>
        <para>To work with the zones of the page, you can first call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will start the page layout decomposition process
            and the engine will fill the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property with the different zones found. You can then examine or modify the different zones with the
            various <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> properties. For example, use <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrZoneCollection.Add</see> to add a new zone and
            <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)">IOcrZoneCollection.Remove</see> to remove a zone. You can use <see cref="P:System.Collections.Generic.ICollection`1.Count">IOcrZoneCollection.Count</see> to get the number of
            zones currently in the page.</para>
        <para>To modify a zone, use <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see> to get the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object you are interested in, modify the zone then set it back
            through <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see>. Note that since <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> is a structure (value type), you must use the setter. The following code snippet
            illustrates how to change the zone type of the 4th zone in an ocrPage:</para>
        <para>
          <code>
            // Remember, the index is zero-based, so 4th zone has an index of 3
            OcrZone zone = ocrPage.Zones[3];
            // Prevent this zone from being recognized
            zone.ZoneType = OcrZoneType.Graphic;
            ocrPage.Zones[3] = zone;
            </code>
        </para>
        <para>When adding or updating a zone, you should directly initialize the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>
            and the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> properties of the zone,
            since they will not take on their default values.</para>
        <para>You should not modify the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Id">OcrZone.Id</see> property. When adding zones, leave this value to the default of 0.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> property of the updating zone should be one of the following: <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>.</para>
        <para>The preferred method of updating a zone is as illustrated in the code snippet above, first get the zone you are interested in, update it and set it back into the collection.</para>
        <para>It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have no recognition result. For more information, refer
            to <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.</para>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> will clear the zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection and fills it
            again with the zones found by the engine.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</seealso>
      <objectivec>
        <pre>@interface LTOcrZoneCollection : NSMutableArray</pre>
      </objectivec>
      <java>
        <pre>public class OcrZoneCollection implements List&lt;OcrZone&gt;</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCollection.GetZoneCells(Leadtools.Forms.Ocr.OcrZone)">
      <summary>Gets the cells of a zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zone">The OCR zone that contains the cells.</param>
      <returns>An array that contains the zone cells if available.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCollection.SetZoneCells(Leadtools.Forms.Ocr.OcrZone,Leadtools.Forms.Ocr.OcrZoneCell[])">
      <summary>Sets the cells of a zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zone">The OCR zone that contains the cells.</param>
      <param name="cells">An array that contains the zone cells. Pass null to clear the cells of this zone.</param>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneCell" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrTextStyle">
      <summary>The style of a text zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Used as value for <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextStyle">OcrZone.TextStyle</see> to determine the style of the text.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextStyle.Normal">
      <summary>(0x00000000)Normal (flow text). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextStyle.Header">
      <summary>(0x00000001)In header section of the page. Usually smaller font. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextStyle.Footer">
      <summary>(0x00000002)In footer section of the page. Usually smaller font. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextStyle.Heading">
      <summary>(0x00000003)Heading is a text by itself. You can use <see cref="P:Leadtools.Forms.Ocr.OcrZone.FontRatio" /> to calculate the type of the heading (h1, h2, h3, etc). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrTextDirection">
      <summary>Determines the direction of text in a zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Used as value for <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextDirection">OcrZone.TextDirection</see> to determine the direction of the text.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextDirection.LeftToRight">
      <summary>(0x00000000)Text is left to right <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextDirection.RightToLeft">
      <summary>(0x00000001)Text is right to left (Arabic or Hebrew for example) <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextDirection.TopToBottom">
      <summary>(0x00000002)Text is top to bottom (Japanese or Latin vertical text) <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrTextDirection.BottomToTop">
      <summary>(0x00000003)Text is bottom to top <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZone">
      <summary>Represents a rectangular area on a page containing a feature of interest to the user. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> structure contains all the necessary information for describing a zone. A zone is a rectangular area on an image
             containing a feature of interest to the user. The image data covered by each zone is handled and processed (typically recognized) separately.</para>
        <para>Access the zones of an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property. This is a
             <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> allowing the user to examine and modify the various zones on the page.</para>
        <para>Zones can be divided into two basic categories: whether a zone is to be recognized or whether it should be treated as graphic. Zones containing
             text information can be considered to be either of the flowing type or of a table type. This basic classification of zones helps the OCR engine handle
             text information correctly.</para>
        <para>Use the <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" /> property to modify the set of valid characters for recognition of text zone. Specifying the character
             set correctly is a recognition accuracy issue.</para>
        <para>Other members of the zone structure specify how the checking subsystem will function for the particular zone.</para>
        <para>Construct the zones of a page automatically using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>. You must call this method and finish any
             modification you might have to the zones before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To modify a zone, use <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see> to get the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object of interest, modify the
             zone then set it back through <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see>. Note that since <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> is a structure
             (value type), use the setter. The following code snippet illustrates how to change the zone type of the 4th zone in an ocrPage:</para>
        <para>
          <pre>
            <code>
             // Remember, the index is zero-based, so 4th zone has an index of 3
             OcrZone zone = ocrPage.Zones[3];
             // Prevent this zone from being recognized
             zone.ZoneType = OcrZoneType.Graphic;
             ocrPage.Zones[3] = zone;
             </code>
          </pre>
        </para>
        <para>When adding or updating a zone directly initialize the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>,
             <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see> and the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>
             properties of the zone, since they will not take on their default values.</para>
        <para>Do not modify the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Id">OcrZone.Id</see> property. When adding zones, leave this value to the default of 0.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> property of the updating zone should be one of the following:
             <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> or
             <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>.</para>
        <para>The preferred method of updating a zone is as illustrated in the code snippet above, first get the zone of interest, update it and set it
             back into the collection.</para>
        <para>LEADTOOLS OCR .NET also supports OMR (Optical Mark Recognition) in all the engines. For more information, refer to
             <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>If the zone is a table, the you can use <see cref="T:Leadtools.Forms.Ocr.IOcrTableZoneManager" /> to get information and manipulate the cells properties.</para>
        <para>To create an <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object with all values initialized to default values, use <see cref="M:Leadtools.Forms.Ocr.OcrTypeManager.CreateDefaultOcrZone">OcrTypeManager.CreateDefaultOcrZone</see>. This
             is a shortcut for languages that do not automatically initialize all the members of a structure, such as JavaScript.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrZones">Working with OCR Zones</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@interface LTOcrZone : NSObject&lt;NSCopying&gt;</pre>
      </objectivec>
      <java>
        <pre>public class OcrZone</pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Id">
      <summary>Gets the zone ID. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An integer value specifying the zone ID.</value>
      <remarks>
        <para>The zone ID is managed by the engine and so the application is not allowed to change its value.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) int id;</pre>
      </objectivec>
      <java>
        <pre>
public int getId()
public void setId(int value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Name">
      <summary>Gets or sets the optional zone name. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> value that specifies the optional zone name.</value>
      <remarks>
        <para>The name is a user-defined value and is not used by the OCR engine. Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will always fill the page with
            zones whose <see cref="P:Leadtools.Forms.Ocr.OcrZone.Name" /> is set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* name;</pre>
      </objectivec>
      <java>
        <pre>
public String getName()
public void setName(String value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Bounds">
      <summary>Gets or sets the coordinates of the zone in logical units. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that contain the coordinates of the zone in logical units.</value>
      <remarks>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will return zones with <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" /> coordinates that do not overlap with each other. It
            is the developers responsibility when modifying the zones of the page to make sure the coordinates of those zones follow the same rule.</para>
        <para>The coordinates of the zone is in logical (page) coordinates. If the <see cref="T:Leadtools.Forms.LogicalUnit" /> value of the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" /> property is not
            <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>, then use the page resolution stored in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">IOcrPage.DpiX</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">IOcrPage.DpiY</see> if conversion to pixels is required.</para>
        <para>Also the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">IOcrPage.GetZoneBoundsInPixels</see> method can get the coordinates of any zone in pixels.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Bounds_WinRT">
      <summary>
            Gets or sets the coordinates of the zone in pixels.
            </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> that contain the coordinates of the zone in pixels.</value>
      <remarks>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will return zones with <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" /> coordinates that do not overlap with each other. It
            is the developers responsibility when modifying the zones of the page to make sure the coordinates of those zones follow the same rule.</para>
        <para>The coordinates of the zone is in pixels.</para>
        <para>Also the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">IOcrPage.GetZoneBoundsInPixels</see> method can get the coordinates of any zone in pixels.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">
      <summary>Gets or sets the zone type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> enumeration member that specifies the zone type.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType" /> property is used to classify the zone into one of the three basic zone-categories: flowed text, table or graphics.
             To set this, use <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> abd
             <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see>, respectively.</para>
        <para>One of these values is typically created by the page-layout decomposition (auto-zoning) process, however they have the same
             meaning for the recognition algorithms: the zone contains flowed text.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type is for table-type zones. In the case of this type of zone, the OCR engine will
             try to reconstruct the original table text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> is
             specified, no recognition will run on the zone and all other recognition related settings will be ignored.</para>
        <para>For horizontal text recognition you can set the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType</see> to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>.</para>
        <para>The related <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.AutoGraphic</see> type can appear as the result of the page-layout decomposition
             (auto-zoning) process, and also signifies a graphic zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneType zoneType;</pre>
      </objectivec>
      <java>
        <pre>
public OcrZoneType getZoneType()
public void setZoneType(OcrZoneType value)             </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">
      <summary>Gets or sets the character set filter for the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" /> enumeration members that specify the character set filter for the zone.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" /> can be used to the Language environment for this zone by by specifying character set filters. For more information, refer to
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" />.</para>
        <para>
          <strong>Note:</strong> LEADTOOLS OCR Advantage Engine only supports <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Digit</see> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Plus</see> to indicate a numeric zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneCharacterFilters characterFilters;</pre>
      </objectivec>
      <java>
        <pre>
public OcrZoneCharacterFilters getCharacterFilters()
public void setCharacterFilters(OcrZoneCharacterFilters value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Language">
      <summary>Gets or sets the zone language. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>A string that indicate the zone language. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrZone.Language" /> property is supported in LEADTOOLS OCR Advantage Engine only.</para>
        <para>This property can be used to set or get the language of a zone. Setting the language of zone: The zone language must be set before the recognition process and the value returned
            will depend on the initial value and number of languages enabled in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> as follows:</para>
        <table>
          <tr>
            <th>Input value</th>
            <th>Number of languages enabled</th>
            <th>Output value</th>
            <th>Recognition language used</th>
          </tr>
          <tr>
            <td>Null or empty string (default)</td>
            <td>1</td>
            <td>Null or empty string (default) since no language detection is performed</td>
            <td>Enabled language</td>
          </tr>
          <tr>
            <td>Null or empty string (default)</td>
            <td>Greater than 1</td>
            <td>Detection is perform, <see cref="P:Leadtools.Forms.Ocr.OcrZone.Language" /> will contain the detected language name (even if the language is not enabled but supported)</td>
            <td>Language detected in the zone</td>
          </tr>
          <tr>
            <td>A supported language name, such "en" or "de"</td>
            <td>1 or greater</td>
            <td>No language detection is performed</td>
            <td>Input language value</td>
          </tr>
        </table>
        <para>Zone language detection is a dictionary based method. For more information on OCR languages and spell
            checkers, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrZoneLanguage.language;</pre>
      </objectivec>
      <java>
        <pre>
public String getLanguage()
public void setLanguage(String value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.IsEngineZone">
      <summary>Gets or sets a value that indicate whether this is an engine zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this is an engine zone, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>An engine zone is one created by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> and not added or modified by the user. If you
            add or modify a zone, the value of <see cref="P:Leadtools.Forms.Ocr.OcrZone.IsEngineZone" /> will always be <strong>false</strong>. The engine uses this property internally
            for storing internal data used for extra processing.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL isEngineZone;</pre>
      </objectivec>
      <java>
        <pre>
public Boolean getIsEngineZone()
public void setIsEngineZone(Boolean value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.ForeColor">
      <summary>Gets or sets the foregound color of zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The foregound color of the zone. Default value is Black.</value>
      <remarks>
        <para>Only used by the LEADTOOLS Advantage OCR engine.</para>
        <para>The zone colors is used with text zones only and will be used when creating the final document if the format support colors (such as PDF or Microsoft Word).</para>
        <para>To automatically detect the color of text zones, set the value of the "Recognition.DetectColors" setting to <strong>true</strong> and call
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTRasterColor foreColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getForeColor()
public void setForeColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.BackColor">
      <summary>Gets or sets the background color of zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The background color of the zone. Default value is White.</value>
      <remarks>
        <para>Only used by the LEADTOOLS Advantage OCR engine.</para>
        <para>The zone colors is used with text zones only and will be used when creating the final document if the format support colors (such as PDF or Microsoft Word).</para>
        <para>To automatically detect the color of text zones, set the value of the "Recognition.DetectColors" setting to <strong>true</strong> and call
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTRasterColor backColor;</pre>
      </objectivec>
      <java>
        <pre>
public RasterColor getBackColor()
public void setBackColor(RasterColor value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.ViewPerspective">
      <summary>Gets or sets a value that determines the orientation and rotation of the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The orientation and rotation of the zone. Default value is <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>.</value>
      <remarks>
        <para>The view perspective determines if the zone is rotated or flipped. For more information, refer to <see cref="T:Leadtools.RasterViewPerspective" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTRasterViewPerspective viewPerspective;</pre>
      </objectivec>
      <java>
        <pre>
public RasterViewPerspective getViewPerspective()
public void setViewPerspective(RasterViewPerspective value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.TextDirection">
      <summary>Gets or sets a value that determines the text direction of the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The text direction of the zone. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrTextDirection">OcrTextDirection.LeftToRight</see>.</value>
      <remarks>
        <para>This value is updated by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and can also be set by the user to determine the text flow direction. This
            value will effect how the final document is generated if the format supports text direction.s</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrTextDirection viewPerspective;</pre>
      </objectivec>
      <java>
        <pre>
public OcrTextDirection getTextDirection()
public void setTextDirection(OcrTextDirection value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.TextStyle">
      <summary>Gets or sets a value that determines the text style of the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The text style of the zone. Default value is <see cref="T:Leadtools.Forms.Ocr.OcrTextStyle">OcrTextStyle.Normal</see>.</value>
      <remarks>
        <para>This value is updated by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and can also be set by the user to determine the text style. This
            value will effect how the final document is generated if the format supports text direction.s</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOcrTextStyle textStyle;</pre>
      </objectivec>
      <java>
        <pre>
public OcrTextStyle getTextStyle()
public void setTextStyle(OcrTextStyle value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.FontRatio">
      <summary>Gets or sets a value that determines the font ratio of the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>The font ratio of the zone. Default value is 1.0.</value>
      <remarks>
        <para>This value is helpful for the LEADTOOLS document writer. A value of 1.0 is treated as the average font size in the whole document. Each zone
            can have its own font ratio that deviates from the default value. This is useful to calculate header sizes.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>@property (nonatomic, assign) double fontRatio;</pre>
      </objectivec>
      <java>
        <pre>
public double getFontRatio()
public void setFontRatio(double value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">
      <summary>Character set filter. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>This enumeration lists the available character set filter elements. The Language environment can be narrowed by specifying Character Set filters. The name of each filter
            element indicates which category of characters it validates. This enumeration is attributes with the <see cref="T:System.FlagsAttribute" /> and its members can be combined  (OR-ed) together.</para>
        <para>The filters can have an effect either at zone level (by specifying the zone's <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see> property), or globally, at
            image level (defined by the "Recognition.DefaultCharacterFilter" setting).</para>
        <para>The way to set no filtering is to give the value <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.All</see>.</para>
        <para>Characters of the document that are not part of the specified character set will either be rejected or will be recognized as a validated character with a similar shape. For instance,
            if only the English language has been selected and the document contains a letter "Capital A with acute", then the recognized output will be a letter "Capital A"</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>enum LTOcrZoneCharacterFilters</pre>
      </objectivec>
      <java>
        <pre>public enum OcrZoneCharacterFilters</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.None">
      <summary>(0x00000000)No character filters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneCharacterFilters_None</pre>
      </objectivec>
      <java>
        <pre>NONE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Digit">
      <summary>(0x00000001)Recognition of numerals only. For example: "3" (Digit Three). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneCharacterFilters_Digit</pre>
      </objectivec>
      <java>
        <pre>DIGIT</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Uppercase">
      <summary>(0x00000002)Recognition of uppercase letters only, including accented ones. For example: "A" (Capital A). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Lowercase">
      <summary>(0x00000004)Recognition of lowercase letters only including accented ones. For example: "a" (Lowercase a). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Punctuation">
      <summary>(0x00000008)Recognition of punctuation signs only. For example: "!" (Exclamation Mark). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Miscellaneous">
      <summary>(0x00000010)Recognition of other miscellaneous characters only. For example: "+" (Plus sign). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Plus">
      <summary>(0x00000020)Enables the use of the "FilterPlus" characters. The FilterPlus characters are added after any filtering. For more information, refer to <see cref="T:FO.Topics.OcrEngineSpecificSettingsProfessional">LEADTOOLS OCR Professional Engine Settings</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneCharacterFilters_Plus</pre>
      </objectivec>
      <java>
        <pre>PLUS</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.All">
      <summary>(0x0000001F)All characters. Since all elements are enabled, there is no filtering. This a combination of Digit (| Uppercase | Lowercase | Punctuation | Miscellaneous). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Alpha">
      <summary>(0x00000006)Upper and lowercase letters only. This is a combination of (Uppercase | Lowercase). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Numbers">
      <summary>(0x00000021)Digits plus the "FilterPlus" characters This is a combination of (Digit | Plus). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">
      <summary>Possible content types of the zones <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>A fill method must have been assigned to all zones in their <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see> properties before processing.</para>
        <para>Not all fill methods are available to all engines. To determine which fill methods are available use
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeFillMethods">IOcrZoneManager.GetSupportedNativeFillMethods</see>. Trying to set a fill method not available to the engine will cause an error.</para>
        <para>Each zone needs to be associated with a <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> and <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />. This is needed because some recognition modules support more
            than one fill method, and some fill methods are accepted by more than one recognition module.</para>
        <para>It is important to ensure that the recognition module/fill method pair is suitable. For more information on permitted recognition module/fill method pairs refer to
            <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.</para>
        <para>Note that the auto-zoning <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> will create the zones with the value
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Default</see> in their <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see> properties.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <objectivec>
        <pre>enum LTNativeOcrZoneFillMethod</pre>
      </objectivec>
      <java>
        <pre>public enum NativeOcrZoneFillMethod</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.Default">
      <summary>(0x00000000)Default zone filling method. The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone(OcrProgressCallback callback)</see> method will set all the fill method of the
            zones found to this value. You can set the zone filling method to another type by using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.NativeAutoZone(Leadtools.Forms.Ocr.NativeOcrZoneParser,Leadtools.Forms.Ocr.NativeOcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone(OcrZoneParser zoneParser, NativeOcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, OcrProgressCallback callback)</see>
            with <i>fillMethod</i> set the zone type desired. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneFillMethod_Default</pre>
      </objectivec>
      <java>
        <pre>DEFAULT</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.OmniFont">
      <summary>(0x00000001)Omnifont zone filling method. It denotes a machine printed text with any typeface which is not too stylized. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.Omr">
      <summary>(0x00000002)Optical mark zone filling method. It denotes a possible marking within the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneFillMethod_Omr</pre>
      </objectivec>
      <java>
        <pre>OMR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.Icr">
      <summary>(0x00000003)Handprinted zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.DraftDotMatrix9">
      <summary>(0x00000004)9-pin draft dot-matrix zone filling method. It denotes a 9-pin draft dot-matrix printout. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.DraftDotMatrix24">
      <summary>(0x00000005)24-pin draft dot-matrix zone filling method. It denotes a 24-pin draft dot-matrix printout. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.OcrA">
      <summary>(0x00000006)OCR-A zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.OcrB">
      <summary>(0x00000007)OCR-B zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.Micr">
      <summary>(0x00000008)Magnetic ink character filling method. Mostly used in bank checks. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneFillMethod_Micr</pre>
      </objectivec>
      <java>
        <pre>MICR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.DotDigit">
      <summary>(0x00000009)Dot-digit zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.DashDigit">
      <summary>(0x0000000A)Dash-digit zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.NoRecognition">
      <summary>(0x0000000B)No recognition will be attempted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.Asian">
      <summary>(0x0000000C)The zone contains Asian characters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod.CMC7">
      <summary>(0x0000000D)CMC7 zone filling method. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneManager">
      <summary>Support for determining the various zone types, recognition modules and fill methods supported by the OCR engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <keywords>Zones</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">IOcrEngine.ZoneManager</see>
            property.</para>
        <para>When calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> method on a page, the generated zone's type
            (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>) will always be one of the supported values as reported by the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</para>
        <para>Before manually changing any of the above zone properties, you must determine whether the particular value is supported by this instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> by
            using <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)" /> first.</para>
        <para>To get all the supported zone types use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes" />.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms

      Public Sub ZoneManagerExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            ' Get the zone manager
            Dim ocrZoneManager As IOcrZoneManager = ocrEngine.ZoneManager

            ' Show all the zone types supported by this engine
            Console.WriteLine("Hit enter to show the supported zone types")
            Console.ReadLine()

            Dim zoneTypes As OcrZoneType() = ocrZoneManager.GetSupportedZoneTypes()
            Console.WriteLine("Supported zone types:")
            Console.WriteLine("---------------------")
            For Each zoneType As OcrZoneType In zoneTypes
               Console.WriteLine("  {0}", zoneType)
            Next

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;

      public void ZoneManagerExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            // Get the zone manager
            IOcrZoneManager ocrZoneManager = ocrEngine.ZoneManager;

            // Show all the zone types supported by this engine
            Console.WriteLine("Hit enter to show the supported zone types");
            Console.ReadLine();

            OcrZoneType[] zoneTypes = ocrZoneManager.GetSupportedZoneTypes();
            Console.WriteLine("Supported zone types:");
            Console.WriteLine("---------------------");
            foreach (OcrZoneType zoneType in zoneTypes)
               Console.WriteLine("  {0}", zoneType);

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;

      [TestMethod]
      public void ZoneManagerExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // Get the zone manager
         IOcrZoneManager ocrZoneManager = ocrEngine.ZoneManager;

         OcrZoneType[] zoneTypes = ocrZoneManager.GetSupportedZoneTypes();
         Debug.WriteLine("Supported zone types:");
         Debug.WriteLine("---------------------");
         foreach(OcrZoneType zoneType in zoneTypes)
            Debug.WriteLine("  {0}", zoneType);

         OcrZoneRecognitionModule[] recognitionModules = ocrZoneManager.GetSupportedRecognitionModules();
         Debug.WriteLine("Supported recognition modules:");
         Debug.WriteLine("---------------------");
         foreach(OcrZoneRecognitionModule recognitionModule in recognitionModules)
            Debug.WriteLine("  {0}", recognitionModule);

         OcrZoneFillMethod[] fillMethods = ocrZoneManager.GetSupportedFillMethods();
         Debug.WriteLine("Supported fillMethods:");
         Debug.WriteLine("---------------------");
         foreach(OcrZoneFillMethod fillMethod in fillMethods)
            Debug.WriteLine("  {0}", fillMethod);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrZoneManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.WorkingWithOcrZones">Working with OCR Zones</seealso>
      <objectivec>
        <pre>@interface LTOcrZoneManager : NSObject</pre>
      </objectivec>
      <java>
        <pre>public class OcrZoneManager</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes">
      <summary>Gets a list of zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> members that list the zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>To determine whether a particular zone type is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>
- (BOOL)getSupportedZoneTypes:(LTOcrZoneType**)supportedZoneTypes
                       length:(unsigned int*)length
                        error:(NSError**)outError;            </pre>
      </objectivec>
      <java>
        <pre>public ArrayList&lt;OcrZoneType&gt; getSupportedZoneTypes()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.freeSupportedZonesTypes_ObjectiveC(Leadtools.Forms.Ocr.OcrZoneType[])">
      <summary>Free supportedZoneTypes array allocated by getSupportedZoneTypes method <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="supportedZoneTypes">The LTOcrZoneType array to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>- (void)freeSupportedZonesTypes:(LTOcrZoneType*)supportedZoneTypes;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)">
      <summary>Checks whether the specified zone type is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="zoneType">The zone type to check.</param>
      <returns>True if <paramref name="zoneType" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> otherwise; it is false.</returns>
      <remarks>
        <para>To get all the zone types supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>- (BOOL)isZoneTypeSupported:(LTOcrZoneType)zoneType;</pre>
      </objectivec>
      <java>
        <pre>public boolean isZoneTypeSupported(OcrZoneType zoneType)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeZoneTypes">
      <summary>Gets a list of zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" /> members that list the zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To determine whether a particular zone type is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeZoneTypeSupported(Leadtools.Forms.Ocr.NativeOcrZoneType)" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeZoneTypeSupported(Leadtools.Forms.Ocr.NativeOcrZoneType)">
      <summary>Checks whether the specified zone type is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="zoneType">The zone type to check.</param>
      <returns>True if <paramref name="zoneType" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> otherwise; it is false.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To get all the zone types supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeZoneTypes" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeRecognitionModules">
      <summary>Gets a list of the recognition modules supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> members that list the recognition modules supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To determine whether a particular recognition module is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeRecognitionModuleSupported(Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule)" />.</para>
        <para>The supported recognition modules are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To determine whether there are
            additional recognition modules that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalNativeRecognitionModules" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an array of one item that contains <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeRecognitionModuleSupported(Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule)">
      <summary>Checks whether the specified recognition module is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="recognitionModule">The recognition module to check.</param>
      <returns>
        <strong>True</strong> if <paramref name="recognitionModule" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To get all the recognition modules supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeRecognitionModules" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalNativeRecognitionModules">
      <summary>Gets an array of the additional recognition modules supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> enumeration members that contain the additional recognition modules supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The additional recognition modules are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional
            recognition module packs to be able to support these modules in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>To get all the recognition modules supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeRecognitionModules" />.</para>
        <para>To determine whether a particular recognition module is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeRecognitionModuleSupported(Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule)" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an array of one item that contains <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeFillMethods">
      <summary>Gets a list of the fill method supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" /> members that list the fill method supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To determine whether a particular fill method is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeFillMethodSupported(Leadtools.Forms.Ocr.NativeOcrZoneFillMethod)" />.</para>
        <para>The supported fill methods are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To determine whether there are
            additional fill methods that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalNativeFillMethods" />.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeFillMethodSupported(Leadtools.Forms.Ocr.NativeOcrZoneFillMethod)">
      <summary>Checks whether the specified fill method is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fillMethod">The fill method to check.</param>
      <returns>
        <strong>True</strong> if <paramref name="fillMethod" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>To get all the fill methods supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeFillMethods" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalNativeFillMethods">
      <summary>Gets an array of the additional fill methods supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" /> enumeration members that contain the additional fill methods supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The additional fill methods are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional
            fill methods packs to be able to support these methods in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>To get all the fill methods supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeFillMethods" />.</para>
        <para>To determine whether a particular fill method is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsNativeFillMethodSupported(Leadtools.Forms.Ocr.NativeOcrZoneFillMethod)" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an empty array.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">
      <summary>Gets the native version of a zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="page">Parent page of the zone.</param>
      <param name="zoneIndex">0-based index of the zone to get.</param>
      <returns>The native zone version.</returns>
      <remarks>
        <para>Use this method if low level modification of the engine specific zone is required.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">
      <summary>Update a zone from a native version. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="page">Parent page of the zone.</param>
      <param name="zoneIndex">0-based index of the zone to update.</param>
      <param name="zone">The native zone version.</param>
      <remarks>
        <para>Use this method if low level modification of the engine specific zone is required.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">
      <summary>Gets the OMR settings currently used by the engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface implementation object that defines the OMR settings currently used by the engine.
            </value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>You can get the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface currently used in the engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">IOcrSpellCheckManager.OmrOptions</see> property.</para>
        <para>With the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface, you can change the following OMR settings:
            <list type="bullet"><item><description>Change the frame detection method using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see> property. Frames stand for the check boxes that may exist around OMR fields.</description></item><item><description>Change the sensitivity of the OMR detection engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrOmrOptions.Sensitivity</see> property.</description></item><item><description>Change the characters being used to replace unfilled and filled OMR marks in the output document (for example, in a PDF file) using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrOmrOptions.GetStateRecognitionCharacter</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">IOcrOmrOptions.SetStateRecognitionCharacter</see> methods. Note that outputting OMR characters in final document is not supported in native engine formats.</description></item></list></para>
        <para>The OMR zones of a page have the <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> property set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Omr</see>.</para>
        <para>All LEADTOOLS OCR engines support OMR. However, currently autodetection of OMR 
            zones is not supported. Instead, you need to: here is no current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTOcrOmrOptions* omrOptions;</pre>
      </objectivec>
      <java>
        <pre>public OcrOmrOptions getOmrOptions()</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">
      <summary>Available recognition modules of the engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> contains the different recognition modules of the engine available to you. A recognition module must have been assigned to all zones in
            their <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see> properties before processing.</para>
        <para>Not all recognition modules are available to all engines. To determine which recognition modules are available use
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedNativeRecognitionModules">IOcrZoneManager.GetSupportedNativeRecognitionModules</see>. Trying to set a recognition module that is not available to the engine will
            cause an error.</para>
        <para>Each zone needs to be associated with a <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule" /> and a <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />. This is needed because some recognition modules support
            more than one fill method, and some fill methods are accepted by more than one recognition module. It is important to ensure that the recognition module/fill method pair is suitable.
            For example, the multi-lingual MOR omnifont recognition module <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMor</see> is capable of recognizing omnifont
            machine print (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OmniFont</see>), 24-pin draft dot-matrix print (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDot24</see>),
            OCR-A (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OcrA</see>) and OCR-B (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OcrB</see>) texts.</para>
        <para>For precise information on permitted recognition module/fill method pairs refer to <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see> can be set in the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see> property
            by the user, it will also be generated by <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> (auto-zoning) and will, under certain circumstances be generated by the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see> method.</para>
        <para>Force the use of a particular recognition module by specifying it directly in the zone's <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionModule">NativeOcrZone.RecognitionModule</see> property
            after calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateNativeFillMethod">IOcrPage.UpdateNativeFillMethod</see>.</para>
        <para>When <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see> is set, the recognition module is chosen primarily by the fill method (either directly specified,
            taken as default or auto-detected). The choices will be as follows:
            <table><tr><th>Fill Method</th><th>Recognition Module</th></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DotDigitt</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.MatrixMatching</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DashDigit</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.MatrixMatching</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Mice</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.MatrixMatching</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OcrA</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.MatrixMatching</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OcrB</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.MatrixMatching</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Omr</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Omr</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Icr</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.IcrNumeral</see> or <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.IcrCharacter</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OmniFont</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMor</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix9</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMor</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.DraftDotMatrix24</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.DotMatrix</see></td></tr><tr><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.CMC7</see></td><td><see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.IcrCharacter</see></td></tr></table></para>
        <para>In the first nine cases, only the fill method will be used to determine the recognition module, there will be no checking whether other settings are suitable. With
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.Icr</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.IcrCharacter</see> will be chosen if letters or other
            characters unsupported by <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.IcrNumeral</see> are validated for recognition. The last three will be directed to
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMText</see>, unless the engine finds a language, filter or other setting which is not supported by this module. For further
            details see the <see cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</see>.</para>
        <para>As an example, the zone's fill method is <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod">NativeOcrZoneFillMethod.OmniFont</see> and
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.Auto</see> has been specified.</para>
        <para>If only the characters of English and/or the main West European languages are validated for recognition, then the M/TEXT omnifont recognition module
            (<see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMText</see>) will be automatically selected.</para>
        <para>However, if e.g. the Polish characters are also to be recognized, the engine will select the multi-lingual MOR omnifont recognition module
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule">NativeOcrZoneRecognitionModule.OmniFontMor</see>, since the M/TEXT recognition module does not support the Polish characters, but the MOR recognition
            module does.</para>
      </remarks>
      <keywords>OCR|OCR,Recognition Modules</keywords>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <objectivec>
        <pre>enum LTNativeOcrZoneRecognitionModule</pre>
      </objectivec>
      <java>
        <pre>public enum NativeOcrZoneRecognitionModule</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.Auto">
      <summary>(0x00000000)The engine will try to automatically select the most suitable recognition module for the zone. This will be determined just before recognition, according to the
            zone's filling method (<see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.FillMethod">NativeOcrZone.FillMethod</see>) and, if necessary, other settings, most typically the character set. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneRecognitionModule_Auto</pre>
      </objectivec>
      <java>
        <pre>AUTO</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.OmniFontMText">
      <summary>(0x00000001)M/TEXT omnifont recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.OmniFontMor">
      <summary>(0x00000002)Multi-lingual MOR omnifont recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.DotMatrix">
      <summary>(0x00000003)DOT 9-pin draft dot-matrix recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.Omr">
      <summary>(0x00000004)OMR (Optical Mark Recognition) module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneRecognitionModule_Omr</pre>
      </objectivec>
      <java>
        <pre>OMR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.IcrNumeral">
      <summary>(0x00000005)Handprinted numeral recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.IcrCharacter">
      <summary>(0x00000006)Handprinted character recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.MatrixMatching">
      <summary>(0x00000007)MAT matrix matching recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.OmniFontPlus2WayVoting">
      <summary>(0x00000008)Omni Font 2-way voting module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.OmniFontFireWorx">
      <summary>(0x00000009)Omni Font FireWorx module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.OmniFontPlus3WayVoting">
      <summary>(0x0000000A)Omni Font 3-way voting module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionModule.Asian">
      <summary>(0x0000000B)Asian characters recognition module. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes">
      <summary>The after recognition flags for the zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes" /> will be updated if any of the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions" /> values set in
            <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions" /> is used during the recognition process.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes">NativeOcrZone.AfterRecognitionNotes</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions">NativeOcrZone.RecognitionOptions</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <objectivec>
        <pre>enum LTNativeOcrZoneAfterRecognitionNotes</pre>
      </objectivec>
      <java>
        <pre>public enum NativeOcrZoneAfterRecognitionNotes</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes.None">
      <summary>(0x00000000)No notes. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneAfterRecognitionNotes_None</pre>
      </objectivec>
      <java>
        <pre>NONE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes.LanguageDictionaryUsed">
      <summary>(0x00000001)The language dictionary was enabled during the checking process (spell checking was activated for the zone). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes.UserDictionaryUsed">
      <summary>(0x00000002)The User dictionary was enabled during the checking process (User dictionary checking was activated for the zone). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneAfterRecognitionNotes.VerificationUsed">
      <summary>(0x00000004)Not used in this version of LEADTOOLS. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions">
      <summary>Zone checking control options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The accuracy of the recognition for a zone can also be improved by enabling the checking subsystem to run. Enable the checking subsystem by setting the 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellCheckEngine">IOcrSpellCheckManager.SpellCheckEngine</see> property to a value other than <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckEngine">OcrSpellCheckEngine.None</see>. The application
            may need to call additional checking functions to configure the checking subsystem properly.</para>
        <para>Use the <see cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions">NativeOcrZone.RecognitionOptions</see> property to control how the checking subsystem will check the recognized result for
            the zone.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.RecognitionOptions">NativeOcrZone.RecognitionOptions</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.NativeOcrZone.AfterRecognitionNotes">NativeOcrZone.RecognitionNotes</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.NativeOcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.AnOverviewOfOcrRecognitionModules">An Overview of OCR Recognition Modules</seealso>
      <objectivec>
        <pre>enum LTNativeOcrZoneRecognitionOptions</pre>
      </objectivec>
      <java>
        <pre>public enum NativeOcrZoneRecognitionOptions</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.None">
      <summary>(0x00000000)No options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneRecognitionOptions_None</pre>
      </objectivec>
      <java>
        <pre>NONE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.DisableLanguageDictionary">
      <summary>(0x00000001)Prohibit the use of the language dictionary in this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.DisableUserDictionary">
      <summary>(0x00000002)Prohibit the use of the user dictionary in this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.DisableVerification">
      <summary>(0x00000004)Not used by this version of LEADTOOLS. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.IgnoreWhiteSpace">
      <summary>(0x00000008)Ignore white space characters (SPACE and TAB characters) during checking of this zone. This field should be used together with the
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions">NativeOcrZoneRecognitionOptions.PassEntireLines.</see><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.IgnoreCase">
      <summary>(0x00000010)Case insensitive user dictionary checking for this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.PassEntireLines">
      <summary>(0x00000020)Instructs the recognition module to pass entire lines to the checker for this zone, instead of words. Do not use this attribute in conjunction with spell checking. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.DisableCorrection">
      <summary>(0x00000040)Correction done by the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> is disabled for this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.IncludePunctuation">
      <summary>(0x00000080)Punctuatuation characters will also be considered during checking of this zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneRecognitionOptions.CorrectProperNames">
      <summary>(0x00000100)Enables the correction of words beginning with an uppercase letter inside a sentence (i.e. typically but not always proper names). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneType">
      <summary>Zone types. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> is used to classify the zone into one of the three basic zone-categories: text, table or graphics. For these,
             use <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>, and <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> respectively.</para>
        <para>For text zones, the following <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> members provide extra information on the text inside the zone:
             <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see>, <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextDirection">OcrZone.TextDirection</see> and
             <see cref="P:Leadtools.Forms.Ocr.OcrZone.TextStyle">OcrZone.TextStyle</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type is for table-type zones. In this type of zone is specified, the OCR engine will try to
             reconstruct the original table text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> is
             specified, no recognition will be run on the zone and all other recognition related settings will be ignored.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.None</see> specifies an area to ignore when recognizing the page.</para>
        <para>Each OCR engine supports different type of zones. To get the type of zones supported by the engine, use
             <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes">IOcrZoneManager.GetSupportedZoneTypes</see>. Trying to set a zone type that is not supported by
             the engine will cause an error.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>enum LTOcrZoneType</pre>
      </objectivec>
      <java>
        <pre>public enum OcrZoneType</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Text">
      <summary>(0x00000000)Flowing text type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Text</pre>
      </objectivec>
      <java>
        <pre>TEXT</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Table">
      <summary>(0x00000001)Table type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Table</pre>
      </objectivec>
      <java>
        <pre>TABLE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Graphic">
      <summary>(0x00000002)Zone containing graphics (Not sure). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Graphic</pre>
      </objectivec>
      <java>
        <pre>GRAPHIC</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Omr">
      <summary>(0x00000003)OMR (Optical Markup Recognition) zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Omr</pre>
      </objectivec>
      <java>
        <pre>OMR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Micr">
      <summary>(0x00000004)<para>MICR (Magnetic Ink Character Recognition) zone. For check processing.</para><para>Note that currently, MICR zones are not auto-detected by the engine. Instead, you need to use <see cref="T:Leadtools.ImageProcessing.Core.MICRCodeDetectionCommand" />
            to detect the MICR zone area automatically if needed and add an <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object with <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Micr</see> to the page.</para><para>Once a zone with MICR data is recognized, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.ExtractMicrData" /> method to parse the row data
            into an <see cref="T:Leadtools.Forms.Ocr.OcrMicrData" /> object.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Micr</pre>
      </objectivec>
      <java>
        <pre>MICR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Icr">
      <summary>(0x00000005)ICR (Intelligent Character Recognition) zone. Handwritten text and numbers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Icr</pre>
      </objectivec>
      <java>
        <pre>ICR</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Mrz">
      <summary>(0x00000006)<para>MRZ (Machine Readable Zone) zone. For passports and identity cards.</para><para>Note that currently, MRZ zones are not auto-detected by the engine. Instead, you need to use <see cref="T:Leadtools.ImageProcessing.Core.MRZCodeDetectionCommand" />
            to detect the MICR zone area automatically if needed and add an <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object with <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Mrz</see> to the page.</para><para>Once a zone with MRZ data is recognized, you can use the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> to parse the row data.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Mrz</pre>
      </objectivec>
      <java>
        <pre>MRZ</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Barcode">
      <summary>(0x00000007)<para>Barcode zone.</para><para>Note that currently, Barcode zones are not auto-detected by the engine. Instead, you need to use <see cref="T:Leadtools.Barcode.BarcodeReader" />
            to detect the barcode zone(s) area automatically if needed and add an <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object with <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Barcode</see> to the page.</para><para>This for future use of LEADTOOLS.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_Barcode</pre>
      </objectivec>
      <java>
        <pre>Barcode</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.None">
      <summary>(0x00000008)No recognition zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrZoneType_None</pre>
      </objectivec>
      <java>
        <pre>None</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.NativeOcrZoneType">
      <summary>Native zone types. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>Used with engine specific zones. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32)">IOcrZoneManager.GetNativeZone</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.SetNativeZone(Leadtools.Forms.Ocr.IOcrPage,System.Int32,Leadtools.Forms.Ocr.NativeOcrZone)">IOcrZoneManager.SetNativeZone</see>.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType" /> is used to classify the zone into one of the three basic zone-categories: flowing text, table or graphics. For these, use
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see>, and <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> respectively.</para>
        <para>For flowing text, any of the following text types can appear instead of <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Text</see>:
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Column</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Header</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Footer</see>,
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Caption</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Title</see>,
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.VerticalText</see>, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.LeftRotatedText</see>,
            <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.RightRotatedText</see> or <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Other</see>.</para>
        <para>One of these values is typically created by the page-layout decomposition (auto-zoning) process of the page (see <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>),
            however they have the same meaning for the recognition algorithms: the zone contains flowing text.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Table</see> type is for table-type zones. In this type of zone is specified, the OCR engine will try to reconstruct the original table
            text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> is specified, no recognition will be run
            on the zone and all other recognition related settings will be ignored. The related <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.AutoGraphic</see> type can appear as the result of the
            page-layout decomposition (auto-zoning) process, and also signifies a graphic zone. The difference is, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.Graphic</see> is the type that you as the
            user set in the zone to denote a graphic zone that contain no text, <see cref="T:Leadtools.Forms.Ocr.NativeOcrZoneType">NativeOcrZoneType.AutoGraphic</see> is the type set by the engine during auto-zoning.</para>
        <para>Each OCR engine supports different type of zones. To get the type of zones supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes">IOcrZoneManager.GetSupportedZoneTypes</see>. 
            Trying to set a zone type that is not supported by the engine will cause an error.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <objectivec>
        <pre>enum LTNativeOcrZoneType</pre>
      </objectivec>
      <java>
        <pre>public enum NativeOcrZoneType</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Text">
      <summary>(0x00000000)Flowing text type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneType_Text</pre>
      </objectivec>
      <java>
        <pre>TEXT</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Table">
      <summary>(0x00000001)Table type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneType_Table</pre>
      </objectivec>
      <java>
        <pre>TABLE</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Graphic">
      <summary>(0x00000002)Zone containing graphics (Not sure). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTNativeOcrZoneType_Graphic</pre>
      </objectivec>
      <java>
        <pre>GRAPHIC</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Column">
      <summary>(0x00000003)Column type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Header">
      <summary>(0x00000004)Header type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Footer">
      <summary>(0x00000005)Footer type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Caption">
      <summary>(0x00000006)Caption type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Title">
      <summary>(0x00000007)Title type zone. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.Other">
      <summary>(0x00000008)Other zone type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.AutoGraphic">
      <summary>(0x00000009)Zone containing graphics (sure). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.VerticalText">
      <summary>(0x0000000A)Vertical characters. For Asian characters only. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.LeftRotatedText">
      <summary>(0x0000000B)Left rotated text (90 degrees counter clockwise). For Latin, Greek and Cyrillic characters only. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.NativeOcrZoneType.RightRotatedText">
      <summary>(0x0000000C)Right rotated text (90 degrees clockwise). For Latin, Greek and Cyrillic characters only. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrOmrOptions">
      <summary>The OMR settings currently used in the engine. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>You can get the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface currently used in the engine with the <see cref="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">IOcrSpellCheckManager.OmrOptions</see> property.</para>
        <para>With the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface, you can change the following OMR settings:
            <list type="bullet"><item><description>Change the frame detection method using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see> property. Frames stand for the checkbox that may exist around OMR fields.</description></item><item><description>Change the sensitivity of the OMR detection engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrOmrOptions.Sensitivity</see> property.</description></item><item><description>Change the characters to use as a replacement for unfilled and filled OMR marks in the output document (for example, in a PDF file) using the
              <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrOmrOptions.GetStateRecognitionCharacter</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">IOcrOmrOptions.SetStateRecognitionCharacter</see> methods. Note that outputting OMR characters in final document is not supported in native engine formats.</description></item></list></para>
        <para>The OMR zones of a page are zones with <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Omr</see>.</para>
        <para>All LEADTOOLS OCR engines support OMR. However, only Advantage OCR engine supports auto-detection of OMR zones during auto-zoning of the OCR page, you just 
            have to make sure that "Detect Checkbox" is one of the Recognition.Zoning.Options setting flags before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, as for the rest 
            of the OCR engines you have to add the OMR zones manually to the page by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> and zone type as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr
      Imports Leadtools.Forms
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.WinForms

      Private Sub OcrOmrExample()
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)
            ' We will use Mixed.tif shipped with LEADTOOLS in the Images folder. This image has 3 OMR check marks
            Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Mixed.tif")

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Add the OMR zones. We calculated the 3 OMR zone boundaries for this image perviously
               Dim omrBounds As LogicalRectangle() = { _
                  New LogicalRectangle(484, 98, 84, 78, LogicalUnit.Pixel), _
                  New LogicalRectangle(494, 184, 70, 54, LogicalUnit.Pixel), _
                  New LogicalRectangle(498, 244, 76, 76, LogicalUnit.Pixel)}

               For Each omrBound As LogicalRectangle In omrBounds
                  ' Create a new OMR zone and add it to the page
                  Dim zone As New OcrZone()
                  zone.ZoneType = OcrZoneType.Omr
                  zone.Bounds = omrBound
                  ocrPage.Zones.Add(zone)
               Next

               ' Show how many zones we have and they properties
               Console.WriteLine("Page has {0} zones:", ocrPage.Zones.Count)
               For i As Integer = 0 To ocrPage.Zones.Count - 1
                  Dim zone As OcrZone = ocrPage.Zones(i)
                  Console.WriteLine("{0}: Type: {1}", i + 1, zone.ZoneType)
               Next

               ' Change the OMR options (Auto detection of frames with highest sensitivity)
               Dim omrOptions As IOcrOmrOptions = ocrEngine.ZoneManager.OmrOptions
               omrOptions.FrameDetectionMethod = OcrOmrFrameDetectionMethod.Auto
               omrOptions.Sensitivity = OcrOmrSensitivity.Highest

               ' Get the character we are using in the engine to represent the filled/unfilled states
               Dim filledCode As Char = omrOptions.GetStateRecognitionCharacter(OcrOmrZoneState.Filled)
               Dim unfilledCode As Char = omrOptions.GetStateRecognitionCharacter(OcrOmrZoneState.Unfilled)

               ' Recognize the page
               Console.WriteLine("Recognizing...")
               ocrPage.Recognize(Nothing)

               Dim pageCharacters As IOcrPageCharacters = ocrPage.GetRecognizedCharacters()
               For Each zoneCharacters As IOcrZoneCharacters In pageCharacters
                  ' We must have one character (the state for each OMR zone)
                  Debug.Assert(zoneCharacters.Count = 1)
                  Dim character As OcrCharacter = zoneCharacters(0)
                  Debug.Assert(character.Code = filledCode OrElse character.Code = unfilledCode)
                  Console.WriteLine("{0}: State: {1}, Confidence: {2}", _
                                    zoneCharacters.ZoneIndex, _
                                    If(character.Code = filledCode, "Filled", "Unfilled"), _
                                    character.Confidence)
               Next

               ' Now save the result as PDF using the default characters representation for OMR states (0 for unfilled, 1 for filled)
               Dim pdfFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Omr_Results1.pdf")
               Console.WriteLine("Saving to {0}...", pdfFileName1)
               ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, Nothing)

               ' Change the character representation for the OMR states to Y for unfilled, and X for filled
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Unfilled, "Y"c)
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Filled, "X"c)

               Dim pdfFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Omr_Results2.pdf")
               Console.WriteLine("Saving to {0}...", pdfFileName2)
               ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.WinForms;

      private void OcrOmrExample()
      {
         // Create an instance of the engine
         using (IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);
            // We will use Mixed.tif shipped with LEADTOOLS in the Images folder. This image has 3 OMR check marks
            string tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Mixed.tif");

            // Create an OCR document
            using (IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Add the OMR zones. We calculated the 3 OMR zone boundaries for this image perviously
               LogicalRectangle[] omrBounds =
               {
                  new LogicalRectangle(484, 98, 84, 78, LogicalUnit.Pixel),
                  new LogicalRectangle(494, 184, 70, 54, LogicalUnit.Pixel),
                  new LogicalRectangle(498, 244, 76, 76, LogicalUnit.Pixel)
               };

               foreach (LogicalRectangle omrBound in omrBounds)
               {
                  // Create a new OMR zone and add it to the page
                  OcrZone zone = new OcrZone();
                  zone.ZoneType = OcrZoneType.Omr;
                  zone.Bounds = omrBound;
                  ocrPage.Zones.Add(zone);
               }

               // Show how many zones we have and they properties
               Console.WriteLine("Page has {0} zones:", ocrPage.Zones.Count);
               for (int i = 0; i &lt; ocrPage.Zones.Count; i++)
               {
                  OcrZone zone = ocrPage.Zones[i];
                  Console.WriteLine("{0}: Type: {1}", i + 1, zone.ZoneType);
               }

               // Change the OMR options (Auto detection of frames with highest sensitivity)
               IOcrOmrOptions omrOptions = ocrEngine.ZoneManager.OmrOptions;
               omrOptions.FrameDetectionMethod = OcrOmrFrameDetectionMethod.Auto;
               omrOptions.Sensitivity = OcrOmrSensitivity.Highest;

               // Get the character we are using in the engine to represent the filled/unfilled states
               char filledCode = omrOptions.GetStateRecognitionCharacter(OcrOmrZoneState.Filled);
               char unfilledCode = omrOptions.GetStateRecognitionCharacter(OcrOmrZoneState.Unfilled);

               // Recognize the page
               Console.WriteLine("Recognizing...");
               ocrPage.Recognize(null);

               IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
               foreach (IOcrZoneCharacters zoneCharacters in pageCharacters)
               {
                  // We must have one character (the state for each OMR zone)
                  Debug.Assert(zoneCharacters.Count == 1);
                  OcrCharacter character = zoneCharacters[0];
                  Debug.Assert(character.Code == filledCode || character.Code == unfilledCode);
                  Console.WriteLine("{0}: State: {1}, Confidence: {2}", zoneCharacters.ZoneIndex, character.Code == filledCode ? "Filled" : "Unfilled", character.Confidence);
               }

               // Now save the result as PDF using the default characters representation for OMR states (0 for unfilled, 1 for filled)
               string pdfFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Omr_Results1.pdf");
               Console.WriteLine("Saving to {0}...", pdfFileName1);
               ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, null);

               // Change the character representation for the OMR states to Y for unfilled, and X for filled
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Unfilled, 'Y');
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Filled, 'X');

               string pdfFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Omr_Results2.pdf");
               Console.WriteLine("Saving to {0}...", pdfFileName2);
               ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
        <code lang="CSWinRT">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;
      using Leadtools.Forms;
      using Leadtools.Forms.DocumentWriters;

      private async void OcrOmrExample()
      {
         // Create an instance of the engine
         IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false);
         // Start the engine using default parameters
         ocrEngine.Startup(null, null, String.Empty, Tools.OcrEnginePath);

         // We will use Mixed.tif shipped with LEADTOOLS in the Images folder. This image has 3 OMR check marks
         string tifFileName = "Mixed.tif";

         // Create an OCR document
         IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument();

         // Add a page to the document
         IOcrPage ocrPage = null;
         using (RasterCodecs codecs = new RasterCodecs())
         {
            StorageFile loadFile = await Tools.AppInstallFolder.GetFileAsync(tifFileName);
            using (RasterImage image = await codecs.LoadAsync(LeadStreamFactory.Create(loadFile)))
               ocrPage = ocrDocument.Pages.AddPage(image, null);
         }

         // Add the OMR zones. We calculated the 3 OMR zone boundaries for this image perviously
         LeadRect[] omrBounds =
         {
            LeadRectHelper.Create(484, 98, 84, 78),
            LeadRectHelper.Create(494, 184, 70, 54),
            LeadRectHelper.Create(498, 244, 76, 76)
         };

         foreach(LeadRect omrBound in omrBounds)
         {
            // Create a new OMR zone and add it to the page
            OcrZone zone = new OcrZone();
            zone.ZoneType = OcrZoneType.Text;
            zone.FillMethod = OcrZoneFillMethod.Omr;
            zone.RecognitionModule = OcrZoneRecognitionModule.Omr;
            zone.Bounds = omrBound;
            ocrPage.Zones.Add(zone);
         }

         // Show how many zones we have and they properties
         Debug.WriteLine("Page has {0} zones:", ocrPage.Zones.Count);
         for(int i = 0; i &lt; ocrPage.Zones.Count; i++)
         {
            OcrZone zone = ocrPage.Zones[i];
            Debug.WriteLine("{0}: Type: {1}, Fill method: {2}, Recognition Module: {3}", i + 1, zone.ZoneType, zone.FillMethod, zone.RecognitionModule);
         }

         // Change the OMR options (Auto detection of frames with highest sensitivity)
         IOcrOmrOptions omrOptions = ocrEngine.ZoneManager.OmrOptions;
         omrOptions.FrameDetectionMethod = OcrOmrFrameDetectionMethod.Auto;
         omrOptions.Sensitivity = OcrOmrSensitivity.Highest;

         // Recognize the page
         Debug.WriteLine("Recognizing...");
         ocrPage.Recognize(null);

         // Now show the OMR zone properties
         for(int i = 0; i &lt; ocrPage.Zones.Count; i++)
         {
            OcrZone zone = ocrPage.Zones[i];
            Debug.WriteLine("{0}: State: {1}, Confidence: {2}", i + 1, zone.OmrState, zone.OmrConfidence);
         }

         // Now save the result as PDF using the default characters representation for OMR states (0 for unfilled, 1 for filled)
         string pdfFileName1 = "Omr_Results1.pdf";
         Debug.WriteLine("Saving to {0}...", pdfFileName1);
         StorageFile saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName1, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Change the character representation for the OMR states to Y for unfilled, and X for filled
         omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Unfilled, 'Y');
         omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Filled, 'X');

         string pdfFileName2 = "Omr_Results2.pdf";
         Debug.WriteLine("Saving to {0}...", pdfFileName2);
         saveFile = await Tools.AppLocalFolder.CreateFileAsync(pdfFileName2, CreationCollisionOption.ReplaceExisting);
         await ocrDocument.SaveAsync(LeadStreamFactory.Create(saveFile), DocumentFormat.Pdf, null);

         // Shutdown the engine
         ocrEngine.Shutdown();
      }</code>
        <!--IOcrOmrOptions-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@interface LTOcrOmrOptions : NSObject</pre>
      </objectivec>
      <java>
        <pre>public class OcrOmrOptions</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">
      <summary>Gets the character used to represent an OMR state in the output document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="state">The OMR state for this character.</param>
      <returns>A <see cref="T:System.Char" /> that indicates the character used to represent the given OMR state in the output document.</returns>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>You can get the current values using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)" /> method, you can also change them using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)" /> method.
            If you do not want any OMR characters to show up in the final document, you can set all state characters to ' ' (a space character).
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>- (unichar)getStateRecognitionCharacter:(LTOcrOmrZoneState)state;</pre>
      </objectivec>
      <java>
        <pre>public char getStateRecognitionCharacter(OcrOmrZoneState state)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">
      <summary>Sets the character used to represent an OMR state in the output document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <param name="state">The OMR state for this character.</param>
      <param name="value">The character value.</param>
      <value>A <see cref="T:System.Char" /> that indicates the character used to represent the given OMR state in the output document.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>When performing OMR recognition, you can obtain the OMR results by inspecting the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code">OcrCharacter.Code</see> property. Moreover the engine will
            add a character to represent each zone (mark) state into the recognition results. This character will then be outputted to the final document when
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save</see> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml</see> is called.</para>
        <para>The character will also be present as the zone data when calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</para>
        <para>The default characters used in the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is as follows:
            <list type="table"><listheader><term>State</term><description>Value</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see></term><description>0</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see></term><description>1</description></item></list></para>
        <para>You can get the current values using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)" /> method, you can also change them using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)" /> method.
            If you do not want any OMR characters to show up in the final document, you can set all state characters to ' ' (a space character).
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>
- (void)setStateRecognitionCharacter:(LTOcrOmrZoneState)state
                               value:(unichar)value;            </pre>
      </objectivec>
      <java>
        <pre>
public void setStateRecognitionCharacter(OcrOmrZoneState state,
                                         char value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">
      <summary>Gets or sets the OMR frame detection mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod" /> enumeration member that indicates the OMR frame detection mode.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>Frames stand for the checkbox that may exist around OMR fields. You can set the LEADTOOLS OCR engine to automatically detect these frames and take them into consideration
            when recognizing OMR fields. If you know the OMR fields contains (or does not contain) frames, it is recommended to set <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see>
            accordingly to increase the recognition performance and accuracy.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@property(nonatomic, assign) LTOcrOmrFrameDetectionMethod frameDetectionMethod;</pre>
      </objectivec>
      <java>
        <pre>
public OcrOmrFrameDetectionMethod getFrameDetectionMethod()
public void setFrameDetectionMethod(OcrOmrFrameDetectionMethod value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">
      <summary>Gets or sets the OMR sensitivity mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrOmrSensitivity" /> enumeration member that indicates the OMR sensitivity mode.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>You can set the LEADTOOLS OCR engine OMR recognition sensitivity to be as high or low as desired. High sensitivity results in higher confidence in the recognized mark, but could
            prove to be slower.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>@property(nonatomic, assign) LTOcrOmrSensitivity sensitivity;</pre>
      </objectivec>
      <java>
        <pre>
public OcrOmrSensitivity getSensitivity()
public void setSensitivity(OcrOmrSensitivity value)            </pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod">
      <summary>The OMR frame detection mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>Frames stand for the check boxes that may exist around OMR fields. You can set the LEADTOOLS OCR engine to automatically detect these frames and take them into consideration
            when recognizing OMR fields. If you know whether the OMR fields contain frames, set the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see>
            accordingly to increase recognition performance and accuracy.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <java>
        <pre>public enum OcrOmrFrameDetectionMethod</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.Auto">
      <summary>(0x00000000)Automatically detect whether there is a printed frame (e.g. check box). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>AUTO</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.WithoutFrame">
      <summary>(0x00000001)The OMR zone is inside the printed frame, so the printed frame is not visible. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>WITHOUT_FRAME</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.WithFrame">
      <summary>(0x00000002)The OMR zone is outside the printed frame, so the printed frame is visible. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a></summary>
      <java>
        <pre>WITH_FRAME</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrSensitivity">
      <summary>The OMR sensitivity mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>You can set the LEADTOOLS OCR engine OMR recognition sensitivity to be as high or low as desired. High sensitivity results in higher confidence in the recognized mark, but could
            prove to be slower.</para>
        <para>To change the sensitivity of OMR recognition, use <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>enum LTOcrOmrSensitivity</pre>
      </objectivec>
      <java>
        <pre>public enum OcrOmrSensitivity</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Highest">
      <summary>(0x00000000)Use the highest check mark recognition sensitivity. This may also be the slowest. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrSensitivity_Highest</pre>
      </objectivec>
      <java>
        <pre>HIGHEST</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.High">
      <summary>(0x00000001)Use high check mark recognition sensitivity. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrSensitivity_High</pre>
      </objectivec>
      <java>
        <pre>HIGH</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Low">
      <summary>(0x00000002)Use low check mark recognition sensitivity. May be faster than <strong>High</strong>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrSensitivity_Low</pre>
      </objectivec>
      <java>
        <pre>LOW</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Lowest">
      <summary>(0x00000003)Use the lowest check mark recognition sensitivity. This may also be the fastest. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrSensitivity_Lowest</pre>
      </objectivec>
      <java>
        <pre>LOWEST</pre>
      </java>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrZoneState">
      <summary>The zone OMR recognition state. <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <see cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</see>.</para>
        <para>The OMR zones of a page are zones with <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Omr</see>.</para>
        <para>All LEADTOOLS OCR engines support OMR. However, there is no current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:FO.Topics.ProgrammingWithOcr">Programming with the LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:FO.Topics.UsingOmrInLeadtoolsDotNetOcr">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <objectivec>
        <pre>enum LTOcrOmrZoneState</pre>
      </objectivec>
      <java>
        <pre>public enum OcrOmrZoneState</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrZoneState.Unfilled">
      <summary>(0x00000000)The mark is unfilled (or unchecked). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrZoneState_Unfilled</pre>
      </objectivec>
      <java>
        <pre>UNFILLED</pre>
      </java>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrZoneState.Filled">
      <summary>(0x00000001)The mark is filled (or checked). <a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="Android.png" class="AndroidIconTag" name="AndroidIconTag" title="Android support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="iOS.png" class="iOSIconTag" name="iOSIconTag" title="iOS / OS X support" border="0" /></a></summary>
      <objectivec>
        <pre>LTOcrOmrZoneState_Filled</pre>
      </objectivec>
      <java>
        <pre>FILLED</pre>
      </java>
    </member>
  </members>
</doc>