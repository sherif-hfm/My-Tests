<?xml version="1.0"?>
<doc processed="true">
  <assembly>
    <name>Leadtools.Barcode</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Barcode.BarcodeData">
      <summary>
             Contains the data for a single barcode.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeData" /> class contains the data for a single barcode. It is used by LEADTOOLS 
             when reading and writing barcodes from/to an image.</para>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains multiple methods to read a single or multiple barcodes from an image (
             Refer to the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods). 
             For each barcode found, <see cref="T:Leadtools.Barcode.BarcodeReader" /> will
             return an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> populated with the data found in the barcode.</para>
        <para>The following table lists the members of <see cref="T:Leadtools.Barcode.BarcodeData" /> and their meaning when 
             <see cref="T:Leadtools.Barcode.BarcodeReader" /> returns the object from an image:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
            </term>
            <description>
              <para>A member of the <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration that specifies the symbology (or type) of the barcode found</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
            </term>
            <description>
              <para>The barcode location and size in the image</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" />
            </term>
            <description>
              <para>The angle of rotation if the barcode was rotated (or skewed)</para>
            </description>
          </item>
          <item>
            <term>The data (accessed through <see cref="M:Leadtools.Barcode.BarcodeData.GetData" />)</term>
            <description>
              <para>The raw data found inside the barcode as a byte array</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value" />
            </term>
            <description>
              <para>A string representation (in ASCII) of the data. The value returned is simply an ASCII text of the byte array returned from
             <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Tag" />
            </term>
            <description>
              <para>User defined field. Not used</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.DatamatrixSymbolSize" />
            </term>
            <description>
              <para>An <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration member that specifies 
                     the symbol size of the Datamatrix barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroPDF417IsLinked" />
            </term>
            <description>
              <para>Indicates that the MicroPDF417 barcode is linked to a linear symbol printed below it.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroPDF417DataCode" />
            </term>
            <description>
              <para>The MicroPDF417 barcode function code word for Code 128 emulation.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.PDF417Group" />
            </term>
            <description>
              <para>The group number if this PDF417 barcode symbol is a member of a group of symbols</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.QRSymbolModel" />
            </term>
            <description>
              <para>An <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies the symbol model 
                     and version of the QR barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.AztecSymbolModel" />
            </term>
            <description>
              <para>An <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel" /> enumeration member that determines the symbol size 
                     to use when when writing an Aztec barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MaxiSymbolModel" />
            </term>
            <description>
              <para>An <see cref="T:Leadtools.Barcode.MaxiBarcodeSymbolModel" /> enumeration member that determines the encoding mode 
                     to use when when writing a Maxi Code barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroQRSymbolModel" />
            </term>
            <description>
              <para>An <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel" /> enumeration member that determines the symbol size 
                     to use when when writing a MicroQR barcode.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other read options not related to the barcode data can be set 
             using the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> class
             or one of its derived classes.</para>
        <para>For a tutorial on reading barcodes, refer to <see cref="T:BA.Topics.ReadingBarcodes"> Reading Barcodes Tutorial</see>.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class allows you to write a single barcode to the image. You must create a new instance of the
             <see cref="T:Leadtools.Barcode.BarcodeData" /> class, fill its members with the values for the new barcode and call the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> 
             method passing the created object.</para>
        <para>The following table lists the members of <see cref="T:Leadtools.Barcode.BarcodeData" /> and their meaning when writing barcodes:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
            </term>
            <description>
              <para>A member of the <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration that specifies the symbology (or type) of the barcode to write</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
            </term>
            <description>
              <para>The location and size where to write the barcode in the image</para>
            </description>
          </item>
          <item>
            <term>The data (set through <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" />)</term>
            <description>
              <para>The raw data of the new barcode as byte array</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value" />
            </term>
            <description>
              <para>A string representation (in ASCII) of the data. The value set in <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> 
             will simply be parsed as an ASCII text and put it in
             the raw data through <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" />
            </term>
            <description>
              <para>Not used in writing</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Tag" />
            </term>
            <description>
              <para>User defined field. Not used</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.DatamatrixSymbolSize" />
            </term>
            <description>
              <para>A member of the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration that specifies the symbol size of the barcode to write</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroPDF417IsLinked" />
            </term>
            <description>
              <para>Indicates whether the MicroPDF417 barcode is linked to a linear symbol printed below it, To link MicroPDF417 when writing, use the 
                     <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked">MicroPDF417BarcodeWriteOptions.IsLinked</see> property.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroPDF417DataCode" />
            </term>
            <description>
              <para>Indicates the MicroPDF417 barcode function code word for Code 128 emulation, to use this value when writing 
                     MicroPDF417 symbols, set the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode">MicroPDF417BarcodeWriteOptions.EnableGroupMode</see> 
                     to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.PDF417Group" />
            </term>
            <description>
              <para>Specifies whether this PDF417 barcode symbol is a member of a group of symbols, To use this value when writing 
                     PDF417 symbols you must set the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode">PDF417BarcodeWriteOptions.EnableGroupMode</see> 
                     to <strong>true</strong></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.QRSymbolModel" />
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies the QR barcode symbol model and version.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.AztecSymbolModel" />
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel" /> enumeration member that specifies the Aztec barcode symbol size.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MaxiSymbolModel" />
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.MaxiBarcodeSymbolModel" /> enumeration member that specifies the Maxi barcode symbol mode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.MicroQRSymbolModel" />
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel" /> enumeration member that specifies the MicroQR barcode symbol size.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other write options not related to the barcode data can be set using 
             the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> class or one of its derived classes.</para>
        <para>You can also use the <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.CalculateBarcodeDataBounds</see> 
             method to pre-calculate the
             barcode location and size based on the barcode data, its "XModule" and various other properties.</para>
        <para>For a tutorial on writing barcodes, refer to <see cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</see>.</para>
        <h3>General</h3>
        <para>
          <strong>Note: This section is not supported in LEADTOOLS for Windows Runtime.</strong>
        </para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeData" /> class contains support for the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Serialization of an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> to and from XML through the <see cref="M:Leadtools.BarcodeData.Save">BarcodeData.Save</see> and
             <see cref="M:Leadtools.BarcodeData.Load">BarcodeData.Load</see> methods.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Cloning by implementing the standard .NET <see cref="T:System.ICloneable" /> interface and implementing the <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>
             method.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Creating of a default and valid (with legal values for the data) instance for a certain symbology using the
             <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" /> method. This can be useful when debugging barcode writing.</para>
            </description>
          </item>
        </list>
        <para>
          <strong>Note: The functionality in the above list is not supported in LEADTOOLS for Windows Runtime.</strong>
        </para>
        <h3>Derived Types</h3>
        <para>
          <strong>Note: This section is not supported in LEADTOOLS for Windows Runtime.</strong>
        </para>
        <para>This section deals with derived barcode data types only currently available in the following symbologies:
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>, <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>,
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>. All other symbology types do not
             contain specialized data types and the base <see cref="T:Leadtools.Barcode.BarcodeData" /> must be used exclusively when reading or writing barcodes.</para>
        <para>Some barcode symbologies contain extra information that are not available in <see cref="T:Leadtools.Barcode.BarcodeData" />, for these types, 
             LEADTOOLS adds derived classes to
             contain the extra information.</para>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> class encounters a barcode of one of these symbologies, it returns one of the 
             following types casted down as
             <see cref="T:Leadtools.Barcode.BarcodeData" />. You can then cast the object up to its derived type if needed, refer to any of the classes listed in 
             the table below for an example.</para>
        <para>The following table lists the derived types:</para>
        <list type="table">
          <listheader>
            <term>Type</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
            </term>
            <description>
              <para>Used with <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>. Adds the Datamatrix barcode symbol size to 
             be used when reading and writing</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
            </term>
            <description>
              <para>Used with <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>. Adds the MicroPDF417 data code to be used 
             when reading and writing. Also,
             contains information on whether a MicroPDF417 barcode read is linked to a linear barcode below it</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />
            </term>
            <description>
              <para>Used with <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>. Contains information about the group 
             number of a PDF417 barcode found in the image</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.QRBarcodeData" />
            </term>
            <description>
              <para>Used with <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>. Adds the QR barcode symbol size to be used 
             when reading and writing</para>
            </description>
          </item>
        </list>
        <para>When reading barcodes, you can use the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class exclusively only when you are interested 
             in the extra options. Generally, all the relevant data of the barcode read can be obtained with 
             <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> or <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>.
             If you are however interested in reading those extra values, then simple cast the object up to the correct derived class and 
             read the extra properties.</para>
        <para>When writing barcodes, you must generally always pass a derived class since all information is needed when writing a barcode. 
             Create an instance of the correct derived class and pass it to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see>. 
             This method will take the data as a base
             <see cref="T:Leadtools.Barcode.BarcodeData" /> instance and will accept passing generic <see cref="T:Leadtools.Barcode.BarcodeData" /> objects when writing more specific 
             barcodes (such as QR) although this is generally not a recommended process.</para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeData.GetBarcodeDataType(Leadtools.Barcode.BarcodeSymbology)" /> returns the <see cref="T:System.Type" /> of the derived 
             <see cref="T:Leadtools.Barcode.BarcodeData" /> class associated with a certain <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> or the <see cref="T:Leadtools.Barcode.BarcodeData" /> 
             type when the symbology does not have a specialized data class.</para>
        <h3>Notes</h3>
        <para>The color of the barcode is not considered part of its data. Colors of barcode read can be controlled through the
             <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see> and <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
             properties. Also colors of barcodes to be written can be set through <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see> and
             <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>.</para>
        <para>Some barcodes like QR and PDF417 support data that is not necessary ASCII text. For example, an image, a URL or just raw 
             stream of bytes. When reading these barcodes, the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property may not return an accurate representation 
             of the data. Hence, use the <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> method and then parse it. Also, when writing barcodes, 
             you must set the raw data using the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">SetData</see> method</para>
        <para>The Australian post barcode (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>) string has a special 
             format to distinguish different fields (i.e. FCC, DPID, and CIF). The string format puts dashes between fields as follows: 
             "FCC-DIPD-CIF", where FCC is a 2-digit field (valid
             values are 11, 87, 45, 92, 59, 62, and 44), DPID is an 8-digit field representing the address, and CIF (optional) represents 
             the customer information field.
             For more information, please refer to the standard. This string format applies for both read and write.</para>
        <para>GS1 Databar Expanded (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>) and GS1 Databar Expanded Stacked
             (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStaceked</see>) barcode strings need to be written conforming 
             to a string format that indicates a particular encoding method, such as Method "1", Method "0100", Method "0101", … etc. 
             For example, a string (01)00012345678905(10)ABC123" is
             encoded using Method "1" (i.e. General Identification Data). Note that the 14th digit of the item identification number 
             (in this case, "5"), if it exists,
             is considered as a check digit and is ignored. A string that is written without following any of these special encoding formats 
             will be encoded by
             Method "00" (i.e. General Purpose Data).</para>
        <para>When a <see cref="T:Leadtools.Barcode.BarcodeData" /> is returned from a read operation, an extra digit in curly brackets (i.e. "{" and "}") is added 
             to indicate the linkage bit at the beginning of the string. The curly brackets are not part of the encoded barcode data, and are not 
             defined in the standard. Rather,
             they distinguish the linkage digit from other data. For example, if a barcode is written with string "(01)00012345678905(10)ABC123" 
             while the linkage bit
             is set to zero, the read function result will be "{0}(01)00012345678905(10)ABC123", where {0} is the linkage digit and the 
             remaining characters are
             the barcode data.</para>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see> is designed for reading UCCEAN 128 barcode only, 
             and it is not designed for writing
             this barcode type.</para>
        <para>Code Interleaved 2 of 5: I = # of digits and must be even.</para>
        <para>Linear (1D) barcodes are not supported in UNICODE.</para>
        <para>For a table containing information useful when writing 1D barcode data see
             <a href="https://www.leadtools.com/sdk/barcode/1d-chart.htm">https://www.leadtools.com/sdk/barcode/1d-chart.htm</a>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example reads the first barcode found in an image and shows the various data values. For an example on writing barcodes,
             refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.
             <!--BarcodeData--></example>
      <java>
        <pre>public class BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeData : NSObject&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Returns an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> suitable for writing containing default and valid values for the 
            specified symbology .
            </summary>
      <param name="symbology">Barcode symbology.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes filled with default and legal values of 
            the symbology that can
            be used directly with <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see>.</returns>
      <remarks>
        <para>When writing barcodes, you must fill in a member of <see cref="T:Leadtools.Barcode.BarcodeData" /> with legal values for the symbology 
            based on the standard. This method can be used to quickly create a valid <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            instance for the specified symbology and might be helpful for debugging.</para>
        <para>The C# and VB Barcode demos use this method to obtain an initial <see cref="T:Leadtools.Barcode.BarcodeData" /> for a symbology.</para>
        <para>Note that if the symbology supports derived <see cref="T:Leadtools.Barcode.BarcodeData" /> types, then an instance of the derived 
            class will be returned instead.
            This includes <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />, <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />, <see cref="T:Leadtools.Barcode.PDF417BarcodeData" /> and <see cref="T:Leadtools.Barcode.QRBarcodeData" /> for
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>, <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>,
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> respectively.</para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeData.GetBarcodeDataType(Leadtools.Barcode.BarcodeSymbology)" /> method returns the <see cref="T:System.Type" /> of the derived class associated with a 
            specified symbology or the <see cref="T:Leadtools.Barcode.BarcodeData" /> type when the symbology does not have a specialized data class.</para>
        <para>
          <strong>
            Note: In LEADTOOLS for Windows Runtime, the equivalent to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" />, 
            also the equivalent to <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> is <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" />.
            </strong>
        </para>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeData.GetBarcodeDataType(Leadtools.Barcode.BarcodeSymbology)" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <example>
            This example writes all the supported barcodes with LEADTOOLS using their default values.
            <!--BarcodeData.CreateDefaultBarcodeData--></example>
      <java>
        <pre>public static BarcodeData createDefaultBarcodeData(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>+ (LTBarcodeData*)createDefaultBarcodeData:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.GetBarcodeDataType(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets the <see cref="T:System.Type" /> of the data class associated with a specified symbology.
            </summary>
      <param name="symbology">Barcode symbology.</param>
      <returns>A <see cref="T:System.Type" /> of the derived class associated with a specified
            symbology or the <see cref="T:Leadtools.Barcode.BarcodeData" /> type when the symbology does not have a specialized data class.</returns>
      <remarks>
        <para>Currently, this method returns the following values:</para>
        <list type="table">
          <listheader>
            <term>Symbology</term>
            <description>Return type</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>
            </term>
            <description>
              <para>Type of <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>
            </term>
            <description>
              <para>Type of <see cref="T:Leadtools.Barcode.PDF417BarcodeData" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>
            </term>
            <description>
              <para>Type of <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>
            </term>
            <description>
              <para>Type of <see cref="T:Leadtools.Barcode.QRBarcodeData" /></para>
            </description>
          </item>
          <item>
            <term>All other <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> members</term>
            <description>
              <para>Type of <see cref="T:Leadtools.Barcode.BarcodeData" /></para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </example>
      <winrt />
      <java>
        <pre>public static java.lang.Class getBarcodeDataType(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>+ (Class)getBarcodeDataType:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>This constructor initializes the <see cref="T:Leadtools.Barcode.BarcodeData" /> member as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
            </term>
            <description>
              <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" />
            </term>
            <description>0</description>
          </item>
          <item>
            <term>Byte array inside <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /></term>
            <description>
              <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value" />
            </term>
            <description>
              <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Tag" />
            </term>
            <description>
              <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</description>
          </item>
        </list>
        <para>To quickly construct a new <see cref="T:Leadtools.Barcode.BarcodeData" /> object with a specific symbology and data, use
            <see cref="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.Byte[])">BarcodeData(BarcodeSymbology symbology, byte[] data)</see> or
            <see cref="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.String)">BarcodeData(BarcodeSymbology symbology, string value).</see></para>
        <para>To create an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> suitable for writing for a specified symbology, use
            <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeData" />.</para>
      </example>
      <java>
        <pre>public BarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeData" /> class with specified symbology and data.
            </summary>
      <param name="symbology">Barcode symbology to use.</param>
      <param name="data">An array of <see cref="T:System.Byte" /> that specifies the data to use. 
            This value can be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>This constructor initializes the <see cref="T:Leadtools.Barcode.BarcodeData" /> member as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
            </term>
            <description>
              <paramref name="symbology" />
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
            </term>
            <description>
              <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" />
            </term>
            <description>0</description>
          </item>
          <item>
            <term>Byte array inside <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /></term>
            <description>
              <paramref name="data" /> (same reference, the data is not copied)</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value" />
            </term>
            <description>ASCII text string representation of <paramref name="data" />, 
                 if this parameter is null, then <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> is null too.</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Tag" />
            </term>
            <description>
              <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</description>
          </item>
        </list>
        <para>To quickly construct a new <see cref="T:Leadtools.Barcode.BarcodeData" /> object with a specific symbology and data as a string value, use
            <see cref="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.String)">BarcodeData(BarcodeSymbology symbology, string value)</see> to construct a default
            <see cref="T:Leadtools.Barcode.BarcodeData" />, use <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>.</para>
        <para>To create an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> suitable for writing for a specified symbology, use
            <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <example>
            This example creates a <see cref="T:Leadtools.Barcode.BarcodeData" /> using specified symbology and raw data.  Then it writes it to an image.
            <!--BarcodeData(BarcodeSymbology, byte[])--></example>
      <java>
        <pre>
public BarcodeData(
  BarcodeSymbology symbology,
  byte[] data
)            </pre>
      </java>
      <objectivec>
        <pre>
- (id)initWithSymbology:(LTBarcodeSymbology)symbology 
                   data:(NSData*)data;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeData" /> class with specified symbology and ASCII text value.
            </summary>
      <param name="symbology">Barcode symbology to use.</param>
      <param name="value">A <see cref="T:System.String" /> that specifies the ASCII text representation of the barcode data.</param>
      <remarks>
        <para>This constructor initializes the <see cref="T:Leadtools.Barcode.BarcodeData" /> member as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
            </term>
            <description>
              <paramref name="symbology" />
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
            </term>
            <description>
              <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" />
            </term>
            <description>0</description>
          </item>
          <item>
            <term>Byte array inside <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /></term>
            <description>The raw value of the bytes array in <paramref name="value" />. if this parameter is null, then the data is null too.</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value" />
            </term>
            <description>
              <paramref name="value" />.</description>s
              </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Tag" />
            </term>
            <description>
              <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)</description>
          </item>
        </list>
        <para>To quickly construct a new <see cref="T:Leadtools.Barcode.BarcodeData" /> object with a specific symbology and data as a raw byte array, use
            <see cref="M:Leadtools.Barcode.BarcodeData.#ctor(Leadtools.Barcode.BarcodeSymbology,System.Byte[])">BarcodeData(BarcodeSymbology symbology, byte[] data)</see> to construct a default
            <see cref="T:Leadtools.Barcode.BarcodeData" />, use <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>.</para>
        <para>To create an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> suitable for writing for a specified symbology, use
            <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <example>
            This example creates a <see cref="T:Leadtools.Barcode.BarcodeData" /> with specified symbology and ASCII text. It then writes it to an image.
            <!--BarcodeData(BarcodeSymbology, string)--></example>
      <java>
        <pre>
public BarcodeData(
  BarcodeSymbology symbology,
  String value
)            </pre>
      </java>
      <objectivec>
        <pre>
- (id)initWithSymbology:(LTBarcodeSymbology)symbology 
                  value:(NSString*)value;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.Clone">
      <summary>
            Creates an exact copy of this barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.BarcodeData" /> method creates, and casts the barcode as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of the byte array that represents that data obtained from 
            <see cref="M:Leadtools.Barcode.BarcodeData.GetData" />. This data will not be
            shared between this <see cref="T:Leadtools.Barcode.BarcodeData" /> and the object that is returned.</para>
        <para>However, <see cref="P:Leadtools.Barcode.BarcodeData.Tag" /> is user defined value and <see cref="T:Leadtools.Barcode.BarcodeData" /> does not have rules to dictate 
            what action to perform when the object is cloned. 
            Therefore, this method will simply set the <see cref="P:Leadtools.Barcode.BarcodeData.Tag" /> property of the returned object to the value in the source
            object. It is up to the user to change this behavior.</para>
      </remarks>
      <example>
        <!--BarcodeData.Clone-->
      </example>
      <java>
        <pre>public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.CopyTo(Leadtools.Barcode.BarcodeData)">
      <summary>
            Copies the members of this barcode to the specified object.
            </summary>
      <param name="data">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>protected void copyTo(BarcodeData data)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)data;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.CopyTo_WinRT(Leadtools.Barcode.BarcodeData)">
      <summary>
        <para>For information about this property please see <see cref="M:Leadtools.Barcode.BarcodeData.CopyTo(Leadtools.Barcode.BarcodeData)" />.</para>
      </summary>
      <param name="data">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <noremarks />
      <winrt />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.Save(System.String,Leadtools.Barcode.BarcodeData[])">
      <summary>
            Saves an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects to an XML file.
            </summary>
      <param name="fileName">Name of the XML file to create</param>
      <param name="data">An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects to save.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>
          <paramref name="data" /> can be <strong>null</strong> (<strong>Nothing</strong> is Visual Basic). 
            This is the equivalent of saving an empty array.</para>
        <para>To load the data previously saved into an XML file, 
            use <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.String)">BarcodeData.Load(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use 
            <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.IO.Stream,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(Stream stream, BarcodeData[] data)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.IO.Stream)">BarcodeData.Load(Stream stream)</see>.</para>
      </remarks>
      <example>
            This example reads all the barcodes in an image, saves the data to an XML disk file. It will then load the data from this XML and
            print out the values.
            <!--BarcodeData.Save--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.Save(System.IO.Stream,Leadtools.Barcode.BarcodeData[])">
      <summary>
            Saves an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects to an XML stream.
            </summary>
      <param name="stream">The output stream</param>
      <param name="data">An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects to save.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>
          <paramref name="data" /> can be <strong>null</strong> (<strong>Nothing</strong> is Visual Basic). 
            This is the equivalent of saving an empty array.</para>
        <para>To load the data previously saved into an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.IO.Stream)">BarcodeData.Load(Stream stream)</see>.</para>
        <para>To save and load data to an XML disk file, use <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.String,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(string fileName, BarcodeData[] data)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.String)">BarcodeData.Load(string fileName)</see>.</para>
      </remarks>
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.Load(System.String)">
      <summary>
            Loads an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> from the specified XML file.
            </summary>
      <param name="fileName">The XML file containing the data.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> for the objects found in the file, or an empty array if the file is valid but does not contain any data.</returns>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.String,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(string fileName, BarcodeData[] data)</see>.</para>
        <para>To save and load data to an XML stream, 
            use <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.IO.Stream,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(Stream stream, BarcodeData[] data)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.IO.Stream)">BarcodeData.Load(Stream stream)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.String,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(string fileName, BarcodeData[] data)</see>.</para>
      </example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.Load(System.IO.Stream)">
      <summary>
            Loads an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> from the XML stream.
            </summary>
      <param name="stream">The XML stream containing the data.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> for the objects found in the file, 
            or an empty array if the file is valid but does not contain any data.</returns>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.IO.Stream,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(Stream stream, BarcodeData[] data)</see>.</para>
        <para>To save and load data to an XML disk file, use 
            <see cref="M:Leadtools.Barcode.BarcodeData.Save(System.String,Leadtools.Barcode.BarcodeData[])">BarcodeData.Save(string fileName, BarcodeData[] data)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeData.Load(System.String)">BarcodeData.Load(string fileName)</see>.</para>
      </remarks>
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.GetData">
      <summary>
            Gets the data of this barcode as raw byte array.
            </summary>
      <returns>An array of <see cref="T:System.Byte" /> that specifies the data of this barcode. The default value is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</returns>
      <remarks>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods are used to read a 
            barcode or more from an image. Each of
            these methods return an object or an array of objects of type <see cref="T:Leadtools.Barcode.BarcodeData" /> for each barcode found. 
            Inside each object, the data of the barcode will
            be stored as a raw byte array that can be accessed with the <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /> method. The format of the data is dependent on the 
            barcode symbology (type).</para>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property contains a string representation (as ASCII text) of the data. 
            The value of this property is simply an ASCII string of the
            byte array returned from <see cref="M:Leadtools.Barcode.BarcodeData.GetData" />.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method is used to write a barcodes to an image. 
            You must create an instance
            of <see cref="T:Leadtools.Barcode.BarcodeData" /> and fill its members before passing it to this method. Use the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" /> method to set 
            the raw data of the barcode
            as a byte array. You can also use the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property to set the data as an ASCII string.</para>
        <para>Some barcodes like QR and PDF417 support data that is not necessary ASCII text. For example, an image, a URL or just raw stream of bytes. 
            For these barcodes, when reading them, the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property may not return an accurate representation of the 
            data. Instead, use the <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> method and then parse them. Also, when writing barcodes, you must set the raw data
            using the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">SetData</see> method.</para>
        <para>The Australian post barcode (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>) string has a special 
            format to distinguish different fields (i.e. FCC, DPID, and CIF). 
            The string format puts dashes between fields as follows: "FCC-DIPD-CIF", where FCC is a 2-digit field (valid
            values are 11, 87, 45, 92, 59, 62, and 44), DPID is an 8-digit field representing the address, and CIF (optional) 
            represents the customer information field.
            For more information, please refer to the standard. This string format applies for both read and write.</para>
        <para>GS1 Databar Expanded (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>) and GS1 Databar Expanded Stacked
            (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStaceked</see>) barcode strings need to be written 
            conforming to a string format that indicates a particular encoding method, such as Method "1", Method "0100", Method "0101", … etc. 
            For example, a string (01)00012345678905(10)ABC123" is
            encoded using Method "1" (i.e. General Identification Data). Note that 14th digit of the item identification number 
            (in this case, "5"), if it exists,
            is considered as a check digit and is ignored. A string that is written without following any of these special encoding formats 
            will be encoded by
            Method "00" (i.e. General Purpose Data).</para>
        <para>When a <see cref="T:Leadtools.Barcode.BarcodeData" /> is returned from a read operation, an extra digit in curly brackets (i.e. "{" and "}") is added 
            to indicate the
            linkage bit at the beginning of the string. The curly brackets are not part of the encoded barcode data, and they are not defined in 
            the standard. Rather,
            they distinguish the linkage digit from other data. For example, if a barcode is written with string "(01)00012345678905(10)ABC123" 
            while the linkage bit
            is set to zero, the read function result will be "{0}(01)00012345678905(10)ABC123", where {0} is the linkage digit and the 
            remaining characters are the barcode data.</para>
        <h3>Derived Types</h3>
        <para>Some barcode symbologies contain extra information that are not available in <see cref="T:Leadtools.Barcode.BarcodeData" />, for these types, LEADTOOLS adds derived classes to
            contain the extra information. Refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Value" />
      <example>
            This example reads a barcode from an image and shows its data.
            <!--BarcodeData.GetData--></example>
      <java>
        <pre>public byte[] getData()</pre>
      </java>
      <objectivec>
        <pre>- (NSData*) getData;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">
      <summary>
            Sets the data of this barcode as raw byte array.
            </summary>
      <param name="data">An array of <see cref="T:System.Byte" /> that specifies the data of this barcode. A value of <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) can be used.</param>
      <remarks>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods are used to read a barcode 
            or more from an image. Each of these methods return an object or an array of objects of type <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            for each barcode found. Inside each object, the data of the barcode will
            be stored as a raw byte array that can be accessed with the <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /> method. The format of the data is dependent on 
            the barcode symbology (type).</para>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property contains a string representation (as an ASCII text) of the data. 
            The value of this property is simply an ASCII string of the
            byte array returned from <see cref="M:Leadtools.Barcode.BarcodeData.GetData" />.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method is used to write a barcodes to an image. 
            Create an instance
            of <see cref="T:Leadtools.Barcode.BarcodeData" /> and fill its members before passing it to this method. Use the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" /> method to set 
            the raw data of the barcode as a byte array. You can also use the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property to set the data as an ASCII string.</para>
        <para>Some barcodes like QR and PDF417 support data that is not necessary ASCII text. For example, an image, a URL or just raw stream 
            of bytes. For these barcodes when reading them, the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property may not return an accurate representation 
            of the data. Instead, use the <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> method and then parse them. 
            Also, when writing barcodes, you must set the raw data
            using the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">SetData</see> method</para>
        <para>The Australian post barcode (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>) 
            string has a special format to distinguish
            different fields (i.e. FCC, DPID, and CIF). The string format puts dashes between fields as follows: 
            "FCC-DIPD-CIF", where FCC is a 2-digit field (valid
            values are 11, 87, 45, 92, 59, 62, and 44), DPID is an 8-digit field representing the address, and CIF (optional) 
            represents the customer information field.
            For more information, please refer to the standard. This string format applies for both read and write.</para>
        <para>GS1 Databar Expanded (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>) and GS1 Databar Expanded Stacked
            (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStaceked</see>) barcode strings need to be written 
            conforming to a string format that indicates a particular encoding method, such as Method 
            "1", Method "0100", Method "0101", … etc. For example, a string (01)00012345678905(10)ABC123" is
            encoded using Method "1" (i.e. General Identification Data). Note that 14th digit of the item identification number 
            (in this case, "5"), if it exists,
            is considered as a check digit and is ignored. A string that is written without following any of these special encoding formats 
            will be encoded by Method "00" (i.e. General Purpose Data).</para>
        <para>When a <see cref="T:Leadtools.Barcode.BarcodeData" /> is returned from a read operation, an extra digit in curly brackets 
            (i.e. "{" and "}") is added to indicate the linkage bit at the beginning of the string. The curly brackets are not part of the 
            encoded barcode data, and they are not defined in the standard. Rather, they distinguish the linkage digit from other data. 
            For example, if a barcode is written with string "(01)00012345678905(10)ABC123" while the linkage bit
            is set to zero, the read function result will be "{0}(01)00012345678905(10)ABC123", where {0} is the linkage digit and 
            the remaining characters will be the barcode data.</para>
        <h3>Derived Types</h3>
        <para>Some barcode symbologies contain extra information that are not available in <see cref="T:Leadtools.Barcode.BarcodeData" />, 
            for these types, LEADTOOLS adds derived classes to
            contain the extra information. Refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.GetData" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Value" />
      <example>
            This example writes a barcode to an image using raw data.
            <!--BarcodeData.SetData--></example>
      <java>
        <pre>public void setData(byte[] data)</pre>
      </java>
      <objectivec>
        <pre>- (void) setData:(NSData*)data;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeData.ToString">
      <summary>
            Gets the data of this barcode as an ASCII string.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the data of this <see cref="T:Leadtools.Barcode.BarcodeData" /> object as an ASCII text string.</returns>
      <remarks>
        <para>This method returns the same exact value as the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property. 
            It is used to convert this <see cref="T:Leadtools.Barcode.BarcodeData" /> object to a human
            readable format that can be used anywhere <see cref="M:System.Object.ToString">Object.ToString</see> is used, 
            for example, in <c>Console.WriteLine</c>.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String toString()</pre>
      </java>
      <objectivec>
        <pre>- (NSString*) description;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.BarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) associated with this
            <see cref="T:Leadtools.Barcode.BarcodeData" />. The default value is <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</value>
      <remarks>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> 
            methods are used to read a barcode or more from an image. Each of
            these methods return an object or an array of objects of type <see cref="T:Leadtools.Barcode.BarcodeData" /> for each barcode found. 
            Inside each object, the value of the
            <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" /> property will be set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object to the symbology (or type) 
            of the barcode. You can examine this value
            to decide how to parse the data of the barcode stored in <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /> or <see cref="P:Leadtools.Barcode.BarcodeData.Value" />.</para>
        <para>The value of <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" /> will never be <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> 
            on <see cref="T:Leadtools.Barcode.BarcodeData" /> objects
            returned from <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see>.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</see>.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method is used to write a barcodes to an image. You must create an instance
            of <see cref="T:Leadtools.Barcode.BarcodeData" /> and fill its members before passing it to this method. The <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" /> property inform the <see cref="T:Leadtools.Barcode.BarcodeWriter" />
            object of the symbology (or type) of barcode to write.</para>
        <para>You cannot set the value of <see cref="P:Leadtools.Barcode.BarcodeData.Symbology" /> to <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> 
            when writing barcodes, as it will
            result in an exception being thrown. The reason for the exception is due to the object <see cref="T:Leadtools.Barcode.BarcodeWriter" /> will not know the 
            symbology (or type) of barcode to write.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</see>.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.GetData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Value" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> For an example on writing barcodes, 
            refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSymbology getSymbology()
public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.Bounds">
      <summary>
            Gets or sets the barcode location and size on the image.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> object that specifies the barcode location and size on the image. The default value is
            <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see>.</value>
      <remarks>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods are used to read one barcode 
            or more from an image. Each of these methods returns an object or an array of objects of type <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            for each barcode found. Inside each object, the value of the
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" /> property will be set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object to the location and size of the barcode.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</see>.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method is used to write barcodes to an image. 
            Create an instance
            of <see cref="T:Leadtools.Barcode.BarcodeData" /> and fill its members before passing it to this method. The <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" /> property informs
            the <see cref="T:Leadtools.Barcode.BarcodeWriter" />
            object of the location and size of this new barcode on the image.</para>
        <para>Not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a special meaning. 
            For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</see>.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.GetData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Value" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.CalculateBarcodeDataBounds</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> For an example on writing barcodes, refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <java>
        <pre>
public LeadRect getBounds()
public void setBounds(LeadRect value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LeadRect bounds;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.Bounds_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeData.Bounds" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> object that specifies the barcode location and size on the image. The default value is
            empty rectangle.</value>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> For an example on writing barcodes, refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.RotationAngle">
      <summary>
            Gets and sets the rotation (or skew) angle of this barcode in degrees.
            </summary>
      <value>The rotation (or skew) angle of this barcode in degrees. The default value is 0.</value>
      <remarks>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> 
            methods are used to read a barcode or more from an image. Each of
            these methods returns an object or an array of objects of type <see cref="T:Leadtools.Barcode.BarcodeData" /> for each barcode found. 
            Inside each object, the value of the
            <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" /> property will be set in degrees by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object, 
            referring to the angle of rotation of the barcode. If
            the barcode is not rotated, the value will be 0.</para>
        <para>This value can be detected using a full circle (from -180 degrees to +180 degrees). Therefore, you can use the barcode 
            rotation's angle to detect the
            whole document's skew angle. If the angle of a barcode is not 0 and you are certain the barcode is on a right angle in the image, 
            then you pass the
            negative value of this angle to the <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> class to correct the image skew. 
            Note that LEADTOOLS always provides
            the <see cref="T:Leadtools.ImageProcessing.Core.DeskewCommand" /> that can be used to automatically correct image deskew without 
            the presence of barcodes. Although
            this command can only correct skews between -20 and +20 degrees.</para>
        <para>Note that the rotation angle does not determine whether the barcode is vertical or horizontal in the image. For that, 
            you must set the correct options before reading the barcode. Refer to <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> for more information.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</see>.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" /> property is not used when writing barcodes and the value set in this property will be 
            ignored by the
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object.</para>
        <para>For a tutorial, refer to <see cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</see>.</para>
      </remarks>
      <example>
        <para>This example will use <see cref="P:Leadtools.Barcode.BarcodeData.RotationAngle" /> to correct the skew angle of a document.</para>
      </example>
      <java>
        <pre>
public int getRotationAngle()
public void setRotationAngle(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int rotationAngle;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.Value">
      <summary>
            Gets or sets the data of this barcode as an ASCII text string.
            </summary>
      <value>A <see cref="T:System.String" /> that represents the data of this barcode as an ASCII text string. 
            Default value is <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property simply calls <see cref="M:Leadtools.Barcode.BarcodeData.GetData" /> and internally <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" /> to get or set the data inside this
            <see cref="T:Leadtools.Barcode.BarcodeData" /> as an ASCII text value.</para>
        <para>Some barcodes like QR and PDF417 support data that is not necessary ASCII text. 
            For example, an image, a URL or just raw stream of bytes. For 
            these barcodes when reading a barcode, the <see cref="P:Leadtools.Barcode.BarcodeData.Value" /> property may not return an accurate representation of the 
            data. Instead, use the <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> method and parse them yourself. Also, 
            when writing barcodes, you must set the raw data
            using the <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">SetData</see> method</para>
        <para>The Australian post barcode (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>) string has a special format to distinguish
            different fields (i.e. FCC, DPID, and CIF). 
            The string format puts dashes between fields as follows: "FCC-DIPD-CIF", where FCC is a 2-digit field (valid
            values are 11, 87, 45, 92, 59, 62, and 44), DPID is an 8-digit field representing the address, and CIF (optional) 
            represents the customer information field.
            For more information, please refer to the standard. This string format applies for both read and write.</para>
        <para>GS1 Databar Expanded (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>) and GS1 Databar Expanded Stacked
            (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStaceked</see>) barcode strings need to be written conforming 
            to a string format that indicates a particular encoding method, such as Method "1", Method "0100", Method "0101", … etc. 
            For example, a string (01)00012345678905(10)ABC123" is
            encoded using Method "1" (i.e. General Identification Data). Note that 14th digit of the item identification number 
            (in this case, "5"), if it exists,
            is considered as a check digit and is ignored. A string that is written without following any of these special encoding formats will be encoded by
            Method "00" (i.e. General Purpose Data).</para>
        <para>When a <see cref="T:Leadtools.Barcode.BarcodeData" /> is returned from a read operation, an extra digit in curly brackets 
            (i.e. "{" and "}") is added to indicate the
            linkage bit at the beginning of the string. The curly brackets are not part of the encoded barcode data, and they are not defined 
            in the standard. Rather,
            they distinguish the linkage digit from other data. For example, if a barcode is written with string 
            "(01)00012345678905(10)ABC123" while the linkage bit
            is set to zero, the read function result will be "{0}(01)00012345678905(10)ABC123", where {0} is the linkage digit 
            and the remaining characters are the barcode data.</para>
        <h3>Derived Types</h3>
        <para>Some barcode symbologies contain extra information that are not available in <see cref="T:Leadtools.Barcode.BarcodeData" />, for these types, LEADTOOLS adds derived classes to
            contain the extra information. Refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Symbology" />
      <seealso cref="P:Leadtools.Barcode.BarcodeData.Bounds" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.GetData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])" />
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.GetData" />.</para>
      </example>
      <java>
        <pre>
public String getValue()
public void setValue(String value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) NSString* value;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.Tag">
      <summary>
            Gets or sets an object that contains data associated with this barcode.
            </summary>
      <value>An <see cref="T:System.Object" /> that contains information that is associated with the barcode.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.Tag" /> property can be used to store any object that you want to associate with a <see cref="T:Leadtools.Barcode.BarcodeData" />. 
            You can store any
            item. <strong>Note:</strong> the <see cref="P:Leadtools.Barcode.BarcodeData.Tag" /> property is not used by LEADTOOLS.</para>
      </remarks>
      <noexample />
      <java>
        <pre>
public Object getTag()
public void setTag(Object value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) id tag;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.DatamatrixSymbolSize">
      <summary>
            Gets or sets the Datamatrix barcode symbol size.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration member that specifies the Datamatrix barcode 
            symbol size. The default value is <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.AutoSize</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.DatamatrixSymbolSize" /> of a Datamatrix barcode controls how much data the barcode can hold. 
            Generally, you should only be concerned with the value of this
            property when writing barcodes. LEADTOOLS will automatically find the correct symbol and data size 
            from the barcode itself and populate this property and the data
            with the correct value. Refer to <see cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">
            Datamatrix Barcodes in LEADTOOLS</see> for more information.</para>
        <para>In addition to the above, the following symbol sizes can be used when writing a Datamatrix barcode:</para>
        <list type="table">
          <listheader>
            <term>Symbol size</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Auto size (<see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.AutoSize</see>)</term>
            <description>
              <para>Uses the minimum required size based on the data inside the barcode (the data set using
            <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
          <item>
            <term>Fit to bounds (<see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.FitToBounds</see>)</term>
            <description>
              <para>Uses as much size to fit the data inside <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>.</para>
            </description>
          </item>
        </list>
        <para>You can only use the above special Datamatrix barcode symbol sizes when writing a barcode, 
            when reading the Datamatrix barcode back,
            <see cref="P:Leadtools.Barcode.BarcodeData.DatamatrixSymbolSize" /> will be set to one of the other constant values.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.MicroPDF417IsLinked">
      <summary>
            Gets a value that indicates whether the MicroPDF417 barcode is linked to a linear symbol printed below it.
            </summary>
      <value>
        <strong>true</strong> when the MicroPDF417 barcode is linked to a linear symbol printed below it. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a MicroPDF417 symbol is read. 
            To link MicroPDF417 when writing, use the
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked">MicroPDF417BarcodeWriteOptions.IsLinked</see> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.MicroPDF417DataCode">
      <summary>
            Gets or sets a value that indicates the MicroPDF417 barcode function code word for Code 128 emulation.
            </summary>
      <value>An <see cref="T:System.UInt32" /> that indicates the MicroPDF417 barcode function code word for Code 128 emulation. 
            The default value is 0.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a MicroPDF417 symbol is read.</para>
        <para>To use this value when writing MicroPDF417 symbols, set the value of
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode">MicroPDF417BarcodeWriteOptions.EnableGroupMode</see> to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.PDF417Group">
      <summary>
            Gets or sets a value that specifies whether this PDF417 barcode symbol is a member of a group of symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that specifies whether this PDF417 barcode symbol is a member of a group of symbols. 
            Default value is 0.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a PDF417 symbol is read.</para>
        <para>To use this value when writing PDF417 symbols you must set the value of
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode">PDF417BarcodeWriteOptions.EnableGroupMode</see> to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.QRSymbolModel">
      <summary>
            Gets or sets the QR barcode symbol model and version.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies the QR barcode symbol model and version. 
            Default value is <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model2AutoSize</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.BarcodeData.QRSymbolModel" /> of a QR barcode controls how much data the barcode can hold.</para>
        <para>The QR standard specifies 40 different sizes for the QR barcode. The maximum data capacity varies, 
            depending on the size of the barcode and its Error Correction level.</para>
        <para>Generally, you should only be concerned with the value of this property when writing barcodes, 
            since LEADTOOLS will automatically find the correct symbol and data size
            from the barcode itself and populate this property and the data with the correct value. Refer to
            <see cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</see>
            for QR barcodes and how <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> affects the data size.</para>
        <para>In addition to the above, the following symbol sizes can be used when writing a QR barcode:</para>
        <list type="table">
          <listheader>
            <term>Symbol Model</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Model 1 Auto size (<see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model1AutoSize</see>)</term>
            <description>
              <para>Use model 1 and the minimum required size based on the data inside the barcode (the data set using 
            <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
          <item>
            <term>Model 2 Auto size (<see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model2AutoSize</see>)</term>
            <description>
              <para>Use model 2 and the minimum required size based on the data inside the barcode (the data set using <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
        </list>
        <para>Use the above special QR barcode symbol sizes when writing a barcode, when reading the QR barcode back,
            <see cref="P:Leadtools.Barcode.BarcodeData.QRSymbolModel" /> will be set to one of the other constant values.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.AztecSymbolModel">
      <summary>
            Gets or sets the chosen symbol size when writing an Aztec barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel" /> enumeration member that determines the symbol size to use when when writing an Aztec barcode. The default value is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.AutoSize</see>.
            </value>
      <remarks>
        <para>The smallest Aztec Code symbol is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.Compact1</see> (15x15 modules square), and the largest is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.Full32</see>(151 x 151). When the default value <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.AutoSize</see> is used the encoder will choose a symbol size based on the size of input message and the ratio of error detection and correction</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.MaxiSymbolModel">
      <summary>
            Gets or sets the chosen encoding mode when writing a Maxi Code barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.MaxiBarcodeSymbolModel" /> enumeration member that determines the encoding mode to use when when writing a Maxi Code barcode. The default value is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode4</see>.
            </value>
      <remarks>
        <para>
          <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode2</see> and <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode3</see> are used to encode structured carrier message, while <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode4</see> and <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode5</see> a general message.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeData.MicroQRSymbolModel">
      <summary>
            Gets or sets the chosen symbol size when writing a Micro QR barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel" /> enumeration member that determines the symbol size to use when when writing a Micro QR barcode. The default value is <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">MicroQRBarcodeSymbolModel.AutoSize</see>.
            </value>
      <remarks>
        <para>When the default value <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">MicroQRBarcodeSymbolModel.AutoSize</see> is used the encoder will choose a symbol size based on the size of input message.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </example>
      <winrt />
    </member>
    <member name="T:Leadtools.Barcode.BarcodeEngine">
      <summary>
             Main class for the LEADTOOLS support for reading and writing barcodes.
             </summary>
      <keywords>Barcode|Barcode,Linear barcodes|Barcode,PDF417 (2D)|Barcode,Data Matrix (2D)|Barcode,QR|Barcode,MicroPDF417 (2D)|
             Barcode 1D|1D Barcode|2D Barcode (QR)|4-State|2D Barcode (DataMatrix)|
             Code 11|Code 128|Code 3 of 9|Code 3 of 9 Extended|Code 32|Code 39 Barcodes|Code 93|Code 93 Extended|
             GS1 Databar Barcodes|GS1 Databar Expanded|GS1 Databar Expanded Stacked|
             GS1 Databar Limited|GS1 Databar Omnidirectional|GS1 Databar Stacked|PDF417|MicroPDF417|QR|Data Matrix|
             GS1 Databar Truncated|GS1 Databar|RSS14|
             Databar|DataMatrix (2D) Barcodes|EAN Barcodes|
             EAN EXT 2|EAN EXT 5|EAN13|EAN8|
             Interleaved Code 2 of 5|PDF 417 Barcodes|QR (2D) Barcodes|
             Standard Code 2 of 5 (Industrial)|UCC/EAN 128 Barcodes|UCC/EAN128|
             UPC Barcodes|UPCA|UPCE</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeEngine" /> class is the main entry point for LEADTOOLS support for barcode reading and writing.</para>
        <para>This class contains the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see>: The instance of the <see cref="T:Leadtools.Barcode.BarcodeReader" /> class that you
             can use to read barcodes from an image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see>: The instance of the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class that you
             can use to write barcodes to an image.</para>
            </description>
          </item>
        </list>
        <para>This class also contains the following helper static (Shared in Visual Basic) methods:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</see>: Returns an array of 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members
             that lists all the barcode symbologies supported by LEADTOOLS.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</see>: Returns a string that 
             contains a friendly name of
             any <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member.</para>
            </description>
          </item>
        </list>
        <para>To start using LEADTOOLS barcode support, first create an instance of <see cref="T:Leadtools.Barcode.BarcodeEngine" />. This will automatically create the
             <see cref="T:Leadtools.Barcode.BarcodeReader" /> and <see cref="T:Leadtools.Barcode.BarcodeWriter" /> objects for you. You can then access those objects through 
             <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see>
             and <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see> to start reading or writing barcodes.</para>
        <para>All these objects are thread-safe and you can pass the same <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> or 
             <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object to multiple
             threads. Additionally, you may read or write barcodes at the same time from/to different images and also create a separate 
             <see cref="T:Leadtools.Barcode.BarcodeEngine" /> for each thread if required. The
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">
             BarcodeReader.ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see>
             example shows how to create two threads: One for reading horizontal barcodes and one for reading vertical barcodes. 
             It will then use the same <see cref="T:Leadtools.Barcode.BarcodeReader" />
             to try and read all the barcodes from an image using both threads.</para>
        <!--BarcodeReader.ReadBarcodes(RasterImage, LogicalRectangle, int, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)-->
        <para>For a list of the barcode symbologies supported by LEADTOOLS, refer to <see cref="T:BA.Topics.SupportedBarcodeSymbologies">
             Supported Barcode Symbologies</see>.</para>
        <para>For tutorials on using LEADTOOLS barcode support, refer to <see cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</see> and 
             <see cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</see>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example creates a new <see cref="T:Leadtools.Barcode.BarcodeEngine" /> and reads all the barcodes in an image. 
             For an example on writing barcodes, refer to
             <see cref="T:Leadtools.Barcode.BarcodeWriter" />.
             <!--BarcodeEngine--></example>
      <java>
        <pre>public class BarcodeEngine</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeEngine : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeEngine.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Barcode.BarcodeEngine" /> class.
            </summary>
      <remarks>
        <para>When an instance of <see cref="T:Leadtools.Barcode.BarcodeEngine" /> is initialized, the <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see> and
            <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see> properties will be initialized with a new instance of 
            <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> classes respectively.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeEngine" />.</para>
      </example>
      <java>
        <pre>public BarcodeEngine()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">
      <summary>
            Gets a list of all the barcode symbologies (types) supported by LEADTOOLS.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that lists all the barcode symbologies (types) 
            supported by LEADTOOLS.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies" /> returns all the barcode symbologies (types) supported by LEADTOOLS. 
            Depending on the level of unlocked support and availability of the back-end barcodes assemblies, 
            not all of the supported types may be available. For example, if the <strong>Leadtools.Barcode.QrRead.dll</strong>
            assembly is missing, QR read support will not be available to your application. Similarly, 
            if the <strong>Leadtools.Barcode.QrWrite.dll</strong> assembly is missing, QR write
            support will not be available.</para>
        <para>To get a list of the barcode symbologies available for reading, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</see> and
            to get a list of the barcode symbologies available for writing, 
            use <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</see>.</para>
        <para>To get the friendly name of any barcode symbology, use 
            <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</see>.</para>
      </remarks>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso href="https://www.leadtools.com/help/leadtools/v18/dh/to/leadtools.topics~leadtools.topics.filestobeincludedwithyourapplication.html">Files To Be Included In Your application.</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</seealso>
      <example>
            This example lists all the barcode symbologies supported by LEADTOOLS. Then, it will list all the symbologies currently available 
            (if correct support is
            unlocked and back-end runtime assembly is found) for reading and writing.
            <!--BarcodeEngine.GetSupportedSymbologies--></example>
      <java>
        <pre>public static BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
+ (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies                   supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeEngine.freeSupportedSymbologies_objectivec(Leadtools.Barcode.BarcodeSymbology[])">
      <summary>Free allocated supportedSymbologies array returned by getSupportedSymbologies method</summary>
      <param name="supportedSymbologies">The LTBarcodeSymbology array user want to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>+ (void)freeSupportedSymbologies:(LTBarcodeSymbology*)supportedSymbologies;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Returns the friendly name of a barcode symbology.
            </summary>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member.</param>
      <returns>A <see cref="T:System.String" /> that contains the friendly name of the symbology.</returns>
      <remarks>
        <para>Do not pass the special <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to this member, 
            as this will result in an exception being thrown.</para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies" /> returns all the barcode symbologies (types) supported 
            by LEADTOOLS. Depending on the level of unlocked support and availability of the back end barcodes assemblies, 
            not all of the supported types may be available. For example, if the <strong>Leadtools.Barcode.QrRead.dll</strong>
            assembly is missing, QR read support will not be available to your application.</para>
        <para>To get a list of the barcode symbologies available for reading, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</see> and
            to get a list of the barcode symbologies available for writing, use 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</see>.</para>
        <para>To get the friendly name of any barcode symbology, 
            use <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso href="https://www.leadtools.com/help/leadtools/v18/dh/to/leadtools.topics~leadtools.topics.filestobeincludedwithyourapplication.html">Files To Be Included In Your application.</seealso>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies" />.</para>
      </example>
      <java>
        <pre>public static String getSymbologyFriendlyName(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>+ (NSString*) getSymbologyFriendlyName:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeEngine.Reader">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Barcode.BarcodeReader" /> class associated with this barcode engine that can be used to read 
            barcodes from an image.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Barcode.BarcodeReader" /> class associated with this barcode engine that can be used to 
            read barcodes from an image.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class is used to read one or more barcodes from an image. 
            You cannot create an instance of <see cref="T:Leadtools.Barcode.BarcodeReader" />
            directly, instead, use the instance created inside <see cref="T:Leadtools.Barcode.BarcodeEngine" /> which is accessed through <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see>.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
      </example>
      <java>
        <pre>public BarcodeReader getReader()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeReader* reader;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeEngine.Writer">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class associated with this barcode engine that can be used to 
            write barcodes to an image.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class associated with this barcode engine that can be used to write 
            barcodes to an image.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class is used to write one or more barcodes to an image. You cannot create an instance of 
            <see cref="T:Leadtools.Barcode.BarcodeWriter" />
            directly, instead, use the instance created inside <see cref="T:Leadtools.Barcode.BarcodeEngine" /> and 
            accessed through <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <java>
        <pre>public BarcodeWriter getWriter()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeWriter* writer;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReaderErrorMode">
      <summary>
             Indicates how to handle errors when reading barcodes.
             </summary>
      <remarks>
        <para>This <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode" /> enumeration is used as the type for the 
             <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see> property and is used
             to determine how to handle the errors when reading barcodes.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> object might encounter errors when reading barcodes. 
             By default, when an error is encountered, an exception is thrown, usually of type
             <see cref="T:Leadtools.Barcode.BarcodeException" /> with the <see cref="P:Leadtools.Barcode.BarcodeException.Code">BarcodeException.Code</see> 
             set to one of the <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration members,
             providing more details regarding the error. This is the default behavior.</para>
        <para>Sometimes, this behavior may no be desired, for example:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is trying to decode barcodes on an "if found and correct" bases. 
             If there were corrupted barcodes, the action is to ignore this and continue. In this case, you
             can set the error mode to <strong>IgnoreAll</strong>.</para>
              <para>The application is reading multiple barcodes from an image, and the action is to ignore 
             the corrupted barcodes and return only the valid ones found. In this case, you can
             set the error mode to <strong>IgnoreAll</strong> and subscribe to the 
             <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see> event to get a notification when
             an error occurs and save the exception for later use. You can then handle these errors when all barcodes are 
             read and the read method returns.</para>
            </description>
          </item>
        </list>
        <para>The LEADTOOLS C# and VB Barcode Demo will change the value of <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode" /> to <strong>IgnoreAll</strong> and use the
             <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see> event to show the errors encountered in a list box.</para>
        <para>Note that when the <see cref="T:Leadtools.Barcode.BarcodeReader" /> does not find any barcodes in the image, no exception is thrown. 
             Instead,
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return 
             <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) or
             an empty array of <see cref="T:Leadtools.Barcode.BarcodeData" /> instead.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see></para>
      </example>
      <java>
        <pre>public enum BarcodeReaderErrorMode</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeReaderErrorMode</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReaderErrorMode.Default">
      <summary>
            (0)<para>Default mode. No errors are ignored and an exception will be thrown immediately if an error occurs at any time.</para></summary>
      <java>
        <pre>DEFAULT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReaderErrorMode_Default</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReaderErrorMode.IgnoreAll">
      <summary>
            (1)<para>Ignore all errors. When an error occurs, the exception will be saved and passed to the next 
            <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see> event (in
            the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error">BarcodeReadSymbologyEventArgs.Error</see> member).</para></summary>
      <java>
        <pre>IGNORE_ALL</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReaderErrorMode_IgnoreAll</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeImageType">
      <summary>
             Determines the type of barcode image when reading barcodes.
             </summary>
      <remarks>
        <para>This <see cref="T:Leadtools.Barcode.BarcodeImageType" /> enumeration is used as the type for the 
             <see cref="P:Leadtools.Barcode.BarcodeReader.ImageType">BarcodeReader.ImageType</see> property and is used
             to determine the type of barcode image when reading barcodes.</para>
        <para>Barcode images generated by picture devices such as camera and video recorder may suffer problems different than the images generated by scanners,
             e.g., shadows, which may require special handling of the barcode image.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public enum BarcodeImageType</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeImageType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeImageType.ScannedDocument">
      <summary>
            (0)<para>The barcode image is generated using a scanner.</para></summary>
      <java>
        <pre>SCANNEDDOCUMENT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeImageType_ScannedDocument</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeImageType.Picture">
      <summary>
            (1)<para>The barcode image is a picture taken from camera or video devices.</para></summary>
      <java>
        <pre>PICTURE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeImageType_Picture</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReader">
      <summary>
            Main class for the LEADTOOLS support for reading barcodes.
            </summary>
      <keywords>Barcode|Barcode,Linear barcodes|Barcode,PDF417 (2D)|Barcode,Data Matrix (2D)|Barcode,QR|Barcode,MicroPDF417 (2D)|
            Barcode 1D|1D Barcode|2D Barcode (QR)|4-State|2D Barcode (DataMatrix)|
            Code 11|Code 128|Code 3 of 9|Code 3 of 9 Extended|Code 32|Code 39 Barcodes|Code 93|Code 93 Extended|
            GS1 Databar Barcodes|GS1 Databar Expanded|GS1 Databar Expanded Stacked|
            GS1 Databar Limited|GS1 Databar Omnidirectional|GS1 Databar Stacked|PDF417|MicroPDF417|QR|Data Matrix|
            GS1 Databar Truncated|GS1 Databar|RSS14|
            Databar|DataMatrix (2D) Barcodes|EAN Barcodes|
            EAN EXT 2|EAN EXT 5|EAN13|EAN8|
            Interleaved Code 2 of 5|PDF 417 Barcodes|QR (2D) Barcodes|
            Standard Code 2 of 5 (Industrial)|UCC/EAN 128 Barcodes|UCC/EAN128|
            UPC Barcodes|UPCA|UPCE</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class is used to read one or more barcodes from an image. 
            You cannot create an instance of <see cref="T:Leadtools.Barcode.BarcodeReader" /> directly, instead, use
            the instance created for you inside <see cref="T:Leadtools.Barcode.BarcodeEngine" /> and access through the 
            <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see> property:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
            Dim engine As New BarcodeEngine()
            Dim reader As BarcodeReader = engine.Reader
            ' Use can use the reader now, for example, read a single UPCA barcode from an image:
            Dim data As BarcodeData = reader.ReadBarcode(myImage, LogicalRectangle.Empty, BarcodeSymbology.UPCA)
            </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
            BarcodeEngine engine = new BarcodeEngine();
            BarcodeReader reader = engine.Reader();
            // Use can use the reader now, for example, read a single UPCA barcode from an image:
            BarcodeData data = reader.ReadBarcode(myImage, LogicalRectangle.Empty, BarcodeSymbology.UPCA);
            </code>
          </pre>
        </para>
        <para>Or you can use the <see cref="T:Leadtools.Barcode.BarcodeReader" /> directly through the <see cref="P:Leadtools.Barcode.BarcodeEngine.Reader">BarcodeEngine.Reader</see> property:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
            Dim engine As New BarcodeEngine()
            ' Use the instance in BarcodeEngine directly, for example, read a single UPCA barcode from an image:
            Dim data As BarcodeData = engine.Reader.ReadBarcode(myImage, LogicalRectangle.Empty, BarcodeSymbology.UPCA)
            </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
            BarcodeEngine engine = new BarcodeEngine();
            // Use the instance in BarcodeEngine directly, for example, read a single UPCA barcode from an image:
            BarcodeData data = engine.Reader.ReadBarcode(myImage, LogicalRectangle.Empty, BarcodeSymbology.UPCA);
            </code>
          </pre>
        </para>
        <h3>Reading Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains the following methods used to read barcodes:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see>
            </term>
            <description>
              <para>Search and read a single barcode from an image. This method will return a <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            object containing the data for the first barcode found in the images.
            Or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no barcodes are found. 
            "Found" means it satisfies the other parameters to the method such as symbology
            types, search area and read options.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see>
            </term>
            <description>
              <para>Search and read multiple barcode from an image. This method will return an array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects containing the data for the all barcodes found in
            the image. Or an empty array (of length equals to 0) if no barcodes are found. 
            Again, "Found" means it satisfies the other parameters to the method such as symbology types,
            search area and read options.</para>
            </description>
          </item>
        </list>
        <para>All these overloaded methods accept a valid image that contains the image data, and optional search rectangle, 
            the symbologies of interest and any extra read options.</para>
        <para>The returned <see cref="T:Leadtools.Barcode.BarcodeData" /> object(s) contain the data for the barcode or barcodes found. 
            These include:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see>
            </term>
            <description>
              <para>A member of the <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration that specifies the symbology (or type) 
            of the barcode found</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>
            </term>
            <description>
              <para>The barcode location and size in the image</para>
            </description>
          </item>
          <item>
            <term>The data (accessed through <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see>)</term>
            <description>
              <para>The raw data found inside the barcode as a byte array</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>
            </term>
            <description>
              <para>A string representation (in ASCII) of the data. The value returned is simply an ASCII text of the byte 
            array returned from
            <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see></para>
            </description>
          </item>
        </list>
        <para>And many more, refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
        <para>Note that depending on the symbology type, a derived class may be returned 
            (casted back to <see cref="T:Leadtools.Barcode.BarcodeData" />) from the read methods. Refer to
            <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
        <para>When reading barcodes, the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> can be used to 
            get real time information on the barcodes being
            searched for and the read status.</para>
        <h3>Input Image</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods accept as a parameter a <see cref="T:Leadtools.RasterImage" /> object that contains the image data. This must
            be a valid object (cannot be <strong>null</strong> or <strong>Nothing</strong>). 
            You typically obtain a <see cref="T:Leadtools.RasterImage" /> object by loading it from a disk file or stream using
            the <see cref="T:Leadtools.Codecs.RasterCodecs">Leadtools.Codecs.RasterCodecs</see> class, 
            acquiring from a scanning device using the
            <see cref="T:Leadtools.Twain.TwainSession">Leadtools.Twain.TwainSession</see> class or any of the many other means 
            supported by LEADTOOLS.</para>
        <para>To achieve the best results when searching, the barcode must be large and clear enough for the 
            <see cref="T:Leadtools.Barcode.BarcodeReader" /> object to detect and read. A barcode of one or
            more inches in width and height is almost always enough to be read successfully.  Hence, an input image with a 
            resolution of 200 DPI and larger, is recommended. If the source of the
            image is a smart phone camera, then these images will have a large pixel density (For instance, 5M pixels) and the barcode image 
            is of enough dimension to be read successfully even if resolution
            is small (typically 72 or 96 DPI with most phone cameras). LEADTOOLS can read these images without any problems.</para>
        <para>Bitonal (Black/White) images are the preferred format of input images. If the image has colors, then LEADTOOLS will 
            internally perform intensity detection to convert it
            to B/W before detecting the barcodes. This is done automatically by the engine; you typically pass the image as is. 
            However, if the image is unclear, broken or has noise, then
            external image processing might be required.</para>
        <para>LEADTOOLS can automatically read barcodes skewed at any angle. However, if you have vertical barcodes, 
            then you must change the barcode search direction to something other than
            the defaulted <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>. Setting this to
            <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.HorizontalAndVertical</see> 
            will read any barcode at any orientation and skew at the expense of more processing and less
            detection speed.</para>
        <para>Linear barcodes (1D) do not have many details and LEADTOOLS will generally read the barcode without any external 
            processing. 2D barcodes such as QR, PDF417, MicroPDF417
            and Datamatrix however contain a lot of details and a clean image is a must. 
            You can enable "double-passing" when reading these barcodes to automatically perform auto-clean up on
            these images if detection fails, refer to <see cref="P:Leadtools.Barcode.QRBarcodeReadOptions.EnableDoublePass">QRBarcodeReadOptions.EnableDoublePass</see>,
            <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableDoublePass">PDF417BarcodeReadOptions.EnableDoublePass</see>,
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.EnableDoublePass">MicroPDF417BarcodeReadOptions.EnableDoublePass</see> and
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableDoublePass">DatamatrixBarcodeReadOptions.EnableDoublePass</see> 
            for more information. These options require extra processing time and are all
            disabled by default to achieve maximum detection speed.</para>
        <h3>Search Bounds</h3>
        <para>The read methods accept a parameter of type <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the area of interest 
            in the image where the barcode search and detection is to be
            performed. You can pass <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to search the whole image. 
            Naturally, restricting the search bounds to a small area
            increases the detection speed and vice versa.</para>
        <h3>Symbologies</h3>
        <para>The read methods accept one or more <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specify the 
            symbologies (barcode types) to search for. You can also pass
            the special <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to instruct the engine to search for 
            all available symbologies.</para>
        <para>If you know the barcode type beforehand then it is <strong>highly recommended</strong> 
            you pass only the equivalent symbology (or symbologies). The less the number
            of symbologies to look for the faster, the detection speed and vice versa.</para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</see> 
            method will return an array containing all the symbologies
            (<see cref="T:Leadtools.Barcode.BarcodeSymbology" />) supported by LEADTOOLS. Not all of these symbologies might be available 
            (usable) by the current <see cref="T:Leadtools.Barcode.BarcodeReader" /> object depending on
            level of LEADTOOLS support unlocked and presence of back end support assemblies. The <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies" /> can
            be used at any time to return the subset of the symbologies that are currently usable by this 
            <see cref="T:Leadtools.Barcode.BarcodeReader" /> object.</para>
        <h3>Read Options</h3>
        <para>LEADTOOLS provides extra options to use when reading barcodes. These options are used to fine tune 
            the search parameters or provide extra pre-known information that might
            enhance the recognition speed and accuracy. The base abstract class for the options is 
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />. LEADTOOLS provides derived classes for each symbology
            (or group of symbologies). Refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> for more information.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
            (or group of common symbologies). These options can be retrieved using the
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> method passing the symbology of interest. 
            You can then change the members of the returned
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> (or after casting it to the appropriate derived class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> 
            classes and use it directly in the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods that accepts a 
            single or array of options as a parameter.</para>
        <para>The default options provide an easy way to easily change the options used by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            object in one place and so you do not have to to keep the option objects
            in your application. All the read methods have versions that do not require explicit options 
            (or use <strong>null</strong> for the ones that requires options).</para>
        <para>In certain situations however, using explicit options may be required, for example, 
            to fine tune reading a certain image or to read barcodes using independent options in
            multiple threads and a single <see cref="T:Leadtools.Barcode.BarcodeReader" />. In these cases, you can use the read methods that 
            accept specific options to override all or some of these options. If the
            reader cannot find the required options for a symbology in the specific options passed to the method, 
            it will use the default version stored in the class. The
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">
            BarcodeReader.ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see>
            example shows how to create two threads: 
            One for reading horizontal barcodes and one for reading vertical barcodes. 
            It will then use the same <see cref="T:Leadtools.Barcode.BarcodeReader" />
            to try and read all the barcodes from an image using both threads.</para>
        <para>The default options can also be loaded or saved as XML file or stream using the
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions">LoadOptions</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions">SaveOptions</see> methods.</para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <example>
            This example reads all the barcodes in an image
            <!--BarcodeReader--></example>
      <java>
        <pre>public class BarcodeReader</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeReader : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">
      <summary>
            Gets a list of all the barcode symbologies (types) currently available for reading by LEADTOOLS.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that list all the barcode 
            symbologies (types) currently available for reading by LEADTOOLS.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies" /> returns all the barcode symbologies (types) 
            supported by LEADTOOLS. Depending on the level of unlocked support 
            and availability of the back-end barcode assemblies, not all of the supported types may be available. 
            For example, if the <strong>Leadtools.Barcode.QrRead.dll</strong>
            assembly is missing, QR read support will not be available to your application.</para>
        <para>To get a list of the barcode symbologies available for reading, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</see> and
            to get a list of the barcode symbologies available for writing, 
            use <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</see>.</para>
        <para>To get the friendly name of any barcode symbology, 
            use <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</see>.</para>
      </remarks>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso href="https://www.leadtools.com/help/leadtools/v18/dh/to/leadtools.topics~leadtools.topics.filestobeincludedwithyourapplication.html">Files To Be Included In Your application.</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</seealso>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">
            BarcodeEngine.GetSupportedSymbologies</see>.</para>
      </example>
      <java>
        <pre>public BarcodeSymbology[] getAvailableSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getAvailableSymbologies:(LTBarcodeSymbology**)availableSymbologies 
      availableSymbologiesCount:(unsigned int*)availableSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.freeAvailableSymbologies_objectivec(Leadtools.Barcode.BarcodeSymbology[])">
      <summary>Free allocated availableSymbologies array returned by getAvailableSymbologies method</summary>
      <param name="availableSymbologies">The LTBarcodeSymbology array user want to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>- (void)freeAvailableSymbologies:(LTBarcodeSymbology*)availableSymbologies;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetBarcodeReadOptionsType(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets the type of the barcode read options class associated with a symbology.
            </summary>
      <param name="symbology">A <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the symbology.</param>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> 
            derived class that is used by LEADTOOLS when reading barcode of the symbology (or type) specified
            in <paramref name="symbology" />.</returns>
      <remarks>
        <para>In LEADTOOLS barcode read support, 
            each <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> (or a group of <see cref="T:Leadtools.Barcode.BarcodeSymbology" />) 
            is associated with a read options class that is
            a type derived from <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> 
            (the remarks section of this class contains a table that lists all the symbologies and option classes). 
            You can get the
            <see cref="T:System.Type" /> of the class associated with a certain symbology by using this 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetBarcodeReadOptionsType(Leadtools.Barcode.BarcodeSymbology)" />.</para>
        <para>Note that some options classes are shared by more than one symbology, for example, 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see> both use <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />. 
            Hence, passing either of these symbologies to this method will
            return the same type.</para>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> 
            is a special type that is used to instruct the engine to read all barcodes. 
            It does not have an associated
            read options class and should not be used in this method, otherwise, an exception will be thrown.</para>
      </remarks>
      <example>
        <para>This example will show how to use <see cref="M:Leadtools.Barcode.BarcodeReader.GetBarcodeReadOptionsType(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </example>
      <java>
        <pre>public static java.lang.Class&lt;?&gt; getBarcodeReadOptionsType(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>+ (Class)getBarcodeReadOptionsType:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">
      <summary>
            Loads the default read options from the specified XML file for this <see cref="T:Leadtools.Barcode.BarcodeReader" />.
            </summary>
      <param name="fileName">The XML file containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default read options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> 
            or <see cref="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            when no explicit options are passed by the user.</para>
        <para>To save the default options to an XML file, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.String)">BarcodeReader.SaveOptions(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.IO.Stream)">BarcodeReader.SaveOptions(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.IO.Stream)">BarcodeReader.LoadOptions(Stream stream)</see>.</para>
      </remarks>
      <example>
            This example shows how to change, save and then load the options of a <see cref="T:Leadtools.Barcode.BarcodeReader" /> object.
            <!--BarcodeReader.LoadOptions--></example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.IO.Stream)">
      <summary>
            Loads the default read options from the specified XML stream used for this <see cref="T:Leadtools.Barcode.BarcodeReader" />.
            </summary>
      <param name="stream">The XML stream containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default read options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> 
            or <see cref="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            when no explicit options are passed by the user.</para>
        <para>To save the default options to an XML stream, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.IO.Stream)">BarcodeReader.SaveOptions(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.String)">BarcodeReader.SaveOptions(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">BarcodeReader.LoadOptions(string fileName)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.String)">
      <summary>
            Saves the default read options from the specified XML file used for this <see cref="T:Leadtools.Barcode.BarcodeReader" /> .
            </summary>
      <param name="fileName">Name of the XML file to create</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default read options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> 
            or <see cref="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            when no explicit options are passed by the user.</para>
        <para>To load the default options from an XML file, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">BarcodeReader.LoadOptions(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.IO.Stream)">BarcodeReader.SaveOptions(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.IO.Stream)">BarcodeReader.LoadOptions(Stream stream)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.IO.Stream)">
      <summary>
            Saves the default read options used for this <see cref="T:Leadtools.Barcode.BarcodeReader" /> to the specified XML stream.
            </summary>
      <param name="stream">The XML <see cref="T:System.IO.Stream" /> to save the data to.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default read options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> or 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            when no explicit options are passed by the user.</para>
        <para>To load the default options from an XML stream, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.IO.Stream)">BarcodeReader.LoadOptions(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions(System.String)">BarcodeReader.SaveOptions(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">BarcodeReader.LoadOptions(string fileName)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to 
            <see cref="M:Leadtools.Barcode.BarcodeReader.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions">
      <summary>
            Gets a list of all the current barcode read options.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived types that contain all the default read 
            options currently set in this <see cref="T:Leadtools.Barcode.BarcodeReader" />.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> object contains an array of all the default read options used by the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            when no explicit options are passed by the user.</para>
        <para>Refer to the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> class for a list of the symbologies and the type 
            of the derived <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> used by LEADTOOLS.</para>
        <para>To get the options for a specific symbology, refer to <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /></para>
      </remarks>
      <example>
        <!--BarcodeReader.GetAllDefaultOptions-->
      </example>
      <java>
        <pre>public BarcodeReadOptions[] getAllDefaultOptions()</pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getAllDefaultOptions;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions_WinRT">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.GetAllDefaultOptions" />.</para>
      </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived types that contain all the default read 
            options currently set in this <see cref="T:Leadtools.Barcode.BarcodeReader" />.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
        <!--BarcodeReader.GetAllDefaultOptions-->
      </example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets the default read options for a specified symbology.
            </summary>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology 
            (or type) to get its options.</param>
      <returns>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived object used by this <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            as the default read options to use when reading barcodes
            of the type specified in <paramref name="symbology" />.</returns>
      <remarks>
        <para>LEADTOOLS provides extra options to use when reading barcodes. These options are used to fine tune 
            the parameters or provide extra pre-known information that are specific
            to certain types of barcodes. The base abstract class for the options is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />. 
            LEADTOOLS provides derived classes for each symbology (or group of
            symbologies). Refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> for more information.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
            (or group of common symbologies). These options can be retrieved using the
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> method passing the symbology of interest. 
            You can then change the members of the returned <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> (or after casting
            it to the appropriate derived class). These default options will be used by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            when the user calls the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> and 
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            with no specific options (by either using versions of the method that do not take options as a parameter, 
            pass <strong>null</strong> or <strong>Nothing</strong> for the
            <i>options</i> parameter for versions that accept options as a parameter, or finally if the 
            <i>options</i> parameter array does not contain options class that is associated
            with a read barcode).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> 
            classes and use it directly in 
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">ReadBarcode</see> 
            and <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">ReadBarcodes</see> methods
            that accept options as a parameter.</para>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> is a special type that is used to 
            instruct the engine to read all barcodes. It does not have an associated
            read options class and should not be used in this method, otherwise, an exception will be thrown.</para>
      </remarks>
      <example>
            This example shows how to get the default options used when reading standard linear 
            1D barcodes (UPC-A, UPC-E, etc) and changes them before reading the barcodes
            <!--BarcodeReader.GetDefaultOptions--></example>
      <java>
        <pre>public BarcodeReadOptions getDefaultOptions(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>-(LTBarcodeReadOptions*)getDefaultOptions:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology 
            (or type) to get its options.</param>
      <returns>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived object used by this <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            as the default read options to use when reading barcodes
            of the type specified in <paramref name="symbology" />.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
            This example shows how to get the default options used when reading standard linear 
            1D barcodes (UPC-A, UPC-E, etc) and changes them before reading the barcodes
            <!--BarcodeReader.GetDefaultOptions--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Read one barcode from an image with specified symbology and default options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area in 
            the image where the barcode search and detection is performed.
            You can specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search 
            must be performed on the whole image.</param>
      <param name="symbology">A <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology 
            (type) to search for. You can pass
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to search for all available symbologies in this 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data,
            location and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> 
            in Visual Basic).</returns>
      <remarks>
        <para>Use these methods if you want to read a single barcode from the image, for example, a QR symbol by specifying 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or
            if you want to read any barcode found regardless of its type by using <see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.Unknown</see>.</para>
        <para>For more information on barcode reading, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
        <para>This method will use the default read options set in this <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            that correspond to <paramref name="symbology" />. If the value of this parameter is
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>, then all the default read options might be used.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at 
            the same time. This method simply returns the first barcode that is
            detected correctly using the symbology and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. 
            The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> 
            property of the event data.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">
            ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">
            ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or 
            specific options. Use these methods if you want to read a single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to 
            read any barcode found regardless of its type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">
            ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">
            ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. Use these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and and default or specific options. 
            Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example shows how to use this method to read a single barcode from an image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LogicalRectangle, BarcodeSymbology)--></example>
      <java>
        <pre>
public BarcodeData readBarcode(
  RasterImage image, 
  LeadRect searchBounds, 
  BarcodeSymbology symbology
)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTBarcodeData*)readBarcode:(LTRasterImage*)image 
                 searchBounds:(LeadRect)searchBounds 
                    symbology:(LTBarcodeSymbology)symbology 
                        error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong>.</param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area in 
            the image where the barcode search and detection is performed.
            You can specify empty rectangle to indicate that the search 
            must be performed on the whole image.</param>
      <param name="symbology">A <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology 
            (type) to search for. You can pass
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to search for all available symbologies in this 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data,
            location and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> 
            in Visual Basic).</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />.</para>
      </remarks>
      <example>
            This example shows how to use this method to read a single barcode from an image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LeadRect, BarcodeSymbology)--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">
      <summary>
            Read one barcode from an image with specified symbology and options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null</strong> 
            (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area in the image where 
            the barcode search and detection is performed.
            You can specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search must be performed on the 
            whole image.</param>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) to search for. 
            You can pass
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to search for all available symbologies in this 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />.</param>
      <param name="options">An instance of a <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived class that specifies the options to use.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location, 
            and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</returns>
      <remarks>
        <para>Use these methods if you want to read a single barcode from the image, for example, a QR symbol by 
            specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or
            if you want to read any barcode found regardless of its type by using 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
        <para>For more information on barcode reading, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
        <para>This method will use the default read options set in this <see cref="T:Leadtools.Barcode.BarcodeReader" /> that correspond to 
            <paramref name="symbology" />. If the value of this parameter is
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>, then all the default read options might be used.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. 
            This method simply returns the first barcode that is detected correctly using the symbology and current options.</para>
        <para>This method will use the options in <paramref name="options" /> when reading the barcode. 
            If this parameter is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            then the default options for <paramref name="symbology" /> (or all default options if 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> is specified) will be used instead.</para>
        <para>If <paramref name="options" /> is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) and 
            <paramref name="symbology" /> is not
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>, then it must contain a derived class of 
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> that supports <paramref name="symbology" />.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. 
            This method simply returns the first barcode that is
            detected correctly using the symbology and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. 
            The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> 
            property of the event data.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or specific options. Use these methods if you want to read a 
            single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to read any barcode found regardless of its
            type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. 
            Use these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an array of 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and default or specific options. 
            Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example shows how to use this method to read a single barcode from an image an inverted image with specific options.
            <!--BarcodeReader.ReadBarcode(RasterImage, LogicalRectangle, BarcodeSymbology, BarcodeReadOptions)--></example>
      <java>
        <pre>
public BarcodeData readBarcode(
  RasterImage image, 
  LeadRect searchBounds, 
  BarcodeSymbology symbology, 
  BarcodeReadOptions options
)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTBarcodeData*)readBarcode:(LTRasterImage*)image 
                 searchBounds:(LeadRect)searchBounds 
                    symbology:(LTBarcodeSymbology)symbology 
                      options:(LTBarcodeReadOptions*)options 
                        error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.IBarcodeReadOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null.</strong></param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area in the image where 
            the barcode search and detection is performed.
            You can specify empty rectangle to indicate that the search must be performed on the 
            whole image.</param>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) to search for. 
            You can pass
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> to search for all available symbologies in this 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />.</param>
      <param name="options">An instance of a <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> derived class that specifies the options to use.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location, 
            and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />,
            also the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
            This example shows how to use this method to read a single barcode from an image an inverted image with specific options.
            <!--BarcodeReader.ReadBarcode(RasterImage, LeadRect, BarcodeSymbology, IBarcodeReadOptions)--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">
      <summary>
            Read one barcode from an image with a symbology from a specified group and the default options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null</strong> 
            (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area in the image where 
            the barcode search and detection is performed.
            Specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search must be performed on the whole image.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies 
            (types) to search for.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location 
            and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</returns>
      <remarks>
        <para>For more information on barcode reading, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
        <para>Use this method if you want to read a single barcode from a known group. For example, to read a barcode that can be of any 
            UPC type, pass an array of
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
        <para>
            This method will use the default read options set in this <see cref="T:Leadtools.Barcode.BarcodeReader" /> for all the items in <paramref name="symbologies" />.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. 
            This method simply returns the first barcode that is
            detected correctly using the symbologies and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. 
            The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> 
            property of the event data.</para>
        <para>If <paramref name="symbologies" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then this method will 
            use all the currently available symbologies. If
            this parameter contains an empty array, then no barcode will be detected and <strong>null</strong> 
            (<strong>Nothing</strong> in Visual Basic) will be returned.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or specific options. 
            Use these methods if you want to read a single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to read 
            any barcode found regardless of its type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. 
            Uses these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and default or specific options. 
            Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example shows how to use this method to read any UPC barcode used to identify products from from an image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LogicalRectangle, BarcodeSymbology[] symbologies)--></example>
      <java>
        <pre>
public BarcodeData readBarcode(
  RasterImage image, 
  LeadRect searchBounds, 
  BarcodeSymbology[] symbologies
)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTBarcodeData*)readBarcode:(LTRasterImage*)image 
                 searchBounds:(LeadRect)searchBounds 
                  symbologies:(LTBarcodeSymbology*)symbologies 
             symbologiesCount:(unsigned int)symbologiesCount 
                        error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.BarcodeSymbology[])">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null.</strong></param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area in the image where 
            the barcode search and detection is performed.
            Specify empty rectangle to indicate that the search must be performed on the whole image.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies 
            (types) to search for.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location 
            and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong>.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />.</para>
      </remarks>
      <example>
            This example shows how to use this method to read any UPC barcode used to identify products from from an image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LeadRect, BarcodeSymbology[] symbologies)--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">
      <summary>
            Read one barcode from an image with a symbology from a specified group and options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area 
            in the image where the barcode search and detection is performed.
            You can specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search must be performed on 
            the whole image.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies (types) 
            to search for.</param>
      <param name="options">An array of <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> that specifies the options to use. 
            This can be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), where
            the current default options is used. Otherwise, the method will use the option that corresponds to the symbologies being read, 
            if the array does not contain specific options
            for a symbologies being read, then the default version will be used.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</returns>
      <remarks>
        <para>For more information on barcode reading, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
        <para>Use this method if you want to read a single barcode from a known group. 
            For example, to read a barcode that can be of any UPC type, pass an array of
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. 
            This method simply returns the first barcode that is
            detected correctly using the symbologies and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. 
            The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> property of the event data.</para>
        <para>If <paramref name="symbologies" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), 
            then this method will use all the currently available symbologies. If
            this parameter contains an empty array, then no barcode will be detected and <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) will be returned.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or specific options. Use these methods if you want to read a single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to read any barcode found regardless of its type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. 
            Use these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an array of 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and default or specific options. 
            Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example shows how to use this method to read any UPC barcode used to identify products from from a rotated image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LogicalRectangle, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)--></example>
      <java>
        <pre>
public BarcodeData readBarcode(
  RasterImage image, 
  LeadRect searchBounds, 
  BarcodeSymbology[] symbologies, 
  BarcodeReadOptions[] options
)            </pre>
      </java>
      <objectivec>
        <pre>
- (LTBarcodeData*)readBarcode:(LTRasterImage*)image 
                 searchBounds:(LeadRect)searchBounds 
                  symbologies:(LTBarcodeSymbology*)symbologies 
             symbologiesCount:(unsigned int)symbologiesCount 
                      options:(NSArray*)options 
                        error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.IBarcodeReadOptions[])">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong>.</param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area 
            in the image where the barcode search and detection is performed.
            You can specify empty rectangle to indicate that the search must be performed on 
            the whole image.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies (types) 
            to search for.</param>
      <param name="options">An array of <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> that specifies the options to use. 
            This can be <strong>null</strong>, where
            the current default options is used. Otherwise, the method will use the option that corresponds to the symbologies being read, 
            if the array does not contain specific options
            for a symbologies being read, then the default version will be used.</param>
      <returns>An instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> or one of its derived classes that contains the symbology, data, location and any rotation angle of the barcode found.
            If no barcodes can be found, then this method will return <strong>null</strong>.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />,
            also the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
            This example shows how to use this method to read any UPC barcode used to identify products from from a rotated image.
            <!--BarcodeReader.ReadBarcode(RasterImage, LeadRect, BarcodeSymbology[] symbologies, IBarcodeReadOptions[] options)--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">
      <summary>
            Read multiple barcodes from an image with symbologies from a specified group the default options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area in the image 
            where the barcodes search and detection is performed.
            You can specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search must be 
            performed on the whole image.</param>
      <param name="maximumBarcodes">An <see cref="T:System.Int32" /> that specifies the maximum number of barcodes to return. 
            Must be a value greater than or equal to 0. The value of 0 means
            all barcodes.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode 
            symbologies (types) to search for.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects or derived classes that contains the symbology, data, location and any rotation angle for each barcode found.
            If no barcodes can be found, then this method will return an empty array (Length equals to 0).</returns>
      <remarks>
        <para>Use this method if you want to read multiple barcodes of the same or multiple symbologies from an image. 
            For example, to read all UPC and QR barcodes in the image,
            use an array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPC-A</see>, <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPC-E</see> and
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. 
            This method simply returns the first barcode that is
            detected correctly using the symbologies and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> property of the event data.</para>
        <para>This method will use the default read options set in this <see cref="T:Leadtools.Barcode.BarcodeReader" /> for all the items in <paramref name="symbologies" />.</para>
        <para>If <paramref name="symbologies" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then this method will use all the currently available symbologies. If
            this parameter contains an empty array, then no barcode will be detected and an empty array will be returned.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or specific options. Use these methods if you want to read a single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to read any barcode found 
            regardless of its type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. 
            Use these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an 
            array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and default or specific options. 
            Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example shows how to use this method to read multiple barcodes from a specific group from an image.
            <!--BarcodeReader.ReadBarcodes(RasterImage, LogicalRectangle, int, BarcodeSymbology[] symbologies)--></example>
      <java>
        <pre>
public BarcodeData[] readBarcodes(
  RasterImage image, 
  LeadRect searchBounds, 
  int maximumBarcodes, 
  BarcodeSymbology[] symbologies
)            </pre>
      </java>
      <objectivec>
        <pre>
- (NSArray*)readBarcodes:(LTRasterImage*)image 
            searchBounds:(LeadRect)searchBounds 
         maximumBarcodes:(int)maximumBarcodes 
             symbologies:(LTBarcodeSymbology*)symbologies 
        symbologiesCount:(unsigned int)symbologiesCount 
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.LeadRect,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. 
            Must not be <strong>null</strong>.</param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area in the image 
            where the barcodes search and detection is performed.
            You can specify empty rectangle to indicate that the search must be 
            performed on the whole image.</param>
      <param name="maximumBarcodes">An <see cref="T:System.Int32" /> that specifies the maximum number of barcodes to return. 
            Must be a value greater than or equal to 0. The value of 0 means
            all barcodes.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode 
            symbologies (types) to search for.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects that contains the symbology, data, location and any rotation angle for each barcode found.
            If no barcodes can be found, then this method will return an empty array (Length equals to 0).</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />.</para>
      </remarks>
      <example>
            This example shows how to use this method to read multiple barcodes from a specific group from an image.
            <!--BarcodeReader.ReadBarcodes(RasterImage, LeadRect, int, BarcodeSymbology[] symbologies)--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">
      <summary>
            Read multiple barcodes from an image with symbologies from a specified group and options.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="searchBounds">A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that specifies the region of interest area in the image where the barcodes search and detection is performed.
            You can specify <see cref="F:Leadtools.Forms.LogicalRectangle.Empty">LogicalRectangle.Empty</see> to indicate that the search must be performed on the whole image.</param>
      <param name="maximumBarcodes">An <see cref="T:System.Int32" /> that specifies the maximum number of barcodes to return. Must be a value greater than or equal to 0. The value of 0 means
            all barcodes.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies (types) to search for.</param>
      <param name="options">An array of <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> that specifies the options to use. This can be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), where
            the current default options is used. Otherwise, the method will use the options that corresponds to the symbologies being read, if the array does not contain specific options
            for a symbologies being read, then the default version will be used.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects or derived classes that contains the symbology, data, location and any rotation angle for each barcode found.
            If no barcodes can be found, then this method will return an empty array (Length equals to 0).</returns>
      <remarks>
        <para>Use this method if you want to read multiple barcodes of the same or multiple symbologies from an image. For example, to read all UPC and QR barcodes in the image,
            use an array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPC-A</see>, <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPC-E</see> and
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>.</para>
        <para>LEADTOOLS barcode read engine is optimized for speed and can search for multiple similar symbologies at the same time. This method simply returns the first barcode that is
            detected correctly using the symbologies and current options.</para>
        <para>The <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event will occur before and after attempting to read any symbology. The read options being used whether the default or specified will be set
            in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see> property of the event data.</para>
        <para>If <paramref name="symbologies" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then this method will use all the currently available symbologies. If
            this parameter contains an empty array, then no barcode will be detected and an empty array will be returned.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> provides the following barcode read methods:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</see></term>
            <description>
              <para>Read one barcode from an image with specified symbology and default or specific options. Use these methods if you want to read a single barcode from the image, for example, a QR
            symbol by specifying <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see> or if you want to read any barcode found regardless of its type by
            using <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read one barcode from an image with a symbology from a specified group and default or specific options. Use these methods if you want to read a single barcode from a known
            group. For example, to read a barcode that can be of any UPC type, pass an array of <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see> and <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</see></term>
            <description>
              <para>Read multiple barcodes from an image with symbologies from a specified group and default or specific options. Use these methods if you want to read multiple barcodes of the
            same or multiple symbologies.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology,Leadtools.Barcode.BarcodeReadOptions)">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology symbology, BarcodeReadOptions options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])">ReadBarcode(RasterImage image, LogicalRectangle searchBounds, BarcodeSymbology[] symbologies, BarcodeReadOptions[] options)</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[])">ReadBarcodes(RasterImage image, LogicalRectangle searchBounds, int maximumBarcodes, BarcodeSymbology[] symbologies)</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example creates two threads: One for reading horizontal barcodes and one for reading vertical barcodes. Then it uses the same 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />
            to try and read all the barcodes from an image using both threads
            <!--BarcodeReader.ReadBarcodes(RasterImage, LogicalRectangle, int, BarcodeSymbology[] symbologies, BarcodeReadOptions[])--></example>
      <java>
        <pre>
public BarcodeData[] readBarcodes(
  RasterImage image, 
  LeadRect searchBounds, 
  int maximumBarcodes, 
  BarcodeSymbology[] symbologies, 
  BarcodeReadOptions[] options
)            </pre>
      </java>
      <objectivec>
        <pre>
- (NSArray*)readBarcodes:(LTRasterImage*)image 
            searchBounds:(LeadRect)searchBounds 
         maximumBarcodes:(int)maximumBarcodes 
             symbologies:(LTBarcodeSymbology*)symbologies 
        symbologiesCount:(unsigned int)symbologiesCount 
                 options:(NSArray*)options 
                   error:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.LeadRect,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.IBarcodeReadOptions[])">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes(Leadtools.RasterImage,Leadtools.Forms.LogicalRectangle,System.Int32,Leadtools.Barcode.BarcodeSymbology[],Leadtools.Barcode.BarcodeReadOptions[])" />.</para>
      </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data. Must not be <strong>null</strong>.</param>
      <param name="searchBounds">A <see cref="T:Leadtools.LeadRect" /> that specifies the region of interest area in the image where the barcodes search and detection is performed.
            You can specify empty rectangle to indicate that the search must be performed on the whole image.</param>
      <param name="maximumBarcodes">An <see cref="T:System.Int32" /> that specifies the maximum number of barcodes to return. Must be a value greater than or equal to 0. The value of 0 means
            all barcodes.</param>
      <param name="symbologies">An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that specifies the barcode symbologies (types) to search for.</param>
      <param name="options">An array of <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> that specifies the options to use. This can be <strong>null</strong>, where
            the current default options is used. Otherwise, the method will use the options that corresponds to the symbologies being read, if the array does not contain specific options
            for a symbologies being read, then the default version will be used.</param>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeData" /> objects that contains the symbology, data, location and any rotation angle for each barcode found.
            If no barcodes can be found, then this method will return an empty array (Length equals to 0).</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" /> and the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
            This example creates two threads: One for reading horizontal barcodes and one for reading vertical barcodes. Then it uses the same 
            <see cref="T:Leadtools.Barcode.BarcodeReader" />
            to try and read all the barcodes from an image using both threads
            <!--BarcodeReader.ReadBarcodes(RasterImage, LeadRect, int, BarcodeSymbology[] symbologies, IBarcodeReadOptions[])--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReader.Engine">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Barcode.BarcodeEngine" /> associated with this class.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeEngine" /> that specifies the barcode engine associated with this class.</value>
      <remarks>
        <para>Use this property to get quick access to the owner <see cref="T:Leadtools.Barcode.BarcodeEngine" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public BarcodeEngine getEngine()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeEngine* engine;</pre>
      </objectivec>
    </member>
    <member name="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">
      <summary>
            Occurs for every barcode symbology read.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyEventArgs" /> 
            containing data related to this event.</event>
      <remarks>
        <para>Use the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event to obtain information and set the status of the current  
            barcode read operation.</para>
        <para>When you read barcodes using <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">
            BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see>, 
            the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object will fire
            the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event multiple times depending on the symbologies being read.</para>
        <para>LEADTOOLS barcode reading is designed for speed; multiple barcode symbologies can be read (or searched for) 
            in one operation as these barcodes have similar characteristics. Therefore, the symbologies being read are stored 
            in a <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> array and obtained with the
            <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies">BarcodeReadSymbologyEventArgs.GetSymbologies</see> method.</para>
        <para>The following table lists the event members and their meaning:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see>
            </term>
            <description>
              <para>Can be either <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see> 
            , when the <see cref="T:Leadtools.Barcode.BarcodeReader" /> is about to
            try to read the symbologies or <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see> 
            when the reader has finished
            reading the objects.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies">BarcodeReadSymbologyEventArgs.GetSymbologies</see>
            </term>
            <description>
              <para>Will return the current symbologies being searched for or that have been read.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">BarcodeReadSymbologyEventArgs.Options</see>
            </term>
            <description>
              <para>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> or one of its derived classes that specify the options being used to read 
            the symbologies. This could be the
            options passed through the read methods or the default options set in <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Data">BarcodeReadSymbologyEventArgs.Data</see>
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.BarcodeData" /> object that contains the data of the barcode found. 
            Only valid if <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" /> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PostRead</see> and no error occurred. 
            Otherwise, it will be <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error">BarcodeReadSymbologyEventArgs.Error</see>
            </term>
            <description>
              <para>An <see cref="T:System.Exception" /> object that contains any error encountered during the current operation. 
            If no errors are encountered, then this member
            will be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">BarcodeReadSymbologyEventArgs.Status</see>
            </term>
            <description>
              <para>The status of the operation. The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will always set this member to
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyEventArgs">BarcodeReadSymbologyEventArgs.Continue</see>, 
            which means proceed to the next phase of the read operation. You can
            set this member to <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Skip</see> 
            to skip reading the current symbologies (only when
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see>) 
            or to abort the whole read operation by setting it to
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Abort</see>.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReadSymbologyEventArgs">BarcodeReadSymbologyEventArgs</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <example>
            This example shows how to use <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> to get the current status of barcode reading.
            <!--BarcodeReader.ReadSymbology--></example>
      <java>
        <pre>
public void addReadSymbologyListener(BarcodeReadSymbologyListener listener)
public void removeReadSymbologyListener(BarcodeReadSymbologyListener listener)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, unsafe_unretained) id&lt;LTReadSymbologyDelegate&gt; delegate;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReader.ErrorMode">
      <summary>
            Indicate how to handle errors when reading barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode" /> enumeration member that indicates how to handle errors when 
            reading barcodes. The default value is
            <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.Default</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> object might encounter errors when reading barcodes. 
            By default, when an error is encountered, an exception is thrown, usually of type
            <see cref="T:Leadtools.Barcode.BarcodeException" /> with the <see cref="P:Leadtools.Barcode.BarcodeException.Code">BarcodeException.Code</see> 
            set to one of the <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration members
            for more details regarding the error. This is the default behavior.</para>
        <para>Sometimes, this behavior is not the desired one, for example:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is trying to decode barcodes on an "if found and correct" basis. 
            If there were corrupted barcodes, the action is to ignore them and to continue. In this case, you
            can set the error mode to <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.IgnoreAll</see>.</para>
              <para>The application is reading multiple barcodes from an image, and the action is to ignore the corrupted 
            barcodes and return only the valid ones found. In this case, you can
            set the error mode to <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.IgnoreAll</see> 
            and subscribe to the
            <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see> 
            event to get a notification when an error occurs and save the exception for later use. You can then
            handle these errors when all barcodes are read and the read method returns.</para>
            </description>
          </item>
        </list>
        <para>The LEADTOOLS C# and VB Barcode Demo changes the value of <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode" /> to 
            <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.IgnoreAll</see> and
            uses the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see> 
            event to show the errors encountered in a list box.</para>
        <para>Note that when the <see cref="T:Leadtools.Barcode.BarcodeReader" /> does not find any barcodes in the image, no exception is thrown. 
            Instead,
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) or
            an empty array of <see cref="T:Leadtools.Barcode.BarcodeData" /> type.</para>
      </remarks>
      <example>
            This example changes the value of <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see> 
            before reading all the barcodes from an image. It will then show
            any errors encountered after the read operation returns.
            <!--BarcodeReader.ErrorMode--></example>
      <java>
        <pre>
public BarcodeReaderErrorMode getErrorMode()
public void setErrorMode(BarcodeReaderErrorMode value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeReaderErrorMode errorMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReader.ImageType">
      <summary>
             Gets or sets the barcode image type when reading barcodes.
             </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeImageType" /> enumeration member that indicates the image type when 
             reading barcodes. The default value is 
             <see cref="T:Leadtools.Barcode.BarcodeImageType">BarcodeImageType.ScannedDocument</see>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Barcode.BarcodeReader.ImageType">ImageType</see> is used
             to determine the type of barcode image when reading barcodes. Barcode images generated by picture 
             devices such as camera and video recorder may suffer problems different than the images generated 
             by scanners, e.g., shadows, which may require special handling of the barcode image.</para>
      </remarks>
      <noexample />
      <java>
        <pre>
public int getImageType()
public void setImageType(BarcodeImageType value)             </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BarcodeImageType imageType;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReader.MaximumImageWidth">
      <summary>
            Gets or sets the maximum image width allowed when reading barcodes.
            </summary>
      <value>
            The maximum image width allowed when reading barcodes.
            </value>
      <remarks>
            If the image width is greater than this value, then the barcode engine will resize it before performing the barcode search.
            </remarks>
      <noexample />
      <java>
        <pre>
public int getMaximumImageWidth()
public void setMaximumImageWidth(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int maximumImageWidth;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReader.MaximumImageHeight">
      <summary>
            Gets or sets the maximum image height allowed when reading barcodes.
            </summary>
      <value>
            The maximum image height allowed when reading barcodes.
            </value>
      <remarks>
            If the image height is greater than this value, then the barcode engine will resize it before performing the barcode search.
            </remarks>
      <noexample />
      <java>
        <pre>
public int getMaximumImageHeight()
public void setMaximumImageHeight(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int maximumImageHeight;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
      <summary>
             Current barcode read operation.
             </summary>
      <remarks>
        <para>This enumeration is used as the type for the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see>
             property that can be used to determine the current barcode read stage.</para>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public enum BarcodeReadSymbologyOperation</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeReadSymbologyOperation</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReadSymbologyOperation.PreRead">
      <summary>
            (0)<para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> object is about to read the barcode symbologies.</para><para>The input parameters are: The symbologies to be read which can be obtained through the <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" /> method
            and the associated read options that are in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" /> property.</para></summary>
      <java>
        <pre>PRE_READ</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReadSymbologyOperation_PreRead</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReadSymbologyOperation.PostRead">
      <summary>
            (1)<para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> has finished reading the barcode symbologies.</para><para>The input parameters are: The symbologies to be read which can be obtained through the <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" /> method
            and the associated read options that are in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" /> property.</para><para>The resulting parameters are: The barcode data found which is in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Data" /> property that may contain
            a valid <see cref="T:Leadtools.Barcode.BarcodeData" /> object or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) when an error occurs or no barcode of this
            type is found. In case of an error, the exception is in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error" /> property (Refer to
            <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see> for more information).</para></summary>
      <java>
        <pre>POST_READ</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReadSymbologyOperation_PostRead</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">
      <summary>
            Determines the barcode read operation status
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus" /> enumeration is used as the data member for the
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">BarcodeReadSymbologyEventArgs.Status</see> property. 
            It can be used to determine the next action performed by the
            <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
        <para>Refer to <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">BarcodeReadSymbologyEventArgs.Status</see> 
            for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public enum BarcodeReadSymbologyStatus</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeReadSymbologyStatus</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReadSymbologyStatus.Continue">
      <summary>
            (0)<para>Continue reading the next barcode(s) (if any). This is the default behavior.</para></summary>
      <java>
        <pre>CONTINUE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReadSymbologyStatus_Continue</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReadSymbologyStatus.Skip">
      <summary>
            (1)<para>Skip reading the current barcode symbologies and move to the next (if any). Setting
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">BarcodeReadSymbologyEventArgs.Status</see> 
            to <strong>Skip</strong> will have an effect only if
            the <see cref="T:Leadtools.Barcode.BarcodeEngine" /> is about to read the barcodes. i.e., when the value of
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see>.</para><para>When the operation is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
            BarcodeReadSymbologyOperation.PostRead</see> and the reader has finished reading
            the barcodes, then setting the status to <strong>Skip</strong> will have no effect.</para></summary>
      <java>
        <pre>SKIP</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReadSymbologyStatus_Skip</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReadSymbologyStatus.Abort">
      <summary>
            (2)<para>Abort the read operation. The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will stop trying reading barcodes 
            and the read operation will end. This can be used when the
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see> or
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PostRead</see>.</para></summary>
      <java>
        <pre>ABORT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReadSymbologyStatus_Abort</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReadSymbologyEventArgs">
      <summary>
            Contains data for the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event.
            </summary>
      <remarks>
        <para>You can use the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event to obtain information and set the 
            status of the current barcode reading operation.</para>
        <para>When reading barcodes using <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">
            BarcodeReader.ReadBarcode</see> or
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see>, 
            the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object will fire
            the <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology" /> event multiple times depending on the symbologies being read.
            </para>
        <para>LEADTOOLS barcode reading is designed for speed and multiple barcode symbologies can be read 
            (or searched for) in one operation as these barcodes share similar characteristics. 
            Therefore, the symbologies being read are stored in a 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> array and can be obtained with the
            <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies">BarcodeReadSymbologyEventArgs.GetSymbologies</see> 
            method.</para>
        <para>The following table lists the event members and their meanings:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" />
            </term>
            <description>
              <para>Can be either <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see> if the <see cref="T:Leadtools.Barcode.BarcodeReader" /> is about to
            try reading the symbologies or <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
            BarcodeReadSymbologyOperation.PreRead</see> when the reader has finished
            reading the objects.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" />
            </term>
            <description>
              <para>Will return the current symbologies being searched for or that have been read.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" />
            </term>
            <description>
              <para>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> or one of its derived classes that specify the options being used 
            to read the symbologies. This could be the options passed through the read methods or the default options 
            set in <see cref="T:Leadtools.Barcode.BarcodeReader" />.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Data" />
            </term>
            <description>
              <para>A <see cref="T:Leadtools.Barcode.BarcodeData" /> object that contains the data of the barcode found. 
            Only valid if <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" /> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PostRead</see> 
            and no error occurred. Otherwise, it will be <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error" />
            </term>
            <description>
              <para>An <see cref="T:System.Exception" /> object that contains any error encountered during the current operation. If no errors are encountered, then this member
            will be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status" />
            </term>
            <description>
              <para>The status of the operation. The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will always set this member to
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyEventArgs">BarcodeReadSymbologyEventArgs.Continue</see>, 
            which means proceed to the next phase of the read operation. You can
            set this member to <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Skip</see> to skip 
            reading the current symbologies (only when
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" /> is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
            BarcodeReadSymbologyOperation.PreRead</see>) or to
            abort the whole read operation by setting it to <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">
            BarcodeReadSymbologyStatus.Abort</see>.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public class BarcodeReadSymbologyEvent extends LeadEvent</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeReadSymbologyEventArgs : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies">
      <summary>
            Gets the current symbologies being searched for or that have been read.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the current symbologies 
            being searched for or that have been read.</returns>
      <remarks>
        <para>LEADTOOLS barcode reading is designed for speed and multiple barcode symbologies 
            and can be read (or searched for) in one operation as these
            barcodes share similar characteristics. Therefore, the symbologies being read are stored in a 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> array and can be obtain with
            this method.</para>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public BarcodeSymbology[] getSymbologies()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTBarcodeSymbology* symbologies;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">
      <summary>
            Gets the current barcode read operation.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation" /> enumeration member that specifies the current barcode 
            read operation.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" /> is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object as follows:
            </para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see>
            </term>
            <description>
              <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> object is about to read the barcode symbologies in 
                      <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" />.</para>
              <para>The input parameters are: The symbologies to be read can be obtained through the 
                      <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" /> method
                      and the associated read options are in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" /> property.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PostRead</see>
            </term>
            <description>
              <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> has finished reading the barcode symbologies.</para>
              <para>The input parameters are: The symbologies to be read can be obtained through the 
                      <see cref="M:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.GetSymbologies" /> method
                      and the associated read options are in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" /> property.</para>
              <para>The resulting parameters are: The barcode data found which is in the 
                      <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Data" /> property and may contain
                      a valid <see cref="T:Leadtools.Barcode.BarcodeData" /> object or <strong>null</strong> (<strong>Nothing</strong> 
                      in Visual Basic) when an error occurs or no barcode of this
                      type is found. In case of an error, the exception is in the <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error" /> property (Refer to
                      <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see> for more information).</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public BarcodeReadSymbologyOperation getOperation()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTBarcodeReadSymbologyOperation operation;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.symbologiesCount_objectivec">
      <summary>Get Symbologies Count</summary>
      <value>An <see cref="T:System.Int32" /> that specifies the Count of Symbologies in symbologies property</value>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) unsigned int symbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options">
      <summary>
            Gets the options being used to read the symbologies.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> or one of its derived classes that specifies the options 
            being used to read the symbologies.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" /> could be the options passed through the read methods or the default options set 
            in <see cref="T:Leadtools.Barcode.BarcodeReader" />. If
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status" /> is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.PreRead</see>, 
            then you can modify this object in the event
            handler if required. The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will use this object to perform the read operation.
            </para>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public BarcodeReadOptions getOptions()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeReadOptions* options;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options_WinRT">
      <summary>
        <para>For information about this method please see <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Options" />.</para>
      </summary>
      <value>An <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> or one of its derived classes that specifies the options 
            being used to read the symbologies.</value>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Data">
      <summary>
            Gets the barcode data found.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeData" /> object that contains the data of the barcode found.</value>
      <remarks>
        <para>Only valid if <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation" /> is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
            BarcodeReadSymbologyOperation.PostRead</see> and no error occurred.
            Otherwise, it will be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
        <para>Note that this property may consist of an object of a derived class that may contain 
            extra information for the symbology. Refer to
            <see cref="T:Leadtools.Barcode.BarcodeData" /> for more information.</para>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public BarcodeData getData()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeData* data;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error">
      <summary>
            Any error that may have occurred during the read operation.
            </summary>
      <value>An <see cref="T:System.Exception" /> object that contains any error that may have occurred during the 
            read operation. Otherwise (no errors occurred), it
            will be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>If an error occurs during the read operation and <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error" /> contains a valid 
            exception object, then depending on the value of
            <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see>, the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object may throw this exception after the event
            handler returns. This is determined as follows:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Action</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.Default</see>
            </term>
            <description>
              <para>(Default behavior). The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will throw the error after the 
            event handler returns. You must catch this exception
            in your application.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.IgnoreAll</see>
            </term>
            <description>
              <para>The <see cref="T:System.Exception" /> object is still in <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Error" />, but the <see cref="T:Leadtools.Barcode.BarcodeReader" /> will not throw the exception when the event
            handler returns. It is up to you to decide if and when to throw the 
            exception and how to handle it. The C# and VB Barcode Main Demo shows the errors
            (if any) in a list after the read operation is completed.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>public RuntimeException getError()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) NSError* error;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.HResult">
      <summary>
            Any error that may have occurred during the read operation.
            </summary>
      <value>An int value that represent any error that may have occurred during the 
            read operation. Otherwise (no errors occurred), it
            will be <strong>0</strong> (<strong>0</strong> in Visual Basic).</value>
      <remarks>
        <para>If an error occurs during the read operation and <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.HResult" /> contains a valid 
            error code, then depending on the value of
            <see cref="P:Leadtools.Barcode.BarcodeReader.ErrorMode">BarcodeReader.ErrorMode</see>, the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object may throw this exception after the event
            handler returns. This is determined as follows:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Action</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.Default</see>
            </term>
            <description>
              <para>(Default behavior). The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will throw the error after the 
            event handler returns. You must catch this exception
            in your application.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReaderErrorMode">BarcodeReaderErrorMode.IgnoreAll</see>
            </term>
            <description>
              <para>The error code is still in <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.HResult" />, but the <see cref="T:Leadtools.Barcode.BarcodeReader" /> will not throw the exception when the event
            handler returns. It is up to you to decide if and when to throw the 
            exception and how to handle it. The C# and VB Barcode Main Demo shows the errors
            (if any) in a list after the read operation is completed.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">
      <summary>
            Gets or sets the status of the read operation.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus" /> enumeration member that specifies the status of the 
            read operation. Default value
            is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Continue.</see></value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> always sets the value of this property 
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Continue</see>.
            You can change the value of this property to another value depending on your application logic. 
            The following table lists the status values and their
            meaning:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Continue</see>
            </term>
            <description>
              <para>Continue reading the next barcode(s) (if any). This is the default behavior.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Skip</see>
            </term>
            <description>
              <para>Skip reading the current barcode symbologies and move to the next (if any). Setting
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Status">BarcodeReadSymbologyEventArgs.Status</see> to 
            <strong>Skip</strong> will have an affect only if
            the <see cref="T:Leadtools.Barcode.BarcodeEngine" /> is about to read the barcodes. i.e., when the value of
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see>.</para>
              <para>When the operation is <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">
            BarcodeReadSymbologyOperation.PostRead</see> and the reader has finished reading
            the barcodes, then setting the status to <strong>Skip</strong> will have no effect.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyStatus">BarcodeReadSymbologyStatus.Abort</see>
            </term>
            <description>
              <para>Abort the read operation. The <see cref="T:Leadtools.Barcode.BarcodeReader" /> will stop trying to read barcodes and 
            the read operation will end. This can be used when the
            <see cref="P:Leadtools.Barcode.BarcodeReadSymbologyEventArgs.Operation">BarcodeReadSymbologyEventArgs.Operation</see> is
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PreRead</see> or
            <see cref="T:Leadtools.Barcode.BarcodeReadSymbologyOperation">BarcodeReadSymbologyOperation.PostRead</see>.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology_EV">BarcodeReader.ReadSymbology</seealso>
      <example>
        <para>For an example, refer to <see cref="E:Leadtools.Barcode.BarcodeReader.ReadSymbology">BarcodeReader.ReadSymbology</see>.</para>
      </example>
      <java>
        <pre>
public BarcodeReadSymbologyStatus getStatus()
public void setStatus(BarcodeReadSymbologyStatus value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) LTBarcodeReadSymbologyStatus status;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeWriter">
      <summary>
             Main class for the LEADTOOLS support for writing barcodes.
             </summary>
      <keywords>Barcode|Barcode,Linear barcodes|Barcode,PDF417 (2D)|Barcode,Data Matrix (2D)|Barcode,QR|Barcode,MicroPDF417 (2D)|
             Barcode 1D|1D Barcode|2D Barcode (QR)|4-State|2D Barcode (DataMatrix)|
             Code 11|Code 128|Code 3 of 9|Code 3 of 9 Extended|Code 32|Code 39 Barcodes|Code 93|Code 93 Extended|
             GS1 Databar Barcodes|GS1 Databar Expanded|GS1 Databar Expanded Stacked|
             GS1 Databar Limited|GS1 Databar Omnidirectional|GS1 Databar Stacked|PDF417|MicroPDF417|QR|Data Matrix|
             GS1 Databar Truncated|GS1 Databar|RSS14|
             Databar|DataMatrix (2D) Barcodes|EAN Barcodes|
             EAN EXT 2|EAN EXT 5|EAN13|EAN8|
             Interleaved Code 2 of 5|PDF 417 Barcodes|QR (2D) Barcodes|
             Standard Code 2 of 5 (Industrial)|UCC/EAN 128 Barcodes|UCC/EAN128|
             UPC Barcodes|UPCA|UPCE</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class is used to write a barcode to an image. 
             You cannot create an instance of <see cref="T:Leadtools.Barcode.BarcodeWriter" /> directly, instead, you use the instance
             created for you inside <see cref="T:Leadtools.Barcode.BarcodeEngine" /> and accessed through the <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see> 
             property:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim engine As New BarcodeEngine()
             Dim writer As BarcodeWriter = engine.Writer
             ' Use can use the writer now, for example, write a UPCA barcode to an image:
             Dim data As New BarcodeData(BarcodeSymbology.UPCA,"01234567890")
             data.Bounds = New LogicalRectangle(0, 0, 400, 200, LogicalUnit.Pixel)
             writer.WriteBarcode(myImage, data, Nothing)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             BarcodeEngine engine = new BarcodeEngine();
             BarcodeWriter writer = engine.Writer;
             // Use can use the writer now, for example, write a UPCA barcode to an image:
             BarcodeData data = new BarcodeData(BarcodeSymbology.UPCA,"01234567890");
             data.Bounds = new LogicalRectangle(0, 0, 400, 200, LogicalUnit.Pixel);
             writer.WriteBarcode(myImage, data, null);
             </code>
          </pre>
        </para>
        <para>Or you can use the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> directly through the <see cref="P:Leadtools.Barcode.BarcodeEngine.Writer">BarcodeEngine.Writer</see> 
             property:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim engine As New BarcodeEngine()
             // Use the instance in BarcodeEngine directly, for example, write a UPCA barcode to an image:
             Dim data As New BarcodeData(BarcodeSymbology.UPCA,"01234567890")
             data.Bounds = New LogicalRectangle(0, 0, 400, 200, LogicalUnit.Pixel)
             engine.Writer.WriteBarcode(myImage, data, Nothing)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             BarcodeEngine engine = new BarcodeEngine();
             // Use the instance in BarcodeEngine directly, for example, write a UPCA barcode to an image:
             BarcodeData data = new BarcodeData(BarcodeSymbology.UPCA,"01234567890");
             data.Bounds = new LogicalRectangle(0, 0, 400, 200, LogicalUnit.Pixel);
             engine.Write.WriteBarcode(myImage, data, null);
             </code>
          </pre>
        </para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the following method used to write barcodes:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />
            </term>
            <description>
              <para>Writes a barcode to an image. This method accepts as a parameter a <see cref="T:Leadtools.Barcode.BarcodeData" /> object containing the data for the 
             barcode (or one of its derived classes). This
             object contains the barcode symbology, its data as a raw stream of bytes and a rectangle that specifies the location and size of the 
             output barcode. Extra write options may be
             provided too.</para>
            </description>
          </item>
        </list>
        <para>Note that depending on the symbology type, a derived class may be provided (casted back to <see cref="T:Leadtools.Barcode.BarcodeData" />). 
             Refer to <see cref="T:Leadtools.Barcode.BarcodeData" /> for more
             information.</para>
        <h3>Output Image</h3>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method accepts as a parameter a <see cref="T:Leadtools.RasterImage" /> object that contains 
             the destination image data. This must be a valid object
             (cannot be <strong>null</strong> or <strong>Nothing</strong>). You typically obtain a <see cref="T:Leadtools.RasterImage" /> 
             object by creating a new one, loading it from a disk file or stream
             using the <see cref="T:Leadtools.Codecs.RasterCodecs">Leadtools.Codecs.RasterCodecs</see> class, acquiring from a scanning 
             device using the <see cref="T:Leadtools.Twain.TwainSession">Leadtools.Twain.TwainSession</see> class or any of the many other means 
             supported by LEADTOOLS.</para>
        <para>After you write the barcode or barcodes to the image, you can use the <see cref="T:Leadtools.Codecs.RasterCodecs">
             Leadtools.Codecs.RasterCodecs</see> class to save this image
             to disk using any of the file formats supported by LEADTOOLS.</para>
        <h3>Destination Bounds</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeData" /> contains the <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see> 
             property that should be populated with the location and size of the final
             barcode on the image. Not all sizes can be used when writing a barcode. And the value of the width and height of the 
             bounds can have a special meaning. Use the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method to return the exact location of the destination barcode on the image 
             without committing it based on the data, symbology and options selected. 
             For more information, <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <h3>Symbologies</h3>
        <para>The source <see cref="T:Leadtools.Barcode.BarcodeData" /> also contains the <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
             property, this must be set to the <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration value that specifies the barcode type to use when writing.
             </para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</see> method will return an array 
             containing all the symbologies supported by LEADTOOLS. Not all of these symbologies might be available (usable) by the current 
             <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object depending on level of LEADTOOLS support unlocked and presence
             of back end support assemblies. The <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies" /> can be used at any time to return the subset 
             of the symbologies that are currently usable by this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object.</para>
        <h3>Write Options</h3>
        <para>LEADTOOLS provides extra options to use when writing barcodes. These options are used to fine tune the parameters or provide 
             extra pre-known information that are specific
             to certain types of barcodes. The base abstract class for the options is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />. LEADTOOLS provides 
             derived classes for each symbology (or group of
             symbologies). Refer to <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> for more information.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology 
             (or group of common symbologies). These options can be retrieved using the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> method passing the symbology of interest. You may then change the members of the 
             returned <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> (or after casting it to the appropriate derived class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> classes and use it directly in 
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>The default options provide a way to easily change the options used by the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object in one place 
             ;you do not have to to keep the option objects in your application.</para>
        <para>In certain situations however, using explicit options may be required. For example, to fine tune writing a certain image or 
             to write barcodes using independent options in multiple threads and a single <see cref="T:Leadtools.Barcode.BarcodeWriter" />. In these cases, you can 
             use explicit options to override all or some of these options.</para>
        <para>The default options can also be loaded or saved as XML 
             file or stream using the <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions">LoadOptions</see> and 
             <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions">SaveOptions</see> methods.</para>
        <para>Note on writing barcodes and image regions: If the <see cref="T:Leadtools.RasterImage" /> contains a region, then the 
             <see cref="T:Leadtools.Barcode.BarcodeWriter" /> will respect the region boundaries when writing the barcode. 
             In other words, the resulting barcode might not be completely visible because of the region of interest restrictions. 
             The C# and VB Barcode Demos will check if the image has a region, save a copy of it and delete the image region before writing a barcode, 
             then re-set the region again after the write operation.</para>
        <para>Also note that the region location (its top and left position) does not affect the location of the barcodes to be written. 
             This behavior has changed in LEADTOOLS v18 from
             previous versions.</para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example creates a barcode for each symbology supported by LEADTOOLS. It will then save the barcodes as TIFF files.
             <!--BarcodeWriter--></example>
      <java>
        <pre>public class BarcodeWriter</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeWriter : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">
      <summary>
            Gets a list of all the barcode symbologies (types) currently available for writing by LEADTOOLS.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration members that lists all the barcode symbologies (types) 
            currently available for writing by LEADTOOLS.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies" /> returns all the barcode symbologies (types) supported by LEADTOOLS. 
            Depending on the level of support unlocked and availability of the back end barcodes assemblies, not all of the supported types 
            may be available. For example, if the <strong>Leadtools.Barcode.QrWrite.dll</strong>
            assembly is missing, QR write support will not be available to your application.</para>
        <para>To get a list of the barcode symbologies available for reading, use 
            <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</see> and
            to get a list of the barcode symbologies available for writing, use <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">
            BarcodeWriter.GetAvailableSymbologies</see>.</para>
        <para>To get the friendly name of any barcode symbology, use <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">
            BarcodeEngine.GetSymbologyFriendlyName</see>.</para>
      </remarks>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <a href="ms-xhelp:///?id=Leadtools.Topics~Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files To Be Included In Your application.</a>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</seealso>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</see>.</para>
      </example>
      <java>
        <pre>public BarcodeSymbology[] getAvailableSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getAvailableSymbologies:(LTBarcodeSymbology**)availableSymbologies 
      availableSymbologiesCount:(unsigned int*)availableSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetBarcodeWriteOptionsType(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets the type of the barcode write options class associated with a symbology.
            </summary>
      <param name="symbology">A <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the symbology.</param>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> derived class that is used by LEADTOOLS when 
            writing barcode of the symbology (or type) specified
            in <paramref name="symbology" />.</returns>
      <remarks>
        <para>In LEADTOOLS barcode write support, each <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> (or a group of <see cref="T:Leadtools.Barcode.BarcodeSymbology" />) 
            is associated with a write options class that is
            a type derived from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> (the remarks section of this class contains a table that lists all the 
            symbologies and option classes). You can get the
            <see cref="T:System.Type" /> of the class associated with a certain symbology by using this <see cref="M:Leadtools.Barcode.BarcodeWriter.GetBarcodeWriteOptionsType(Leadtools.Barcode.BarcodeSymbology)" />.</para>
        <para>Note that some options classes are shared by more than one symbology, for example, <see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.UPCA</see> and
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see> both use <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />. 
            Hence, passing either of these symbologies to this method will
            return the same type.</para>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> is a special type that is used to instruct the engine 
            to read all barcodes. It does not have an associated
            write options class and should not be used in this method, otherwise, an exception will be thrown.</para>
      </remarks>
      <example>
        <para>This example will show how to use <see cref="M:Leadtools.Barcode.BarcodeWriter.GetBarcodeWriteOptionsType(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </example>
      <java>
        <pre>public static java.lang.Class&lt;?&gt; getBarcodeWriteOptionsType(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>+ (Class)getBarcodeWriteOptionsType:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">
      <summary>
            Loads the default write options used of this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> from the specified XML file.
            </summary>
      <param name="fileName">The XML file containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, 
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default write options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> or 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method when no explicit options are passed by the user.</para>
        <para>To save the default options to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.String)">
            BarcodeWriter.SaveOptions(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.IO.Stream)">
            BarcodeWriter.SaveOptions(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.IO.Stream)">
            BarcodeWriter.LoadOptions(Stream stream)</see>.</para>
      </remarks>
      <example>
            This example will show how to change, save and then load the options of a 
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object.
            <!--BarcodeWriter.LoadOptions--></example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.IO.Stream)">
      <summary>
            Loads the default write options used for <see cref="T:Leadtools.Barcode.BarcodeWriter" /> from the specified XML stream.
            </summary>
      <param name="stream">The XML stream containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, 
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default write options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> or 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method when no explicit options are passed by the user.</para>
        <para>To save the default options to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.IO.Stream)">
            BarcodeWriter.SaveOptions(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.String)">
            BarcodeWriter.SaveOptions(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">
            BarcodeWriter.LoadOptions(string fileName)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.String)">
      <summary>
            Saves the default write options used for this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> from to the specified XML file.
            </summary>
      <param name="fileName">Name of the XML file to create</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. The 
            <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default write options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> or 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method when no explicit options are passed by the user.</para>
        <para>To load the default options from an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">
            BarcodeWriter.LoadOptions(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.IO.Stream)">
            BarcodeWriter.SaveOptions(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.IO.Stream)">BarcodeWriter.LoadOptions(Stream stream)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.IO.Stream)">
      <summary>
            Saves the default write options used for this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> to the specified XML stream.
            </summary>
      <param name="stream">The XML <see cref="T:System.IO.Stream" /> to save the data to.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>The default write options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> or 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions" /> methods. You can then change the
            values of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> object returned (or cast it back to the appropriate derived class). 
            These options are used by the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method when no explicit options are passed by the user.</para>
        <para>To load the default options from an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.IO.Stream)">
            BarcodeWriter.LoadOptions(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions(System.String)">
            BarcodeWriter.SaveOptions(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">BarcodeWriter.LoadOptions(string fileName)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeWriter.LoadOptions(System.String)">LoadOptions(string fileName)</see></para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions">
      <summary>
            Gets a list of all the current barcode write options.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> derived types that contain all the default write options currently set in 
            this <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object contains an array of all the default write options used by the 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method when no explicit options
            are passed by the user.</para>
        <para>Refer to the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> class for a list of the symbologies and the type of the 
            derived <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> used by LEADTOOLS.</para>
        <para>To get the options for a specific symbology, refer to <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /></para>
      </remarks>
      <example>
        <!--BarcodeWriter.GetAllDefaultOptions-->
      </example>
      <java>
        <pre>public BarcodeWriteOptions[] getAllDefaultOptions()</pre>
      </java>
      <objectivec>
        <pre>- (NSArray*)getAllDefaultOptions;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions_WinRT">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAllDefaultOptions" />.</para>
      </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived types that contain all the default read 
            options currently set in this <see cref="T:Leadtools.Barcode.BarcodeReader" />.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.</para>
      </remarks>
      <example>
        <!--BarcodeReader.GetAllDefaultOptions-->
      </example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets the default write options for a specified symbology.
            </summary>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (or type) 
            to get its options.</param>
      <returns>The <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> derived object used by this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> as the default write 
            options to use when writing barcodes
            of the type specified in <paramref name="symbology" />.</returns>
      <remarks>
        <para>LEADTOOLS provides extra options to use when writing barcodes. These options are used to fine tune the parameters or 
            provide extra pre-known information that is specific
            to certain types of barcodes. The base abstract class for the options is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />. 
            LEADTOOLS provides derived classes for each symbology (or group of
            symbologies). Refer to <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> for more information.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
            These options can be retrieved using the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" /> method passing the symbology of interest. You can then change the members of the 
            returned <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> (or after casting
            it to the appropriate derived class). These default options will be used by the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> when the user 
            calls the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method with no specific options using <strong>null</strong> or <strong>Nothing
            </strong> for the <i>options</i> parameter.</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> classes and use it directly in 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see> is a special type that is used to instruct the engine to read 
            all barcodes. It does not have an associated
            write options class and should not be used in this method, otherwise, an exception will be thrown.</para>
      </remarks>
      <example>
            This example shows how to get the default options used when writing standard linear 1D barcodes (UPC-A, UPC-E, etc) 
            and then changes them before writing a barcode
            <!--BarcodeWriter.GetDefaultOptions--></example>
      <java>
        <pre>public BarcodeWriteOptions getDefaultOptions(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>- (LTBarcodeWriteOptions*)getDefaultOptions:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology 
            (or type) to get its options.</param>
      <returns>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> derived object used by this <see cref="T:Leadtools.Barcode.BarcodeReader" /> 
            as the default read options to use when reading barcodes
            of the type specified in <paramref name="symbology" />.</returns>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.</para>
      </remarks>
      <example>
            This example shows how to get the default options used when reading standard linear 
            1D barcodes (UPC-A, UPC-E, etc) and changes them before reading the barcodes
            <!--BarcodeReader.GetDefaultOptions--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">
      <summary>
            Calculates the exact pixel size required to write the specified barcode.
            </summary>
      <param name="writeBounds">The location where the barcode should be written.</param>
      <param name="xResolution">Horizontal resolution value of the destination image that will be used to write the barcode to.</param>
      <param name="yResolution">Vertical resolution value of the destination image that will be used to write the barcode to.</param>
      <param name="data">An <see cref="T:Leadtools.Barcode.BarcodeData" /> object that contains the barcode data to write.</param>
      <param name="options">Options write options to use.</param>
      <remarks>
        <para>After this method returns, the width and height values of <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see> 
            will be updated with the exact pixel size required to write the barcode with the specified options.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeData" /> contains the <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see> property 
            that should be populated with the location and size of the final barcode on the image. Not all sizes can be used when 
            writing a barcode and the value of the width and height of the bounds can have a special meaning. 
            You can use the <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method to return the exact location of the destination 
            barcode on the image without committing it based on the data, symbology and options selected. 
            For more information, <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
            This example will use <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> to calculate the smallest size required to write the 
            specified QR barcode, then it will create an image with the specified size, and finally write the barcode to it.
            <!--BarcodeWriter.CalculateBarcodeDataBounds--></example>
      <java>
        <pre>
public void calculateBarcodeDataBounds(
  LeadRect writeBounds, 
  int xResolution, 
  int yResolution, 
  BarcodeData data, 
  BarcodeWriteOptions options
)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)calculateBarcodeDataBounds:(LeadRect)writeBounds 
                       xResolution:(int)xResolution 
                       yResolution:(int)yResolution 
                              data:(LTBarcodeData*)data 
                           options:(LTBarcodeWriteOptions*)options 
                          outError:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds_WinRT(Leadtools.LeadRect,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.IBarcodeWriteOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
      </summary>
      <param name="writeBounds">The location where the barcode should be written.</param>
      <param name="xResolution">Horizontal resolution value of the destination image that will be used to write the barcode to.</param>
      <param name="yResolution">Vertical resolution value of the destination image that will be used to write the barcode to.</param>
      <param name="data">An <see cref="T:Leadtools.Barcode.BarcodeData" /> object that contains the barcode data to write.</param>
      <param name="options">Options write options to use.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />, 
            also the equivalent to <see cref="T:Leadtools.LeadRect" /> is <see cref="T:Leadtools.Forms.LogicalRectangle" />.</para>
      </remarks>
      <example>
            This example will use <see cref="M:Leadtools.Barcode.BarcodeWriter.CalculateBarcodeDataBounds(Leadtools.Forms.LogicalRectangle,System.Int32,System.Int32,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> to calculate the smallest size required to write the 
            specified QR barcode, then it will create an image with the specified size, and finally write the barcode to it.
            <!--BarcodeWriter.CalculateBarcodeDataBounds--></example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">
      <summary>
            Writes a barcode to an image.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> that specifies the image to write the barcode to. 
            Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="data">The barcode data. Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="options">Write options. Could be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>Writes a barcode to an image. The <paramref name="data" /> object must contain the data for the barcode 
            (or one of its derived classes). The following members are used by this
            method:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see>: Specifies the symbology (or type) of the barcode to write. 
            Must not be set to
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Unknown</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The raw data stored in <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see>: Must contain the raw data for the 
            symbology in a format and size supported by the barcode
            standard.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>: Must contain barcode location (and optionally, its size). Refer to 
            <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see> for more information.</para>
            </description>
          </item>
        </list>
        <para>If <paramref name="options" /> is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), 
            then this method will use the default write options associated with the symbology
            by calling <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">GetDefaultOptions(data.Symbology)</see>. If <paramref name="options" /> is not 
            <strong>null</strong> (<strong>Nothing</strong> in
            Visual Basic), then this method will use these write options instead of the default ones. 
            The default will use options stored in this <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and will not be overridden by
            this method at any time.</para>
        <para>Note that this method will not check if the options passed in <paramref name="options" /> are associated with symbology 
            stored in <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see>. If these two do not match, then the default options are 
            used instead.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <java>
        <pre>
public void writeBarcode(
  RasterImage image, 
  BarcodeData data, 
  BarcodeWriteOptions options
)            </pre>
      </java>
      <objectivec>
        <pre>
- (BOOL)writeBarcode:(LTRasterImage*)image 
                data:(LTBarcodeData*)data 
             options:(LTBarcodeWriteOptions*)options 
            outError:(NSError**)outError;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode_WinRT(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.IBarcodeWriteOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
      </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> that specifies the image to write the barcode to. 
            Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="data">The barcode data. Must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="options">Write options. Could be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeWriter" />.</para>
      </example>
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriter.freeAvailableSymbologies_objectivec(Leadtools.Barcode.BarcodeSymbology[])">
      <summary>Free allocated availableSymbologies array returned by getAvailableSymbologies method</summary>
      <param name="availableSymbologies">The LTBarcodeSymbology array user want to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>- (void)freeAvailableSymbologies:(LTBarcodeSymbology*)availableSymbologies;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeWriter.Engine">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Barcode.BarcodeEngine" /> associated with this class.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeEngine" /> that specifies the barcode engine associated with this class.</value>
      <remarks>
        <para>Use this property to get quick access to the owner <see cref="T:Leadtools.Barcode.BarcodeEngine" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public BarcodeEngine getEngine()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, strong, readonly) LTBarcodeEngine* engine;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.L_ERROR_BARCODE">
      <summary>internal enum</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.BarcodeExceptionCode">
      <summary>
            Identifies the barcode exception error code
            </summary>
      <remarks>
        <para>Used as the type of the <see cref="P:Leadtools.Barcode.BarcodeException.Code">BarcodeException.Code</see> property which 
            can be used to get extra
            details about the LEADTOOLS barcode exception being thrown.</para>
      </remarks>
      <example>
        <!--BarcodeExceptionCode-->
      </example>
      <java>
        <pre>public enum BarcodeExceptionCode</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeError</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidType">
      <summary>
            (-411)<para>Invalid barcode symbology.</para></summary>
      <java>
        <pre>INVALID_TYPE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidTextOut">
      <summary>
            (-412)<para>Invalid barcode text out option.</para></summary>
      <java>
        <pre>INVALID_TEXT_OUT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidTextOut</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidWidth">
      <summary>
            (-413)<para>Invalid barcode width.</para></summary>
      <java>
        <pre>INVALID_WIDTH</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidWidth</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidHeight">
      <summary>
            (-414)<para>Invalid barcode height.</para></summary>
      <java>
        <pre>INVALID_HEIGHT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidHeight</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.ToSmall">
      <summary>
            (-415)<para>Barcode string is too small.</para></summary>
      <java>
        <pre>TO_SMALL</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_ToSmall</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidBarcodeString">
      <summary>
            (-416)<para>Invalid barcode string for a specified barcode symbology.</para></summary>
      <java>
        <pre>INVALID_BARCODE_STRING</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidBarcodeString</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidUnits">
      <summary>
            (-418)<para>Invalid barcode measurement unit.</para></summary>
      <java>
        <pre>INVALID_UNITS</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidUnits</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidMaximumCount">
      <summary>
            (-419)<para>Invalid maximum count.</para></summary>
      <java>
        <pre>INVALID_MAXIMUM_COUNT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidMaximumCount</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidGroup">
      <summary>
            (-420)<para>Invalid barcode group.</para></summary>
      <java>
        <pre>INVALID_GROUP</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidGroup</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidStringLength">
      <summary>
            (-424)<para>Invalid barcode data string length.</para></summary>
      <java>
        <pre>INVALID_STRING_LENGTH</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidStringLength</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidBounds">
      <summary>
            (-425)<para>Invalid barcode bounds.</para></summary>
      <java>
        <pre>INVALID_BOUNDS</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidBounds</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.Barcode1dLocked">
      <summary>
            (-426)<para>Barcode 1D is locked.</para></summary>
      <java>
        <pre>BARCODE1D_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_Barcode1dLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.Barcode2dReadLocked">
      <summary>
            (-427)<para>Barcode Read 2D is locked.</para></summary>
      <java>
        <pre>BARCODE2D_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_Barcode2dReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.Barcode2dWriteLocked">
      <summary>
            (-428)<para>Barcode Write 2D is locked.</para></summary>
      <java>
        <pre>BARCODE2D_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_Barcode2dWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.PdfReadLocked">
      <summary>
            (-429)<para>Barcode Read PDF is locked.</para></summary>
      <java>
        <pre>PDF_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_PdfReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.PdfWriteLocked">
      <summary>
            (-430)<para>Barcode Write PDF is locked.</para></summary>
      <java>
        <pre>PDF_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_PdfWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.DatamatrixReadLocked">
      <summary>
            (-432)<para>Barcode Read Datamatrix is locked.</para></summary>
      <java>
        <pre>DATAMATRIX_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_DatamatrixReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.DatamatrixWriteLocked">
      <summary>
            (-433)<para>Barcode Write Datamatrix is locked.</para></summary>
      <java>
        <pre>DATAMATRIX_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_DatamatrixWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.QrReadLocked">
      <summary>
            (-1380)<para>Barcode Read QR is locked.</para></summary>
      <java>
        <pre>QR_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_QrReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.QrWriteLocked">
      <summary>
            (-1381)<para>Barcode Write QR is locked.</para></summary>
      <java>
        <pre>QR_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_QrWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.DllNotFound">
      <summary>
            (-1382)<para>Barcode Engine assembly not found.</para></summary>
      <java>
        <pre>LIB_NOT_FOUND</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_DllNotFound</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.AztecReadLocked">
      <summary>
            (-1370)<para>Barcode Read Aztec is locked.</para></summary>
      <java>
        <pre>AZTEC_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_AztecReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.AztecWriteLocked">
      <summary>
            (-1371)<para>Barcode Write Aztec is loced</para></summary>
      <java>
        <pre>AZTEC_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_AztecWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.MaxiReadLocked">
      <summary>
            (-1372)<para>Barcode Read Maxi is locked</para></summary>
      <java>
        <pre>MAXI_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_MaxiReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.MaxiWriteLocked">
      <summary>
            (-1373)<para>Barcode Write Maxi is locked</para></summary>
      <java>
        <pre>MAXI_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_MaxiWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.MicroQrReadLocked">
      <summary>
            (-1374)<para>Barcode Read Micro QR is locked</para></summary>
      <java>
        <pre>MICROQR_READ_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_MicroQRReadLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.MicroQrWriteLocked">
      <summary>
            (-1375)<para>Barcode Write Micro QR is locked</para></summary>
      <java>
        <pre>MICROQR_WRITE_LOCKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_MicroQRWriteLocked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeExceptionCode.InvalidXModule">
      <summary>
            (-1481)<para>Barcode Module size should be greater or equal to 0.</para></summary>
      <java>
        <pre>INVALID_XMODULE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeError_InvalidXModule</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeException">
      <summary>
            The exception that is thrown when a barcode error occurs.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeException" /> class defines a <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> 
            property that you can examine to determine what
            caused the error.</para>
        <para>Default messages are implemented for each Code, however you can modify any message using the 
            <see cref="M:Leadtools.Barcode.BarcodeException.GetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode)" />
            and <see cref="M:Leadtools.Barcode.BarcodeException.SetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode,System.String)" /> methods.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public class BarcodeException extends LeadtoolsException</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeErrorHelper : NSObject</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with default parameters.
            </summary>
      <remarks>
        <para>This constructor initializes a new <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the 
            <see cref="P:Leadtools.Barcode.BarcodeException.Message" /> property set to the empty string ("") and
            the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property set to 
            <see cref="T:Leadtools.Barcode.BarcodeExceptionCode">BarcodeExceptionCode.InvalidType</see>.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public BarcodeException()</pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the specified message.
            </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of the message is 
            intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current 
            system culture.</param>
      <remarks>
        <para>This constructor initializes a new <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the <see cref="P:Leadtools.Barcode.BarcodeException.Message" /> property set to <paramref name="message" /> and
            the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property set to <see cref="T:Leadtools.Barcode.BarcodeExceptionCode">BarcodeExceptionCode.InvalidType</see>.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public BarcodeException(String message)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. 
            If the <paramref name="inner" /> parameter is not <strong>null</strong> reference
            (Nothing in Visual Basic), the current exception is raised in a catch block that 
            handles the inner exception.</param>
      <remarks>
        <para>This constructor initializes a new <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the 
            <see cref="P:Leadtools.Barcode.BarcodeException.Message" /> property set to <paramref name="message" /> and
            the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property set to 
            <see cref="T:Leadtools.Barcode.BarcodeExceptionCode">BarcodeExceptionCode.InvalidType</see>.</para>
      </remarks>
      <noexample />
      <java>
        <pre>
public BarcodeException(
  String message, 
  RuntimeException inner
)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor(System.String,Leadtools.Barcode.BarcodeExceptionCode)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with a specified error message and error code.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="code">Error code.</param>
      <remarks>
        <para>This constructor initializes a new <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the 
            <see cref="P:Leadtools.Barcode.BarcodeException.Message" /> property set to <paramref name="message" /> and
            the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property set to <paramref name="code" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>
public BarcodeException(
  String message, 
  BarcodeExceptionCode code
)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor(Leadtools.Barcode.BarcodeExceptionCode)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with a specified error code.
            </summary>
      <param name="code">Error code.</param>
      <remarks>
        <para>This constructor initializes a new <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the 
            <see cref="P:Leadtools.Barcode.BarcodeException.Message" /> property set to an empty string ("") and
            the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property set to <paramref name="code" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public BarcodeException(BarcodeExceptionCode code)</pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.GetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode)">
      <summary>
            Retrieves the error string that is associated with the specified <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" />.
            </summary>
      <param name="code">The exception code for which to retrieve its message string.</param>
      <returns>A <see cref="T:System.String" /> that contains the current message for <paramref name="code" />.</returns>
      <remarks>
        <para>By default, <see cref="T:Leadtools.Barcode.BarcodeException" /> has a string message for each member of the 
            <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration.
            To change the error string that corresponds to a <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration member, 
            use <see cref="M:Leadtools.Barcode.BarcodeException.SetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode,System.String)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public static String getCodeMessage(BarcodeExceptionCode code)</pre>
      </java>
      <objectivec>
        <pre>+ (NSString*)getCodeMessage:(LTBarcodeError)code;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.SetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode,System.String)">
      <summary>
            Changes the error string that is associated with the specified <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" />.
            </summary>
      <param name="code">The exception code for which to change its message string.</param>
      <param name="message">New message string.</param>
      <remarks>
        <para>By default, <see cref="T:Leadtools.Barcode.BarcodeException" /> has a string message for each member of the 
            <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration.
            To get the current (or default) error string associated with a <see cref="T:Leadtools.Barcode.BarcodeExceptionCode" /> enumeration member, 
            use <see cref="M:Leadtools.Barcode.BarcodeException.GetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>
public static void setCodeMessage(
  BarcodeExceptionCode code, 
  String message
)            </pre>
      </java>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeException" /> class with the specified serialization and 
            context information.
            </summary>
      <param name="info">The data for serializing or deserializing the object</param>
      <param name="context">The source and destination for the object</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.FromHResult(System.Int32)">
      <summary>
            Creates a <see cref="T:Leadtools.Barcode.BarcodeException" /> object from the specified HRESULT value, if the value is a valid LEADTOOLS error code.
            </summary>
      <param name="hresult">The <strong>HRESULT</strong> used to create a <see cref="T:Leadtools.Barcode.BarcodeException" />.</param>
      <returns>A new <see cref="T:Leadtools.Barcode.BarcodeException" /> based on the specified LEADTOOLS HRESULT code, or null, if the value is not a valid LEADTOOLS error code.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.CheckErrorCode(System.Int32)">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.Throw(System.Int32)">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.Throw(Leadtools.Barcode.BarcodeException)">
      <exclude />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeException.Throw(Leadtools.Barcode.BarcodeExceptionCode)">
      <exclude />
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeException.Code">
      <summary>
            Gets or sets the code of this exception.
            </summary>
      <value>The exception code. The default value is <see cref="T:Leadtools.Barcode.BarcodeExceptionCode">BarcodeExceptionCode.InvalidType</see>.</value>
      <noremarks />
      <noexample />
      <java>
        <pre>
public BarcodeExceptionCode getCode()
public void setCode(BarcodeExceptionCode value)            </pre>
      </java>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeException.HResult">
      <summary>
            Gets the <strong>HRESULT</strong> associated with this exception.
            </summary>
      <value>
            The <strong>HRESULT</strong> associated with this exception.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeException" /></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>The error message that explains the reason for the exception. The default value is an empty string ("")</value>
      <remarks>
        <para>Overrides <see cref="P:System.Exception.Message" />.</para>
        <para>If this <see cref="T:Leadtools.Barcode.BarcodeException" /> instance was initialized with a specific 
            <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> but not with a specific message,
            then this property value will be the default error string that corresponds to the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property.</para>
        <para>To obtain the error string that corresponds to the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property value, call 
            <see cref="M:Leadtools.Barcode.BarcodeException.GetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode)" />.</para>
        <para>To change the error string that corresponds to the <see cref="P:Leadtools.Barcode.BarcodeException.Code" /> property value, call 
            <see cref="M:Leadtools.Barcode.BarcodeException.SetCodeMessage(Leadtools.Barcode.BarcodeExceptionCode,System.String)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getMessage()</pre>
      </java>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeSymbology">
      <summary>
             The barcode symbologies supported by LEADTOOLS.
             </summary>
      <remarks>
        <para>To get a list of all the barcode symbologies supported by LEADTOOLS, use 
             <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSupportedSymbologies">BarcodeEngine.GetSupportedSymbologies</see>, to
             get a list of the read or write symbologies currently available (support has been unlocked and the backend 
             runtime assembly exists),
             use <see cref="M:Leadtools.Barcode.BarcodeReader.GetAvailableSymbologies">BarcodeReader.GetAvailableSymbologies</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriter.GetAvailableSymbologies">BarcodeWriter.GetAvailableSymbologies</see>.</para>
        <para>For description and visual samples of the barcode symbologies supported by LEADTOOLS, refer to
             <see cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</see>.</para>
        <para>The <see cref="M:Leadtools.Barcode.BarcodeEngine.GetSymbologyFriendlyName(Leadtools.Barcode.BarcodeSymbology)">BarcodeEngine.GetSymbologyFriendlyName</see> 
             method can be used to return a string that contains a friendly name
             for any <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReader" /> and <see cref="T:Leadtools.Barcode.BarcodeWriter" /></para>
      </example>
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 and MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <java>
        <pre>public enum BarcodeSymbology</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeSymbology</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Unknown">
      <summary>
            (0)<para>Unknown symbology type. This has a special meaning in some of the methods that use <see cref="T:Leadtools.Barcode.BarcodeSymbology" />. 
            For example, you can pass <strong>Unknown</strong>
            as the <i>symbology</i> parameter for the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">
            BarcodeReader.ReadBarcode</see> method to indicate that the barcode type
            is unknown. It will also instruct the engine to read the first barcode found in the image 
            using the other parameters.</para></summary>
      <java>
        <pre>UNKNOWN</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Unknown</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.EAN13">
      <summary>
            (1)<para>EAN-13 (International Article Number with 13 digits) symbology. Used internationally with consumer products.</para></summary>
      <java>
        <pre>EAN_13</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_EAN13</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.EAN8">
      <summary>
            (2)<para>EAN-8. Derived from the longer European Article Number (EAN-13) code. It was introduced for use on small packages 
            where an EAN-13 barcode would be too large.</para></summary>
      <java>
        <pre>EAN_8</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_EAN8</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.UPCA">
      <summary>
            (3)<para>UPC-A (Universal Product Code). Used with consumer products in the United States.</para></summary>
      <java>
        <pre>UPC_A</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_UPCA</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.UPCE">
      <summary>
            (4)<para>UPC-E. The short version of UPC-A.</para></summary>
      <java>
        <pre>UPC_E</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_UPCE</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Code3Of9">
      <summary>
            (5)<para>Code 3 of 9 (Code 39) type. Used especially in non-retail environments.</para></summary>
      <java>
        <pre>CODE_3_OF_9</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Code3Of9</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Code128">
      <summary>
            (6)<para>Code 128 type. Very dense code, used extensively worldwide.</para></summary>
      <java>
        <pre>CODE_128</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Code128</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.CodeInterleaved2Of5">
      <summary>
            (7)<para>Interleaved 2 of 5 type. Used in warehouse, industrial applications.</para></summary>
      <java>
        <pre>CODE_INTERLEAVED_2_OF_5</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_CodeInterleaved2Of5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Codabar">
      <summary>
            (8)<para>CODABAR (Ames Code/USD-4/NW-7/2 of 7 Code) type. Used in libraries and blood banks.</para></summary>
      <java>
        <pre>CODA_BAR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Codabar</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.UCCEAN128">
      <summary>
            (9)<para>UCCEAND 128 type</para></summary>
      <java>
        <pre>UCC_EAN_128</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_UCCEAN128</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Code93">
      <summary>
            (10)<para>Code 93 type. Compressed form of Code 39 </para></summary>
      <java>
        <pre>CODE_93</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Code93</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.EANEXT5">
      <summary>
            (11)<para>5-digit supplemental type. May be used with UPCA, UPCE, EAN13 and EAN8 on books to indicate a 
            suggested retail price.</para></summary>
      <java>
        <pre>EANEXT_5</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_EANEXT5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.EANEXT2">
      <summary>
            (12)<para>2-digit supplemental type. May be used with UPCA, UPCE, EAN13 and EAN8 to indicate magazines 
            and newspaper issue numbers.</para></summary>
      <java>
        <pre>EANEXT_2</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_EANEXT2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.MSI">
      <summary>
            (13)<para>MSI (Modified Plessey) type. Used to mark retail shelves for inventory control.</para></summary>
      <java>
        <pre>MSI</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_MSI</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Code11">
      <summary>
            (14)<para>Code 11 (USD-8) type. Used in labeling telecommunications equipment.</para></summary>
      <java>
        <pre>CODE_11</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Code11</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.CodeStandard2Of5">
      <summary>
            (15)<para>Standard 2 of 5 (Industrial 2 of 5) type. Used in the photofinishing, warehouse sorting industries and sequentially 
            numbering airline tickets.</para></summary>
      <java>
        <pre>CODE_STANDARD_2_OF_5</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_CodeStandard2Of5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.GS1Databar">
      <summary>
            (16)<para>GS1 Databar (formerly RSS14) type. Used in grocery industry, healthcare, and where items are too small to allow for 
            older barcode symbologies.</para></summary>
      <java>
        <pre>GS1_DATA_BAR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_GS1Databar</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.GS1DatabarLimited">
      <summary>
            (17)<para>GS1 Databar (formerly RSS14) Limited type. It is a short version of GS1 Databar (formerly RSS14).</para></summary>
      <java>
        <pre>GS1_DATA_BAR_LIMITED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_GS1DatabarLimited</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.GS1DatabarExpanded">
      <summary>
            (18)<para>GS1 Databar (formerly RSS14) Expanded type. It encodes item identification plus supplementary strings such as weight 
            and date. Used in grocery industry and healthcare. </para></summary>
      <java>
        <pre>GS1_DATA_BAR_EXPANDED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_GS1DatabarExpanded</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.PatchCode">
      <summary>
            (19)<para>Patch Code type. Used only for batch separation and scanner control, primarily with Kodak scanners.</para></summary>
      <java>
        <pre>PATCH_CODE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_PatchCode</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.PostNet">
      <summary>
            (20)<para>POSTNET (Postal Numeric Encoding Technique). Used by the United States Postal Service to assist in directing mail.</para></summary>
      <java>
        <pre>POST_NET</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_PostNet</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Planet">
      <summary>
            (21)<para>PLANET (Postal Alpha Numeric Encoding Technique). Used by the United States Postal Service to identify and track 
            pieces of mail during delivery.</para></summary>
      <java>
        <pre>PLANET</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Planet</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.AustralianPost4State">
      <summary>
            (22)<para>Australian Post 4-State type.</para></summary>
      <java>
        <pre>AUSTRALIAN_POST_4STATE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_AustralianPost4State</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.RoyalMail4State">
      <summary>
            (23)<para>Royal Mail (RM4SCC) 4-State type.</para></summary>
      <java>
        <pre>ROYAL_MAIL_4STATE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_RoyalMail4State</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.USPS4State">
      <summary>
            (24)<para>USPS OneCode 4-State Barcode (4BC) type.</para></summary>
      <java>
        <pre>USPS_4STATE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_USPS4State</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.GS1DatabarStacked">
      <summary>
            (25)<para>GS1 Databar (formerly RSS14) Stacked / GS1 Databar Stacked Omni-Directional types. Used as GS1 Databar when the 
            available space is too narrow for the standard GS1 Databar.</para></summary>
      <java>
        <pre>GS1_DATA_BAR_STACKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_GS1DatabarStacked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.GS1DatabarExpandedStacked">
      <summary>
            (26)<para>GS1 Databar (formerly RSS14) Expanded Stacked barcode type. Used as GS1 Databar Expanded when the available space 
            is too narrow to fit in one line.</para></summary>
      <java>
        <pre>GS1_DATA_BAR_EXPANDED_STACKED</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_GS1DatabarExpandedStacked</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.PDF417">
      <summary>
            (27)<para>PDF417 (Portable Data File). 2D symbol used in a variety of applications, primarily transport, identification cards, 
            and inventory management.
            Note, the PDF417 barcode symbology does not have any relation to Adobe PDF (Portable Document Format).</para></summary>
      <java>
        <pre>PDF417</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_PDF417</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.MicroPDF417">
      <summary>
            (28)<para>MicroPDF417 (Portable Data File). Version of PDF417 that can hold up to 150 bytes of data. Note, the MicroPDF417 barcode 
            symbology does not have any
            relation to Adobe PDF (Portable Document Format).</para></summary>
      <java>
        <pre>MICRO_PDF417</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_MicroPDF417</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Datamatrix">
      <summary>
            (29)<para>Datamatrix. 2D symbol code used for marking small items.</para></summary>
      <java>
        <pre>DATAMATRIX</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Datamatrix</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.QR">
      <summary>
            (30)<para>QR (short for Quick Response). 2D symbol used by dedicated QR barcode readers and camera phones.</para></summary>
      <java>
        <pre>QR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_QR</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Aztec">
      <summary>
            (31)<para>Aztec. 2D symbol used for train tickets, airline tickets and government documents. This 
            barcode is able to reduce the required space over other matrix barcode as it does not require a 
            surrounding quiet zone.</para></summary>
      <java>
        <pre>Aztec</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Aztec</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.Maxi">
      <summary>
            (32)<para>MaxiCode. 2D symbol developed and used by the United Parcel Service to identify 
            and track pieces of mail during delivery.</para></summary>
      <java>
        <pre>Maxi</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_Maxi</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSymbology.MicroQR">
      <summary>
            (33)<para>Micro QR. 2D symbol used where symbol size is limited. There are four sizes; the largest is capable 
            of encoding 35 characters. Some sizes support more than one error correction level.</para></summary>
      <java>
        <pre>MicroQR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSymbology_MicroQR</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeOptions">
      <summary>
             Abstract base class for barcode read or write options.
             </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for Windows Runtime, the equivalent to this class is the <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> interface.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeOptions" /> class cannot be used directly. It is the base class for
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract class BarcodeOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeOptions : NSObject&lt;LTBarcodeOptionsDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeOptions" /> class.
            </summary>
      <noremarks />
      <noexample />
      <java>
        <pre>protected BarcodeOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">
      <summary>
            Gets the supported symbologies for this options class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this read or write options class.</returns>
      <remarks>
        <para>To check if a symbology is supported by this read or write options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract BarcodeSymbology[] getSupportedSymbologies();</pre>
      </java>
      <objectivec>
        <pre>
@required - (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
                supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets a value that indicate whether the specified symbology is supported by this read or write options 
            class.
            </summary>
      <param name="symbology">The symbology to check.</param>
      <returns>
        <strong>true</strong> if <paramref name="symbology" /> is supported by this read or write 
            options class. Otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>This method will call <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies" /> and checks if 
            <paramref name="symbology" /> is in the array returned by that method.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public boolean isSupportedSymbology(BarcodeSymbology symbology)</pre>
      </java>
      <objectivec>
        <pre>- (BOOL)isSupportedSymbology:(LTBarcodeSymbology)symbology;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.Clone">
      <summary>
            Creates an exact copy of this barcode read or write options.
            </summary>
      <returns>This <see cref="T:Leadtools.Barcode.BarcodeOptions" /> cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) of this <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this barcode read or write options to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be 
            called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeOptions.freeSupportedSymbologies_objectivec(Leadtools.Barcode.BarcodeSymbology[])">
      <summary>Free allocated supportedSymbologies array returned by getSupportedSymbologies method</summary>
      <param name="supportedSymbologies">The LTBarcodeSymbology array user want to free</param>
      <noremarks />
      <noexample />
      <objectivec>
        <pre>@required - (void)freeSupportedSymbologies:(LTBarcodeSymbology*)supportedSymbologies;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.IBarcodeOptions">
      <summary>
            Interface for barcode read or write options.
            </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for .NET, the equivalent to this interface is the <see cref="T:Leadtools.Barcode.BarcodeOptions" /> class.</para>
        <para>
            The <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is an interface and cannot be created directly, instead create one of the these classes
            that implements it:
            <table><tr><th>Read Options</th><th>Write Options</th></tr><tr><td><see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /></td></tr><tr><td><see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /></td><td><see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /></td></tr></table></para>
      </remarks>
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.IBarcodeOptions.GetSupportedSymbologies">
      <summary>
            Gets the supported symbologies for this options class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this read or write options class.</returns>
      <remarks>
        <para>To check if a symbology is supported by this read or write options class, use 
            <see cref="M:Leadtools.Barcode.IBarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.IBarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
            Gets a value that indicate whether the specified symbology is supported by this read or write options 
            class.
            </summary>
      <param name="symbology">The symbology to check.</param>
      <returns>
        <strong>true</strong> if <paramref name="symbology" /> is supported by this read or write 
            options class. Otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>This method will call <see cref="M:Leadtools.Barcode.IBarcodeOptions.GetSupportedSymbologies" /> and checks if 
            <paramref name="symbology" /> is in the array returned by that method.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.IBarcodeOptions.Clone">
      <summary>
            Creates an exact copy of this barcode read or write options.
            </summary>
      <returns>This <see cref="T:Leadtools.Barcode.BarcodeOptions" /> cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) of this <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.IBarcodeOptions.CopyTo(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
            Copies the members of this barcode read or write options to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be 
            called directly by the user.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.BarcodeSearchDirection">
      <summary>
             Search direction to use when reading barcodes.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. 
             By default, the reader will only search for the
             barcodes horizontally for performance reasons. You can alter this by changing the appropriate read barcode 
             options to specify vertical or both (horizontal
             and vertical) search direction.</para>
        <para>Search directions is supported for all standard 1D linear symbols and PDF417/MicroPDF417 symbols. It is not 
             supported by Datamatrix or QR barcode symbols.</para>
        <para>Search direction is used in the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.SearchDirection">FourStateBarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.SearchDirection">GS1DatabarStackedBarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.SearchDirection">MicroPDF417BarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.SearchDirection">OneDBarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.SearchDirection">PatchCodeBarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.SearchDirection">PDF417BarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.SearchDirection">PostNetPlanetBarcodeReadOptions.SearchDirection</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public enum BarcodeSearchDirection </pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeSearchDirection</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSearchDirection.Horizontal">
      <summary>
            (0)<para>Search for barcodes horizontally. This is the default behavior.</para></summary>
      <java>
        <pre>HORIZONTAL</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSearchDirection_Horizontal</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSearchDirection.Vertical">
      <summary>
            (1)<para>Search for barcodes vertically.</para></summary>
      <java>
        <pre>VERTICAL</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSearchDirection_Vertical</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeSearchDirection.HorizontalAndVertical">
      <summary>
            (2)<para>Search for barcodes horizontally and then vertically.</para></summary>
      <java>
        <pre>HORIZONTAL_AND_VERTICAL</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeSearchDirection_HorizontalAndVertical</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReturnCheckDigit">
      <summary>
            Return check digit mode to use when reading barcodes.
            </summary>
      <remarks>
        <para>Used to indicate whether or not the results returned from reading barcodes will contain a check digit or not. Note that not all barcode types support check digits.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public enum BarcodeReturnCheckDigit</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeReturnCheckDigit</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReturnCheckDigit.Default">
      <summary>
            (0)Default mode, depends on the symbology standard. Currently equal to Yes for UPC and EAN barcodes.
            </summary>
      <java>
        <pre>DEFAULT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReturnCheckDigit_Default</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReturnCheckDigit.Yes">
      <summary>
            (1)Always return the check digit if the symbology supports it.
            </summary>
      <java>
        <pre>YES</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReturnCheckDigit_Yes</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeReturnCheckDigit.No">
      <summary>
            (2)Do not return the digit.
            </summary>
      <java>
        <pre>NO</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeReturnCheckDigit_No</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeReadOptions">
      <summary>
             Base class for all the barcode read options.
             </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for Windows Runtime, the equivalent to this class is the <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> interface.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains multiple methods to read a single or multiple barcodes from 
             an image (
             Refer to the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods). For each 
             barcode found, <see cref="T:Leadtools.Barcode.BarcodeReader" /> will
             return an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> populated with the data found in the barcode.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> class and its derived types is used to control the options used when 
             reading a barcode using LEADTOOLS. You
             can set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of 
             common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing the symbology 
             of interest. You can then change the members of the
             returned <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> (or after casting it to the appropriate derived class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> classes and use it 
             directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accepts 
             a single or array of options as an input
             parameter.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
             and <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)">BarcodeReadOptions.IsSupportedSymbology</see></term>
            <description>
              <para>Can be used to get all the <see cref="T:Leadtools.Barcode.BarcodeSymbology" />'s supported by this 
                  <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> type or to check when a particular symbology is supported.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> is an abstract class and cannot be created directly, instead create one 
             of the these derived classes:</para>
        <list type="table">
          <listheader>
            <term>Read options class</term>
            <description>Descriptions</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />
            </term>
            <description>
              <para>Standard 1D linear barcode options. Used when reading any of the following symbologies: 
             EAN13, EAN8, UPCA, UPCE, Code3Of9, Code128, CodeInterleaved2Of5, Codabar,  UCCEAN128, Code93,
             EANEXT5, EANEXT2, MSI, Code11, CodeStandard2Of5, GS1Databar, GS1DatabarLimited or GS1DatabarExpanded</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />
            </term>
            <description>
              <para>GS1 Databar stacked barcode options. Used when reading GS1DatabarStacked or GS1DatabarExpandedStacked 
             symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />
            </term>
            <description>
              <para>4-State barcode options. Used when reading AustralianPost4State, RoyalMail4State or USPS4State symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />
            </term>
            <description>
              <para>POSTNET/Planet barcode options. Used when reading PostNet or Planet symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />
            </term>
            <description>
              <para>Patch code barcode options. Used when reading PatchCode symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
            </term>
            <description>
              <para>Datamatrix barcode options. Used when reading Datamatrix symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
            </term>
            <description>
              <para>Micro PDF417 barcode options. Used when reading MicroPDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />
            </term>
            <description>
              <para>PDF417 barcode options. Used when reading PDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />
            </term>
            <description>
              <para>QR barcode options. Used when reading QR symbology.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
             This example sets the default barcode search options of all supported symbologies to be 
             "Horizontal and Vertical" and then reads the barcodes from a rotated image.
             <!--BarcodeReadOptions--></example>
      <java>
        <pre>public abstract class BarcodeReadOptions extends BarcodeOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeReadOptions : LTBarcodeOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.
            </summary>
      <remarks>
        <para>This constructor initializes <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" /> to "Black" and <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" /> to "White".</para>
        <para>This class is an abstract class and cannot be created directly. Instead create one of its derived classes 
            as described in
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>protected BarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not 
            be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.String)">
      <summary>
            Loads this <see cref="T:Leadtools.Barcode.BarcodeOptions" /> from the specified XML file.
            </summary>
      <param name="fileName">The XML file containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save a <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to an XML file, use 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.String)">BarcodeReadOptions.Save(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.IO.Stream)">
            BarcodeReadOptions.Save(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.IO.Stream)">BarcodeReadOptions.Load(Stream stream)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.String)">BarcodeReadOptions.Save(string fileName)</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.IO.Stream)">
      <summary>
            Loads this <see cref="T:Leadtools.Barcode.BarcodeOptions" /> from the specified XML stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the XML data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save a <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to an XML stream, use 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.IO.Stream)">BarcodeReadOptions.Save(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.String)">
            BarcodeReadOptions.Save(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.String)">BarcodeReadOptions.Load(string fileName)</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.String)">
      <summary>
            Saves this <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to an XML file.
            </summary>
      <param name="fileName">Name of the XML file to create</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To load the data previously saved into an XML file, use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.String)">
            BarcodeReadOptions.Load(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.IO.Stream)">
            BarcodeReadOptions.Save(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.IO.Stream)">BarcodeReadOptions.Load(Stream stream)</see>.</para>
        <para>To save the default read options used by <see cref="T:Leadtools.Barcode.BarcodeReader" />, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions">BarcodeReader.SaveOptions</see></para>
      </remarks>
      <example>
            This example creates Linear 1D barcode read options class, saves it to the disk and then loads it back.
            <!--BarcodeReadOptions.Save--></example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.IO.Stream)">
      <summary>
            Saves this <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to an XML stream.
            </summary>
      <param name="stream">The XML <see cref="T:System.IO.Stream" /> to save the data to.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. The 
            <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeReader" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To load the data previously saved into an XML stream, 
            use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.IO.Stream)">BarcodeReadOptions.Load(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save(System.String)">
            BarcodeReadOptions.Save(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load(System.String)">BarcodeReadOptions.Load(string fileName)</see>.</para>
        <para>To save the default read options used by <see cref="T:Leadtools.Barcode.BarcodeReader" />, 
            use <see cref="M:Leadtools.Barcode.BarcodeReader.SaveOptions">BarcodeReader.SaveOptions</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode 
            demos use <see cref="P:Leadtools.Barcode.BarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">
      <summary>
            Gets or sets the barcode foreground (bars or symbol) color used when reading barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <remarks>
        <para>If the input image is bitonal (B/W), then this value will not be used. The foreground color 
            is always considered to be black (or the foreground color
            in the image palette) and the background color is always considered to be white 
            (or the background color in the image palette).</para>
        <para>When the input image is not bitonal, LEADTOOLS will perform intensity detect operation on the 
            image to convert it to black and white before searching for
            the barcodes and uses the value of <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" /> as the high and 
            low threshold.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <java>
        <pre>
public RasterColor getForeColor()
public void setForeColor(RasterColor value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* foreColor;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">
      <summary>
            Gets or sets the barcode background (spaces) color used when reading barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <remarks>
        <para>If the input image is bitonal (B/W), then this value will not be used. The foreground color is 
            always considered to be black (or the foreground color
            in the image palette) and the background color is always considered to be white (or the background color 
            in the image palette).</para>
        <para>When the input image is not bitonal, LEADTOOLS will perform an intensity detect operation on the image 
            to convert it to black and white before searching for
            the barcodes and uses the value of <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" /> as the high and low 
            threshold.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <java>
        <pre>
public RasterColor getBackColor()
public void setBackColor(RasterColor value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* backColor;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.IBarcodeReadOptions">
      <summary>
            Interface for all the barcode read options.
            </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for .NET, the equivalent to this interface is the <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> class.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains multiple methods to read a single or multiple barcodes from 
            an image (
            Refer to the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods). For each 
            barcode found, <see cref="T:Leadtools.Barcode.BarcodeReader" /> will
            return an instance of <see cref="T:Leadtools.Barcode.BarcodeData" /> populated with the data found in the barcode.</para>
        <para>The clases that implements <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> interface is used to control the options used when 
            reading a barcode using LEADTOOLS. You
            can set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of 
            common symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing the symbology 
            of interest. You can then change the members of the
            returned <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> (or after casting it to the appropriate derived class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> classes and use it 
            directly in the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accepts 
            a single or array of options as an input
            parameter.</para>
        <para>The <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor">IBarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.BackColor">IBarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                 from a colored image.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Barcode.IBarcodeReadOptions" /> is an interface and cannot be created directly, instead create one 
            of these classes that implements it:</para>
        <list type="table">
          <listheader>
            <term>Read options class</term>
            <description>Descriptions</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />
            </term>
            <description>
              <para>Standard 1D linear barcode options. Used when reading any of the following symbologies: 
            EAN13, EAN8, UPCA, UPCE, Code3Of9, Code128, CodeInterleaved2Of5, Codabar,  UCCEAN128, Code93,
            EANEXT5, EANEXT2, MSI, Code11, CodeStandard2Of5, GS1Databar, GS1DatabarLimited or GS1DatabarExpanded</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />
            </term>
            <description>
              <para>GS1 Databar stacked barcode options. Used when reading GS1DatabarStacked or GS1DatabarExpandedStacked 
            symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />
            </term>
            <description>
              <para>4-State barcode options. Used when reading AustralianPost4State, RoyalMail4State or USPS4State symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />
            </term>
            <description>
              <para>POSTNET/Planet barcode options. Used when reading PostNet or Planet symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />
            </term>
            <description>
              <para>Patch code barcode options. Used when reading PatchCode symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
            </term>
            <description>
              <para>Datamatrix barcode options. Used when reading Datamatrix symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
            </term>
            <description>
              <para>Micro PDF417 barcode options. Used when reading MicroPDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />
            </term>
            <description>
              <para>PDF417 barcode options. Used when reading PDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />
            </term>
            <description>
              <para>QR barcode options. Used when reading QR symbology.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <example>
            This example sets the default barcode search options of all supported symbologies to be 
            "Horizontal and Vertical" and then reads the barcodes from a rotated image.
            <!--IBarcodeReadOptions--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode 
            demos use <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor">
      <summary>
            Gets or sets the barcode foreground (bars or symbol) color used when reading barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <remarks>
        <para>If the input image is bitonal (B/W), then this value will not be used. The foreground color 
            is always considered to be black (or the foreground color
            in the image palette) and the background color is always considered to be white 
            (or the background color in the image palette).</para>
        <para>When the input image is not bitonal, LEADTOOLS will perform intensity detect operation on the 
            image to convert it to black and white before searching for
            the barcodes and uses the value of <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.BackColor" /> as the high and 
            low threshold.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.IBarcodeReadOptions.BackColor" />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeReadOptions.BackColor">
      <summary>
            Gets or sets the barcode background (spaces) color used when reading barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <remarks>
        <para>If the input image is bitonal (B/W), then this value will not be used. The foreground color is 
            always considered to be black (or the foreground color
            in the image palette) and the background color is always considered to be white (or the background color 
            in the image palette).</para>
        <para>When the input image is not bitonal, LEADTOOLS will perform an intensity detect operation on the image 
            to convert it to black and white before searching for
            the barcodes and uses the value of <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.BackColor" /> as the high and low 
            threshold.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor" />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.IBarcodeReadOptions.ForeColor" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeAlignment">
      <summary>
             Horizontal or vertical to use when writing barcodes.
             </summary>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output rectangle 
             (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>) since
             not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a special meaning. 
             For more information,
             refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can set to determine whether the result barcode is left, top, 
             right, bottom or center aligned to the rectangle.
             For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
        <para>Alignment is only supported by 2D symbologies (Datamatrix, MicroPDF417, PDF417 and QR). <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> is used 
             as the type for the following properties:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.HorizontalAlignment">DatamatrixBarcodeWriteOptions.HorizontalAlignment</see>
             and <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.VerticalAlignment">DatamatrixBarcodeWriteOptions.VerticalAlignment</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.HorizontalAlignment">MicroPDF417BarcodeWriteOptions.HorizontalAlignment</see>
             and <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.VerticalAlignment">MicroPDF417BarcodeWriteOptions.VerticalAlignment</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.HorizontalAlignment">PDF417BarcodeWriteOptions.HorizontalAlignment</see>
             and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.VerticalAlignment">PDF417BarcodeWriteOptions.VerticalAlignment</see>.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.HorizontalAlignment">QRBarcodeWriteOptions.HorizontalAlignment</see>
             and <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.VerticalAlignment">QRBarcodeWriteOptions.VerticalAlignment</see>.</para>
            </description>
          </item>
        </list>
        <para>Note that the default values for all these properties is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</para>
      </remarks>
      <example>
             This example uses BarcodeAlignment to write a QR barcode at the 9 locations that can be set by changing the alignment. 
             These locations are top/left, top/center,
             top/right, center/left, center/center, center/right, bottom/left, bottom/center and bottom/right.
             <!--BarcodeAlignment--></example>
      <java>
        <pre>public enum BarcodeAlignment</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeAlignment</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeAlignment.Near">
      <summary>
            (0)<para>Aligns the barcode to the near edge of <see cref="T:Leadtools.Barcode.BarcodeData">BarcodeData.Bounds</see>. This is the left edge
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Left">LogicalRectangle.Left</see>) when this is a horizontal alignment or the top edge
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Top">LogicalRectangle.Top</see>) when this is a vertical alignment.</para><para>The barcode actual width or height is not used.</para></summary>
      <java>
        <pre>NEAR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeAlignment_Near</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeAlignment.Center">
      <summary>
            (1)<para>Aligns the barcode to the center <see cref="T:Leadtools.Barcode.BarcodeData">BarcodeData.Bounds</see>. This is horizontal center
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Left">LogicalRectangle.Left</see> + (<see cref="P:Leadtools.Forms.LogicalRectangle.Width">LogicalRectangle.Width</see>
            - "barcodeWidth") / 2) when this is a horizontal alignment
            or the vertical center
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Top">LogicalRectangle.Top</see> + (<see cref="P:Leadtools.Forms.LogicalRectangle.Height">LogicalRectangle.Height</see>
            - "barcodeHeight") / 2) when this is a vertical alignment.</para></summary>
      <java>
        <pre>CENTER</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeAlignment_Center</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeAlignment.Far">
      <summary>
            (2)<para>Aligns the barcode to the far edge of <see cref="T:Leadtools.Barcode.BarcodeData">BarcodeData.Bounds</see>. This is the left edge
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Right">LogicalRectangle.Right</see> - "barcodeWidth") if this is a horizontal alignment or the top edge
            (<see cref="P:Leadtools.Forms.LogicalRectangle.Bottom">LogicalRectangle.Bottom</see> - "barcodeHeight") if this is a vertical alignment.</para></summary>
      <java>
        <pre>FAR</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeAlignment_Far</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeOutputTextPosition">
      <summary>
            The text position to use when the data string is written along with the barcode.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition" /> is used as the type of the following properties:
            <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.TextPosition">OneDBarcodeWriteOptions.TextPosition</see> and
            <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.TextPosition">FourStateBarcodeWriteOptions.TextPosition</see>.</para>
        <para>These properties control whether the data string is written along with the barcode and if so, its position. 
            Note that not all symbologies support all the position values. Some symbologies allow you to control the text position 
            completely (none, default or top), while some will only let you specify whether the text is written or not but not the location 
            (default or none). Other symbologies will always require the text to be written (default). Refer to the Barcode symbology standard
            you are interested in or try it with the C# or VB Barcode demo.</para>
        <para>Writing the text with the barcode is supported only by 1D linear barcodes. The following 1D linear barcode symbologies do not 
            support setting the barcode text string at the bottom (below the barcode) regardless of the value of 
            <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.TextPosition">OneDBarcodeWriteOptions.TextPosition</see>:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example writes a UPC-A barcode using different text positions.</para>
      </example>
      <java>
        <pre>public enum BarcodeOutputTextPosition</pre>
      </java>
      <objectivec>
        <pre>enum LTBarcodeOutputTextPosition</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeOutputTextPosition.None">
      <summary>
            (0)<para>No text string in the output if supported by the symbology, otherwise, behaves as <strong>Default</strong>.</para></summary>
      <java>
        <pre>NONE</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeOutputTextPosition_None</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeOutputTextPosition.Default">
      <summary>
            (1)<para>Default text position as defined in the symbology standard, usually below the barcode. 
            If no text output is supported by the symbology, behaves as <strong>None</strong>.</para></summary>
      <java>
        <pre>DEFAULT</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeOutputTextPosition_Default</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.BarcodeOutputTextPosition.Top">
      <summary>
            (2)<para>Top of the barcode when supported by the symbology. Otherwise, behaves as <strong>Default</strong>.</para></summary>
      <java>
        <pre>TOP</pre>
      </java>
      <objectivec>
        <pre>LTBarcodeOutputTextPosition_Top</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.BarcodeWriteOptions">
      <summary>
             Base class for all the barcode write options.
             </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for Windows Runtime, the equivalent to this class is the <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> interface.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> 
             method which is used to write a barcode to an image. You must create an instance of <see cref="T:Leadtools.Barcode.BarcodeWriter" />, fill its members 
             with the barcode properties and pass it to this method.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> class and its derived types is used to control the options used when writing a barcode 
             using LEADTOOLS. You can set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
             These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> 
             method passing the symbology of interest. You can then change members of the
             returned <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> (or after casting it to the appropriate derived class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> classes and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a barcode to an image.
                  </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
             and <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriteOptions.IsSupportedSymbology</see></term>
            <description>
              <para>Can be used to get all the <see cref="T:Leadtools.Barcode.BarcodeSymbology" />'s supported by this <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />
                  type or to check when a particular symbology is supported.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> is an abstract class and cannot be created directly, instead create one of the these 
             derived classes:</para>
        <list type="table">
          <listheader>
            <term>Write options class</term>
            <description>Descriptions</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />
            </term>
            <description>
              <para>Standard 1D linear barcode options. Used when writing any of the following symbologies: 
             EAN13, EAN8, UPCA, UPCE, Code3Of9, Code128, CodeInterleaved2Of5, Codabar,  UCCEAN128, Code93,
             EANEXT5, EANEXT2, MSI, Code11, CodeStandard2Of5, GS1Databar, GS1DatabarLimited or GS1DatabarExpanded</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />
            </term>
            <description>
              <para>GS1 DataBar Stacked barcode options. Used when writing GS1DatabarStacked or GS1DatabarExpandedStacked symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />
            </term>
            <description>
              <para>4-State barcode options. Used when writing AustralianPost4State, RoyalMail4State or USPS4State symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />
            </term>
            <description>
              <para>POSTNET/Planet barcode options. Used when writing PostNet or Planet symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />
            </term>
            <description>
              <para>Patch code barcode options. Used when writing PatchCode symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
            </term>
            <description>
              <para>Datamatrix barcode options. Used when writing Datamatrix symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
            </term>
            <description>
              <para>Micro PDF417 barcode options. Used when writing MicroPDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />
            </term>
            <description>
              <para>PDF417 barcode options. Used when writing PDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />
            </term>
            <description>
              <para>QR barcode options. Used when writing QR symbology.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example sets the "Use X Module" option of all supported symbologies to be "true" and then creates TIFF files of 
             all the supported barcodes.
             <!--BarcodeWriteOptions--></example>
      <java>
        <pre>public abstract class BarcodeWriteOptions extends BarcodeOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTBarcodeWriteOptions : LTBarcodeOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.
            </summary>
      <remarks>
        <para>This constructor initializes <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" /> to "Black" and <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" /> to "White".</para>
        <para>This class is abstract class and cannot be created directly, instead create one of its derived classes as described in
            <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>protected BarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.String)">
      <summary>
            Loads this <see cref="T:Leadtools.Barcode.BarcodeOptions" /> from the specified XML file.
            </summary>
      <param name="fileName">The XML file containing the data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save a <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.String)">
            BarcodeWriteOptions.Save(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.IO.Stream)">
            BarcodeWriteOptions.Save(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.IO.Stream)">BarcodeWriteOptions.Load(Stream stream)</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.String)">BarcodeWriteOptions.Save(string fileName)</see>.</para>
      </example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.IO.Stream)">
      <summary>
            Loads this <see cref="T:Leadtools.Barcode.BarcodeOptions" /> from the specified XML stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the XML data.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To save a <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to an XML stream, use 
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.IO.Stream)">BarcodeWriteOptions.Save(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.String)">
            BarcodeWriteOptions.Save(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.String)">BarcodeWriteOptions.Load(string fileName)</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.String)">
      <summary>
            Saves this <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to an XML file.
            </summary>
      <param name="fileName">Name of the XML file to create</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. 
            The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To load the data previously saved into an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.String)">
            BarcodeWriteOptions.Load(string fileName)</see>.</para>
        <para>To save and load data to an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.IO.Stream)">
            BarcodeWriteOptions.Save(Stream stream)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.IO.Stream)">BarcodeWriteOptions.Load(Stream stream)</see>.</para>
        <para>To save the default write options used by <see cref="T:Leadtools.Barcode.BarcodeWriter" />, use 
            <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions">BarcodeWriter.SaveOptions</see></para>
      </remarks>
      <example>
            This example creates Linear 1D barcode write options class, saves it to disk and then loads it back.
            <!--BarcodeWriteOptions.Save--></example>
    </member>
    <member name="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.IO.Stream)">
      <summary>
            Saves this <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to an XML stream.
            </summary>
      <param name="stream">The XML <see cref="T:System.IO.Stream" /> to save the data to.</param>
      <remarks>
        <para>The load/save methods are provided as helper methods for the user. The <see cref="T:Leadtools.Barcode.BarcodeEngine" />, 
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> and
            <see cref="T:Leadtools.Barcode.BarcodeWriter" /> do not use these methods internally.</para>
        <para>To load the data previously saved into an XML stream, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.IO.Stream)">
            BarcodeWriteOptions.Load(Stream stream)</see>.</para>
        <para>To save and load data to an XML file, use <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save(System.String)">
            BarcodeWriteOptions.Save(string fileName)</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load(System.String)">BarcodeWriteOptions.Load(string fileName)</see>.</para>
        <para>To save the default write options used by <see cref="T:Leadtools.Barcode.BarcodeWriter" />, 
            use <see cref="M:Leadtools.Barcode.BarcodeWriter.SaveOptions">BarcodeWriter.SaveOptions</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.BarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>public abstract String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">
      <summary>
            Gets or sets the barcode foreground (bars or symbol) color used when writing barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color when writing barcodes. 
            Default value is "Black" (RGB of #000000).</value>
      <remarks>
        <para>LEADTOOLS will use <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" /> when drawing the new barcode to the image 
            and no special processing is performed. Note that you can specify a transparent color for <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" /> 
            to "overlay" the barcode on top of the background of the image. This however, is not recommended.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />
      <example>
            This example writes a UPC-A barcode to an image with specific colors.
            <!--BarcodeWriteOptions.ForeColor--></example>
      <java>
        <pre>
public RasterColor getForeColor()
public void setForeColor(RasterColor value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* foreColor;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">
      <summary>
            Gets or sets the barcode background (spaces) color used when writing barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when writing barcodes. 
            Default value is "White" (RGB of #FFFFFF).</value>
      <remarks>
        <para>LEADTOOLS will use <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" /> when drawing the new barcode to the image 
            and no special processing is performed. Note that you can specify a transparent color for <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" /> 
            to "overlay" the barcode on top of the background of the image. This
            however is not recommended.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <java>
        <pre>
public RasterColor getBackColor()
public void setBackColor(RasterColor value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy) LTRasterColor* backColor;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.IBarcodeWriteOptions">
      <summary>
            Interface for all the barcode write options.
            </summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for .NET, the equivalent to this interface is the <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> class.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> 
            method which is used to write a barcode to an image. You must create an instance of <see cref="T:Leadtools.Barcode.BarcodeWriter" />, fill its members 
            with the barcode properties and pass it to this method.</para>
        <para>The <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> interface and the classes that implements it are used to control the options used when writing a barcode 
            using LEADTOOLS. You can set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
            These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> 
            method passing the symbology of interest. You can then change members of the
            returned <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> (or after casting it to the appropriate implementing class).</para>
        <para>You can also create an instance of one of the derived <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> classes and use it directly in the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a barcode to an image.
                 </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode to an image.</para>
            </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.Barcode.IBarcodeWriteOptions" /> is an interface and cannot be created directly, instead create one 
            of these classes that implements it:</para>
        <list type="table">
          <listheader>
            <term>Write options class</term>
            <description>Descriptions</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />
            </term>
            <description>
              <para>Standard 1D linear barcode options. Used when writing any of the following symbologies: 
            EAN13, EAN8, UPCA, UPCE, Code3Of9, Code128, CodeInterleaved2Of5, Codabar,  UCCEAN128, Code93,
            EANEXT5, EANEXT2, MSI, Code11, CodeStandard2Of5, GS1Databar, GS1DatabarLimited or GS1DatabarExpanded</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />
            </term>
            <description>
              <para>GS1 DataBar Stacked barcode options. Used when writing GS1DatabarStacked or GS1DatabarExpandedStacked symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />
            </term>
            <description>
              <para>4-State barcode options. Used when writing AustralianPost4State, RoyalMail4State or USPS4State symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />
            </term>
            <description>
              <para>POSTNET/Planet barcode options. Used when writing PostNet or Planet symbologies</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />
            </term>
            <description>
              <para>Patch code barcode options. Used when writing PatchCode symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
            </term>
            <description>
              <para>Datamatrix barcode options. Used when writing Datamatrix symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
            </term>
            <description>
              <para>Micro PDF417 barcode options. Used when writing MicroPDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />
            </term>
            <description>
              <para>PDF417 barcode options. Used when writing PDF417 symbology.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />
            </term>
            <description>
              <para>QR barcode options. Used when writing QR symbology.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
            This example sets the "Use X Module" option of all supported symbologies to be "true" and then creates TIFF files of 
            all the supported barcodes.
            <!--IBarcodeWriteOptions--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeWriteOptions.ForeColor">
      <summary>
            Gets or sets the barcode foreground (bars or symbol) color used when writing barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color when writing barcodes. 
            Default value is "Black" (RGB of #000000).</value>
      <remarks>
        <para>LEADTOOLS will use <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor" /> when drawing the new barcode to the image 
            and no special processing is performed. Note that you can specify a transparent color for <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor" /> 
            to "overlay" the barcode on top of the background of the image. This however, is not recommended.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor" />
      <example>
            This example writes a UPC-A barcode to an image with specific colors.
            <!--BarcodeWriteOptions.ForeColor--></example>
    </member>
    <member name="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor">
      <summary>
            Gets or sets the barcode background (spaces) color used when writing barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when writing barcodes. 
            Default value is "White" (RGB of #FFFFFF).</value>
      <remarks>
        <para>LEADTOOLS will use <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor" /> when drawing the new barcode to the image 
            and no special processing is performed. Note that you can specify a transparent color for <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.BackColor" /> 
            to "overlay" the barcode on top of the background of the image. This
            however is not recommended.</para>
      </remarks>
      <seealso cref="P:Leadtools.Barcode.IBarcodeWriteOptions.ForeColor" />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.IBarcodeWriteOptions.ForeColor" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.Barcode1d">
      <summary>
        <strong>Obsolete: </strong>
            This class contains linear (1D) barcode information for reading or writing 1D barcodes.
            </summary>
      <remarks>
        <para>The linear (1D) barcodes are not supported in UNICODE text.</para>
        <para>
                    A barcode is composed of a start mark, data, and the end mark. Reading barcodes
                    from left to right (setting the Direction property to
                    <see cref="T:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags">BarcodeDirectionFlags</see>.LeftToRight
                    value) or from right to left (setting the Direction property to
                    BarcodeDirectionFlags.RightToLeft value) will produce the same result in most
                    cases, because the barcode reader engine recognizes the start and end marks,
                    and handles the data accordingly. For example, if
                    BarcodeDirectionFlags.LeftToRight is used and the user reads barcodes from left
                    to right (the barcode is not rotated), the engine will recognize the start mark
                    first, then the data, and finally the end mark. But if the user reads barcodes
                    from right to left (the barcode is rotated 180 degrees), the engine will first
                    recognize the end mark, then read the (reverse-order) data, and then recognize
                    the start mark. In this case, the engine will flip the data to normal
                    (start/data/end) order.
                </para>
        <para>Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1
                Databar.</para>
        <para>The Linear barcodes are not supported in UNICODE text.</para>
        <para>For further information useful to write 1D barcode data, see 
            	<a href="https://www.leadtools.com/sdk/barcode/1d-chart.htm">https://www.leadtools.com/sdk/barcode/1d-chart.htm</a>.</para>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.Barcode1d.#ctor">
      <summary>
            Initializes a new instance of the Barcode1d class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.OutShowText">
      <summary>
            Indicates whether the barcode string will be shown or not.
            </summary>
      <remarks>
            This property is valid for the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">BarcodeEngine.Write method</see>.
            </remarks>
      <value>
            true if the string will be shown; false, if the string will not be shown.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.Direction">
      <summary>
            Gets or sets flag that indicates the orientation and direction for reading barcodes.
            
            </summary>
      <remarks>
            This property is valid only for the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read method</see>.
            </remarks>
      <value>
            Value that indicates the orientation and direction for reading barcodes.
            Values can be combined when appropriate, by using a bitwise OR (|).
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.ErrorCheck">
      <summary>
            Enables or disables the use of an error check digit when reading or writing a barcode.
            
            </summary>
      <value>
            Use an error check digit when reading or writing a barcode.
            true, use an error check digit; false, do not use an error check digit.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.Granularity">
      <summary>
            Gets or sets the number of scanned lines per column to skip when reading a barcode.
            
            </summary>
      <remarks>
            This property is valid only for the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read method</see>.
            Scanning every line will slow the search process while skipping too many lines may skip over the barcode.
            </remarks>
      <value>
            Number of scanned lines per column to skip when reading a barcode.
            The default value is 9, this means that each tenth line will be scanned while looking for a barcode.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.MinimumLength">
      <summary>
            Gets or set the minimum length of a barcode string when searching for a non-fixed length barcode.
            
            </summary>
      <remarks>
            This property is valid only for the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read method</see>.
            </remarks>
      <value>
            The minimum length of a barcode string when searching for a non-fixed length barcode.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.MaximumLength">
      <summary>
            Gets or sets the maximum length of a barcode string.
            </summary>
      <value>
            The maximum length of a barcode string. This must be no greater than 64.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.WhiteLines">
      <summary>
            Gets or sets the number of lines of white space above and below the barcode symbol.
            
            </summary>
      <value>
            The number of lines of white space above and below the barcode symbol.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.StandardFlags">
      <summary>
            Gets or sets flags that indicate the MSI barcode type, Code11 barcode type, and reading speed.
            
            </summary>
      <value>
            Flags that indicate the MSI barcode type, Code11 barcode type, and reading speed.
            Use a bitwise OR (|) to specify one flag from each group.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.AdvancedFlags">
      <summary>
            Gets or sets flags that indicate the linkage bit value for all GS1 Databar (formerly RSS14) types, 
            GS1 Databar (formerly RSS14)  truncated type, direction of GS1 Databar (formerly RSS14) stacked, 
            number of GS1 Databar (formerly RSS14) expanded stacked rows for write, and Australian post CIF table for read and write.
            
            </summary>
      <value>
            Flags that indicate the linkage bit value for all GS1 Databar (formerly RSS14) types, 
            GS1 Databar (formerly RSS14) truncated type, direction of GS1 Databar (formerly RSS14) stacked, 
            number of GS1 Databar (formerly RSS14) expanded stacked rows for write, and Australian post CIF table for read and write.
            Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1 Databar. 
            You can use a bitwise OR (|) to specify one flag from each group. 
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.Barcode1d.XModule">
      <summary>
            Gets or sets the size of the smallest bar element when writing Linear (1D) barcodes.
            
            </summary>
      <value>
            Size of the smallest element in width, in thousandths of an inch (0.001). 
            If the value is too small, a minimum of 2 pixels will be used. This value is used only if 
            <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">BarcodeWriteFlags.UseXModule1d</see> flag is set.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeColor">
      <summary>
        <strong>Obsolete: </strong>
            This class contains information about colors to be used when reading or writing barcodes.
            </summary>
      <remarks>
            The <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read</see> and <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">BarcodeEngine.Write</see> methods will ignore the values of <see cref="P:Leadtools.Barcode.Deprecated.BarcodeColor.BarColor">BarcodeColor.BarColor</see> and <see cref="P:Leadtools.Barcode.Deprecated.BarcodeColor.SpaceColor">BarcodeColor.SpaceColor</see> properties when the image is 1BPP.
            For 16 or 32 BPP images, this is the actual value of the pixel as found in the image.
            </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeColor.#ctor">
      <summary>
            Initializes a new instance of the BarcodeColor class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeColor.BarColor">
      <summary>
            Specifies the bar color for barcode.
            </summary>
      <remarks>
            This is used as the color of the bars for writing.
            For reading, this is used as the color of the bars when searching for the barcode in the image.
            </remarks>
      <value>
            Bar color for barcode.
            The default value is the black color - RGB(0, 0, 0).
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeColor.SpaceColor">
      <summary>
            Specifies the space color for barcode.
            </summary>
      <remarks>
            This is used as the color of the spaces for writing.
            For reading, this is used as the color of the spaces when searching for the barcode in the image.
            </remarks>
      <value>
            Space color for barcode.
            The default value is the white color  - RGB(255,255,255).
            </value>
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeData">
      <summary>
        <strong>Obsolete: </strong>
            This class contains barcode data information to be read or written.
            </summary>
      <remarks>
        <br />The Australian post barcode string has a special format to distinguish different 
            fields (i.e. FCC, DPID, and CIF). The string format puts dashes between fields as 
            follows:  “FCC-DIPD-CIF”, where FCC is a 2-digit field (valid values are 11, 87, 45, 92, 59, 62, and 44), 
            DPID is an 8-digit field representing the address, and CIF (optional) represents 
            the customer information field. For more information, please refer to the standard. 
            This string format applies for both read/write functions.
            <br />GS1 Databar (formerly RSS14) Expanded and GS1 Databar (formerly RSS14) Expanded Stacked strings need to be written conforming 
            to a string format that indicates a particular encodation method, such as Method “1”, 
            Method “0100”, Method “0101”, ..etc. For example, a string “(01)00012345678905(10)ABC123” 
            is encoded using Method “1”  (i.e. General Identification Data). Note that 14th digit of 
            the item identification number (in this case, "5"), if it exists, is considered as a 
            check digit and is ignored. A string that is written without following any of these 
            special encoding formats will be encoded by Method “00” (i.e. General Purpose Data).
            <br />When read, an extra digit in curly brackets (i.e. “{“ and “}”) is added to 
            indicate the linkage bit at the beginning of the string. The curly brackets are 
            not part of the encoded barcode data, and they are not defined in the standard. 
            Rather, they distinguish the linkage digit from other data. For example, if a 
            barcode is written with string “(01)00012345678905(10)ABC123” while the linkage 
            bit is set to zero, the read function result will be “{0}(01)00012345678905(10)ABC123”, 
            where {0} is the linkage digit and the remaining characters are the barcode data.
            Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1 Databar.
            <para></para><para>For a table containing information useful when writing 1D barcode data see 
            <a href="https://www.leadtools.com/sdk/barcode/1d-chart.htm">https://www.leadtools.com/sdk/barcode/1d-chart.htm</a>.</para></remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)" />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)" />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeData.#ctor">
      <summary>
            Initializes a new instance of the BarcodeData class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)">
      <summary>
             Returns the index of the first barcode in the array that is a duplicate of the barcode at the specified index.
             </summary>
      <param name="index">The zero-based index of a barcode for which the search will be made.</param>
      <returns>
             &gt;=0, the index of the first barcode in the array that is a duplicate of the barcode at the specified index; 
             otherwise, this method will throw an exception.
             </returns>
      <remarks>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
             <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
             the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
             index of the first barcode in the array after the specified barcode, which is a duplicate of the 
             specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
             the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
             get the next instance of a 
             duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
             in the array that is a duplicate of the barcode at the specified index.
             Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
             in the array that is a duplicate of the barcode at the specified index.</p>
        <p>As an example, assume a call to the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read method</see> 
             is made to read ten barcodes in an array of <see cref="T:Leadtools.Barcode.Deprecated.BarcodeData">BarcodeData</see>.
             Suppose the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated">BarcodeData.IsDuplicated property</see> is called 
             for the item at index 3 in the array, and TRUE is returned.
             This indicates one or more barcodes in the array are duplicates of the specified item.
             Calling the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)">BarcodeData.GetFirstDuplicated method</see>
             returns the index of the first barcode in the array that is a diplicate of the barcode at index 3 in the array. 
             Suppose this value is 0. The barcode present at index zero in the array is the first 
             duplicate of the barcode at index 3.
             Calling this method
             with the index set to 3 will return the index of the next barcode in the array that is a duplicate of the barcodes 
             at index 0 and 3. Suppose this value is 9. This means the barcodes at index 0, index 3, and index 9 
             of the array are all duplicates.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
             the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
             duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code> 
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
               Dim i As Integer
               Dim j As Integer
               Dim count As Integer
               Dim visited() As Boolean
               ReDim visited(barcodeData.Count)
               count = 0
               For i = 0 To barcodeData.Count - 1
                   If visited(i) Then 
                       Continue For
                   End If 
                   visited(i) = True
                   count += 1
                   j = i
                   While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255 
                      j = barcodeData(j).IndexDuplicate 
                      visited(j) = True
                   End While 
               Next
               Return count
            End Function</code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            { 
               int i, j, count;
               bool [] visited = new bool [barcodeData.Count];
               count = 0;
                      
               for (i = 0; i &lt; barcodeData.Count; i++)
               { 
                   if (visited[i])
                       continue;
                       visited[i] = true;
                       count++;
                       j = i;
                       while (barcodeData[j].IndexDuplicate != -1 &amp;&amp; barcodeData[j].IndexDuplicate != 255) 
                       {
                           j = barcodeData[j].IndexDuplicate; 
                           visited[j] = true;
                       }
               } 
               return count;
            }
                   </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
             barcodes.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)">
      <summary>
            Returns the index of the next barcode in the array that is a duplicate of the barcode at the specified index.
            </summary>
      <param name="index">A zero-based index of the current duplicated barcode. 
            The value returned by this method will be greater than this value.</param>
      <returns>
            &gt;=0, the index of the next barcode in the array that is a duplicate of the barcode at the specified index; 
            otherwise, this method will throw an exception. An alternative way to avoid the exception, check the value of <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> if 
            it equals 0xFF, that means this the last duplicated one.
            </returns>
      <remarks>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
            the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
            index of the first barcode in the array after the specified barcode, which is a duplicate of the 
            specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
            the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
            get the next instance of a 
            duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
            in the array that is a duplicate of the barcode at the specified index.
            Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
            in the array that is a duplicate of the barcode at the specified index.</p>
        <p>As an example, assume a call to the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read method</see> 
            is made to read ten barcodes in an array of <see cref="T:Leadtools.Barcode.Deprecated.BarcodeData">BarcodeData</see>.
            Suppose the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated">BarcodeData.IsDuplicated property</see> is called 
            for the item at index 3 in the array, and TRUE is returned.
            This indicates one or more barcodes in the array are duplicates of the specified item.
            Calling the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)">BarcodeData.GetFirstDuplicated method</see>
            returns the index of the first barcode in the array that is a diplicate of the barcode at index 3 in the array. 
            Suppose this value is 0. The barcode present at index zero in the array is the first 
            duplicate of the barcode at index 3.
            Calling this method
            with the index set to 3 will return the index of the next barcode in the array that is a duplicate of the barcodes 
            at index 0 and 3. Suppose this value is 9. This means the barcodes at index 0, index 3, and index 9 
            of the array are all duplicates.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
            the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
            duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code> 
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
               Dim i As Integer
               Dim j As Integer
               Dim count As Integer
               Dim visited() As Boolean
               ReDim visited(barcodeData.Count)
               count = 0
               For i = 0 To barcodeData.Count - 1
                  If visited(i) Then
                      Continue For
                  End If
                  visited(i) = True
                  count += 1
                  j = i
                  While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255
                      j = barcodeData(j).IndexDuplicate
                      visited(j) = True
                  End While
                  Next
               Return count
            End Function
            </code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            {
              int i, j, count;
              bool [] visited = new bool [barcodeData.Count];
              count = 0;
              
              for (i = 0; i &lt; barcodeData.Count; i++)
              {
                  if (visited[i])
                  continue;
                  visited[i] = true;
                  count++;
                  j = i;
                  while (barcodeData[j].IndexDuplicate != -1 &amp;&amp;
                      barcodeData[j].IndexDuplicate != 255)
                  {
                      j = barcodeData[j].IndexDuplicate;
                      visited[j] = true;
                  }
              }
              return count;
            }
            </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
            barcodes.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeData.ConvertToStringArray(System.Byte[])">
      <summary>
            Converts an array of bytes to an array of strings.
            </summary>
      <param name="data">Array of bytes to be converted.</param>
      <returns>Character string that contains the converted array of bytes.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeData.ConvertFromStringArray(System.String[])">
      <summary>
            Converts an array of strings to an array of bytes.
            </summary>
      <param name="data">Array of strings to be converted</param>
      <returns>Array of bytes contains the converted array of strings.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Group">
      <summary>
            Specifies whether the barcode symbol is a member of a group of symbols.
            </summary>
      <remarks>
            This property is used for reading PDF417 symbols.
            </remarks>
      <value>
            Specifies whether the barcode symbol is a member of a group of symbols.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.SearchType">
      <summary>
            Gets or sets the barcode type to be read or written.
            </summary>
      <value>
            Barcode type to be read or written.
            </value>
      <remarks>
            The <see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags</see>BarcodeSearchTypeFlags.Barcode1dUccean128 type
            is used only when reading and writing UCCEAN 128 barcodes.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Unit">
      <summary>
            Gets or sets the unit of measurement for the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.Location">Location</see>.
            property.
            </summary>
      <value>
            Unit of measurement for the Location property.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Location">
      <summary>
            Specifies the barcode location on the image.
            </summary>
      <value>The barcode location on the image.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Data">
      <summary>
            Specifies the barcode data.
            </summary>
      <value>Barcode data.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate">
      <summary>
             Gets a zero-based index of the next duplicated barcode.
            </summary>
      <remarks>
        <p>The <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read method</see> updates the value of this property.</p>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
            the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
            index of the first barcode in the array after the specified barcode, which is a duplicate of the 
            specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
            the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
            get the next instance of a 
            duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
            in the array that is a duplicate of the barcode at the specified index.
            Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
            in the array that is a duplicate of the barcode at the specified index.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
            the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
            duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code>
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
                Dim i As Integer
                Dim j As Integer
                Dim count As Integer
                Dim visited() As Boolean
                ReDim visited(barcodeData.Count)
                count = 0
                For i = 0 To barcodeData.Count - 1
                  If visited(i) Then
                      Continue For
                  End If
                  visited(i) = True
                  count += 1
                  j = i
                  While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255
                      j = barcodeData(j).IndexDuplicate
                      visited(j) = True
                  End While
                  Next
               Return count
            End Function
            </code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            {
              int i, j, count;
              bool [] visited = new bool [barcodeData.Count];
              count = 0;
              for (i = 0; i &lt; barcodeData.Count; i++)
              {
                  if (visited[i])
                  continue;
                  visited[i] = true;
                  count++;
                  j = i;
                  while (barcodeData[j].IndexDuplicate != -1 &amp;&amp;
                  barcodeData[j].IndexDuplicate != 255)
                  {
                      j = barcodeData[j].IndexDuplicate;
                      visited[j] = true;
                  }
              }
              return count;
            }
            </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
            barcodes.</p>
      </remarks>
      <value>
            Possible values are:
            <p>&gt;=0,  Next duplicated index.</p><p>-1,   The barcode is not duplicated.</p><p>0xFF, The barcode is the last duplicated one.</p></value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.TotalCount">
      <summary>
             Gets the total number of recognized barcodes by calling the 
            <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read method.</see></summary>
      <value>
            Number of barcodes.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicateCount">
      <summary>
             Gets the total number of barcodes duplicated for the current barcode.
            </summary>
      <remarks>
        <p>The <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read method</see> updates the value of this property.</p>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
            the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
            index of the first barcode in the array after the specified barcode, which is a duplicate of the 
            specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
            the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
            get the next instance of a 
            duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
            in the array that is a duplicate of the barcode at the specified index.
            Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
            in the array that is a duplicate of the barcode at the specified index.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
            the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
            duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code> 
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
              Dim i As Integer
              Dim j As Integer
              Dim count As Integer
              Dim visited() As Boolean
              ReDim visited(barcodeData.Count)
              count = 0
              For i = 0 To barcodeData.Count - 1
                  If visited(i) Then
                      Continue For
                  End If
                  visited(i) = True
                  count += 1
                  j = i
                  While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255
                      j = barcodeData(j).IndexDuplicate
                      visited(j) = True
                  End While
                  Next
              Return count
            End Function
            </code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            {
              int i, j, count;
              bool [] visited = new bool [barcodeData.Count];
              count = 0;
              for (i = 0; i &lt; barcodeData.Count; i++)
              {
                  if (visited[i])
                      continue;
                  visited[i] = true;
                  count++;
                  j = i;
                  while (barcodeData[j].IndexDuplicate != -1 &amp;&amp;
                          barcodeData[j].IndexDuplicate != 255)
                  {
                      j = barcodeData[j].IndexDuplicate;
                      visited[j] = true;
                  }
              }
              return count;
            }
            </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
            barcodes.</p>
      </remarks>
      <value>
            Number of duplicated barcodes.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated">
      <summary>
            (Read-only) Gets a value that indicates whether the specified barcode is duplicated.
            </summary>
      <remarks>
        <p>This property determines whether a barcode is duplicated in another location in the image.</p>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
            the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
            index of the first barcode in the array after the specified barcode, which is a duplicate of the 
            specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
            the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
            get the next instance of a 
            duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
            in the array that is a duplicate of the barcode at the specified index.
            Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
            in the array that is a duplicate of the barcode at the specified index.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
            the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
            duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code> 
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
              Dim i As Integer
              Dim j As Integer
              Dim count As Integer
              Dim visited() As Boolean
              ReDim visited(barcodeData.Count)
              count = 0
              For i = 0 To barcodeData.Count - 1
                  If visited(i) Then
                      Continue For
                  End If
                  visited(i) = True
                  count += 1
                  j = i
                  While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255
                      j = barcodeData(j).IndexDuplicate
                      visited(j) = True
                  End While
                  Next
              Return count
            End Function
            </code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            {
              int i, j, count;
              bool [] visited = new bool [barcodeData.Count];
              count = 0;
              for (i = 0; i &lt; barcodeData.Count; i++)
              {
                  if (visited[i])
                      continue;
                      visited[i] = true;
                      count++;
                      j = i;
                      while (barcodeData[j].IndexDuplicate != -1 &amp;&amp;
                              barcodeData[j].IndexDuplicate != 255)
                      {
                          j = barcodeData[j].IndexDuplicate;
                          visited[j] = true;
                      }
              }
              return count;
            }
            </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
            barcodes.</p>
      </remarks>
      <value>
            true, the barcode is duplicated; false, the barcode is not duplicated.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex">
      <summary>
             Returns the index of the first barcode that is a duplicate of the specified barcode.
            </summary>
      <remarks>
        <p>LEADTOOLS provides a number of functions to let you work with duplicated barcodes. They let you:</p>
        <ul>
          <li>Find the number of duplicates of a specific barcode</li>
          <li>Determine whether a specific barcode is duplicated</li>
          <li>Get the index of the first duplicated barcode</li>
          <li>Get the index of a subsequent barcode</li>
        </ul>
        <p>To determine whether a barcode is duplicated, use the 
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated" /> property. If a barcode is duplicated, 
            the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex" /> property will return the 
            index of the first barcode in the array after the specified barcode, which is a duplicate of the 
            specified barcode. The DuplicateCount property will get the total number of barcodes duplicated for 
            the current barcode.</p>
        <p>If you know the index of a barcode within an array, use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IndexDuplicate" /> property to 
            get the next instance of a 
            duplicated barcode. Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)" /> method to find the index of the first barcode 
            in the array that is a duplicate of the barcode at the specified index.
            Call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)" /> method to find the index of the next barcode 
            in the array that is a duplicate of the barcode at the specified index.</p>
        <p>To find out how many sets of barcodes are duplicated (for example, in an array of ten barcodes, 
            the first, third, and fifth might be duplicates of each other, while the 4th, 8th and 9th are 
            duplicates of a different barcode), use the following code:</p>
        <p>
          <strong>VB</strong>
        </p>
        <p>
          <code> 
            Private Function GetSetsCount(ByRef barcodeData As RasterCollection(Of BarcodeData)) As Integer
              Dim i As Integer
              Dim j As Integer
              Dim count As Integer
              Dim visited() As Boolean
              ReDim visited(barcodeData.Count)
              count = 0
              For i = 0 To barcodeData.Count - 1
                  If visited(i) Then
                      Continue For
                  End If
                  visited(i) = True
                  count += 1
                  j = i
                  While barcodeData(j).IndexDuplicate &lt;&gt; -1 And barcodeData(j).IndexDuplicate &lt;&gt; 255
                      j = barcodeData(j).IndexDuplicate
                      visited(j) = True
                  End While
                  Next
              Return count
            End Function
            </code>
        </p>
        <p>
          <strong>C#</strong>
        </p>
        <p>
          <code>
            public int GetSetsCount(RasterCollection&lt;BarcodeData&gt; barcodeData)
            {
              int i, j, count;
              bool [] visited = new bool [barcodeData.Count];
              count = 0;
              for (i = 0; i &lt; barcodeData.Count; i++)
              {
                  if (visited[i])
                      continue;
                      visited[i] = true;
                      count++;
                      j = i;
                      while (barcodeData[j].IndexDuplicate != -1 &amp;&amp;
                              barcodeData[j].IndexDuplicate != 255)
                       {
                          j = barcodeData[j].IndexDuplicate;
                          visited[j] = true;
                       }
              }
              return count;
            }
            </code>
        </p>
        <p>After this code is executed, <c>count</c> will contain the number of different sets of 
            barcodes.</p>
      </remarks>
      <value>
            A zero-based index of the first barcode that is a duplicate of the specified barcode.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Flags">
      <summary>
             Returns flags used by the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read</see> method.
            </summary>
      <remarks>
            This property is set by the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read</see> method.
            it returns the properties of the barcode.
            </remarks>
      <value>
             Flags that identify barcode properties for the Linear, PDF417, MicroPDF417, DataMatrix and QR barcodes.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.DataCode">
      <summary>
             Returns the MicroPDF417 barcode function code word for Code 128 emulation.
            </summary>
      <remarks>
            This value is set by <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">Read</see> method. 
            It represents the MicroPDF417 start code word function for Code 128 emulation. This property is used
            only when reading a MicroPDF417 symbol.
            </remarks>
      <value>
             Returns the MicroPDF417 barcode function code word for Code 128 emulation.
            </value>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeData.Angle">
      <summary>
             Gets the barcode angle in hundredths of degrees.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            Barcode angle in hundredths of degrees. Possible values range from -18000 to 18000 with two digit precision. To obtain the actual angle value, divide by 100.0 .
            </value>
      <remarks>
        <para>A full circle can be detected (from -180 to +180).</para>
        <para>It is very useful to detect a document's image skew angle. Use this parameter to correct an image's skew. To do so, provide the angle found to the <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> function to rotate the image in the opposite direction using the negative value of the returned Angle.</para>
        <para>The major difference between this value and the value found using the <see cref="T:Leadtools.ImageProcessing.Core.DeskewCommand" /> is that there is no limitation on the barcode angle, i.e. all angles can be detected, where the deskew command is limited to +/- 20 degrees.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeEngine">
      <summary>
        <strong>Obsolete: </strong>
            This class contains the barcode engine used to read or write barcodes.
            </summary>
      <noexample />
      <remarks>
        <para>
          <strong>Obsolete: </strong> this namespace has been deprecated. Please use Leadtools.Barcode. Start from here: <see cref="T:Leadtools.Barcode.BarcodeEngine">Leadtools.Barcode.BarcodeEngine</see></para>
        <para>This class is the main entry point for barcode support in LEADTOOLS. It contains the following methods:
            </para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">BarcodeEngine.Read</see>: Searches and reads the data of barcodes in an image or a specific area in an image.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">BarcodeEngine.Write</see>: Writes (draws) any of the barcodes supported by LEADTOOLS to a specific area in an image.
            </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.CalculateBarcodeSize(System.Int32,System.Int32,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr)">BarcodeEngine.CalculateBarcodeSize</see>: Helper method to calculates the area size of a barcode before its written.
            </para>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.#ctor">
      <summary>
            Initializes a new instance of the BarcodeEngine class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Startup(Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags)">
      <summary>
        <strong>Obsolete: </strong>Initializes the barcode engine and pre-loads the required assemblies for Barcode operations
            into memory.
            </summary>
      <param name="flags">Barcode major type. Values can be combined, when appropriate, by using a bitwise OR (|).</param>
      <remarks>
        <para>
          <strong>Note:</strong> This method is obsolete and should no longer be used. You can use the <see cref="T:Leadtools.Barcode.Deprecated.BarcodeEngine" /> object
            without calling Startup or Shutdown.</para>
        <para>This method must be called before calling any other Leadtools.Barcode functionality. If <b>Startup method</b> is called in an application, <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Shutdown">Exit method</see> must be called before terminating the application.</para>
        <para>This method pre-loads the assemblies necessary for the specified barcode operations which can
            improve  performance if you know what barcode types you plan on using.  If a barcode
            major type is not  initialized with this function you may still use it and the necessary assemblies
            will be loaded when  <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)" /> or <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)" /> is executed.</para>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Shutdown">
      <summary>
        <strong>Obsolete: </strong>Closes the barcode engine and frees the loaded DLLs for Barcode operations from memory.
            </summary>
      <remarks>
        <para>
          <strong>Note:</strong> This method is obsolete and should no longer be used. You can use the <see cref="T:Leadtools.Barcode.Deprecated.BarcodeEngine" /> object
            without calling Startup or Shutdown.</para>
        <para>This must be the last barcode-related method that is called in an application.</para>
        <para>No other Leadtools.Barcode functionality can be used after Shutdown method is called. To use other methods after calling this method,
            The <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Startup(Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags)">Initialize method</see> must be called again.</para>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Startup(Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      <summary>
            Searches for barcodes within the specified area.
            </summary>
      <param name="image">
            RasterImage referencing the bitmap that holds the image data.
            </param>
      <param name="searchRectangle">
            LeadRect that contains the search area for the barcodes.
            Pass LeadRect.Empty to search the whole image.
            If this parameter is LeadRect.Empty and the image does not have a region, the entire image will be searched.
            If this parameter is LeadRect.Empty and the image does have a region, only the region will be searched.
            </param>
      <param name="searchType">
            Type of barcode for which to search. You can combine values when appropriate among the same group values, by using a bitwise OR (|).
            </param>
      <param name="units">Unit of measurement.</param>
      <param name="flags">
            Processing options. values can be combined when appropriate, by using a bitwise OR (|).
            Pass BarcodeReadFlags.None to get the default.
            </param>
      <param name="multipleMaxCount">
            Specifies the maximum number of barcodes to search. Pass 0 to read all barcodes in a specified search area.
            </param>
      <param name="code1d">Barcode1d class containing linear barcode options to be read.</param>
      <param name="codePdf">BarcodeReadPdf class containing PDF417 and MicroPDF417 barcode options to be read.</param>
      <param name="codeColor">BarcodeColor class containing bar and space colors to be read.</param>
      <returns>List of BarcodeData classes in a BarcodeDataCollection class.</returns>
      <remarks>
        <p>This method supports all images currently supported by LEADTOOLS.</p>
        <p>Use this method to recognize barcode data.</p>
        <p>To determine whether a barcode element is duplicated or not, use <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.IsDuplicated">BarcodeData.IsDuplicated property</see>.</p>
        <p>If the barcode is duplicated, you can get it by calling the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.DuplicatedIndex">BarcodeData.DuplicatedIndex method</see> and to get the next duplicated barcode call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetNextDuplicated(System.Int32)">BarcodeData.GetNextDuplicated method</see>.</p>
        <p>If you know the index of a duplicated barcode, you can get the first duplicate of that barcode by calling the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeData.GetFirstDuplicatedIndex(System.Int32)">GetFirstDuplicatedIndex method</see>.</p>
        <p>When the flags parameter is set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeReadFlags">BarcodeReadFlags</see>.UseColors, then this method will use the codeColor parameter, otherwise the method will ignore it and use the default colors of black for bars and white for spaces.</p>
        <p>Using colors does not apply for 1 bit per pixel images.</p>
        <p>The <see cref="T:Leadtools.Barcode.Deprecated.BarcodeReadFlags">BarcodeReadFlags</see>.UseColors flag is used with all barcode types.</p>
        <p>The BarcodeReadFlags.ReturnCheck flag is used only with reading linear barcodes.</p>
        <p>The smallest Data Matrix symbol size is 40 pixels by 40 pixels.</p>
        <p>It can be read using <see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags</see>.DatamatrixReadSmall since this enables the reading of Data Matrix symbols that are between 20 to 40 pixels in size.</p>
        <p>The Linear barcodes are not supported in UNICODE text.</p>
            When calling this method with the ReturnFourPoints flag set, the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.Location">Location</see> property will be updated with the coordinates of the four corners of the barcode rather than the coordinates of the bounding rectangle. These coordinates are encoded values and must be decoded before they can be used. The following example shows how to decode the four-point corner values:
            <code>
                   Point p1, p2, p3, p4;
                   int nStartX = barData.Location.Left;
                   int nStartY = barData.Location.Top;
                   int nWidth  = barData.Location.Right - nStartX;
                   int nHeight = barData.Location.Bottom - nStartY;
                   p1.X = (nStartX And 0xffff);
                   p1.Y = (nStartX &gt;&gt; 16);
                   p2.X = (nStartY And 0xffff);
                   p2.Y = (nStartY &gt;&gt; 16);
                   p3.X = (nWidth And 0xffff);
                   p3.Y = (nWidth &gt;&gt; 16);
                   p4.X = (nHeight And 0xffff);
                   p4.Y = (nHeight &gt;&gt; 16);
            </code><p><b>Reading Linear Barcodes (1D):</b></p><p>A barcode is composed of a start mark, data, and the end mark. Reading barcodes from left to right (setting the Direction property to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags">BarcodeDirectionFlags</see>.LeftToRight value) or from right to left (setting the Direction property to BarcodeDirectionFlags.RightToLeft value) will produce the same result in most cases, because the barcode reader engine recognizes the start and end marks, and handles the data accordingly.
            For example, if BarcodeDirectionFlags.LeftToRight is used and the user reads barcodes from left to right (the barcode is not rotated), the engine will recognize the start mark first, then the data, and finally the end mark. But if the user reads barcodes from right to left (the barcode is rotated 180 degrees), the engine will first recognize the end mark, then read the (reverse-order) data, and then recognize the start mark. In this case, the engine will flip the data to normal (start/data/end) order.</p></remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      <summary>
            Writes linear, PDF417, MicroPDF417, Data Matrix, and QR barcode symbols over the image.
            </summary>
      <remarks>
                This method supports all images currently supported by LEADTOOLS. 
                <para>You must pass a valid RasterImage to this method. If you do not pass a valid
                Raster image, the method will throw an exception.</para><para>
                    The Write method will write the barcode symbol over the image using the
                    rectangle defined by the
                    <see cref="P:Leadtools.Barcode.Deprecated.BarcodeData.Location">Location property</see>.
                </para><para>However, if the bitmap has a region, this function will write the barcode
                using the region boundaries. If the region is non-rectangular, the barcode will be
                written to the rectangle bounding the region and subsequently clipped to the given
                region. This might cause the resulting barcode to be unreadable.</para><para>
                    If you set the flags parameter to
                    <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">.UseColors</see>, then this
                    method will use the codeColor parameter, otherwise the method will ignore it
                    and use the default colors of black for bars and white for spaces.
                </para><para>Using colors does not apply for 1 bit per pixel images.</para><para>The BarcodeWriteFlags.UseColors and BarcodeWriteFlags.Transparent are used
                with all barcode types.</para><para>For a table containing information useful when writing 1D barcode data see
                <a href="https://www.leadtools.com/sdk/barcode/1d-chart.htm">https://www.leadtools.com/sdk/barcode/1d-chart.htm</a>.</para></remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
      <param name="image">RasterImage referencing the bitmap that holds the image data.</param>
      <param name="data">BarcodeData class that contains the barcode information to be written over the image.</param>
      <param name="codeColor">BarcodeColor class that contains the color information to be written over the image.</param>
      <param name="flags">
            Flags that indicate the method behavior. Values can be combined when appropriate, by using a bitwise OR (|).
            Pass <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">BarcodeWriteFlags</see>.None to use the default values, based on the type of barcode that has been written.
            </param>
      <param name="code1d">Barcode1d class that contains the information related to linear barcodes.</param>
      <param name="codePdf">BarcodeWritePdf class that contains the information related to PDF417 and MicroPDF417 barcodes.</param>
      <param name="codeDatamatrix">BarcodeWriteDatamatrix class that contains the information related to Data Matrix barcodes.</param>
      <param name="codeQr">BarcodeWriteQr class that contains the information related to QR barcodes.</param>
      <param name="sizeRectangle">
            Ignored, pass.LeadRect.Empty.</param>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeEngine.CalculateBarcodeSize(System.Int32,System.Int32,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr)">
      <summary>
            Calculates the barcode size that is going to be written.
            </summary>
      <param name="dpiX"> The X-axis (along width) resolution of the RasterImage of the barcode being written.</param>
      <param name="dpiY"> The Y-axis (along height) resolution of the RasterImage of the barcode being written.</param>
      <param name="data">BarcodeData class that contains the barcode information to be written on the image.</param>
      <param name="codeColor">BarcodeColor class that contains the color information to be written on the image.</param>
      <param name="flags">
            Flags that indicate the method behavior. Values can be combined when appropriate, by using a bitwise OR (|).
            Pass <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">BarcodeWriteFlags</see>.None to use the default values, based on the type of barcode that has been written.
            </param>
      <param name="code1d">Barcode1d class that contains the information about linear barcodes.</param>
      <param name="codePdf">BarcodeWritePdf class that contains the information about PDF417 and MicroPDF417 barcodes.</param>
      <param name="codeDatamatrix">BarcodeWriteDatamatrix class that contains the information about Data Matrix barcodes.</param>
      <param name="codeQr">BarcodeWriteQr class that contains the information about QR barcodes.</param>
      <returns> LeadRect with the barcode size before writing the barcode over the image.</returns>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeException">
      <summary>
        <strong>Obsolete: </strong>
            The exception that is thrown when a Barcode error occurs.
            </summary>
      <remarks>
        <p>The <b>BarcodeException</b> class defines a <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> property that you can examine to determine what caused the error.</p>
        <p>Default messages are implemented for each Code, however you can modify any message using the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.GetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">GetCodeMessage</see>
            and <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.SetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode,System.String)">SetCodeMessage</see> methods.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor">
      <summary>
            Initializes a new instance of the BarcodeException class with its <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message</see> string set to the empty string (""), its
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> property set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode">BarcodeExceptionCode</see>.NoData and its inner exception set to a null reference
            (Nothing in Visual Basic).
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the BarcodeException class with its <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message</see> string set to <i>message</i>, its
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode">BarcodeExceptionCode</see>.NoData and its inner exception set to a null reference
            (Nothing in Visual Basic).
            </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of the message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message property</see> of the new instance using <i>message</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the BarcodeException class with a specified error message, its <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> set to 
            <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode">BarcodeExceptionCode</see>.NoData and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference
            (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException" /> property. The InnerException property returns the same value that is passed into the constructor,
            or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the
            constructor. 
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor(System.String,Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">
      <summary>
            Initializes a new instance of the BarcodeException class with its <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message</see> string set to <i>message</i>, its
            <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> set to <i>code</i> and its inner exception set to a null reference (Nothing in Visual Basic).
            </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of the message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="code">flag that indicates the code caused the exception.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message</see> property of the new instance using <i>message</i> and the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see>
            property of the new instance using <i>code</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor(Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">
      <summary>
            Initializes a new instance of the BarcodeException class with its <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message</see> string set to the default message
            that corresponds to <i>code</i> and its inner exception set to a null reference (Nothing in Visual Basic).
            </summary>
      <param name="code">flag that indicates the code caused the exception.</param>
      <remarks>
            The BarcodeException class contains an internal list of messages that correspond to each <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode">BarcodeExceptionCode</see>
            value.  This constructor initializes the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">Message property</see> of the new instance with the corresponding string for <i>code</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.GetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">
      <summary>
            Retrieves the error string that corresponds the value of the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> property.
            </summary>
      <param name="code">Flag that indicates the exception code for which to retrieve its message string.</param>
      <returns>A character string to be updated with the current message for <i>code</i>.</returns>
      <remarks>
            By default, BarcodeException has a string message for each flag of the BarcodeExceptionCode.
            To change the error string that corresponds to the Code property value, call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.SetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode,System.String)">SetCodeMessage method</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.SetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode,System.String)">
      <summary>
            Changes the error string that corresponds the value of the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> property.
            </summary>
      <param name="code">Flag that indicates the exception code for which change its message string.</param>
      <param name="message">A character string that contains the current message for <i>code</i>.</param>
      <remarks>
            By default, BarcodeException has a string message for each flag of the BarcodeExceptionCode.
            To obtain the error string that corresponds to the Code property value, call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.GetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">GetCodeMessage method</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the BarcodeException class with the specified serialization and context information.
            </summary>
      <param name="info">The data for serializing or deserializing the object</param>
      <param name="context">The source and destination for the object</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">
      <summary>
            Gets or sets the code that caused the exception.
            </summary>
      <value>The exception code.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeException.Message">
      <summary>
             Gets a message that describes the current exception.
            </summary>
      <value>The error message that explains the reason for the exception, or an empty string("").</value>
      <remarks>
        <p>Overrides <see cref="P:System.Exception.Message" />.</p>
        <p>If this BarcodeException instance was initialized with a specific <see cref="P:Leadtools.Barcode.Deprecated.BarcodeException.Code">Code</see> but not with a specific message,
            then this property value will be the default error string that corresponds to the Code property.</p>
        <p>To obtain the error string that corresponds to the Code property value, call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.GetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode)">GetCodeMessage method</see>.</p>
        <p>To change the error string that corresponds to the Code property value, call the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeException.SetCodeMessage(Leadtools.Barcode.Deprecated.BarcodeExceptionCode,System.String)">SetCodeMessage method</see>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the exception codes.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.DigitCheck">
      <summary>
            Invalid error check digit.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.InvalidType">
      <summary>
            Invalid barcode type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.TextOutW">
      <summary>
            Invalid barcode text out option.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Width">
      <summary>
            Invalid barcode width.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Height">
      <summary>
            Invalid barcode height.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.ToSmall">
      <summary>
            Barcode string is too small.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.InvalidBarcodeString">
      <summary>
            Invalid barcode string for a specified barcode type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.NotFound">
      <summary>
            No barcode recognition.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Units">
      <summary>
            Invalid barcode measurement unit.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.MultipleMaxCount">
      <summary>
            Invalid multiple max count.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Group">
      <summary>
            Invalid barcode group.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.NoData">
      <summary>
            Invalid BarcodeData object.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.NotFoundDuplicated">
      <summary>
            No duplicated barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.LastDuplicated">
      <summary>
            Reached the last duplicated barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.StringLength">
      <summary>
            Invalid barcode data string length.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Location">
      <summary>
            Invalid barcode area location.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Barcode1dLocked">
      <summary>
            Barcode 1D is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Barcode2dReadLocked">
      <summary>
            Barcode Read 2D (CodeOne) is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.Barcode2dWriteLocked">
      <summary>
            Barcode Write 2D (CodeOne) is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.PdfReadLocked">
      <summary>
            Barcode Read PDF is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.PdfWriteLocked">
      <summary>
            Barcode Write PDF is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.FoundCorrupt">
      <summary>
            Barcode PDF417 symbol is found but cannot be read successfully.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.DatamatrixReadLocked">
      <summary>
            Barcode Read Datamatrix is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.DatamatrixWriteLocked">
      <summary>
            Barcode Write Datamatrix is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.QrReadLocked">
      <summary>
            Barcode Read QR is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.QrWriteLocked">
      <summary>
            Barcode Write QR is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.DllNotFound">
      <summary>
            Bar Code Engine DLL not found.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.AztecReadLocked">
      <summary>
            Barcode Read Aztec is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.AztecWriteLocked">
      <summary>
            Barcode Write Aztec is locked
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.MaxiReadLocked">
      <summary>
            Barcode Read Maxi is locked
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.MaxiWriteLocked">
      <summary>
            Barcode Write Maxi is locked
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.MicroQrReadLocked">
      <summary>
            Barcode Read Micro QR is locked
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.MicroQrWriteLocked">
      <summary>
            Barcode Write Micro QR is locked
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeExceptionCode.XModule">
      <summary>
            Invalid XModule value, the value should &gt;= 0.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeReadPdf">
      <summary>
        <strong>Obsolete: </strong>
            This class contains information for reading PDF417 or MicroPDF417 barcodes.
            </summary>
      <remarks>
        <para>For a table containing information useful when reading PDF417 barcode data see <a href="https://www.leadtools.com/sdk/barcode/pdf417-chart.htm">https://www.leadtools.com/sdk/barcode/pdf417-chart.htm</a>.</para>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Read(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags,Leadtools.Barcode.Deprecated.BarcodeUnit,Leadtools.Barcode.Deprecated.BarcodeReadFlags,System.Int32,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeReadPdf,Leadtools.Barcode.Deprecated.BarcodeColor)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeReadPdf.#ctor">
      <summary>
            Initializes a new instance of the BarcodeReadPdf class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeReadPdf.Direction">
      <summary>
            Gets or sets a flag that indicates the orientation and direction for reading barcodes.
            </summary>
      <value>
            Flag that indicates the orientation and direction for reading barcodes. Values can be combined when appropriate, by using a bitwise OR (|).
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix">
      <summary>
        <strong>Obsolete: </strong>
             This class contains information used to write ECC 200 Data Matrix symbols.
             </summary>
      <remarks>
        <para>The following table contains information for writing ECC 200 Data Matrix barcodes:</para>
        <para>
                    Use the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.FileIdHigh">FileIdHigh</see>,
                    <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.FileIdLow">FileIdLow</see>,
                    <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.GroupNumber">GroupNumber</see>, and
                    <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.GroupTotal">GroupTotal</see> properties when you need to split
                    information up into different barcodes.
                </para>
        <table>
          <tbody>
            <tr>
              <td>
                <para>Data Matrix type</para>
              </td>
              <td>
                <para>Maximum Numeric Length</para>
              </td>
              <td>
                <para>Maximum Alphanumeric Length</para>
              </td>
              <td>
                <para>Maximum Binary Length</para>
              </td>
              <td>
                <para>Maximum Correctable Error / Erasure</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>10 x 10</para>
              </td>
              <td>
                <para>6</para>
              </td>
              <td>
                <para>3</para>
              </td>
              <td>
                <para>1</para>
              </td>
              <td>
                <para>2</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>12 x 12</para>
              </td>
              <td>
                <para>10</para>
              </td>
              <td>
                <para>6</para>
              </td>
              <td>
                <para>3</para>
              </td>
              <td>
                <para>3</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>14 x 14</para>
              </td>
              <td>
                <para>16</para>
              </td>
              <td>
                <para>10</para>
              </td>
              <td>
                <para>6</para>
              </td>
              <td>
                <para>5/7</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>16 x 16</para>
              </td>
              <td>
                <para>24</para>
              </td>
              <td>
                <para>16</para>
              </td>
              <td>
                <para>10</para>
              </td>
              <td>
                <para>6/9</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>18 x 18</para>
              </td>
              <td>
                <para>36</para>
              </td>
              <td>
                <para>25</para>
              </td>
              <td>
                <para>16</para>
              </td>
              <td>
                <para>7/11</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>20 x 20</para>
              </td>
              <td>
                <para>44</para>
              </td>
              <td>
                <para>31</para>
              </td>
              <td>
                <para>20</para>
              </td>
              <td>
                <para>9/15</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>22 x 22</para>
              </td>
              <td>
                <para>60</para>
              </td>
              <td>
                <para>43</para>
              </td>
              <td>
                <para>28</para>
              </td>
              <td>
                <para>10/17</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>24 x 24</para>
              </td>
              <td>
                <para>72</para>
              </td>
              <td>
                <para>52</para>
              </td>
              <td>
                <para>34</para>
              </td>
              <td>
                <para>12/21</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>26 x 26</para>
              </td>
              <td>
                <para>88</para>
              </td>
              <td>
                <para>64</para>
              </td>
              <td>
                <para>42</para>
              </td>
              <td>
                <para>14/25</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>32 x 32</para>
              </td>
              <td>
                <para>124</para>
              </td>
              <td>
                <para>91</para>
              </td>
              <td>
                <para>60</para>
              </td>
              <td>
                <para>18/33</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>36 x 36</para>
              </td>
              <td>
                <para>172</para>
              </td>
              <td>
                <para>127</para>
              </td>
              <td>
                <para>84</para>
              </td>
              <td>
                <para>21/39</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>40 x 40</para>
              </td>
              <td>
                <para>228</para>
              </td>
              <td>
                <para>169</para>
              </td>
              <td>
                <para>112</para>
              </td>
              <td>
                <para>24/45</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>44 x 44</para>
              </td>
              <td>
                <para>288</para>
              </td>
              <td>
                <para>214</para>
              </td>
              <td>
                <para>142</para>
              </td>
              <td>
                <para>28/53</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>48 x 48</para>
              </td>
              <td>
                <para>348</para>
              </td>
              <td>
                <para>259</para>
              </td>
              <td>
                <para>172</para>
              </td>
              <td>
                <para>34/65</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>52 x 52</para>
              </td>
              <td>
                <para>408</para>
              </td>
              <td>
                <para>304</para>
              </td>
              <td>
                <para>202</para>
              </td>
              <td>
                <para>42/78</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>64 x 64</para>
              </td>
              <td>
                <para>560</para>
              </td>
              <td>
                <para>418</para>
              </td>
              <td>
                <para>278</para>
              </td>
              <td>
                <para>56/106</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>72 x 72</para>
              </td>
              <td>
                <para>736</para>
              </td>
              <td>
                <para>550</para>
              </td>
              <td>
                <para>366</para>
              </td>
              <td>
                <para>72/132</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>80 x 80</para>
              </td>
              <td>
                <para>912</para>
              </td>
              <td>
                <para>682</para>
              </td>
              <td>
                <para>454</para>
              </td>
              <td>
                <para>96/180</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>88 x 88</para>
              </td>
              <td>
                <para>1152</para>
              </td>
              <td>
                <para>862</para>
              </td>
              <td>
                <para>574</para>
              </td>
              <td>
                <para>112/212</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>96 x 96</para>
              </td>
              <td>
                <para>1392</para>
              </td>
              <td>
                <para>1042</para>
              </td>
              <td>
                <para>694</para>
              </td>
              <td>
                <para>136/260</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>104 x 104</para>
              </td>
              <td>
                <para>1632</para>
              </td>
              <td>
                <para>1222</para>
              </td>
              <td>
                <para>814</para>
              </td>
              <td>
                <para>168/318</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>120 x 120</para>
              </td>
              <td>
                <para>2100</para>
              </td>
              <td>
                <para>1573</para>
              </td>
              <td>
                <para>1048</para>
              </td>
              <td>
                <para>204/390</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>132 x 132</para>
              </td>
              <td>
                <para>2608</para>
              </td>
              <td>
                <para>1954</para>
              </td>
              <td>
                <para>1302</para>
              </td>
              <td>
                <para>248/472</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>144 x 144</para>
              </td>
              <td>
                <para>3116</para>
              </td>
              <td>
                <para>2335</para>
              </td>
              <td>
                <para>1556</para>
              </td>
              <td>
                <para>310/590</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>8 x 18</para>
              </td>
              <td>
                <para>10</para>
              </td>
              <td>
                <para>6</para>
              </td>
              <td>
                <para>3</para>
              </td>
              <td>
                <para>3</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>8 x 32</para>
              </td>
              <td>
                <para>20</para>
              </td>
              <td>
                <para>13</para>
              </td>
              <td>
                <para>8</para>
              </td>
              <td>
                <para>5</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>12 x 26</para>
              </td>
              <td>
                <para>32</para>
              </td>
              <td>
                <para>22</para>
              </td>
              <td>
                <para>14</para>
              </td>
              <td>
                <para>7/11</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>12 x 36</para>
              </td>
              <td>
                <para>44</para>
              </td>
              <td>
                <para>31</para>
              </td>
              <td>
                <para>20</para>
              </td>
              <td>
                <para>9/15</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>16 x 36</para>
              </td>
              <td>
                <para>64</para>
              </td>
              <td>
                <para>46</para>
              </td>
              <td>
                <para>30</para>
              </td>
              <td>
                <para>12/21</para>
              </td>
            </tr>
            <tr>
              <td>
                <para>16 x 48</para>
              </td>
              <td>
                <para>98</para>
              </td>
              <td>
                <para>72</para>
              </td>
              <td>
                <para>47</para>
              </td>
              <td>
                <para>14/25</para>
              </td>
            </tr>
          </tbody>
        </table>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.#ctor">
      <summary>
            Initializes a new instance of the BarcodeWriteDatamatrix class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.Justify">
      <summary>
            Gets or sets a flag that determines the alignment (justification) of the resulting barcode symbols.
            </summary>
      <value>
            Gets or sets a flag that determines the alignment (justification) of the resulting barcode symbols.
            Values can be combined when appropriate, by using a bitwise OR (|).
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.GroupNumber">
      <summary>
            Gets or sets a value that specify a group of Data Matrix symbols.
            </summary>
      <value>
            Group of Data Matrix symbols.
            The maximum number of symbols in a group is 16. 
            </value>
      <remarks>Use this property to 
            specify the order of each barcode in a group. This lets you put 
            barcodes in the correct order
            when putting large pieces of data back together.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.GroupTotal">
      <summary>
            Gets or sets the total number of Data Matrix symbols in the group specified by the value of <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.GroupNumber">GroupNumber property</see>.
            </summary>
      <value>
            Total number of Data Matrix symbols in the group.
            The maximum number of symbols in a group is 16.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.FileIdLow">
      <summary>
            Gets or sets the low byte of the file ID number.
            </summary>
      <value>
            Low byte of the file ID number. Possible values range from 1 to 254.
            </value>
      <remarks>Use this as an ID for a group since an image can have multiple groups.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.FileIdHigh">
      <summary>
            Gets or sets the high byte of the file ID number.
            </summary>
      <value>
            High byte of the file ID number. Possible values range from 1 to 254. Use this as an ID for a group since an image can have multiple groups.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix.XModule">
      <summary>
            Gets or sets the size of the written Data Matrix barcode, specified in 0.001 inch.
            </summary>
      <value>
            Size of the written Data Matrix barcode.
            If the value is too small, a minimum of 2 pixels will be used.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeWritePdf">
      <summary>
        <strong>Obsolete: </strong>
            This class contains information for writing PDF417/MicroPDF417 barcodes.
            </summary>
      <remarks>
        <para>A PDF417 barcode size is dependent on the following values:</para>
        <ul>
          <li>Number of Columns</li>
          <li>Number of Rows</li>
          <li>X Module Size</li>
          <li>Module Aspect Ratio</li>
        </ul>
            To calculate barcode Width use the following equation:<br />
            Width= ((Number of Columns * 17) + 73) * (X Module Size)<br />
            This includes the Quiet Zone, Indicators, Start and Stop patterns.
            <para></para>
            To calculate barcode Height use the following equation:<br />
            Height=(Number of Rows + 4) * (X Module Size) * (Module Aspect Ratio)<br />
            The 4 added to Number of Rows is to account for the Quiet Zone.
            <para>If the number of columns and rows are not specified the default behavior is to find the minimum number of columns that the data requires to fit in its rows.</para><para>The Quiet Zone for a barcode is a minimum required white space before the start of the barcode symbols.  The purpose is to delineate non-barcode information from the barcode data to prevent a reader from picking up information that doesn't pertain to the barcode. For a PDF417 the Quiet Zone is 2 Modules on each side.</para><para>AspectHeight and AspectWidth properties are needed in special case when the number of barcode codewords equal to 4 (i.e. small barcodes).</para><para>If there isn't a valid row column combination available to fit the encoded data or if the number of the specified columns and rows cannot fit the data. The function will return "Function Not Successful".</para><para>For a table containing information useful when writing PDF417 barcode data see <a href="https://www.leadtools.com/sdk/barcode/pdf417-chart.htm">https://www.leadtools.com/sdk/barcode/pdf417-chart.htm</a>.</para><p>MicroPDF417 may only be printed in certain defined combinations of rows and columns. 
            Possible values are (wColumns x wRows)and maximum capacity are displayed in the table below:</p><ul><li>0 x 0 (Default)</li><li>1 x 11</li><li>1 x 14</li><li>1 x 17</li><li>1 x 20</li><li>1 x 24</li><li>1 x 28</li><li>2 x 8</li><li>2 x 11</li><li>2 x 14</li><li>2 x 17</li><li>2 x 20</li><li>2 x 23</li><li>2 x 26</li><li>3 x 6</li><li>3 x 8</li><li>3 x 10</li><li>3 x 12</li><li>3 x 15</li><li>3 x 20</li><li>3 x 26</li><li>3 x 32</li><li>3 x 38</li><li>3 x 44</li><li>4 x 4</li><li>4 x 6</li><li>4 x 8</li><li>4 x 10</li><li>4 x 12</li><li>4 x 15</li><li>4 x 20</li><li>4 x 26</li><li>4 x 32</li><li>4 x 38</li><li>4 x 44</li></ul></remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeWritePdf.#ctor">
      <summary>
            Initializes a new instance of the BarcodeWritePdf class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.EccPercentage">
      <summary>
            Gets or sets the ECC character percentage.
            </summary>
      <value>
            ECC character percentage.
            </value>
      <remarks>
            The value of this property is valid when the 
            value of the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.EccLevel">EccLevel property</see> is 
            set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags">BarcodePdf417EccLevelFlags</see>.UsePercent.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.EccLevel">
      <summary>
            Gets or sets the ECC level for writing a PDF417 symbol.
            </summary>
      <value>
            ECC level.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.AspectHeight">
      <summary>
            Gets or sets the height of the aspect ratio of the symbol. Only used with PDF417.
            </summary>
      <value>
            Height of the aspect ratio.
            </value>
      <remarks>
            When the <i>flags</i> parameter of the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">BarcodeEngine.Write method</see> is set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">BarcodeWriteFlags</see>.ColumnRowAsLimits then the value of this property will be ignored.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.AspectWidth">
      <summary>
            Gets or sets the width of the aspect ratio of the symbol. Only used with PDF417.
            </summary>
      <value>
            Width of the aspect ratio.
            </value>
      <remarks>
            When the <i>flags</i> parameter of the <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">BarcodeEngine.Write method</see> is set to <see cref="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">BarcodeWriteFlags</see>.ColumnRowAsLimits then the value of this property will be ignored.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.ModAspectRatio">
      <summary>
            Gets or sets the ratio of the width of the smallest element 
            (specified by the value of the <see cref="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.Module">Module property</see>) 
            to the height of a row of the PDF417 symbol.
            </summary>
      <value>
            The ratio of the width of the smallest element.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.Columns">
      <summary>
            Gets or sets the number of columns to use when writing a PDF417 or MicroPDF417 symbol.
            </summary>
      <value>
            Number of columns to use when writing a PDF417 symbol.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.Rows">
      <summary>
            Gets or sets the number of rows to use when writing a PDF417 or MicroPDF417 symbol.
            </summary>
      <value>
            Number of rows to use when writing a PDF417 symbol.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.Module">
      <summary>
            Gets or sets the size of the smallest element in width.
            </summary>
      <value>
            Size of the smallest element in width, in thousandths of an inch (0.001). If the value is too small, a minimum of 2 pixels will be used.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWritePdf.Justify">
      <summary>
            Gets or sets a flag that determines the alignment (justification) of the resulting barcode symbols.
            </summary>
      <value>
            Alignment (justification) of the resulting barcode symbols.
            Values can be combined when appropriate, by using a bitwise OR (|).
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeWriteQr">
      <summary>
        <strong>Obsolete: </strong>
            This class contains QR barcode information for writing QR barcodes.
            </summary>
      <para>Maximum data capacity for the different symbologies for the QR barcode</para>
      <remarks>
        <para>The QR standard specifies 40 different sizes of the QR code and the maximum data capacity will vary depending on the size and Error Correction level. The table below lists the maximum data capacity for each ECC level and encoding scheme.</para>
        <para>For a table containing information useful when writing QR barcode data see <a href="https://www.leadtools.com/sdk/barcode/qr-chart.htm">https://www.leadtools.com/sdk/barcode/qr-chart.htm</a>.</para>
      </remarks>
      <noexample />
      <seealso cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)">
      </seealso>
    </member>
    <member name="M:Leadtools.Barcode.Deprecated.BarcodeWriteQr.#ctor">
      <summary>
            Initializes a new instance of the BarcodeWriteQr class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteQr.Justify">
      <summary>
            Gets or sets a flag that indicates how the QR symbol is justified.
            </summary>
      <value>
            Flag that indicates how the QR symbol is justified.
            Values can be combined when appropriate, by using a bitwise OR (|).
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteQr.GroupNumber">
      <summary>
            Gets or sets a value that specify the group of QR Code symbols.
            </summary>
      <value>
            Group of QR Code symbols.
            The maximum number of symbols in a group is 16.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteQr.GroupTotal">
      <summary>
            Gets or sets the total number of QR Code symbols.
            </summary>
      <value>
            Total number of QR Code symbols.
            The maximum number of symbols in a group is 16.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteQr.EccLevel">
      <summary>
            Gets or sets the ECC level for the QR Code symbol to be written.
            </summary>
      <value>
            ECC level for the QR Code symbol.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.Deprecated.BarcodeWriteQr.XModule">
      <summary>
            Gets or sets the size of the written QR barcode, in thousandths of an inch.
            </summary>
      <value>
            Size of the written QR barcode.
            If the value is too small, a minimum of 2 pixels will be used.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the barcode major types.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.None">
      <summary>
            No barcode type selected.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.Barcodes1d">
      <summary>
            Barcode Linear.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.Barcodes2dRead">
      <summary>
            Barcode CodeOne read module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.Barcodes2dWrite">
      <summary>
            Barcode CodeOne write module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesPdfRead">
      <summary>
            Barcode PDF417 read module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesPdfWrite">
      <summary>
            Barcode PDF417 write module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesDatamatrixRead">
      <summary>
            Barcode Data Matrix read module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesDatamatrixWrite">
      <summary>
            Barcode Data Matrix write module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesQrRead">
      <summary>
            Barcode QR read module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesQrWrite">
      <summary>
            Barcode QR write module.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesAztecRead">
      <summary>
            Barcode Aztec read module
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesAztecWrite">
      <summary>
            Barcode Aztec write module
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesMaxiRead">
      <summary>
            Barcode Maxi read module
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesMaxiWrite">
      <summary>
            Barcode Maxi write module
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesMicroQrRead">
      <summary>
            Barcode Micro QR read module
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeMajorTypeFlags.BarcodesMicroQrWrite">
      <summary>
            Barcode Micro QR write module
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the MSI barcode type, Code11 barcode type, and reading speed.
            </summary>
      <remarks>
            You can use a bitwise OR (|) to specify one flag from each group.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dMsiModulo10">
      <summary>
            MSI (Modified Plessey) type with Modulo 10 check digit. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dMsi2Modulo10">
      <summary>
            MSI (Modified Plessey) type with two Modulo 10 check digits. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dMsiModulo11">
      <summary>
            MSI (Modified Plessey) type with Modulo 11 check digit. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dMsiModulo11Modulo10">
      <summary>
            MSI (Modified Plessey) type with Modulo 11 and Modulo 10 check digits. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode11C">
      <summary>
            Code 11(USD-8) type with C check digit only. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode11K">
      <summary>
            Code 11(USD-8) type with C and K check digits. It is recommended to be used if the message is 10 characters or longer. Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dFast">
      <summary>
            Fast barcode reading (recommended). It is suitable for most barcode qualities either good or poor. Used with Read method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dNormal">
      <summary>
            Fast but a little bit slower than the <see cref="T:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags">Barcode1dStandardFlags.Barcode1dFast</see> option, suitable for very poor barcode quality. Used with Read method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode128EncodeAuto">
      <summary>
            Automatically encodes the barcode data using one or multiple Code 128 encoding tables. This encodes all Code 128 data. 
            Used with Write method only for.writing Code 128 barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode128EncodeA">
      <summary> 
            Use only Code 128 A table to encode the barcode data. If the barcode data have values not included in the standard Code 128 A table <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode"> BarcodeExceptionCode.InvalidBarcodeString</see> exception will be thrown. Used with Write method only for.writing Code 128 barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode128EncodeB">
      <summary>
            Use only Code 128 B table to encode the barcode data. If the barcode data have values not included in the standard Code 128 B table <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode"> BarcodeExceptionCode.InvalidBarcodeString</see> exception will be thrown. Used with Write method only for.writing Code 128 barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dCode128EncodeC">
      <summary>
            Use only Code 128 C table to encode the barcode data. it encodes only even number of digits. If the barcode data have values not included in the standard Code 128 C table or have an odd number of digits <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode"> BarcodeExceptionCode.InvalidBarcodeString</see> exception will be thrown.
            Used with Write method only for.writing Code 128 barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dTextAtBottom">
      <summary>
            Write the barcode's text at the bottom of the barcode. This option is ignored for the following linear (1d) barcode types; 
            <ul><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEan13</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEan8</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dUpcVersionA</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dUpcVersionE</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEanext5</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEanext2</see></li></ul>
            Used with Write method only for.writing standard linear (1d) barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dStandardFlags.Barcode1dTextAtTop">
      <summary>
            Write the barcode's text at the top of the barcode. This option is ignored for the following linear (1d) barcode types; 
            <ul><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEan13</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEan8</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dUpcVersionA</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dUpcVersionE</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEanext5</see></li><li><see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">BarcodeSearchTypeFlags.Barcode1dEanext2</see></li></ul>
            Used with Write method only for.writing standard linear (1d) barcode.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the linkage bit value for all GS1 Databar (formerly RSS14) types, GS1 Databar (formerly RSS14) truncated type, direction of GS1 Databar (formerly RSS14) stacked, number of GS1 Databar (formerly RSS14) expanded stacked rows for write, and Australian post CIF table for read and write. You can use a bitwise OR (|) to specify one flag from each group.
            </summary>
      <remarks>
            Some GS1 Databar (formerly RSS14) Expanded Stacked strings have a fixed number of symbols. 
            <see cref="M:Leadtools.Barcode.Deprecated.BarcodeEngine.Write(Leadtools.RasterImage,Leadtools.Barcode.Deprecated.BarcodeData,Leadtools.Barcode.Deprecated.BarcodeColor,Leadtools.Barcode.Deprecated.BarcodeWriteFlags,Leadtools.Barcode.Deprecated.Barcode1d,Leadtools.Barcode.Deprecated.BarcodeWritePdf,Leadtools.Barcode.Deprecated.BarcodeWriteDatamatrix,Leadtools.Barcode.Deprecated.BarcodeWriteQr,Leadtools.LeadRect)"> BarcodeEngine.Write </see> throws the <see cref="T:Leadtools.Barcode.Deprecated.BarcodeExceptionCode"> BarcodeExceptionCode.InvalidBarcodeString</see> exception 
            if the number of rows doesn't fit. 
            Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1 Databar.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14Linkage">
      <summary>
            Set linkage bit for GS1 Databar (formerly RSS14), GS1 Databar (formerly RSS14) Limited, GS1 Databar (formerly RSS14) Expanded, 
            GS1 Databar (formerly RSS14) Stacked, and GS1 Databar (formerly RSS14) Expanded Stacked. Used with Write method only. 
            Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1 Databar.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14Truncated">
      <summary>
            Write GS1 Databar (formerly RSS14) Truncated. If it is not set, GS1 Databar (formerly RSS14) standard will be written. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14StackedOmni">
      <summary>
            Write GS1 Databar (formerly RSS14) two-row in GS1 Databar (formerly RSS14) Stacked Omni-directional format. 
            If it is not set, GS1 Databar (formerly RSS14) Stacked format will be written. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows1">
      <summary>
            Write the GS1 Databar (formerly RSS14) Expanded Stacked barcode into 1 row. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows2">
      <summary>
            Write the GS1 Databar (formerly RSS14) Expanded Stacked barcode into 2 rows. Used with Write method only
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows3">
      <summary>
            Write the GS1 Databar (formerly RSS14)Expanded Stacked barcode into 3 rows. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows4">
      <summary>
            Write the GS1 Databar (formerly RSS14) Expanded Stacked barcode into 4 rows. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows5">
      <summary>
            Write the GS1 Databar (formerly RSS14) Expanded Stacked barcode into 5 rows. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dRss14ExpandedStackedRows6">
      <summary>
            Write the GS1 Databar (formerly RSS14) Expanded Stacked barcode into 6 rows. Used with Write method only.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dAustralianCifC">
      <summary>
            Use C-Table to encode/decode Australian post customer information filed (CIF). Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dAustralianCifN">
      <summary>
            Use N-Table to encode/decode Australian post customer information filed (CIF). Used with both Read and Write methods.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.Barcode1dAdvancedFlags.Barcode1dAustralianCifS">
      <summary>
            No table is used to encode/decode Australian post customer information filed (CIF). The Read method will read the CIF bar states, so that users can use their own table to decode the information. For the Write method, the user must enter the state value for all CIF bars (16 bars for FCC 59 and 31 bars for FCC 62.) State values are either 0 (H), 1 (A), 2 (D), or 3 (T). Used with both Read and Write methods.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the barcode types to search.
            </summary>
      <remarks>
            You can combine values when reading more than one barcode type, by using a bitwise OR (|). Type RSS14 is now GS1 Databar. All references to RSS14 now refer to GS1 Databar.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.None">
      <summary>
            No barcode type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dReadAnyType">
      <summary>
            Search for all linear barcode types.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dReadAnyTypeNoRss14">
      <summary>
            Search for all linear barcode types except GS1 Databar (formerly RSS14) types. It is faster than <see cref="T:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags"> BarcodeSearchTypeFlags.Barcode1dReadAnyType</see> option if you are not looking for RSS14 types.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dEan13">
      <summary>
            EAN 13 type. Used with consumer products internationally.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dEan8">
      <summary>
            EAN 8 type. The short version of EAN13.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dUpcVersionA">
      <summary>
            UPC version A type. Used with consumer products in U.S.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dUpcVersionE">
      <summary>
            UPC version E type. It is the short version of UPCA.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCode3Of9">
      <summary>
            Code 3 of 9 (Code 39) type. Used especially in non-retail environments.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCode128">
      <summary>
            Code 128 type. Very dense code, used extensively worldwide.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCodeInterleaved2Of5">
      <summary>
            Interleaved 2 of 5 type. Used in warehouse, industrial applications.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCodabar">
      <summary>
            CODABAR (Ames Code/USD-4/NW-7/2 of 7 Code) type. Used in libraries and blood banks.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dUccean128">
      <summary>
            UCCEAND 128 type
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCode93">
      <summary>
            Code 93 type. Compressed form of Code 39
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dEanext5">
      <summary>
            5-digit supplemental type. May be used with UPCA, UPCE, EAN13 and EAN8 on books to indicate a suggested retail price.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dEanext2">
      <summary>
            2-digit supplemental type. May be used with UPCA, UPCE, EAN13 and EAN8 to indicate magazines and newspaper issue numbers.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dMsi">
      <summary>
            MSI (Modified Plessey) type. Used to mark retail shelves for inventory control.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCode11">
      <summary>
            Code 11(USD-8) type. Used in labeling telecommunications equipment.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dCodeStandard2Of5">
      <summary>
            Standard 2 of 5 (Industrial 2 of 5) type. Used in the photofinishing, warehouse sorting industries and sequentially numbering airline tickets.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRss14">
      <summary>
            GS1 Databar (formerly RSS14) type. Used in grocery industry, healthcare, and where items are too small to allow for older barcode symbologies.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRss14Limited">
      <summary>
            GS1 Databar (formerly RSS14) Limited type. It is a short version of GS1 Databar (formerly RSS14).
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRss14Expanded">
      <summary>
            GS1 Databar (formerly RSS14) Expanded type. It encodes item identification plus supplementary strings such as weight and date. Used in grocery industry and healthcare.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dPatchcode">
      <summary>
            Patch Code type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dPostnet">
      <summary>
            Postnet type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dPlanet">
      <summary>
            Planet type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dAustralianPost">
      <summary>
            Australian Post 4 State type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRm4scc">
      <summary>
            Royal Mail (RM4SCC) 4 State type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRss14Stacked">
      <summary>
            GS1 Databar (formerly RSS14) Stacked / GS1 Databar (formerly RSS14) Stacked Omni-Directional types. Used as GS1 Databar (formerly RSS14) if the available space is too narrow for the standard GS1 Databar (formerly RSS14).
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dRss14ExpandedStacked">
      <summary>
            GS1 Databar (formerly RSS14) Expanded Stacked barcode type. Used as GS1 Databar (formerly RSS14) Expanded if the available space is too narrow to fit in one line.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Barcode1dUsps4bc">
      <summary>
            USPS OneCode 4-State Barcode (4BC) type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Pdf417">
      <summary>
            PDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.MicroPdf417">
      <summary>
            MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.DatamatrixDefault">
      <summary>
            Data Matrix Default Type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix10x10">
      <summary>
            Data Matrix Type 10x10.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix12x12">
      <summary>
            Data Matrix Type 12x12.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix14x14">
      <summary>
            Data Matrix Type 14x14.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix16x16">
      <summary>
            Data Matrix Type 16x16.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix18x18">
      <summary>
            Data Matrix Type 18x18.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix20x20">
      <summary>
            Data Matrix Type 20x20.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix22x22">
      <summary>
            Data Matrix Type 22x20.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix24x24">
      <summary>
            Data Matrix Type 24x24.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix26x26">
      <summary>
            Data Matrix Type 26x26.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix32x32">
      <summary>
            Data Matrix Type 32x32.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix36x36">
      <summary>
            Data Matrix Type 36x36.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix40x40">
      <summary>
            Data Matrix Type 40x40.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix44x44">
      <summary>
            Data Matrix Type 44x44.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix48x48">
      <summary>
            Data Matrix Type 48x48.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix52x52">
      <summary>
            Data Matrix Type 52x52.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix64x64">
      <summary>
            Data Matrix Type 64x64.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix72x72">
      <summary>
            Data Matrix Type 72x72.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix80x80">
      <summary>
            Data Matrix Type 80x80.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix88x88">
      <summary>
            Data Matrix Type 88x88.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix96x96">
      <summary>
            Data Matrix Type 96x96.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix104x104">
      <summary>
            Data Matrix Type 104x104.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix120x120">
      <summary>
            Data Matrix Type 120x120.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix132x132">
      <summary>
            Data Matrix Type 132x132.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix144x144">
      <summary>
            Data Matrix Type 144x144.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix8x18">
      <summary>
            Data Matrix Type 8x18.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix8x32">
      <summary>
            Data Matrix Type 8x32.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix12x26">
      <summary>
            Data Matrix Type 12x26.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix12x36">
      <summary>
            Data Matrix Type 12x36.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix16x36">
      <summary>
            Data Matrix Type 16x36.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.Datamatrix16x48">
      <summary>
            Data Matrix Type 16x48.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.DatamatrixWriteRectangle">
      <summary>
            Data Matrix Write Rectangle Type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrDefault">
      <summary>
            Default QR Code size type.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version1">
      <summary>
            QR Code Model 2, Version 1.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version2">
      <summary>
            QR Code Model 2, Version 2.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version3">
      <summary>
            QR Code Model 2, Version 3.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version4">
      <summary>
            QR Code Model 2, Version 4.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version5">
      <summary>
            QR Code Model 2, Version 5.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version6">
      <summary>
            QR Code Model 2, Version 6.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version7">
      <summary>
            QR Code Model 2, Version 7.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version8">
      <summary>
            QR Code Model 2, Version 8.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version9">
      <summary>
            QR Code Model 2, Version 9.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version10">
      <summary>
            QR Code Model 2, Version 10.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version11">
      <summary>
            QR Code Model 2, Version 11.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version12">
      <summary>
            QR Code Model 2, Version 12.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version13">
      <summary>
            QR Code Model 2, Version 13.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version14">
      <summary>
            QR Code Model 2, Version 14.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version15">
      <summary>
            QR Code Model 2, Version 15.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version16">
      <summary>
            QR Code Model 2, Version 16.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version17">
      <summary>
            QR Code Model 2, Version 17.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version18">
      <summary>
            QR Code Model 2, Version 18.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version19">
      <summary>
            QR Code Model 2, Version 19.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version20">
      <summary>
            QR Code Model 2, Version 20.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version21">
      <summary>
            QR Code Model 2, Version 21.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version22">
      <summary>
            QR Code Model 2, Version 22.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version23">
      <summary>
            QR Code Model 2, Version 23.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version24">
      <summary>
            QR Code Model 2, Version 24.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version25">
      <summary>
            QR Code Model 2, Version 25.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version26">
      <summary>
            QR Code Model 2, Version 26.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version27">
      <summary>
            QR Code Model 2, Version 27.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version28">
      <summary>
            QR Code Model 2, Version 28.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version29">
      <summary>
            QR Code Model 2, Version 29.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version30">
      <summary>
            QR Code Model 2, Version 30.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version31">
      <summary>
            QR Code Model 2, Version 31.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version32">
      <summary>
            QR Code Model 2, Version 32.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version33">
      <summary>
            QR Code Model 2, Version 33.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version34">
      <summary>
            QR Code Model 2, Version 34.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version35">
      <summary>
            QR Code Model 2, Version 35.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version36">
      <summary>
            QR Code Model 2, Version 36.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version37">
      <summary>
            QR Code Model 2, Version 37.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version38">
      <summary>
            QR Code Model 2, Version 38.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version39">
      <summary>
            QR Code Model 2, Version 39.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel2Version40">
      <summary>
            QR Code Model 2, Version 40.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version1">
      <summary>
            QR Code Model 1, Version 1.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version2">
      <summary>
            QR Code Model 1, Version 2.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version3">
      <summary>
            QR Code Model 1, Version 3.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version4">
      <summary>
            QR Code Model 1, Version 4.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version5">
      <summary>
            QR Code Model 1, Version 5.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version6">
      <summary>
            QR Code Model 1, Version 6.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version7">
      <summary>
            QR Code Model 1, Version 7.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version8">
      <summary>
            QR Code Model 1, Version 8.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version9">
      <summary>
            QR Code Model 1, Version 9.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version10">
      <summary>
            QR Code Model 1, Version 10.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version11">
      <summary>
            QR Code Model 1, Version 11.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version12">
      <summary>
            QR Code Model 1, Version 12.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version13">
      <summary>
            QR Code Model 1, Version 13.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Version14">
      <summary>
            QR Code Model 1, Version 14.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrModel1Default">
      <summary>
            QR Code Model 1 Default Version.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.QrCode">
      <summary>
            Read QR barcodes.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.DatamatrixReadSquare">
      <summary>
            Read square Data Matrix symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.DatamatrixReadRectangle">
      <summary>
            Read rectangular Data Matrix symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.DatamatrixReadSmall">
      <summary>
            Read small Data Matrix symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.ReadCodeOneAtoH">
      <summary>
            Read Code One A to H type
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.ReadCodeOneT">
      <summary>
            Read Code One T type
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.ReadCodeOneS">
      <summary>
            Read Code One S type
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.ReadCodeOneAnyType">
      <summary>
            Read Code Any type
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneDef">
      <summary>
            CodeOne default
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneTDef">
      <summary>
            CodeOne T default
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneSDef">
      <summary>
            CodeOne S default
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneA">
      <summary>
            CodeOne A
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneB">
      <summary>
            CodeOne B
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneC">
      <summary>
            CodeOne C
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneD">
      <summary>
            CodeOne D
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneE">
      <summary>
            CodeOne E
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneF">
      <summary>
            CodeOne F
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneG">
      <summary>
            CodeOne G
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneH">
      <summary>
            CodeOne H
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneT16">
      <summary>
            CodeOne T16
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneT32">
      <summary>
            CodeOne T32
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneT48">
      <summary>
            CodeOne T48
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneS10">
      <summary>
            CodeOne S10
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneS20">
      <summary>
            CodeOne S20
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeSearchTypeFlags.CodeOneS30">
      <summary>
            CodeOne S30
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeUnit">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the unit of measure to be used when measuring barcode sizes.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeUnit.ScanlinesPerPixels">
      <summary>
            The barcode sizes are measured in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeUnit.Inches">
      <summary>
            The barcode sizes are measured in inches.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeUnit.Millimeters">
      <summary>
            The barcode sizes are measured in millimeters.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeReadFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the read processing options.
            </summary>
      <remarks>
            These values are used when searching for linear, PDF417, MicroPDF417, or Data Matrix barcodes.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.None">
      <summary>
            No read flags will be used.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.Markers">
      <summary>
            Enables the reading of barcodes that have start and end markers.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.BlockSearch">
      <summary>
            Search for barcodes by moving up or down through the rectangle until the first character is read or if there is no barcode has been found.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.UseColors">
      <summary>
            Enable searching for color barcodes. The colors are used as the exact bar and space colors for searching for the barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.ReturnCheck">
      <summary>
            When setting this bit, then the check character will return in all cases, whether Barcode1d.ErrorCheck is enabled or not.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.ReturnCorrupt">
      <summary>
            Enable the engine to return the area where an un-readable PDF417 symbol was located.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.ReturnFourPoints">
      <summary>
            Enable return of four corners and not bounding rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.DotmatrixForceInvert">
      <summary>
            Force the Data Matrix read to search for reversed color symbols even if non-inverted color symbols has been found.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.DotmatrixFastFindDisable">
      <summary>
            Disable fast find feature when reading Data Matrix symbols. Fast find is automatically disabled when reading small symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadReturnPartial">
      <summary>
            Return PDF417 data even if ECC does not succeed.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMode0">
      <summary>
            Basic Channel Mode :No transmission of symbology ID, No escape doubling, Macro PDF is illegal.ECI is illegal, Reserved code words are illegal.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMode1">
      <summary>
            Extended Channel Mode.Transmit L1 symbology ID. Escape doubling. Macro PDF is transmitted. ECI is transmitted. Reserved code words are transmitted. Used with PDF417 and MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMode2">
      <summary>
            Basic Channel Mode. Transmit L2 symbology ID. No escape doubling. Macro PDF is illegal. ECI is illegal. Reserved code words are illegal. Used with PDF417 and MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMode3Basic">
      <summary>
            Basic Channel Mode. Transmit L0 symbology ID. No escape doubling. Macro PDF is illegal. ECI is illegal. Reserved code words are illegal. Used with PDF417 and MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMode3Extended">
      <summary>
            Extended Channel Mode. Transmit L0 symbology ID. Escape doubling. Macro PDF is transmitted. ECI is transmitted in GLI format. Reserved code words transmitted. Used with PDF417 and MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.MicroPdfReadModeBasic">
      <summary>
            MicroPDF417 Basic Channel Mode. Code 128 Emulation Basic Channel Mode. Transmit ] L0, ] L3, ] L4, or ] L5 symbology ID. No escape doubling. Macro PDF is illegal. ECI is illegal. Reserved code words are illegal. Only used with MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.MicroPdfReadModeExtended">
      <summary>
            MicroPDF417 Extended Channel Mode.Code 128 Emulation Extended Channel Mode. Transmit ] L0, ] L3, ] L4, or ] L5 symbology ID. Escape doubling. Macro PDF is transmitted. ECI is transmitted in GLI format. Reserved code words transmitted. Only used with MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption0">
      <summary>
            Enable the return of the optional macro 'File Name' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption1">
      <summary>
            Enable the return of the optional macro 'Segment Count' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption2">
      <summary>
            Enable the return of the optional macro 'Time Stamp' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption3">
      <summary>
            Enable the return of the optional macro 'Sender' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption4">
      <summary>
            Enable the return of the optional macro 'Addressee' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption5">
      <summary>
            Enable the return of the optional macro 'File Size' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption6">
      <summary>
            Enable the return of the optional macro 'Checksum' field.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfReadMacroOption79Az">
      <summary>
            Enable the return of all optional macro fields 7 to 9 and A to Z.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.PdfFastRead">
      <summary>
            Enable the fast find feature when reading PDF417 symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeReadFlags.ImageTypePicture">
      <summary>
             Barcode image is a picture image taken from camera or video devices if set, otherwise, barcode image is a scanned document one.
             </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeWriteFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the write processing options.
            </summary>
      <remarks>
            These values are used when writing Data Matrix, PDF417, MicroPDF417, or QR barcodes.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.None">
      <summary>
            No write flags will be used.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.UseColors">
      <summary>
            Write color barcode. The colors are used as the exact bar and space colors for searching for the barcode.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.Transparent">
      <summary>
            Write barcodes with a transparent background. This is not recommended.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.Truncate">
      <summary>
            Write Truncated PDF417 symbols.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.MessageAppened">
      <summary>
            Write the barcode symbol in the group mode. Used for PDF and MicroPDF.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.InitializationReader">
      <summary>
            This flag is for backward compatibility and is not used anymore.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.DisableCompression">
      <summary>
            Write Data Matrix symbols without compression.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.ColumnRowAsLimits">
      <summary>
            Use column and row values as limits when a PDF or MicroPDF symbol is written.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.JustifyRight">
      <summary>
            Justify linear barcode symbols to the right side of the window described by BarcodeData.Location property.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.JustifyHorizontalCcenter">
      <summary>
            Justify linear barcode symbols to the horizontal center of the window described by BarcodeData.Location property.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.Mode128">
      <summary>
            Enable the use of the code word for Code 128 emulation when writing MicroPDF417 barcodes. Only used with MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.Linked">
      <summary>
            Indicates that the MicroPDF417 barcode is linked to a linear symbol that is printed below it. Only used with MicroPDF417.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeWriteFlags.UseXModule1d">
      <summary>
            Indicates that the barcode engine will use <see cref="P:Leadtools.Barcode.Deprecated.Barcode1d.XModule">XModule</see> as 
            the width of the smallest bar when writing Linear (1D) barcodes, if this flag is not set the engine will 
            calculate the width of the smallest bar in order to fill the specified area.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the barcode direction, used when reading linear and PDF417 barcodes.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.None">
      <summary>
            No direction flags used.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.LeftToRight">
      <summary>
            Read from left to right across the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.RightToLeft">
      <summary>
            Read from right to left across the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.TopToBottom">
      <summary>
            Read from top to bottom across the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.BottomToTop">
      <summary>
            Read from bottom to top across the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.Skew">
      <summary>
            Read in a skewed or diagonal direction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.Horizontal">
      <summary>
            Read horizontally (left to right and right to left).
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.Vertical">
      <summary>
            Read vertically (top to bottom and bottom to top).
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDirectionFlags.Diagonal">
      <summary>
            Read in a diagonal or skewed direction.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the barcode PDF417 ECC level.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.None">
      <summary>
            No ECC level used.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level0">
      <summary>
            Use ECC level 0. This uses 2 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level1">
      <summary>
            Use ECC level 0. This uses 4 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level2">
      <summary>
            Use ECC level 0. This uses 8 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level3">
      <summary>
            Use ECC level 0. This uses 16 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level4">
      <summary>
            Use ECC level 0. This uses 32 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level5">
      <summary>
            Use ECC level 0. This uses 64 code words for error correction
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level6">
      <summary>
            Use ECC level 0. This uses 128 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level7">
      <summary>
            Use ECC level 0. This uses 256 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.Level8">
      <summary>
            Use ECC level 0. This uses 512 code words for error correction.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodePdf417EccLevelFlags.UsePercent">
      <summary>
            Use the percentage to determine the ECC level.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeDataFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify barcode properties for the Linear, PDF417, MicroPDF417, DataMatrix and QR barcodes.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDataFlags.None">
      <summary>
            No flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeDataFlags.Linked">
      <summary>
            Indicates the MicroPDF417 barcode is linked to a linear symbol printed below it.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the barcode justification for PDF417/MicroPDF417 barcodes.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags.None">
      <summary>
            No justification flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags.Right">
      <summary>
            Justifies the barcode symbol to the right side of the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags.HorizontalCenter">
      <summary>
            Justifies the barcode symbol in the horizontal center of the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags.Bottom">
      <summary>
            Justifies the barcode symbol to the bottom side of the image.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeJustifyFlags.VerticalCenter">
      <summary>
            Justifies the barcode symbol in the vertical center of the image.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.Deprecated.BarcodeQrEccLevel">
      <summary>
        <strong>Obsolete: </strong>
            Flags that identify the QR ECC level.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeQrEccLevel.LevelL">
      <summary>
            QR Code ECC Level 'L', lowest capability.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeQrEccLevel.LevelM">
      <summary>
            QR Code ECC Level 'M', standard capability.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeQrEccLevel.LevelQ">
      <summary>
            QR Code ECC Level 'Q', high reliability.
            </summary>
    </member>
    <member name="F:Leadtools.Barcode.Deprecated.BarcodeQrEccLevel.LevelH">
      <summary>
            QR Code ECC Level 'H', maximum reliability.
            </summary>
    </member>
    <member name="T:Leadtools.Barcode.AztecBarcodeData">
      <summary>
            Contains the data for a single Aztec barcode.
            </summary>
      <keywords>2D Barcode (Aztec)|Aztec (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AztecBarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add 
            specific data that can be read or written
            when using Aztec barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a Aztec (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.Aztec</see>), the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
            <see cref="T:Leadtools.Barcode.AztecBarcodeData" />
            object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>You can can perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.AztecBarcodeData" /> and then 
            examine the extra data properties associated with it.</para>
        <para>Aztec read options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is 
            used to write a barcode to an image. This method accepts the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            object. To write a Aztec barcode, create an instance of <see cref="T:Leadtools.Barcode.AztecBarcodeData" />
            and fill the required parameters, then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>Aztec write options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> class.</para>
        <para>You can use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">
            BarcodeData.CreateDefaultBarcodeData</see>
            method to create a new instance of <see cref="T:Leadtools.Barcode.AztecBarcodeData" /> that contains default parameters ready for writing to an image:
            </para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
            Dim AztecData As AztecBarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Aztec), AztecBarcodeData)
            </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
            AztecBarcodeData AztecData = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Aztec) as AztecBarcodeData;
            </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
            This example writes a couple of Aztec barcodes with different options to an image and then reads them back.
            <!--AztecBarcodeData--></example>
      <java>
        <pre>public class AztecBarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTAztecBarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.AztecBarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following member is initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.</para>
      </example>
      <java>
        <pre>public AztecBarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeData.Clone">
      <summary>
            Creates an exact copy of this Aztec barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.AztecBarcodeData" /> cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> 
            to clone the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
            and will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>. 
            Attempting to set this property to any other symbology value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.AztecBarcodeSymbolModel">
      <summary>
            Specifies the Aztec Code symbol size.
            </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.SymbolModel">AztecBarcodeWriteOptions.SymbolModel</see> property to specify 
            the Aztec barcode's symbol size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum AztecBarcodeSymbolModel</pre>
      </java>
      <objectivec>
        <pre>enum LTAztecBarcodeSymbolModel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.AutoSize">
      <summary>
            (0)<para>Aztec Auto size</para></summary>
      <java>
        <pre>AUTOSIZE</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_AutoSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Compact1">
      <summary>
            (1)<para>Aztec Compact 1</para></summary>
      <java>
        <pre>COMPACT1</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Compact1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Compact2">
      <summary>
            (2)<para>Aztec Compact 2</para></summary>
      <java>
        <pre>COMPACT2</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Compact2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Compact3">
      <summary>
            (3)<para>Aztec Compact 3</para></summary>
      <java>
        <pre>COMPACT3</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Compact3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Compact4">
      <summary>
            (4)<para>Aztec Compact 4</para></summary>
      <java>
        <pre>COMPACT4</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Compact4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full1">
      <summary>
            (5)<para>Aztec Full 1</para></summary>
      <java>
        <pre>FULL1</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full2">
      <summary>
            (6)<para>Aztec Full 2</para></summary>
      <java>
        <pre>FULL2</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full3">
      <summary>
            (7)<para>Aztec Full 3</para></summary>
      <java>
        <pre>FULL3</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full4">
      <summary>
            (8)<para>Aztec Full 4</para></summary>
      <java>
        <pre>FULL4</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full5">
      <summary>
            (9)<para>Aztec Full 5</para></summary>
      <java>
        <pre>FULL5</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full6">
      <summary>
            (10)<para>Aztec Full 6</para></summary>
      <java>
        <pre>FULL6</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full6</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full7">
      <summary>
            (11)<para>Aztec Full 7</para></summary>
      <java>
        <pre>FULL7</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full7</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full8">
      <summary>
            (12)<para>Aztec Full 8</para></summary>
      <java>
        <pre>FULL8</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full8</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full9">
      <summary>
            (13)<para>Aztec Full 9</para></summary>
      <java>
        <pre>FULL9</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full9</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full10">
      <summary>
            (14)<para>Aztec Full 10</para></summary>
      <java>
        <pre>FULL10</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full11">
      <summary>
            (15)<para>Aztec Full 11</para></summary>
      <java>
        <pre>FULL11</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full11</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full12">
      <summary>
            (16)<para>Aztec Full 12</para></summary>
      <java>
        <pre>FULL12</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full12</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full13">
      <summary>
            (17)<para>Aztec Full 13</para></summary>
      <java>
        <pre>FULL13</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full13</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full14">
      <summary>
            (18)<para>Aztec Full 14</para></summary>
      <java>
        <pre>FULL14</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full14</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full15">
      <summary>
            (19)<para>Aztec Full 15</para></summary>
      <java>
        <pre>FULL15</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full15</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full16">
      <summary>
            (20)<para>Aztec Full 16</para></summary>
      <java>
        <pre>FULL16</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full16</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full17">
      <summary>
            (21)<para>Aztec Full 17</para></summary>
      <java>
        <pre>FULL17</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full17</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full18">
      <summary>
            (22)<para>Aztec Full 18</para></summary>
      <java>
        <pre>FULL18</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full18</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full19">
      <summary>
            (23)<para>Aztec Full 19</para></summary>
      <java>
        <pre>FULL19</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full19</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full20">
      <summary>
            (24)<para>Aztec Full 20</para></summary>
      <java>
        <pre>FULL20</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full20</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full21">
      <summary>
            (25)<para>Aztec Full 21</para></summary>
      <java>
        <pre>FULL21</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full21</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full22">
      <summary>
            (26)<para>Aztec Full 22</para></summary>
      <java>
        <pre>FULL22</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full22</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full23">
      <summary>
            (27)<para>Aztec Full 23</para></summary>
      <java>
        <pre>FULL23</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full23</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full24">
      <summary>
            (28)<para>Aztec Full 24</para></summary>
      <java>
        <pre>FULL24</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full24</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full25">
      <summary>
            (29)<para>Aztec Full 25</para></summary>
      <java>
        <pre>FULL25</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full25</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full26">
      <summary>
            (30)<para>Aztec Full 26</para></summary>
      <java>
        <pre>FULL26</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full26</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full27">
      <summary>
            (31)<para>Aztec Full 27</para></summary>
      <java>
        <pre>FULL27</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full27</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full28">
      <summary>
            (32)<para>Aztec Full 28</para></summary>
      <java>
        <pre>FULL28</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full28</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full29">
      <summary>
            (33)<para>Aztec Full 29</para></summary>
      <java>
        <pre>FULL29</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full29</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full30">
      <summary>
            (34)<para>Aztec Full 30</para></summary>
      <java>
        <pre>FULL30</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full30</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full31">
      <summary>
            (35)<para>Aztec Full 31</para></summary>
      <java>
        <pre>FULL31</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full31</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AztecBarcodeSymbolModel.Full32">
      <summary>
            (36)<para>Aztec Full 32</para></summary>
      <java>
        <pre>FULL32</pre>
      </java>
      <objectivec>
        <pre>LTAztecBarcodeSymbolModel_Full32</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.AztecBarcodeReadOptions">
      <summary>
            Contains the extra options to use when reading Aztec barcodes.
            </summary>
      <keywords>2D Barcode (Aztec)|Aztec (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> class is used to control the options when reading 
            Aztec barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
            (or group of common symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>. Then
            change the members of the returned <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> by casting it from 
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" />.</para>
        <para>It is also possible to create an instance of the <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> class and use it 
            directly in 
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
            a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> contains these Aztec 
            barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.AztecBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class AztecBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTAztecBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
            BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public AztecBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies                   supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.AztecBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.AztecBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.AztecBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="T:Leadtools.Barcode.AztecBarcodeWriteOptions">
      <summary>
            Contains the extra options to use when writing Aztec barcodes.
            </summary>
      <keywords>2D Barcode (Aztec)|Aztec (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> class is used to control the options when writing 
            Aztec barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
            symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>. You can then change the members of the returned 
            <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to 
            <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
        <para>You can also create an instance of <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> class and use it directly in the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input 
            parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing 
                 a barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                 to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.FriendlyName">BarcodeOptions.FriendlyName</see>
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> 
            contains these Aztec barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRune" />
            </term>
            <description>
              <para>Write Aztec Rune symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRuneValue" />
            </term>
            <description>
              <para>The value that will be encoded when writing Aztec Rune symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.ErrorCorrectionRate" />
            </term>
            <description>
              <para>The minimum ratio of error detection and correction codewords to use when writing Aztec Code.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.QuietZone" />
            </term>
            <description>
              <para>The number of free of all marking pixels that will be added per side when writing Aztec Code.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>The Aztec Code symbol size to use when writing Aztec Code.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>Size of the smallest module when writing in thousands of an inch (0.001).</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.AztecBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class AztecBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTAztecBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRune" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRuneValue" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.ErrorCorrectionRate" />
            </term>
            <description>
              <para>23</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.QuietZone" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.AutoSize</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public AztecBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Aztec</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by 
            the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.AztecBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.AztecBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRune">
      <summary>
            Gets or sets a value indicating whether to write Aztec Rune barcode or not.
            </summary>
      <value>
        <strong>true</strong> to write Aztec Rune symbols. Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
      <remarks>
        <para> Aztec Rune are symbols without data layers whrere only a single value between 0 and 255 could be encoded </para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public bool getAztecRune()
public void setAztecRune(bool value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTAztecRune aztecRune;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.AztecRuneValue">
      <summary>
            Gets or sets a value to be encoded when writing an Aztec Rune barcode.
            </summary>
      <value>
            An <see cref="T:System.Int32" /> to be encoded when writing an Aztec Rune symbol. Must be a value greater than or equal to 0 and less than or equal 255. The default value is 0.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getAztecRuneValue()
public void setAztecRuneValue(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTAztecRuneValue aztecRuneValue;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.ErrorCorrectionRate">
      <summary>
            Gets or sets the error detection and correction ratio when writing an Aztec barcode.
            </summary>
      <value>
            An <see cref="T:System.Int32" /> to be used when writing an Aztec barcode. Must be a value greater than or equal to 5 and less than or equal 95. The default value is 23.
            </value>
      <remarks>
        <para> This value indicates the minimum ratio of codewords to be used as error detection and correction codewords, knowing that any extra codewords after encoding the message will be used as error detection and correction codewords.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getErrorCorrectionRate()
public void setErrorCorrectionRate(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int errorCorrectionRate;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.QuietZone">
      <summary>
            Gets or sets the quiet zone value when writing an Aztec barcode.
            </summary>
      <value>
            An <see cref="T:System.Int32" /> to be used when writing an Aztec barcode. The default value is 0.
            </value>
      <remarks>
        <para>The quiet zone is optional.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getQuietZone()
public void setQuietZone(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int quietZone;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.SymbolModel">
      <summary>
            Gets or sets the chosen symbol size when writing an Aztec barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel" /> enumeration member that determines the symbol size to use when when writing an Aztec barcode. The default value is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.AutoSize</see>.
            </value>
      <remarks>
        <para>The smallest Aztec Code symbol is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.Compact1</see> (15x15 modules square), and the largest is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.Full32</see>(151 x 151). When the default value <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">AztecBarcodeSymbolModel.AutoSize</see> is used the encoder will choose a symbol size based on the size of input message and the ratio of error detection and correction</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public AztecBarcodeSymbolModel getSymbolModel()
public void setSymbolModel(AztecBarcodeSymbolModel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) AztecBarcodeSymbolModel symbolModel;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.AztecBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing an Aztec barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a Aztec barcode in a 
            thousandth of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.AztecBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.AztecBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.DatamatrixBarcodeData">
      <summary>
             Contains the data for a single Datamatrix barcode.
             </summary>
      <keywords>2D Barcode (DataMatrix)|DataMatrix (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add 
             specific data that can be read or written
             when using Datamatrix barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a Datamatrix (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
             BarcodeSymbology.Datamatrix</see>), the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
             <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
             object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>You can can perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /> and then 
             examine the extra data properties associated with it.</para>
        <para>In addition to all the data members returned as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, 
             this class adds the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize" /> - An <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration member that specifies
             the symbol size of the Datamatrix barcode.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other Datamatrix read options not related to the barcode data can be 
             set using the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is 
             used to write a barcode to an image. This method accepts the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> 
             object. To write a Datamatrix barcode, create an instance of <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
             and fill the required parameters, then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>In addition to all the data members that must be set as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, 
             also specify the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize" /> - An <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration member that specifies
             the symbol size of the Datamatrix barcode.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other Datamatrix write options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> class.</para>
        <para>You can use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">
             BarcodeData.CreateDefaultBarcodeData</see>
             method to create a new instance of <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /> that contains default parameters ready for writing to an image:
             </para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim datamatrixData As DatamatrixBarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Datamatrix), DatamatrixBarcodeData)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             DatamatrixBarcodeData datamatrixData = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Datamatrix) as DatamatrixBarcodeData;
             </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example writes a couple of Datamatrix barcodes with different options to an image and then reads them back.
             <!--DatamatrixBarcodeData--></example>
      <java>
        <pre>public class DatamatrixBarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTDatamatrixBarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.AutoSize</see>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <java>
        <pre>public DatamatrixBarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeData.Clone">
      <summary>
            Creates an exact copy of this Datamatrix barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" /> cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> 
            to clone the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
            and will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>. 
            Attempting to set this property to any other symbology value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize">
      <summary>
            Gets or sets the Datamatrix barcode symbol size.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize" /> enumeration member that specifies the Datamatrix barcode 
            symbol size. The default value is <see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.AutoSize</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize" /> of a Datamatrix barcode controls how much data the barcode can hold. 
            Generally, you should only be concerned with the value of this
            property when writing barcodes. LEADTOOLS will automatically find the correct symbol and data size 
            from the barcode itself and populate this property and the data
            with the correct value. Refer to <see cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">
            Datamatrix Barcodes in LEADTOOLS</see> for more information.</para>
        <para>In addition to the above, the following symbol sizes can be used when writing a Datamatrix barcode:</para>
        <list type="table">
          <listheader>
            <term>Symbol size</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Auto size (<see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.AutoSize</see>)</term>
            <description>
              <para>Uses the minimum required size based on the data inside the barcode (the data set using
            <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
          <item>
            <term>Fit to bounds (<see cref="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">DatamatrixBarcodeSymbolSize.FitToBounds</see>)</term>
            <description>
              <para>Uses as much size to fit the data inside <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>.</para>
            </description>
          </item>
        </list>
        <para>You can only use the above special Datamatrix barcode symbol sizes when writing a barcode, 
            when reading the Datamatrix barcode back,
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize" /> will be set to one of the other constant values.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <java>
        <pre>
public DatamatrixBarcodeSymbolSize getSymbolSize()
public void setSymbolSize(DatamatrixBarcodeSymbolSize value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTDatamatrixBarcodeSymbolSize symbolSize;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.DatamatrixBarcodeSymbolSize">
      <summary>
             Specifies the Datamatrix symbol size.
             </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.DatamatrixBarcodeData.SymbolSize">DatamatrixBarcodeData.SymbolSize</see> 
             property to specify the Datamatrix barcode
             symbol size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <java>
        <pre>public enum DatamatrixBarcodeSymbolSize</pre>
      </java>
      <objectivec>
        <pre>enum LTDatamatrixBarcodeSymbolSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.AutoSize">
      <summary>
            (0)<para>Use the minimum required size based on the data inside the barcode
            (the data set using <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>). This value is valid only when 
            writing a Datamatrix barcode.</para></summary>
      <java>
        <pre>AUTO_SIZE</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_AutoSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size10X10">
      <summary>
            (1)<para>10 x 10</para></summary>
      <java>
        <pre>SIZE10X10</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size10X10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size12X12">
      <summary>
            (2)<para>12 X 12</para></summary>
      <java>
        <pre>SIZE12X12</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size12X12</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size14X14">
      <summary>
            (3)<para>14 X 14</para></summary>
      <java>
        <pre>SIZE14X14</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size14X14</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size16X16">
      <summary>
            (4)<para>16 X 16</para></summary>
      <java>
        <pre>SIZE16X16</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size16X16</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size18X18">
      <summary>
            (5)<para>18 X 18</para></summary>
      <java>
        <pre>SIZE18X18</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size18X18</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size20X20">
      <summary>
            (6)<para>20 X 20</para></summary>
      <java>
        <pre>SIZE20X20</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size20X20</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size22X22">
      <summary>
            (7)<para>22 X 22</para></summary>
      <java>
        <pre>SIZE22X22</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size22X22</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size24X24">
      <summary>
            (8)<para>24 X 24</para></summary>
      <java>
        <pre>SIZE24X24</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size24X24</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size26X26">
      <summary>
            (9)<para>26 X 26</para></summary>
      <java>
        <pre>SIZE26X26</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size26X26</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size32X32">
      <summary>
            (10)<para>32 X 32</para></summary>
      <java>
        <pre>SIZE32X32</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size32X32</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size36X36">
      <summary>
            (11)<para>36 X 36</para></summary>
      <java>
        <pre>SIZE36X36</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size36X36</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size40X40">
      <summary>
            (12)<para>40 X 40</para></summary>
      <java>
        <pre>SIZE40X40</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size40X40</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size44X44">
      <summary>
            (13)<para>44 X 44</para></summary>
      <java>
        <pre>SIZE44X44</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size44X44</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size48X48">
      <summary>
            (14)<para>48 X 48</para></summary>
      <java>
        <pre>SIZE48X48</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size48X48</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size52X52">
      <summary>
            (15)<para>52 X 52</para></summary>
      <java>
        <pre>SIZE52X52</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size52X52</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size64X64">
      <summary>
            (16)<para>64 X 64</para></summary>
      <java>
        <pre>SIZE64X64</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size64X64</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size72X72">
      <summary>
            (17)<para>72 X 72</para></summary>
      <java>
        <pre>SIZE72X72</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size72X72</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size80X80">
      <summary>
            (18)<para>80 X 80</para></summary>
      <java>
        <pre>SIZE80X80</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size80X80</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size88X88">
      <summary>
            (19)<para>88 X 88</para></summary>
      <java>
        <pre>SIZE88X88</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size88X88</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size96X96">
      <summary>
            (20)<para>96 X 96</para></summary>
      <java>
        <pre>SIZE96X96</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size96X96</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size104X104">
      <summary>
            (21)<para>104 X 104</para></summary>
      <java>
        <pre>SIZE104X104</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size104X104</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size120X120">
      <summary>
            (22)<para>120 X 120</para></summary>
      <java>
        <pre>SIZE120X120</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size120X120</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size132X132">
      <summary>
            (23)<para>132 X 132</para></summary>
      <java>
        <pre>SIZE132X132</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size132X132</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size144X144">
      <summary>
            (24)<para>144 X 144</para></summary>
      <java>
        <pre>SIZE144X144</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size144X144</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size8X18">
      <summary>
            (25)<para>8 X 18</para></summary>
      <java>
        <pre>SIZE8X18</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size8X18</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size8X32">
      <summary>
            (26)<para>8 X 32</para></summary>
      <java>
        <pre>SIZE8X32</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size8X32</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size12X26">
      <summary>
            (27)<para>12 X 26</para></summary>
      <java>
        <pre>SIZE12X26</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size12X26</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size12X36">
      <summary>
            (28)<para>12 X 36</para></summary>
      <java>
        <pre>SIZE12X36</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size12X36</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size16X36">
      <summary>
            (29)<para>16 X 36</para></summary>
      <java>
        <pre>SIZE16X36</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size16X36</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.Size16X48">
      <summary>
            (30)<para>16 X 48</para></summary>
      <java>
        <pre>SIZE16X48</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_Size16X48</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.DatamatrixBarcodeSymbolSize.FitToBounds">
      <summary>
            (31)<para>Use as much size to fit the data inside <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>. 
            This value is valid only when writing a Datamatrix barcode.</para></summary>
      <java>
        <pre>FIT_TO_BOUNDS</pre>
      </java>
      <objectivec>
        <pre>LTDatamatrixBarcodeSymbolSize_FitToBounds</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions">
      <summary>
             Contains the extra options to use when reading Datamatrix barcodes.
             </summary>
      <keywords>2D Barcode (DataMatrix)|DataMatrix (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> class is used to control the options when reading 
             Datamatrix barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
             (or group of common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>. Then
             change the members of the returned <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
        <para>It is also possible to create an instance of the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> class and use it 
             directly in 
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
             a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> contains these Datamatrix 
             barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>Enable internal auto preprocessing of the image data if no Datamatrix barcode was found</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableInvertedSymbols" />
            </term>
            <description>
              <para>Forces the Datamatrix reader to search for both inverted and normal (non-inverted) symbols</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>Fast barcode reading (recommended). It is suitable for most barcode qualities either good or poor</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.ReadSquareSymbolsOnly" />
            </term>
            <description>
              <para>Enable reading square symbols only. Otherwise, read rectangular and square symbols</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableSmallSymbols" />
            </term>
            <description>
              <para>Enables reading small symbols that are 20 to 40 pixels</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class DatamatrixBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTDatamatrixBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
            BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>
                <strong>false</strong> (for maximum performance)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableInvertedSymbols" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>
                <strong>true</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.ReadSquareSymbolsOnly" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableSmallSymbols" />
            </term>
            <description>
              <para>
                <strong>true</strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public DatamatrixBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies                   supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.DatamatrixBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableDoublePass">
      <summary>
            Gets or sets a value indicating whether to enable the double pass setting when reading Datamatrix symbols.
            </summary>
      <value>
        <strong>true</strong> to use double pass when reading Datamatrix symbols. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When reading 2D barcodes, LEADTOOLS can perform internal auto preprocessing on the image and try 
            again if the engine cannot detect the barcode required. This may take
            extra processing and increase the barcode detection time. Therefore, it is not recommended to always have 
            <strong>EnableDoublePass</strong> 
            enabled except in certain situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is reading barcodes of this type exclusively. For example, 
              a dedicated Datamatrix reader. Reading the barcodes always is more
            important than recognition speed.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The application uses barcode detection on a server. In this case, the time spent on 
              the actual barcode detection is most probably less than the time required to send the image to the server and 
              get the result back due to network latency. Thus it makes sense to turn this feature on in this situation.
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>The images provided may have a small resolution (DPI) or known to come from a source 
              that does not provide clean images always, for example, a Fax machine or a Scanner. Enabling double pass here 
              ensures that you can read the barcodes regardless of the input's image quality.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The LEADTOOLS .NET C# and VB Barcode demo's leave the option disabled by default. 
              When the user tries to read a barcode of this type and the engine
            cannot find it, it will then ask the user if they want to turn this feature on and try again. 
            An approach like that (or an automated one: read, if fails, enable and read again) can
            also be used.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableDoublePass()
public void setEnableDoublePass(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableDoublePass;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableInvertedSymbols">
      <summary>
            Gets or sets a value indicating whether the Datamatrix reader will search for both inverted and normal (non-inverted) 
            symbols.
            </summary>
      <value>
        <strong>true</strong> to force the Datamatrix engine to search for both inverted and normal (non-inverted) 
            symbols. Otherwise, <strong>false</strong>.
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>The Datamatrix reader engine can automatically read inverted symbols. An inverted symbol is one that has white 
            foreground color and black background for example.</para>
        <para>Notice that the colors to search for when reading Datamatrix barcodes can be set using 
            <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" /> and <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />. When
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableInvertedSymbols" /> is <strong>true</strong>, the engine will use the two colors specified and 
            then automatically flip them and try again if it cannot find the
            symbol.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableInvertedSymbols()
public void setEnableInvertedSymbols(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableInvertedSymbols;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableFastMode">
      <summary>
            Gets or sets a value indicating whether fast Datamatrix reading mode is enabled.
            </summary>
      <value>
        <strong>true</strong> if fast Datamatrix reading mode is enabled. Otherwise, <strong>false</strong>. 
            Default value is <strong>true</strong>.</value>
      <remarks>
        <para>Disabling fast mode can sometimes help recognize broken or not very clear datamatrix symbols.</para>
        <para>Fast read mode is automatically disabled when reading small symbols. In other words, the value of 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableFastMode" /> is ignored when
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableSmallSymbols" /> is set to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableFastMode()
public void setEnableFastMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableFastMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.ReadSquareSymbolsOnly">
      <summary>
            Gets or sets a value indicating whether square or square and rectangular Datamatrix symbols are detected.
            </summary>
      <value>
        <strong>true</strong> to enable reading square Datamatrix symbols only (rectangular symbols are not detected). 
            Otherwise <strong>false</strong> (both
            square and rectangular symbols are detected). The default value is <strong>false</strong>.</value>
      <remarks>
        <para>LEADTOOLS can detect both square and rectangular symbols. Datamatrix symbols usually have a square shape only. 
            If you have a requirement to detect strict square shapes only, then
            set the value of <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.ReadSquareSymbolsOnly" /> to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadSquareSymbolsOnly()
public void setReadSquareSymbolsOnly(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readSquareSymbolsOnly;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableSmallSymbols">
      <summary>
            Gets or sets a value that indicate whether to detect small Datamatrix symbols that are 20 to 40 pixels in size.
            </summary>
      <value>
        <strong>true</strong> to detect small Datamatrix symbols that are 20 to 40 pixels in size. 
            Otherwise, <strong>false</strong>. The default value is <strong>true</strong>.</value>
      <remarks>
        <para>Set <see cref="P:Leadtools.Barcode.DatamatrixBarcodeReadOptions.EnableSmallSymbols" /> to <strong>false</strong> to increase barcode detection speed if you 
            are certain you will not try to detect very small Datamatrix symbols
            that are 20 to 40 pixels in size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableSmallSymbols()
public void setEnableSmallSymbols(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableSmallSymbols;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions">
      <summary>
             Contains the extra options to use when writing Datamatrix barcodes.
             </summary>
      <keywords>2D Barcode (DataMatrix)|DataMatrix (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> class is used to control the options when writing 
             Datamatrix barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method passing 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>. You can then change the members of the returned 
             <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to 
             <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
        <para>You can also create an instance of <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input 
             parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing 
                  a barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                  to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see></para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> 
             contains these Datamatrix barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>Horizontal alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>Vertical alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.DisableCompression" />
            </term>
            <description>
              <para>Write data into the symbol without compression. Two bytes must be added to the data, then the data is written 
             byte-for-byte to the symbol.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" />
            </term>
            <description>
              <para>Group total for Datamatrix code symbols</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />
            </term>
            <description>
              <para>Group number for Datamatrix code symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" />
            </term>
            <description>
              <para>The low byte of the Datamatrix file ID number. Used when writing a group of related symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" />
            </term>
            <description>
              <para>The high byte of the Datamatrix file ID number. Used when writing a group of related symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>Size of the smallest module when writing in thousands of an inch (0.001).</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class DatamatrixBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTDatamatrixBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.DisableCompression" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" />
            </term>
            <description>
              <para>1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" />
            </term>
            <description>
              <para>1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public DatamatrixBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Datamatrix</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by 
            the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.HorizontalAlignment">
      <summary>
            Gets or sets a value indicating the horizontal alignment to use when fitting this barcode inside 
            the destination bounds.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the horizontal alignment 
            to use when fitting this barcode inside the destination bounds.
            The default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined 
            by the output rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds 
            can have a special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can set to determine whether the resulting 
            barcode is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getHorizontalAlignment()
public void setHorizontalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment horizontalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.VerticalAlignment">
      <summary>
            Gets or sets a value indicating the vertical alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the vertical alignment to use when 
            fitting this barcode inside the destination bounds.
            Default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output 
            rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have 
            a special meaning. For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing 
            Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can set to determine whether the resulting
            barcode is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getVerticalAlignment()
public void setVerticalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment verticalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.DisableCompression">
      <summary>
            Gets or sets a value that indicates whether the Datamatrix symbol is written without compression.
            </summary>
      <value>
        <strong>true</strong> to write the Datamatrix symbol without compression. Otherwise, <strong>false</strong>. 
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When compression is disabled, two control bytes are added to the beginning of the data and then the data 
            is written byte-for-byte to the symbol</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getDisableCompression()
public void setDisableCompression(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL disableCompression;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber">
      <summary>
            Gets or sets a value that indicates the group number to use when writing Datamatrix symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the group number to use when writing Datamatrix symbols. 
            Must be a value greater than or equal to 0 and less than or equal to 16.
            Default value is 0.</value>
      <remarks>
        <para>Datamatrix barcodes support the concept of groups of related symbols. Use the following properties 
            to write a group of related symbols:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" /> - Specifies the total number of Datamatrix symbols in the group 
            specified by <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />. The maximum number of symbols in a
            group is 16.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" /> - Specifies a group of Datamatrix symbols. The maximum number of symbols in a 
            group is 16. Use this property to specify the order of each barcode in a group so that when you read each barcode's 
            data, you can put large pieces of data back together in the correct order.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" /> - Specifies the low byte of the file ID number. 
            The number must range from 1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" /> - Specifies the high byte of the file ID number. The number must range 
            from 1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGroupNumber()
public void setGroupNumber(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int groupNumber;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal">
      <summary>
            Gets or sets a value that indicates the group total to use when writing Datamatrix symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the total groups to use when writing Datamatrix symbols. 
            The value must be greater than or equal to 0 and less than or equal to 16.
            Default value is 0.</value>
      <remarks>
        <para>Datamatrix barcodes support the concept of groups of related symbols. Use the following properties to write 
            a group of related symboles:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" /> - Specifies the total number of Datamatrix symbols in the group specified by 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />. The maximum number of symbols in a group is 16.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" /> - Specifies a group of Datamatrix symbols. The maximum number of symbols in a group 
            is 16. Use this property to specify the order of each barcode in a group so that when you read each barcode's data, 
            you can put the large pieces of data back together in the correct order.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" /> - Specifies the low byte of the file ID number. The number must range from 
            1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" /> - Specifies the high byte of the file ID number. The number must range 
            from 1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGroupTotal()
public void setGroupTotal(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int groupTotal;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte">
      <summary>
            Gets or sets a value that indicate the low byte of the file ID number to use when writing Datamatrix symbols.
            </summary>
      <value>A <see cref="T:System.Byte" /> that indicates the low byte of the file ID number to use when writing Datamatrix symbols. 
            Must be a value greater to or equal to 1 and less than or equal to 254.
            Default value is 1.</value>
      <remarks>
        <para>Datamatrix barcodes support the concept of a groups of related symbols. Use the following properties to write 
            a group of related symbols:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" /> - Specifies the total number of Datamatrix symbols in the group specified by 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />. The maximum number of symbols in a group is 16.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" /> - Specifies a group of Datamatrix symbols. The maximum number of symbols in a 
            group is 16. Use this property to specify the order of each barcode in a group so that when you read each barcode's 
            data, you can put the large piece of data back together in the correct order.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" /> - Specifies the low byte of the file ID number. The number must range 
            from 1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" /> - Specifies the high byte of the file ID number. The number must range 
            from 1 to 254. Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public byte getFileIdNumberLowByte()
public void setFileIdNumberLowByte(byte value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unsigned char fileIdNumberLowByte;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte">
      <summary>
            Gets or sets a value that indicates the high byte of the file ID number to use when writing Datamatrix symbols.
            </summary>
      <value>A <see cref="T:System.Byte" /> that indicates the high byte of the file ID number to use when writing Datamatrix symbols. 
            Must be a value greater to or equal to 1 and less than or equal to 254.
            Default value is 1.</value>
      <remarks>
        <para>Datamatrix barcodes support the concept of groups of related symbols. Use the following properties 
            to write a group of related symbols:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupTotal" /> - Specifies the total number of Datamatrix symbols in the group specified by 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" />. The maximum number of symbols in a group is 16.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.GroupNumber" /> - Specifies a group of Datamatrix symbols. The maximum number of symbols in a group is 16. 
            Use this property to specify the order of each barcode in a group; hence, when you read each barcode's data, 
            you can put large pieces of data back together in the correct order.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberLowByte" /> - Specifies the low byte of the file ID number. The number must range from 1 to 254. 
            Use this as an ID for the group since an image can
            have multiple groups.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.FileIdNumberHighByte" /> - Specifies the high byte of the file ID number. The number must range from 1 to 254. 
            Use this as an ID for the group since an image can have multiple groups.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public byte getFileIdNumberHighByte()
public void setFileIdNumberHighByte(byte value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unsigned char fileIdNumberHighByte;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a Datamatrix barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a Datamatrix barcode in a 
            thousandth of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.DatamatrixBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding">
      <summary>
             Australian Post 4-State barcode Customer Information Field (CIF) encoding/decoding table
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding" /> is used as the type for the
             <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.AustralianPostCIFEncoding">FourStateBarcodeReadOptions.AustralianPostCIFEncoding</see> and
             <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.AustralianPostCIFEncoding">FourStateBarcodeWriteOptions.AustralianPostCIFEncoding</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum AustralianPost4StateBarcodeCIFEncoding</pre>
      </java>
      <objectivec>
        <pre>enum LTAustralianPost4StateBarcodeCIFEncoding</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding.CTable">
      <summary>
            (0)<para>Use the C-Table for customer information field (CIF)</para></summary>
      <java>
        <pre>C_TABLE</pre>
      </java>
      <objectivec>
        <pre>LTAustralianPost4StateBarcodeCIFEncoding_CTable</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding.NTable">
      <summary>
            (1)<para>Use the N-Table to encode/decode customer information field (CIF)</para></summary>
      <java>
        <pre>N_TABLE</pre>
      </java>
      <objectivec>
        <pre>LTAustralianPost4StateBarcodeCIFEncoding_NTable</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding.NoEncoding">
      <summary>
            (2)<para>Do not encode or decode customer information field (CIF) bars; use them as they are. 
            Data should be in 4-State.</para></summary>
      <java>
        <pre>NO_ENCODING</pre>
      </java>
      <objectivec>
        <pre>LTAustralianPost4StateBarcodeCIFEncoding_NoEncoding</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.FourStateBarcodeReadOptions">
      <summary>
             Contains the extra options to use when reading 4-State post barcodes such as USPS, Royal Mail and Australian Post.
             </summary>
      <keywords>Barcode,4-State|Barcode,Australian Post|Barcode,Royal Mail|Barcode,RM4SCC|Barcode,USPS|Barcode,USPS OneCode|Barcode USPS 4-State</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> class is used to control the options when reading 4-State 
             post barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">
             BarcodeReader.GetDefaultOptions</see> method passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>
              </para>
            </description>
          </item>
        </list>
        <para>Change the members of the returned <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> class by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
        <para>Create an instance of <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
             a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>,
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, the <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> 
             contains these 4-State post barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>The number of scanned lines per column to skip when reading a barcode</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>The error check digit is returned as part of the barcode data</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.AustralianPostCIFEncoding" />
            </term>
            <description>
              <para>Australian Post Customer Information Field (CIF) Decoding table</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <example>
             This example writes a few 4-State barcodes with different options to an image and then reads them back.
             <!--FourStateBarcodeReadOptions--></example>
      <java>
        <pre>public class FourStateBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTFourStateBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
            BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>9</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>
                <strong>
                  <see cref="T:Leadtools.Barcode.BarcodeReturnCheckDigit">BarcodeReturnCheckDigit.Default</see>
                </strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.AustralianPostCIFEncoding" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding">AustralianPost4StateBarcodeCIFEncoding.CTable</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public FourStateBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) of this <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be 
            called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.FourStateBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use when 
            searching for barcodes. The default value
            is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image, horizontally or vertically. 
            By default, the reader will only search for barcodes horizontally as it has performance advantages. 
            Alter this by changing the appropriate read barcode options to specify vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.Granularity">
      <summary>
            Gets or sets a value that indicate the number of scanned lines per column to skip when reading a barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the number of scanned lines per column to skip when reading a barcode. 
            Must be a value greater to or equal to 1. The default value is 9.</value>
      <remarks>
        <para>A value of 9 means that each tenth line will be scanned when looking for a barcode. 
            Scanning every line will slow the search process while skipping too many lines
            may skip over the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGranularity()
public void setGranularity(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int granularity;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.ReturnCheckDigit">
      <summary>
            Gets or sets a value that indicates whether the error check digit is returned as part of the barcode data.
            </summary>
      <value>Value indicating whether the error check digit is returned as part of the barcode data. The default value is <strong>Default</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.FourStateBarcodeReadOptions.ReturnCheckDigit" /> to <strong>Yes</strong>, then this digit is 
            returned as part of barcode data (can be retrieved with <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> 
            or <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>). You must then parse the data and extract error check digit
            from the rest of the data based on the barcode symbology standard.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeReturnCheckDigit getReturnCheckDigit()
public void setReturnCheckDigit(BarcodeReturnCheckDigit value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeReturnCheckDigit returnCheckDigit;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeReadOptions.AustralianPostCIFEncoding">
      <summary>
            Gets or sets a value that indicates the table to use when decoding the Australian Post Customer Information Field (CIF).
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding" /> enumeration member that indicates the table to use when 
            decoding the Australian Post Customer Information Field (CIF).
            The default value is <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding">AustralianPost4StateBarcodeCIFEncoding.CTable</see>.</value>
      <remarks>
        <para>The value of this property is only used when reading <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>, 
            it is ignored when reading the other symbologies supported by this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public AustralianPost4StateBarcodeCIFEncoding getAustralianPostCIFEncoding()
public void setAustralianPostCIFEncoding(AustralianPost4StateBarcodeCIFEncoding value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTAustralianPost4StateBarcodeCIFEncoding australianPostCIFEncoding;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.FourStateBarcodeWriteOptions">
      <summary>
             Contains the extra options to use when writing 4-State post barcodes such as USPS, Royal Mail ,and Australian Post.
             </summary>
      <keywords>Barcode,4-State|Barcode,Australian Post|Barcode,Royal Mail|Barcode,RM4SCC|Barcode,USPS|Barcode,USPS OneCode|Barcode USPS 4-State</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> class is used to control the options when writing 4-State 
             post barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using the 
             <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method by passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>
              </para>
            </description>
          </item>
        </list>.
             <para>You may then change the members of the returned <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para><para>You can also create an instance of the <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> class and use it directly 
             in the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options 
             as an input parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a 
                  barcode to an image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) to use when writing a barcode to 
                  an image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>,
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see></para></description></item></list><para>In addition to the features and members, <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> contains these 4-State post 
             barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.TextPosition" /></term><description><para>The text position to use when the data string is written along with the barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.XModule" /></term><description><para>The size of the smallest module when writing a 4-State barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.AustralianPostCIFEncoding" /></term><description><para>Australian Post Customer Information Field (CIF) Encoding/Decoding table</para></description></item></list></remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public class FourStateBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTFourStateBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.TextPosition" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">BarcodeOutputTextPosition.Default</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.AustralianPostCIFEncoding" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding">AustralianPost4StateBarcodeCIFEncoding.CTable</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public FourStateBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.USPS4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.RoyalMail4State</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.AustralianPost4State</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of the this <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called 
            directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.FourStateBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.TextPosition">
      <summary>
            Gets or sets a value that specifies the text position to use when the data string is written along with the barcode.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition" /> enumeration member that specifies the text position to use when 
            the data string is written along with the barcode. The default value is <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">
            BarcodeOutputTextPosition.Default</see>.</value>
      <remarks>
        <para>Only <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">BarcodeOutputTextPosition.None</see> and 
            <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">BarcodeOutputTextPosition.Default</see> is
            currently supported by this write options class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition" /> and <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeOutputTextPosition getTextPosition()
public void setTextPosition(BarcodeOutputTextPosition value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeOutputTextPosition textPosition;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a 4-State barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a 4-State barcode 
            in thousandths of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in <see cref="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.FourStateBarcodeWriteOptions.AustralianPostCIFEncoding">
      <summary>
            Gets or sets a value that indicate the table to use when encoding the Australian Post Customer Information Field (CIF).
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding" /> enumeration member that indicate the table to use when 
            encoding the Australian Post Customer Information Field (CIF).
            The default value is <see cref="T:Leadtools.Barcode.AustralianPost4StateBarcodeCIFEncoding">AustralianPost4StateBarcodeCIFEncoding.CTable</see>.</value>
      <remarks>
        <para>The value of this property is only used when writing <see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.AustralianPost4State</see>, it is ignored when writing
            the other symbologies supported by this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.FourStateBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public AustralianPost4StateBarcodeCIFEncoding getAustralianPostCIFEncoding()
public void setAustralianPostCIFEncoding(AustralianPost4StateBarcodeCIFEncoding value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTAustralianPost4StateBarcodeCIFEncoding australianPostCIFEncoding;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions">
      <summary>
             Contains extra options to use when writing GS1 Databar Stacked barcodes.
             </summary>
      <keywords>Barcode,GS1 Databar Barcodes|Barcode,GS1 Databar Expanded|Barcode,GS1 Databar Expanded Stacked</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> class is used to control the options when writing GS1 
             Databar Stacked barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, passing one of the following:
             </para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see>
              </para>
            </description>
          </item>
        </list>.
             <para>Change the members of the returned <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para><para>Create an instance of <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input 
             parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a 
                  barcode to an image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                  to an image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see></para></description></item></list><para>In addition to these features and members, <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> contains these GS1 
             Databar Stacked barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule" /></term><description><para>Use the XModule when writing barcodes of this type</para></description></item><item><term><see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule" /></term><description><para>The size of the smallest module when writing a GS1 Databar Stacked barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.SetLinkageBit" /></term><description><para>Set the linkage bit when writing the barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseStackedOmniDirectionalFormat" /></term><description><para>Use two-row in Stacked Omni-directional format when writing the barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.ExpandedStackedRowsCount" /></term><description><para>Number of rows to write for GS1 Databar Expanded Stacked format</para></description></item></list></remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public class GS1DatabarStackedBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTGS1DatabarStackedBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.SetLinkageBit" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseStackedOmniDirectionalFormat" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.ExpandedStackedRowsCount" />
            </term>
            <description>
              <para>2</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public GS1DatabarStackedBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this write 
            options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" /> copy this method creates, cast as an object.</returns>
      <remarks>
        <para>This method (creates a new object) of this <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule">
      <summary>
            Gets or sets a value that indicates whether to use the XModule when writing barcodes of this type.
            </summary>
      <value>
        <strong>true</strong> to use <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule" /> when writing barcodes of this type. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule" /> is set to <strong>false</strong>, then the smallest 
            module size is calculated from the size of the barcode data
            (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, then the smallest 
            module size is set in <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule" /> and the barcode data size may
            be used as a "clipping" boundary.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - 
            Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseXModule()
public void setUseXModule(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useXModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a GS1 Databar Stacked barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a GS1 Databar Stacked 
            barcode in thousandths of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>Only used if the value of <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, otherwise, the module 
            size is calculated from the data size
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.SetLinkageBit">
      <summary>
            Gets or sets a value that indicates whether to set the linkage bit when writing the barcode.
            </summary>
      <value>
        <strong>true</strong> to set the linkage bit when writing the barcode. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>Used by both, the stacked and the expanded stacked GS1 Databar barcodes.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getSetLinkageBit()
public void setSetLinkageBit(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL setLinkageBit;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.UseStackedOmniDirectionalFormat">
      <summary>
            Gets or sets a value that indicates whether to use Stacked Omni-directional format when writing the barcode.
            </summary>
      <value>
        <strong>true</strong> to use Stacked Omni-directional format when writing barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of this property is <strong>true</strong>, a two-row in Stacked Omni-directional format 
            is used when writing the barcode. Otherwise, Stacked format will be
            used.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseStackedOmniDirectionalFormat()
public void setUseStackedOmniDirectionalFormat(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useStackedOmniDirectionalFormat;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.ExpandedStackedRowsCount">
      <summary>
            Gets or sets a value that indicate the number of rows to write for the GS1 Databar Expanded Stacked format.
            </summary>
      <value>An <see cref="T:System.Int32" /> that specifies the number of rows to write for the GS1 Databar Expanded Stacked format. 
            Must be between 1 and 6. The default value is 2.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions.ExpandedStackedRowsCount" /> is used only when writing barcodes of type 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getExpandedStackedRowsCount()
public void setExpandedStackedRowsCount(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int expandedStackedRowsCount;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions">
      <summary>
             Contains the extra options to use when reading GS1 Databar Stacked barcodes.
             </summary>
      <keywords>Barcode,GS1 Databar Barcodes|Barcode,GS1 Databar Expanded|Barcode,GS1 Databar Expanded Stacked</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> class is used to control the options when reading 
             GS1 Databar Stacked barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using the 
             <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing one of the following:
             </para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see>
              </para>
            </description>
          </item>
        </list>
        <para>Change the members of the returned <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
        <para>It is also possible to create an instance of the <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> class and use 
             it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept a 
             single or an array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> contains these GS1 
             Databar Stacked barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>Fast barcode reading (recommended). It is suitable for most barcode qualities: either good or poor</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>The number of scanned lines per column to skip when reading a barcode</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>The error check digit is returned as part of the barcode data</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <example>
             This example writes a few GS1 Databar Stacked barcodes with different options to an image and 
             then reads them back.
             <!--GS1DatabarStackedBarcodeReadOptions--></example>
      <java>
        <pre>public class GS1DatabarStackedBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTGS1DatabarStackedBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>
                <strong>true</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>9</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>
                <strong>
                  <see cref="T:Leadtools.Barcode.BarcodeReturnCheckDigit">BarcodeReturnCheckDigit.Default</see>
                </strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public GS1DatabarStackedBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarStacked</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpandedStacked</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of the this <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicate the direction to use when searching 
            for barcodes. The default value is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. 
            By default, the reader will only search for barcodes horizontally as there are performance advantages. 
            Alter this, by changing the appropriate read barcode options to specify vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and 
            <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.EnableFastMode">
      <summary>
            Gets or sets a value that indicate whether to enable fast barcode reading.
            </summary>
      <value>
        <strong>true</strong> to enable fast barcode reading. Otherwise, <strong>false</strong>. 
            Default value is <strong>true</strong>.</value>
      <remarks>
        <para>It is recommended to leave fast mode reading enabled (<see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.EnableFastMode" /> set to <strong>true</strong>). It is suitable for
            most barcode qualities either good or poor.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableFastMode()
public void setEnableFastMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableFastMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.Granularity">
      <summary>
            Gets or sets a value that indicate the number of scanned lines per column to skip when reading a barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicate the number of scanned lines per column to skip when reading a barcode. 
            Must be a value greater to or equal to 1. The default value is 9.</value>
      <remarks>
        <para>A value of 9 means that each tenth line will be scanned when looking for a barcode. 
            Scanning every line will slow the search process while skipping too many lines
            may skip over the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGranularity()
public void setGranularity(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int granularity;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.ReturnCheckDigit">
      <summary>
            Gets or sets a value that indicates whether the error check digit is returned as part of the barcode data.
            </summary>
      <value>Value indicating whether the error check digit is returned as part of the barcode data. The default value is <strong>Default</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions.ReturnCheckDigit" /> to <strong>Yes</strong>, 
            then this digit is returned as part of barcode data (can be retrieved with
            <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> or <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>). 
            Then parse the data and extract the error check digit from the rest of the data based on the barcode 
            symbology standard.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.GS1DatabarStackedBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeReturnCheckDigit getReturnCheckDigit()
public void setReturnCheckDigit(BarcodeReturnCheckDigit value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeReturnCheckDigit returnCheckDigit;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MaxiBarcodeData">
      <summary>
            Contains the data for a single Maxi barcode.
            </summary>
      <keywords>2D Barcode (Maxi)|Maxi (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MaxiBarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add 
            specific data that can be read or written
            when using Maxi barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a Maxi (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.Maxi</see>), the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
            <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />
            object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>You can can perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.MaxiBarcodeData" /> and then 
            examine the extra data properties associated with it.</para>
        <para>Maxi read options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is 
            used to write a barcode to an image. This method accepts the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            object. To write a Maxi barcode, create an instance of <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />
            and fill the required parameters, then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>Maxi write options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> class.</para>
        <para>You can use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">
            BarcodeData.CreateDefaultBarcodeData</see>
            method to create a new instance of <see cref="T:Leadtools.Barcode.MaxiBarcodeData" /> that contains default parameters ready for writing to an image:
            </para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
            Dim MaxiData As MaxiBarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Maxi), MaxiBarcodeData)
            </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
            MaxiBarcodeData MaxiData = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.Maxi) as MaxiBarcodeData;
            </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
            This example writes a couple of Maxi barcodes with different options to an image and then reads them back.
            <!--MaxiBarcodeData--></example>
      <java>
        <pre>public class MaxiBarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTMaxiBarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MaxiBarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following member is initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.</para>
      </example>
      <java>
        <pre>public MaxiBarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeData.Clone">
      <summary>
            Creates an exact copy of this Maxi barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MaxiBarcodeData" /> cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> 
            to clone the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
            and will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>. 
            Attempting to set this property to any other symbology value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MaxiBarcodeSymbolModel">
      <summary>
            Specifies the encoding mode for Maxi Code symbol.
            </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.SymbolModel">MaxiBarcodeWriteOptions.SymbolModel</see> property to specify 
            the MaxiCode barcode's symbol size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum MaxiBarcodeSymbolModel</pre>
      </java>
      <objectivec>
        <pre>enum LTMaxiBarcodeSymbolModel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MaxiBarcodeSymbolModel.MaxiCodeMode2">
      <summary>
            (0)<para>MaxiCode Mode 2</para></summary>
      <java>
        <pre>MAXICODE_MODE2</pre>
      </java>
      <objectivec>
        <pre>LTMaxiBarcodeSymbolModel_Mode2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MaxiBarcodeSymbolModel.MaxiCodeMode3">
      <summary>
            (1)<para>MaxiCode Mode 3</para></summary>
      <java>
        <pre>MAXICODE_MODE3</pre>
      </java>
      <objectivec>
        <pre>LTMaxiBarcodeSymbolModel_Mode3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MaxiBarcodeSymbolModel.MaxiCodeMode4">
      <summary>
            (2)<para>MaxiCode Mode 4</para></summary>
      <java>
        <pre>MAXICODE_MODE4</pre>
      </java>
      <objectivec>
        <pre>LTMaxiBarcodeSymbolModel_Mode4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MaxiBarcodeSymbolModel.MaxiCodeMode5">
      <summary>
            (3)<para>MaxiCode Mode 5</para></summary>
      <java>
        <pre>MAXICODE_MODE5</pre>
      </java>
      <objectivec>
        <pre>LTMaxiBarcodeSymbolModel_Mode5</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MaxiBarcodeReadOptions">
      <summary>
            Contains the extra options to use when reading Maxi barcodes.
            </summary>
      <keywords>2D Barcode (Maxi)|Maxi (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> class is used to control the options when reading 
            Maxi barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
            (or group of common symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>. Then
            change the members of the returned <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> by casting it from 
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" />.</para>
        <para>It is also possible to create an instance of the <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> class and use it 
            directly in 
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
            a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> contains these Maxi 
            barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MaxiBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MaxiBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMaxiBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
            BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public MaxiBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies                   supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MaxiBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MaxiBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.MaxiBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="T:Leadtools.Barcode.MaxiBarcodeWriteOptions">
      <summary>
            Contains the extra options to use when writing MaxiCode barcodes.
            </summary>
      <keywords>2D Barcode (MaxiCode)|MaxiCode (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> class is used to control the options when writing 
            MaxiCode barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
            symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>. You can then change the members of the returned 
            <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to 
            <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
        <para>You can also create an instance of <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> class and use it directly in the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input 
            parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing 
                 a barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                 to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.FriendlyName">BarcodeOptions.FriendlyName</see>
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> 
            contains these MaxiCode barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.CountryCode" />
            </term>
            <description>
              <para>The country code that will be encoded when writing Maxi Code symbols using mode 2 or mode 3.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.OpenSystemStandard" />
            </term>
            <description>
              <para>Write Maxi Code symbols using mode 2 or mode 3 with open system standard message.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeChar" />
            </term>
            <description>
              <para>The alphanumeric postal code that will be encoded when writing Maxi Code symbols using mode 3.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeNum" />
            </term>
            <description>
              <para>The numeric postal code that will be encoded when writing Maxi Code symbols using mode 2.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Resolution" />
            </term>
            <description>
              <para>The resolution of output symbol when writing Maxi Code symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.ServiceClass" />
            </term>
            <description>
              <para>The service class that will be encoded when writing Maxi Code symbols using mode 2 or mode 3.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>The encoding mode to use when writing Maxi Code.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Year" />
            </term>
            <description>
              <para>The year that will be encoded when writing Maxi Code symbols as open system standard.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MaxiBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MaxiBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMaxiBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.CountryCode" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.OpenSystemStandard" />
            </term>
            <description>
              <para>false</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeChar" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeNum" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Resolution" />
            </term>
            <description>
              <para>300</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.ServiceClass" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MaxiBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode4</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Year" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public MaxiBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Maxi</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by 
            the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MaxiBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.CountryCode">
      <summary>
            Gets or sets the country code when writing a Maxi Code barcode using mode 2 or mode 3.
            </summary>
      <value>
            A 3-digit <see cref="T:System.Int32" /> to be used when writing a Maxi Code barcode using mode 2 or mode 3.
            </value>
      <remarks>
        <para>The country code is a 3-digit value from ISO 3166.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getCountryCode()
public void setCountryCode(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTCountryCode countryCode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.OpenSystemStandard">
      <summary>
            Gets or sets a value indicating whether to use open system standard or not.
            </summary>
      <value>
        <strong>true</strong> to use open system standard. Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public bool getOpenSystemStandard()
public void setOpenSystemStandard(bool value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTOpenSystemStandard openSystemStandard;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeChar">
      <summary>
            Gets or sets the alphanumeric postal code when writing a Maxi Code barcode using mode 3.
            </summary>
      <value>
            6-characters to be used when writing a Maxi Code barcode using mode 3.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public string getPostalCodeChar()
public void setPostalCodeChar(string value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTPostalCodeChar postalCodeChar;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.PostalCodeNum">
      <summary>
            Gets or sets the numeric postal code when writing a Maxi Code barcode using mode 2.
            </summary>
      <value>
            A 9-digit <see cref="T:System.Int32" /> to be used when writing a Maxi Code barcode using mode 2.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getPostalCodeNum()
public void setPostalCodeNum(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTPostalCodeNum postalCodeNum;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Resolution">
      <summary>
            Gets or sets the resolution of the output barcode.
            </summary>
      <value>
            An <see cref="T:System.Int32" /> to be used as resolution of the output barcode writing a Maxi Code barcode. The default value is 300.
            </value>
      <remarks>
        <para>The Maxi Code is a fixed print-size symbol, the resolution is used to determine the symbol height and width in pixels.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getResolution()
public void setResolution(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTResolution resolution;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.ServiceClass">
      <summary>
            Gets or sets the service class when writing a Maxi Code barcode using mode 2 or mode 3.
            </summary>
      <value>
            A 3-digit <see cref="T:System.Int32" /> to be used when writing a Maxi Code barcode using mode 2 or mode 3.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getServiceClass()
public void setServiceClass(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTServiceClass serviceClass;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.SymbolModel">
      <summary>
            Gets or sets the chosen encoding mode when writing a Maxi Code barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.MaxiBarcodeSymbolModel" /> enumeration member that determines the encoding mode to use when when writing a Maxi Code barcode. The default value is <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode4</see>.
            </value>
      <remarks>
        <para>
          <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode2</see> and <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode3</see> are used to encode structured carrier message, while <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode4</see> and <see cref="T:Leadtools.Barcode.AztecBarcodeSymbolModel">MaxiBarcodeSymbolModel.MaxiCodeMode5</see> a general message.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public MaxiBarcodeSymbolModel getSymbolModel()
public void setSymbolModel(MaxiBarcodeSymbolModel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) MaxiBarcodeSymbolModel symbolModel;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MaxiBarcodeWriteOptions.Year">
      <summary>
            Gets or sets the year when writing a Maxi Code barcode using mode 2 or mode 3 with open system standard message.
            </summary>
      <value>
            A 2-digit <see cref="T:System.Int32" /> to be used when writing a Maxi Code barcode using mode 2 or mode 3 with open system standard message.
            </value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MaxiBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getYear()
public void setYear(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTYear year;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions">
      <summary>
             Contains the extra options to use when writing MicroPDF417 barcodes.
             </summary>
      <keywords>Barcode,MicroPDF417 (2D)|MicroPDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class is used to control the options when writing 
             MicroPDF417 barcodes using LEADTOOLS. You
             can set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology 
             (or group of common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, passing 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>. Then
             change the members of the returned <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> by casting it 
             from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.
             </para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a 
                  barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                  to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> contains these MicroPDF417 
             barcode specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>Horizontal alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>Vertical alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.UseMode128Emulation" />
            </term>
            <description>
              <para>Use the Function Code word for Code 128 emulation when writing MicroPDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked" />
            </term>
            <description>
              <para>Link this MicroPDF417 to a linear symbol that is printed below it when writing MicroPDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode" />
            </term>
            <description>
              <para>Enable group mode when writing MicroPDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>The size of the smallest module when writing a MicroPDF417 barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModuleAspectRatio" />
            </term>
            <description>
              <para>The ratio of the width of the smallest element (XModule) to the height of a row of the MicroPDF417 symbol.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns" />
            </term>
            <description>
              <para>Use the symbol size as limits when writing MicroPDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize" />
            </term>
            <description>
              <para>The symbol size to use when writing MicroPDF417 barcodes.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MicroPDF417BarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroPDF417BarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.UseMode128Emulation" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModuleAspectRatio" />
            </term>
            <description>
              <para>3</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize">MicroPDF417BarcodeSymbolSize.Smallest</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public MicroPDF417BarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this write 
            options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class that will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value that can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.HorizontalAlignment">
      <summary>
            Gets or sets a value indicating the horizontal alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the horizontal alignment to use when fitting 
            this barcode inside the destination bounds.
            The default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output rectangle 
            (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a 
            special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can set to determine whether the result barcode is 
            left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getHorizontalAlignment()
public void setHorizontalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment horizontalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.VerticalAlignment">
      <summary>
            Gets or sets a value indicating the vertical alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the vertical alignment to use when fitting 
            this barcode inside the destination bounds.
            The default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output 
            rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a 
            special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can be set to determine whether the result barcode 
            is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getVerticalAlignment()
public void setVerticalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment verticalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.UseMode128Emulation">
      <summary>
            Gets or sets a value that indicates whether to use the Function Code word for Code 128 emulation when writing 
            MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to the Function Code word for Code 128 emulation. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>To use Function Code word for Code 128 emulation, set the value of 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.UseMode128Emulation" /> to <strong>true</strong> and the value of
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode" /> to <strong>true</strong> and set the Function Code Word required in 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode">MicroPDF417BarcodeData.DataCode</see>
            before writing the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseMode128Emulation()
public void setUseMode128Emulation(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useMode128Emulation;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked">
      <summary>
            Gets or sets a value that indicates whether this MicroPDF417 is linked to a linear symbol that is printed below it, 
            when writing MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> when this MicroPDF417 is linked to a linear symbol that is printed below. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked" /> will be set in the 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.IsLinked">MicroPDF417BarcodeData.IsLinked</see> when the barcode is read.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean isLinked()
public void setLinked(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL isLinked;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode">
      <summary>
            Gets or sets a value that indicates whether to enable the group mode when writing MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to enable the group mode when writing MicroPDF417 barcodes. 
            Otherwise, <strong>false.</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>To enable the group mode, set the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode" /> to <strong>true</strong> 
            and set the Function Code Word required in
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode">MicroPDF417BarcodeData.DataCode</see>, before writing the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableGroupMode()
public void setEnableGroupMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableGroupMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a MicroPDF417 barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a MicroPDF417 barcode in  
            thousandths of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModuleAspectRatio">
      <summary>
            Gets or sets a value that indicate the ratio of the width of the smallest element (XModule) to the height of a row of 
            the MicroPDF417 symbol.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the ratio of the width of the smallest element (XModule) to the height of a row 
            of the MicroPDF417 symbol. Must be value greater than or
            equal to 1. The default value is 3.</value>
      <remarks>
        <para>Use this property to control the width of height of the result MicroPDF417 barcode. The smallest element size is 
            set in <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" /></para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModuleAspectRatio()
public void setXModuleAspectRatio(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModuleAspectRatio;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns">
      <summary>
            Gets or sets a value that indicates whether to use the symbol size as limits when writing MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to use the symbol size as limits when writing MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is <strong>false</strong>, the symbol size is control by 
            the <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>
            and <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" /> values used. Otherwise, the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize" /> will be used.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getLimitByRowsAndColumns()
public void setLimitByRowsAndColumns(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL limitByRowsAndColumns;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize">
      <summary>
            Gets or sets the symbol size to use when writing MicroPDF417 barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize" /> enumeration member that indicates the symbol size to use when 
            writing MicroPDF417 barcodes. The default value
            is <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize">MicroPDF417BarcodeSymbolSize.Smallest</see>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is <strong>false</strong>, 
            the symbol size is control by the <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>
            and <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule" /> values used. Otherwise, the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize" /> will be used.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public MicroPDF417BarcodeSymbolSize getSymbolSize()
public void setSymbolSize(MicroPDF417BarcodeSymbolSize value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTMicroPDF417BarcodeSymbolSize symbolSize;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroPDF417BarcodeData">
      <summary>
             Contains the data for a single MicroPDF417 barcode.
             </summary>
      <keywords>Barcode,MicroPDF417 (2D)|MicroPDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add specific 
             data that can be read or written when using MicroPDF417 barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a MicroPDF417 
             (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>), the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
             object for each barcode casted down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>You can can perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> and then 
             examine the extra data properties associated with it.</para>
        <para>In addition to all the data members returned as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, this class 
             adds the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode" /> - The MicroPDF417 barcode function code word for Code 128 emulation.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.IsLinked" /> - Indicates that the MicroPDF417 barcode is linked to a linear symbol printed below it.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other MicroPDF417 read options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is used to 
             write a barcode to an image. This method accepts the data parameter as the base 
             <see cref="T:Leadtools.Barcode.BarcodeData" /> object. To write a MicroPDF417 barcode, create an instance of <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
             and fill the required parameters then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.
             </para>
        <para>In addition to all the data members that must be set as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, 
             you must also specify the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode" /> - The MicroPDF417 barcode function code word for Code 128 emulation</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other MicroPDF417 write options not related to the barcode data can be set 
             using the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class.</para>
        <para>Use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">BarcodeData.CreateDefaultBarcodeData</see>
             method to create a new instance of <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> that contains default parameters ready for writing to an image:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim microPDF417Data As MicroPDF417BarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroPDF417), MicroPDF417BarcodeData)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             MicroPDF417BarcodeData microPDF417Data = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroPDF417) as MicroPDF417BarcodeData;
             </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes In LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example writes a couple of MicroPDF417 barcode with different options to an image and then reads them back.
             <!--MicroPDF417BarcodeData--></example>
      <java>
        <pre>public class MicroPDF417BarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroPDF417BarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.IsLinked" />
            </term>
            <description>
              <strong>false</strong>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode" />
            </term>
            <description>0</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public MicroPDF417BarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeData.Clone">
      <summary>
            Creates an exact copy of this MicroPDF417 barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> to clone the extra 
            members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this
            <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> and will always return
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>. Attempting to set this property to any other symbology 
            value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeData.IsLinked">
      <summary>
            Gets a value that indicates whether the MicroPDF417 barcode is linked to a linear symbol printed below it.
            </summary>
      <value>
        <strong>true</strong> when the MicroPDF417 barcode is linked to a linear symbol printed below it. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a MicroPDF417 symbol is read. 
            To link MicroPDF417 when writing, use the
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.IsLinked">MicroPDF417BarcodeWriteOptions.IsLinked</see> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public boolean isLinked()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign, readonly) BOOL isLinked;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode">
      <summary>
            Gets or sets a value that indicates the MicroPDF417 barcode function code word for Code 128 emulation.
            </summary>
      <value>An <see cref="T:System.UInt32" /> that indicates the MicroPDF417 barcode function code word for Code 128 emulation. 
            The default value is 0.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a MicroPDF417 symbol is read.</para>
        <para>To use this value when writing MicroPDF417 symbols, set the value of
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.EnableGroupMode">MicroPDF417BarcodeWriteOptions.EnableGroupMode</see> to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>
public int getDataCode()
public void setDataCode(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) unsigned int dataCode;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroPDF417BarcodeReadMode">
      <summary>
             MicroPDF417 read mode enumerations.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadMode" /> enumeration is used as the type for the 
             <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadMode">MicroPDF417BarcodeReadOptions.ReadMode</see> property
             and can be used to control which mode to use when reading the MicroPDF417 data.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <java>
        <pre>public enum MicroPDF417BarcodeReadMode</pre>
      </java>
      <objectivec>
        <pre>enum LTMicroPDF417BarcodeReadMode</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode0">
      <summary>
            (0)<para>Basic channel mode with no transmission of symbology: No escape doubling. 
            Macro PDF is illegal. ECI is illegal. Reserved code words are illegal.</para></summary>
      <java>
        <pre>MODE0</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_Mode0</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode1">
      <summary>
            (1)<para>Basic channel mode with transmit ]L1 symbology. Escape doubling. Macro PDF is transmitted. 
            ECI is transmitted. Reserved code words are transmitted.</para></summary>
      <java>
        <pre>MODE1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_Mode1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode2">
      <summary>
            (2)<para>Basic channel mode with transmit ]L2 symbology. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para></summary>
      <java>
        <pre>MODE2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_Mode2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode3Basic">
      <summary>
            (3)<para>Basic channel mode with transmit ]L0 symbology. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para></summary>
      <java>
        <pre>MODE3_BASIC</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_Mode3Basic</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode3Extended">
      <summary>
            (4)<para>Basic channel mode with transmit ]L0 symbology. Escape doubling. Macro PDF is transmitted. 
            ECI is transmitted in GLI format. Reserved code words transmitted.</para></summary>
      <java>
        <pre>MODE3_EXTENDED</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_Mode3Extended</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.ModeMicroPDF417Basic">
      <summary>
            (5)<para>Basic channel mode with transmit ]L3 symbology. Code 128 Emulation Basic Channel Mode. 
            Transmit ] L0, ] L3, ] L4, or ] L5 symbology ID. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para></summary>
      <java>
        <pre>MODE_MICRO_PDF417_BASIC</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_ModeMicroPDF417Basic</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.ModeMicroPDF417Extended">
      <summary>
            (6)<para>Extended channel mode with transmit ]L3 symbology. Code 128 Emulation Extended Channel Mode. 
            Transmit ] L0, ] L3, ] L4, or ] L5 symbology ID. Escape doubling. Macro PDF is transmitted. 
            ECI is transmitted in GLI format. Reserved code words transmitted.</para></summary>
      <java>
        <pre>MODE_MICRO_PDF417_EXTENDED</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeReadMode_ModeMicroPDF417Extended</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize">
      <summary>
            Symbol size to use when writing MicroPDF417 barcodes.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize" /> enumeration is used as the type for the 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize">MicroPDF417BarcodeWriteOptions.SymbolSize</see> property
            and can be used to control the symbol size to use when writing MicroPDF417 barcodes.</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns">MicroPDF417BarcodeWriteOptions.LimitByRowsAndColumns</see>
            is <strong>false</strong>, the symbol size is control by the <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see> 
            and <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.XModule">MicroPDF417BarcodeWriteOptions.XModule</see> values used.
            Otherwise, the value of <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions.SymbolSize">MicroPDF417BarcodeWriteOptions.SymbolSize</see> 
            will be used.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and sXModule</see>.
            </para>
      </remarks>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum MicroPDF417BarcodeSymbolSize</pre>
      </java>
      <objectivec>
        <pre>enum LTMicroPDF417BarcodeSymbolSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Smallest">
      <summary>
            (0)<para>Use smallest size required to save the data stored in <see cref="T:Leadtools.Barcode.BarcodeData" /></para></summary>
      <java>
        <pre>SMALLEST</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Smallest</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size11X1">
      <summary>
            (1)<para>11 rows by 1 column</para></summary>
      <java>
        <pre>SIZE11X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size11X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size14X1">
      <summary>
            (2)<para>14 rows by 1 column</para></summary>
      <java>
        <pre>SIZE14X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size14X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size17X1">
      <summary>
            (3)<para>17 rows by 1 column</para></summary>
      <java>
        <pre>SIZE17X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size17X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size20X1">
      <summary>
            (4)<para>20 rows by 1 column</para></summary>
      <java>
        <pre>SIZE20X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size20X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size24X1">
      <summary>
            (5)<para>24 rows by 1 column</para></summary>
      <java>
        <pre>SIZE24X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size24X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size28X1">
      <summary>
            (6)<para>28 rows by 1 column</para></summary>
      <java>
        <pre>SIZE28X1</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size28X1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size8X2">
      <summary>
            (7)<para>8 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE8X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size8X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size11X2">
      <summary>
            (8)<para>11 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE11X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size11X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size14X2">
      <summary>
            (9)<para>14 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE14X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size14X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size17X2">
      <summary>
            (10)<para>17 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE17X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size17X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size20X2">
      <summary>
            (11)<para>20 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE20X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size20X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size23X2">
      <summary>
            (12)<para>23 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE23X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size23X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size26X2">
      <summary>
            (13)<para>26 rows by 2 columns</para></summary>
      <java>
        <pre>SIZE26X2</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size26X2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size6X3">
      <summary>
            (14)<para>6 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE6X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size6X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size8X3">
      <summary>
            (15)<para>8 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE8X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size8X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size10X3">
      <summary>
            (10)<para>10 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE10X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size10X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size12X3">
      <summary>
            (17)<para>12 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE12X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size12X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size15X3">
      <summary>
            (18)<para>15 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE15X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size15X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size20X3">
      <summary>
            (19)<para>20 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE20X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size20X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size26X3">
      <summary>
            (20)<para>26 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE26X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size26X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size32X3">
      <summary>
            (21)<para>32 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE32X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size32X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size38X3">
      <summary>
            (22)<para>38 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE38X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size38X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size44X3">
      <summary>
            (23)<para>44 rows by 3 columns</para></summary>
      <java>
        <pre>SIZE44X3</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size44X3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size4X4">
      <summary>
            (24)<para>4 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE4X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size4X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size6X4">
      <summary>
            (25)<para>6 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE6X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size6X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size8X4">
      <summary>
            (26)<para>8 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE8X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size8X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size10X4">
      <summary>
            (27)<para>10 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE10X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size10X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size12X4">
      <summary>
            (28)<para>12 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE12X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size12X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size15X4">
      <summary>
            (29)<para>15 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE15X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size15X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size20X4">
      <summary>
            (30)<para>20 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE20X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size20X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size26X4">
      <summary>
            (31)<para>26 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE26X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size26X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size32X4">
      <summary>
            (32)<para>32 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE32X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size32X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size38X4">
      <summary>
            (33)<para>38 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE38X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size38X4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroPDF417BarcodeSymbolSize.Size44X4">
      <summary>
            (34)<para>44 rows by 4 columns</para></summary>
      <java>
        <pre>SIZE44X4</pre>
      </java>
      <objectivec>
        <pre>LTMicroPDF417BarcodeSymbolSize_Size44X4</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions">
      <summary>
             Contains extra options to use when reading MicroPDF417 barcodes.
             </summary>
      <keywords>Barcode,MicroPDF417 (2D)|MicroPDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class is used to control the options when reading MicroPDF417 
             barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>. Then, change the members of the returned 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods 
             that accept a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode from 
                  a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following symbologies: 
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see></para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> contains these 
             MicroPDF417 barcode specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>Enable internal auto preprocessing of the image data if no MicroPDF417 barcode was found</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadMode" />
            </term>
            <description>
              <para>The channel mode to use when reading MicroPDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileNameField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroTimestampField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSenderField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField" />,
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroChecksumField" /> and
                  <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField" /></term>
            <description>
              <para>Retrieve an optional macro field when reading MicroPDF417 barcodes.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.MicroPDF417BarcodeInLEADTOOLS">MicroPDF417 Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MicroPDF417BarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroPDF417BarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()
            </see>, the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadMode" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadMode">MicroPDF417BarcodeReadMode.Mode0</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileNameField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroTimestampField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSenderField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroChecksumField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public MicroPDF417BarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroPDF417</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use when 
            searching for barcodes. The default value is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. By default, 
            the reader will only search for barcodes horizontally due to performance reasons. But you may change to the 
            appropriate read barcode option and specify either vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and 
            <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.EnableDoublePass">
      <summary>
            Gets or sets a value indicating whether to use double pass when reading MicroPDF417 symbols.
            </summary>
      <value>
        <strong>true</strong> to use double pass when reading MicroPDF417 symbols. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When reading 2D barcodes, LEADTOOLS can perform internal auto preprocessing on the image and try again if 
            the engine cannot detect the barcode required. But this may take extra processing which will increase the barcode detection 
            time.  Hence, it is not recommended to always have it enabled except in certain situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is reading barcodes of this type exclusively. For example, a dedicated 
              MicroPDF417 reader. Here, always reading the barcode is more
            important than recognition speed.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The application uses barcode detection on a server. In this case, the time spent on the actual 
              barcode detection is most probably less than the time required to send the image to the server and get the results back 
              due to network latency. Thus, it makes sense to turn this feature on in this situation.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The images provided may have a small resolution (DPI) or known to come from a source 
              that does not always provide clean images. For example, a Fax machine
            or a Scanner. Enabling double pass here ensures that you can read the barcodes regardless on the quality of the input image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The LEADTOOLS .NET C# and VB Barcode Demo leaves the option disabled by default. When the user 
              tries to read a barcode of this type and the engine
            cannot find it, it will then ask the user if they want to turn this feature on and try again. An approach like that 
            (or an automated one: read, if fails, enable and read again) can
            also be used.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableDoublePass()
public void setEnableDoublePass(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableDoublePass;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadMode">
      <summary>
            Gets or sets a value that indicates the channel mode to use when reading MicroPDF417 barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadMode" /> enumeration member that specifies the channel mode to use 
            when reading MicroPDF417 barcodes. The default value is <see cref="F:Leadtools.Barcode.MicroPDF417BarcodeReadMode.Mode0" /></value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadMode" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public MicroPDF417BarcodeReadMode getReadMode()
public void setReadMode(MicroPDF417BarcodeReadMode value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTMicroPDF417BarcodeReadMode readMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileNameField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'File Name' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'File Name' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroFileNameField()
public void setReadOptionalMacroFileNameField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroFileNameField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Segment Count' field is retrieved when reading MicroPDF417 
            barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Segment Count' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroSegmentCountField()
public void setReadOptionalMacroSegmentCountField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroSegmentCountField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroTimestampField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Time Stamp' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve optional macro 'Time Stamp' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroTimestampField()
public void setReadOptionalMacroTimestampField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroTimestampField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroSenderField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Sender' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Sender' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroSenderField()
public void setReadOptionalMacroSenderField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroSenderField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Addressee' field is retrieved when reading 
            MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Addressee' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroAddresseeField()
public void setReadOptionalMacroAddresseeField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroAddresseeField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'File Size' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'File Size' field when reading MicroPDF417 barcodes. Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroFileSizeField()
public void setReadOptionalMacroFileSizeField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroFileSizeField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacroChecksumField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Checksum' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Checksum' field when reading MicroPDF417 barcodes. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroChecksumField()
public void setReadOptionalMacroChecksumField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroChecksumField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroPDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField">
      <summary>
            Gets or sets a value that indicates whether the optional macro '7 to 9 and A to Z' field is retrieved when reading MicroPDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro '7 to 9 and A to Z' field when reading MicroPDF417 barcodes. Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacro79AndAZField()
public void setReadOptionalMacro79AndAZField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacro79AndAZField;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroQRBarcodeData">
      <summary>
            Contains the data for a single MicroQR barcode.
            </summary>
      <keywords>2D Barcode (MicroQR)|MicroQR (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add 
            specific data that can be read or written
            when using MicroQR barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a MicroQR (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.MicroQR</see>), the
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
            <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />
            object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>You can can perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" /> and then 
            examine the extra data properties associated with it.</para>
        <para>MicroQR read options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is 
            used to write a barcode to an image. This method accepts the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> 
            object. To write a MicroQR barcode, create an instance of <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />
            and fill the required parameters, then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>MicroQR write options not related to the barcode data can be set using the <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> class.</para>
        <para>You can use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">
            BarcodeData.CreateDefaultBarcodeData</see>
            method to create a new instance of <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" /> that contains default parameters ready for writing to an image:
            </para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
            Dim MicroQRData As MicroQRBarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroQR), MicroQRBarcodeData)
            </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
            MicroQRBarcodeData MicroQRData = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroQR) as MicroQRBarcodeData;
            </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
            This example writes a couple of MicroQR barcodes with different options to an image and then reads them back.
            <!--MicroQRBarcodeData--></example>
      <java>
        <pre>public class MicroQRBarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroQRBarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following member is initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.</para>
      </example>
      <java>
        <pre>public MicroQRBarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeData.Clone">
      <summary>
            Creates an exact copy of this MicroQR barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" /> cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> 
            to clone the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
            and will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>. 
            Attempting to set this property to any other symbology value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">
      <summary>
            Specifies the Micro QR symbol size.
            </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.SymbolModel">MicroQRBarcodeWriteOptions.SymbolModel</see> property to specify 
            the MicroQR barcode's symbol size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum MicroQRBarcodeSymbolModel</pre>
      </java>
      <objectivec>
        <pre>enum LTMicroQRBarcodeSymbolModel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.AutoSize">
      <summary>
            (0)<para>Micro QR Auto size</para></summary>
      <java>
        <pre>AUTOSIZE</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_AutoSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM1">
      <summary>
            (1)<para>Micro QR M1</para></summary>
      <java>
        <pre>MICROQRM1</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM2L">
      <summary>
            (2)<para>Micro QR M2 with error correction level L</para></summary>
      <java>
        <pre>MICROQRM2L</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM2L</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM2M">
      <summary>
            (3)<para>Micro QR M2 with error correction level M</para></summary>
      <java>
        <pre>MICROQRM2M</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM2M</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM3L">
      <summary>
            (4)<para>Micro QR M3 with error correction level L</para></summary>
      <java>
        <pre>MICROQRM3L</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM3L</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM3M">
      <summary>
            (5)<para>Micro QR Model 3M with error correction level M</para></summary>
      <java>
        <pre>MICROQRM3M</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM3M</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM4L">
      <summary>
            (6)<para>Micro QR M4 with error correction level L</para></summary>
      <java>
        <pre>MICROQRM4L</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM4L</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM4M">
      <summary>
            (7)<para>Micro QR M4 with error correction level M</para></summary>
      <java>
        <pre>MICROQRM4M</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM4M</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MicroQRBarcodeSymbolModel.MicroQRM4Q">
      <summary>
            (8)<para>Micro QR M4 with error correction level Q</para></summary>
      <java>
        <pre>MICROQRM4Q</pre>
      </java>
      <objectivec>
        <pre>LTMicroQRBarcodeSymbolModel_MicroQRM4Q</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MicroQRBarcodeReadOptions">
      <summary>
            Contains the extra options to use when reading MicroQR barcodes.
            </summary>
      <keywords>2D Barcode (MicroQR)|MicroQR (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> class is used to control the options when reading 
            MicroQR barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
            (or group of common symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>. Then
            change the members of the returned <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> by casting it from 
            <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" />.</para>
        <para>It is also possible to create an instance of the <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> class and use it 
            directly in 
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
            a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                 barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> contains these MicroQR 
            barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MicroQRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MicroQRBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroQRBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">
            BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.FriendlyName" />
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public MicroQRBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies                   supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MicroQRBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MicroQRBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions">
      <summary>
            Contains the extra options to use when writing MicroQR barcodes.
            </summary>
      <keywords>2D Barcode (MicroQR)|MicroQR (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> class is used to control the options when writing 
            MicroQR barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
            symbologies). These options can be retrieved using
            the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method passing 
            <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>. You can then change the members of the returned 
            <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to 
            <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
        <para>You can also create an instance of <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> class and use it directly in the
            <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input 
            parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing 
                 a barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode 
                 to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                 symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.FriendlyName">BarcodeOptions.FriendlyName</see>
            </term>
            <description>
              <para>Gets the friendly name of this class.</para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> 
            contains these MicroQR barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>The Micro QR symbol size to use when writing Aztec Code.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>Size of the smallest module when writing in thousands of an inch (0.001).</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.MicroQRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.DatamatrixBarcodeInLEADTOOLS">Datamatrix Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class MicroQRBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTMicroQRBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.SymbolModel" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">MicroQRBarcodeSymbolModel.AutoSize</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public MicroQRBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MicroQR</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" /> cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by 
            the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.MicroQRBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.SymbolModel">
      <summary>
            Gets or sets the chosen symbol size when writing a Micro QR barcode.
            </summary>
      <value>
            A <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel" /> enumeration member that determines the symbol size to use when when writing a Micro QR barcode. The default value is <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">MicroQRBarcodeSymbolModel.AutoSize</see>.
            </value>
      <remarks>
        <para>When the default value <see cref="T:Leadtools.Barcode.MicroQRBarcodeSymbolModel">MicroQRBarcodeSymbolModel.AutoSize</see> is used the encoder will choose a symbol size based on the size of input message.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public MicroQRBarcodeSymbolModel getSymbolModel()
public void setSymbolModel(MicroQRBarcodeSymbolModel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) MicroQRBarcodeSymbolModel symbolModel;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a MicroQR barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a MicroQR barcode in a 
            thousandth of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.MicroQRBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.MicroQRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.OneDBarcodeWriteOptions">
      <summary>
             Contains the extra options to use when reading standard 1D (linear) barcodes.
             </summary>
      <keywords>Barcode,Linear barcodes|Barcode 1D|1D Barcode|Barcode,Code 11|Barcode,Code 128|Barcode,Code 3 of 9|Barcode,Code 3 of 9 Extended|Barcode,Code 32|
             Barcode,Code 39|Barcode,Code 93|Barcode,Code 93 Extended|Barcode,GS1 Databar Barcodes|Barcode,GS1 Databar Expanded|Barcode,GS1 Databar Limited|Barcode,EAN|
             Barcode,EAN EXT 2|Barcode,EAN EXT 5|Barcode,EAN13|Barcode,EAN8|Barcode,Interleaved Code 2 of 5|Barcode,Standard Code 2 of 5 (Industrial)|Barcode,UCC/EAN 128|
             Barcode,UPC Barcodes|Barcode,UPC-A|Barcode,UPC-E</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> class is used to control the options when standard 1D 
             (linear) barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
             These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>.
             <para>Then change the members of the returned <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para><para>Also create an instance of one of <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to 
                  use when writing a barcode to an image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) 
                  to use when writing a barcode to an image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the symbologies:
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see> and
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see></para></description></item></list><para>In addition to these features and members, <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> contains these standard 1D (linear) 
             barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.TextPosition" /></term><description><para>The text position to use when the data string is written along with the barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck" /></term><description><para>Outputs the optional check word for validity check when writing a barcode (if supported)</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule" /></term><description><para>Uses the XModule when writing barcodes of this type</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule" /></term><description><para>The size of the smallest module when writing a barcode</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.SetGS1DatabarLinkageBit" /></term><description><para>Sets the linkage bit when writing GS1 Databar barcodes</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.WriteTruncatedGS1Databar" /></term><description><para>Writes truncated GS1 Databar symbols</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code128TableEncoding" /></term><description><para>Encoding table to use when writing Code 128 barcodes</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code11CheckDigitType" /></term><description><para>Check digit type to use when reading writing 11 (USD-8) barcodes</para></description></item><item><term><see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.MSIModuloType" /></term><description><para>Check digit type to use when writing MSI (Pulse Width Modulated) barcodes</para></description></item></list></remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public class OneDBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTOneDBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.TextPosition" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">BarcodeOutputTextPosition.Default</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.SetGS1DatabarLinkageBit" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.WriteTruncatedGS1Databar" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code128TableEncoding" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.Code128BarcodeTableEncoding">Code128BarcodeTableEncoding.Auto</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code11CheckDigitType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType">Code11BarcodeCheckDigitType.CDigit</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.MSIModuloType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType">MSIBarcodeModuloType.Modulo10</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public OneDBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> class will return an array containing the following symbologies:
            </para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) of the this <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by the user.
            </para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.OneDBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.TextPosition">
      <summary>
            Gets or sets a value that specifies the text position to use when the data string is written along with the barcode.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition" /> enumeration member that specifies the text position to use when 
            the data string is written along with the barcode. The default
            value is <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition">BarcodeOutputTextPosition.Default</see>.</value>
      <remarks>
        <para>Not all symbologies supported by this write options class support all output text position values. 
            Some symbologies allow you to control the text position
            completely (none, default or top), some will only let you specify whether the text is written or not but not the 
            location (default or none), and others will always
            require the text to be written (default). Refer to the Barcode symbology standard you are interested in or try 
            it with the C# or VB Barcode demo.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeOutputTextPosition" /> and 
            <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeOutputTextPosition getTextPosition()
public void setTextPosition(BarcodeOutputTextPosition value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeOutputTextPosition textPosition;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule">
      <summary>
            Gets or sets a value that indicates whether to use the XModule when writing barcodes of this type.
            </summary>
      <value>
        <strong>true</strong> to use <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule" /> when writing barcodes of this type. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule" /> is set to <strong>false</strong>, then the smallest module 
            size is calculated from the size of the barcode data
            (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, then the smallest 
            module size is set in <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule" /> and the barcode data size may
            be used as a "clipping" boundary.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseXModule()
public void setUseXModule(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useXModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a standard 1D (linear) barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a barcode in  
            thousandths of an inch. Must be a value greater to or equal to 0.
            The default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>Only used if the value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, otherwise, 
            the module size is calculated from the data size
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in 
            <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck">
      <summary>
            Gets or sets a value that indicates whether to output the optional check word for validity check 
            when writing a barcode (if supported).
            </summary>
      <value>
        <strong>true</strong> to to output the optional check word for validity check when writing a barcode 
            (if supported). Otherwise, <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck" /> to <strong>true</strong>, then the engine will 
            perform error checking (CRC) using the optional check word and the barcode
            data and output this value along with the barcode data when writing.</para>
        <para>The <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck" /> property will only have effect when writing barcode symbologies 
            that support an optional check word. These barcode symbologies are
            listed below:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Code 3 of 9 (Code 39) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Standard 2 of 5 (Industrial 2 of 5) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Interleaved 2 of 5 (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Code 11 (USD-8) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>CODABAR (Ames Code/USD-4/NW-7/2 of 7) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>)</para>
            </description>
          </item>
        </list>
        <para>The rest of the symbologies supported by this options class requires the check word to be valid and 
            checking is not optional. The engine will always calculate the check word against
            the data and use it in writing regardless of the value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.EnableErrorCheck" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableErrorCheck()
public void setEnableErrorCheck(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableErrorCheck;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.SetGS1DatabarLinkageBit">
      <summary>
            Gets or sets a value that indicates whether to set the linkage bit when writing GS1 Databar barcodes.
            </summary>
      <value>
        <strong>true</strong> to set the linkage bit when writing GS1 Databar barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.SetGS1DatabarLinkageBit" /> and <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.WriteTruncatedGS1Databar" /> 
            is only used when writing the GS1 Databar barcodes supported by this
            write options class:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getSetGS1DatabarLinkageBit()
public void setSetGS1DatabarLinkageBit(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL setGS1DatabarLinkageBit;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.WriteTruncatedGS1Databar">
      <summary>
            Gets or sets a value indicating whether to write truncated GS1 Databar symbols.
            </summary>
      <value>
        <strong>true</strong> to write truncated GS1 Databar symbols. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>Truncated GS1 Databar are symbols that are generally smaller than regular symbols. Not all scanners will 
            read Truncated GS1 Databars, however, LEADTOOLS will
            read these symbols normally.</para>
        <para>The value of <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.SetGS1DatabarLinkageBit" /> and <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.WriteTruncatedGS1Databar" /> 
            is only used when writing the GS1 Databar barcodes supported by this
            write options class:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getWriteTruncatedGS1Databar()
public void setWriteTruncatedGS1Databar(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL writeTruncatedGS1Databar;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code128TableEncoding">
      <summary>
            Gets or sets a value that specifies the encoding table to use when writing Code 128 barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.Code128BarcodeTableEncoding" /> enumeration member that specifies the encoding table 
            to use when writing Code 128 barcodes. The default
            value is <see cref="T:Leadtools.Barcode.Code128BarcodeTableEncoding">Code128BarcodeTableEncoding.Auto</see>.</value>
      <remarks>
        <para>This property is only valid when writing Code 128 (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>) barcodes.</para>
      </remarks>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public Code128BarcodeTableEncoding getCode128TableEncoding()
public void setCode128TableEncoding(Code128BarcodeTableEncoding value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTCode128BarcodeTableEncoding code128TableEncoding;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code11CheckDigitType">
      <summary>
            Gets or sets a value that indicates the check digit type to use when reading writing 11 (USD-8) barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType" /> enumeration member that indicates the check digit type 
            to use when writing Code 11 barcodes. The default value is
            <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType">Code11BarcodeCheckDigitType.CDigit</see>.</value>
      <remarks>
        <para>This property is only valid when writing Code 11 (USD-8) barcodes 
            (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public Code11BarcodeCheckDigitType getCode11CheckDigitType()
public void setCode11CheckDigitType(Code11BarcodeCheckDigitType value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTCode11BarcodeCheckDigitType code11CheckDigitType;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeWriteOptions.MSIModuloType">
      <summary>
            Gets or sets a value that indicates the check digit type to use when writing MSI (Pulse Width Modulated) barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType" /> enumeration member that indicates the check digit type to use when 
            writing Code 11 barcodes. The default value is
            <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType">MSIBarcodeModuloType.Modulo10</see>.</value>
      <remarks>
        <para>This property is only valid when writing Pulse Width Modulated barcodes (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
            BarcodeSymbology.MSI</see>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public MSIBarcodeModuloType getMSIModuloType()
public void setMSIModuloType(MSIBarcodeModuloType value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTMSIBarcodeModuloType msiModuloType;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.Code11BarcodeCheckDigitType">
      <summary>
             Check digit type to use when reading or writing Code 11 (USD-8) barcodes.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType" /> enumeration is used as the type for the
             <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code11CheckDigitType">OneDBarcodeReadOptions.Code11CheckDigitType</see> and
             <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code11CheckDigitType">OneDBarcodeWriteOptions.Code11CheckDigitType</see> 
             properties to indicate the check digit type to
             use when reading or writing Code 11 (USD-8) barcodes.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.
             </para>
      </example>
      <java>
        <pre>public enum Code11BarcodeCheckDigitType</pre>
      </java>
      <objectivec>
        <pre>enum LTCode11BarcodeCheckDigitType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code11BarcodeCheckDigitType.CDigit">
      <summary>
            (0)<para>C check digit only</para></summary>
      <java>
        <pre>C_DIGIT</pre>
      </java>
      <objectivec>
        <pre>LTCode11BarcodeCheckDigitType_CDigit</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code11BarcodeCheckDigitType.CAndKDigits">
      <summary>
            (1)<para>C and K check digits</para></summary>
      <java>
        <pre>C_AND_K_DIGITS</pre>
      </java>
      <objectivec>
        <pre>LTCode11BarcodeCheckDigitType_CAndKDigits</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.MSIBarcodeModuloType">
      <summary>
            Check digit type to use when reading or writing MSI (Pulse Width Modulated) barcodes.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType" /> enumeration is used as the type for the
            <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MSIModuloType">OneDBarcodeReadOptions.MSIModuloType</see> and
            <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.MSIModuloType">OneDBarcodeWriteOptions.MSIModuloType</see>
            properties to indicate the check digit type to use when reading or writing MSI (Pulse Width Modulated) barcodes.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> and 
            <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum MSIBarcodeModuloType</pre>
      </java>
      <objectivec>
        <pre>enum LTMSIBarcodeModuloType</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MSIBarcodeModuloType.Modulo10">
      <summary>
            (0)<para>Modulo 10 check digit</para></summary>
      <java>
        <pre>MODULO10</pre>
      </java>
      <objectivec>
        <pre>LTMSIBarcodeModuloType_Modulo10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MSIBarcodeModuloType.TwoModulo10">
      <summary>
            (1)<para>Two Modulo 10 check digits</para></summary>
      <java>
        <pre>TWOMODULO10</pre>
      </java>
      <objectivec>
        <pre>LTMSIBarcodeModuloType_TwoModulo10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MSIBarcodeModuloType.Modulo11">
      <summary>
            (2)<para>Modulo 11 check digit</para></summary>
      <java>
        <pre>MODULO11</pre>
      </java>
      <objectivec>
        <pre>LTMSIBarcodeModuloType_Modulo11</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.MSIBarcodeModuloType.Modulo11And10">
      <summary>
            (3)<para>Modulo 11 and 10 check digits</para></summary>
      <java>
        <pre>MODULO11AND10</pre>
      </java>
      <objectivec>
        <pre>LTMSIBarcodeModuloType_Modulo11And10</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.Code128BarcodeTableEncoding">
      <summary>
            Encoding table to use when writing Code 128 barcodes.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.Code128BarcodeTableEncoding" /> enumeration is used as the type of the 
            <see cref="P:Leadtools.Barcode.OneDBarcodeWriteOptions.Code128TableEncoding" /> property.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public enum Code128BarcodeTableEncoding</pre>
      </java>
      <objectivec>
        <pre>enum LTCode128BarcodeTableEncoding</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code128BarcodeTableEncoding.Auto">
      <summary>
            (0)<para>Auto (use one or multiple tables)</para></summary>
      <java>
        <pre>AUTO</pre>
      </java>
      <objectivec>
        <pre>LTCode128BarcodeTableEncoding_Auto</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code128BarcodeTableEncoding.ATable">
      <summary>
            (1)<para>Use only Code 128 A table</para></summary>
      <java>
        <pre>A_TABLE</pre>
      </java>
      <objectivec>
        <pre>LTCode128BarcodeTableEncoding_ATable</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code128BarcodeTableEncoding.BTable">
      <summary>
            (2)<para>Use only Code 128 B table</para></summary>
      <java>
        <pre>B_TABLE</pre>
      </java>
      <objectivec>
        <pre>LTCode128BarcodeTableEncoding_BTable</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.Code128BarcodeTableEncoding.CTable">
      <summary>
            (3)<para>Use only Code 128 C table</para></summary>
      <java>
        <pre>C_TABLE</pre>
      </java>
      <objectivec>
        <pre>LTCode128BarcodeTableEncoding_CTable</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.OneDBarcodeReadOptions">
      <summary>
             Contains the extra options to use when reading standard 1D (linear) barcodes.
             </summary>
      <keywords>Barcode,Linear barcodes|Barcode 1D|1D Barcode|Barcode,Code 11|Barcode,Code 128|Barcode,Code 3 of 9|Barcode,Code 3 of 9 Extended|Barcode,Code 32|
             Barcode,Code 39|Barcode,Code 93|Barcode,Code 93 Extended|Barcode,GS1 Databar Barcodes|Barcode,GS1 Databar Expanded|Barcode,GS1 Databar Limited|Barcode,EAN|
             Barcode,EAN EXT 2|Barcode,EAN EXT 5|Barcode,EAN13|Barcode,EAN8|Barcode,Interleaved Code 2 of 5|Barcode,Standard Code 2 of 5 (Industrial)|Barcode,UCC/EAN 128|
             Barcode,UPC Barcodes|Barcode,UPC-A|Barcode,UPC-E</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> class is used to control the options when reading standard 1D (linear) 
             barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common symbologies). 
             These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>
        <para>Change the members of the returned <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept a 
             single array of options as an input
             parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following symbologies:
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>,
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see> and
                     <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see></para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> contains these standard 
             1D (linear) barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>Fast barcode reading (recommended). It is suitable for most barcode qualities either good or poor</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>The number of scanned lines per column to skip when reading a barcode</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MinimumStringLength" />
            </term>
            <description>
              <para>The minimum string length to use when searching for a non-fixed length barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MaximumStringLength" />
            </term>
            <description>
              <para>The maximum string length to use when searching for a non-fixed length barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.WhiteLinesNumber" />
            </term>
            <description>
              <para>The minimum number of lines of white space above and below the barcode symbol.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>The error check digit is returned as part of the barcode data</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck" />
            </term>
            <description>
              <para>The optional check word is used for validity check when reading a barcode (if supported).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AvoidCorruptedBlocks" />
            </term>
            <description>
              <para>Avoids corrupted blocks when reading barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AllowPartialRead" />
            </term>
            <description>
              <para>Allows returning partially read barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code11CheckDigitType" />
            </term>
            <description>
              <para>Checks digit type to use when reading Code 11 (USD-8) barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MSIModuloType" />
            </term>
            <description>
              <para>Checks digit type to use when reading MSI (Pulse Width Modulated) barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code39Extended" />
            </term>
            <description>
              <para>Allows decoding extended characters when reading Code 3 of 9 symbols.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.UPCEANBarcodeInLEADTOOLS">UPC / EAN Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code2Of5BarcodeInLEADTOOLS">2 of 5 Barcodes Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.GS1DatabarBarcodeInLEADTOOLS">GS1 DataBar / RSS-14 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.Code128BarcodeInLEADTOOLS">Code 128 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MSIBarcodeInLEADTOOLS">MSI Barcodes (Pulse Width Modulated) in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.CodabarBarcodeInLEADTOOLS">Codabar Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.MiscellaneousBarcodeInLEADTOOLS">Miscellaneous Barcodes in LEADTOOLS</seealso>
      <example>
             This example shows how to use the <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> options class to read UPC barcodes from an image.
             
             <!--OneDBarcodeReadOptions--></example>
      <java>
        <pre>public class OneDBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTOneDBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, 
            the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>
                <strong>true</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>9</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MinimumStringLength" />
            </term>
            <description>
              <para>3</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MaximumStringLength" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.WhiteLinesNumber" />
            </term>
            <description>
              <para>3</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>
                <strong>
                  <see cref="T:Leadtools.Barcode.BarcodeReturnCheckDigit">BarcodeReturnCheckDigit.Default</see>
                </strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AvoidCorruptedBlocks" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AllowPartialRead" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code11CheckDigitType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType">Code11BarcodeCheckDigitType.CDigit</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MSIModuloType" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType">MSIBarcodeModuloType.Modulo10</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code39Extended" />
            </term>
            <description>
              <para>Allows decoding extended characters when reading Code 3 of 9 symbols.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public OneDBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this read options class.
            </returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN13</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EAN8</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCA</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UPCE</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.UCCEAN128</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code93</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.EANEXT2</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1Databar</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarLimited</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.GS1DatabarExpanded</see>
              </para>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.OneDBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.OneDBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use 
            <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use when 
            searching for barcodes. The default value
            is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. 
            By default, the reader will only search for the
            barcodes horizontally due to performance reasons. Alter this, by changing the appropriate read barcode options to 
            specify vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableFastMode">
      <summary>
            Gets or sets a value that indicates whether to enable fast barcode reading.
            </summary>
      <value>
        <strong>true</strong> to enable fast barcode reading. Otherwise, <strong>false</strong>. 
            The default value is <strong>true</strong>.</value>
      <remarks>
        <para>It is recommended to leave fast mode reading enabled (<see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableFastMode" /> set to <strong>true</strong>). 
            It is suitable for most barcode qualities either good or poor.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableFastMode()
public void setEnableFastMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableFastMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.Granularity">
      <summary>
            Gets or sets a value that indicates the number of scanned lines per column to skip when reading a barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the number of scanned lines per column to skip when reading a barcode. 
            Must be a value greater to or equal to 1. The default value is 9.</value>
      <remarks>
        <para>A value of 9 means that each tenth line will be scanned when looking for a barcode. 
            Scanning every line will slow the search process while skipping too many lines
            may skip over the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGranularity()
public void setGranularity(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int granularity;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.MinimumStringLength">
      <summary>
            Gets or sets a value that indicates the minimum string length to use when searching for a non-fixed-length barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the minimum string length to use when searching for a non-fixed-length barcode. 
            </value>
      <remarks>
        <para>This value will only be used if the barcode type (symbology) supports variable lengths in the barcode data. 
             A value of 0 sets the engine to the 
            default length of 4 characters. To read all barcodes, set the <strong>MinimumStringLength</strong> to 1. The minimum number of characters is 0 and the maximum is 63.</para>
        <para>Set the maximum string length with <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MaximumStringLength" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getMinimumStringLength()
public void setMinimumStringLength(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int minimumStringLength;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.MaximumStringLength">
      <summary>
            Gets or sets a value that indicates the maximum string length to use when searching for a non-fixed-length barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the maximum string length to use when searching for a non-fixed-length barcode. 
            Must be a value between 0 and 63. The default value is 0.</value>
      <remarks>
        <para>This value will only be used if the barcode type (symbology) supports variable lengths in the barcode data. 
            A value of 0 means the length can be any value up to the maximum allowed (63).</para>
        <para>Set the minimum string length with <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.MinimumStringLength" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getMaximumStringLength()
public void setMaximumStringLength(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int maximumStringLength;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.WhiteLinesNumber">
      <summary>
            Gets or sets a value that indicates the minimum number of lines of white space above and below the barcode symbol.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the minimum number of lines of white space above and below the barcode symbol 
            to use when reading a barcode. Must be value
            greater than or equal to 0. The default value is 3.</value>
      <remarks>
        <para>A barcode on an image usually has white space around it. This value defines the minimum number of white space lines 
            (in pixels) that must exist around the barcode before
            it can be read. The default value of 3 means 3 pixels on the top and bottom of the barcode.</para>
        <para>Change this value when the barcode is adjacent to another object on the image.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getWhiteLinesNumber()
public void setWhiteLinesNumber(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int whiteLinesNumber;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.ReturnCheckDigit">
      <summary>
            Gets or sets a value that indicates whether the error check digit is returned as part of the barcode data.
            </summary>
      <value>Value indicating whether the error check digit is returned as part of the barcode data. The default value is <strong>Default</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.ReturnCheckDigit" /> to <strong>Yes</strong>, then this digit is returned 
            as part of barcode data (can be retrieved with
            <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> or <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>).
            Then parse the data and extract error check digit from the rest of the data based on the barcode symbology standard.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeReturnCheckDigit getReturnCheckDigit()
public void setReturnCheckDigit(BarcodeReturnCheckDigit value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeReturnCheckDigit returnCheckDigit;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck">
      <summary>
            Gets or sets a value that indicates whether the optional check word is used for validity check when reading a barcode 
            (if supported).
            </summary>
      <value>
        <strong>true</strong> to indicate that the optional check word is used for validity check when reading a barcode. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck" /> to <strong>true</strong>, then the engine will perform error 
            checking (CRC) using the optional check word and the barcode data before returning the barcode found. If the check failed, 
            no barcode is returned.</para>
        <para>The <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck" /> property setting will only have effect when reading barcode symbologies that support 
            an optional check word. These barcode symbologies are
            listed below:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Code 3 of 9 (Code 39) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code3Of9</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Standard 2 of 5 (Industrial 2 of 5) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeStandard2Of5</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Interleaved 2 of 5 (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.CodeInterleaved2Of5</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>Code 11 (USD-8) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>)</para>
            </description>
          </item>
          <item>
            <description>
              <para>CODABAR (Ames Code/USD-4/NW-7/2 of 7) (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Codabar</see>)</para>
            </description>
          </item>
        </list>
        <para>The rest of the symbologies supported by this options class requires the check word to be valid and checking 
            is not optional. The engine will always check the check word against
            the data regardless of the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.EnableErrorCheck" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableErrorCheck()
public void setEnableErrorCheck(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableErrorCheck;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.AvoidCorruptedBlocks">
      <summary>
            Gets or sets a value that indicates whether to avoid corrupted blocks when reading barcodes.
            </summary>
      <value>
        <strong>true</strong> to avoid corrupted blocks when reading barcodes. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AvoidCorruptedBlocks" /> is set to <strong>true</strong>, then the engine will use 
            logic to move around a corrupted area inside a barcode.
            The reader will attempt to move to a readable area within the barcode to avoid an area that can not be read. 
            This has the potential to noticeably reduce the speed of the
            engine and therefore, it is not recommended for normal use.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getAvoidCorruptedBlocks()
public void setAvoidCorruptedBlocks(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL avoidCorruptedBlocks;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.AllowPartialRead">
      <summary>
            Gets or sets a value that indicates whether partially read barcodes can be returned.
            </summary>
      <value>
        <strong>true</strong> to return partially read barcodes. Otherwise, <strong>false</strong> otherwise. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.AllowPartialRead" /> is set to <strong>true</strong>, then barcodes that could not be 
            read completely, for example, when error check fails or
            certain area of the barcode is corrupted, the engine will still return this barcode in its incomplete state. 
            There is no guarantee what part of the barcode is not read
            correctly and hence, it is not recommended to turn this feature on.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getAllowPartialRead()
public void setAllowPartialRead(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL allowPartialRead;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code11CheckDigitType">
      <summary>
            Gets or sets a value that indicate the check digit type to use when reading Code 11 (USD-8) barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType" /> enumeration member that indicates the check digit type to use when 
            reading Code 11 barcodes. The default value is
            <see cref="T:Leadtools.Barcode.Code11BarcodeCheckDigitType">Code11BarcodeCheckDigitType.CDigit</see>.</value>
      <remarks>
        <para>This property is only valid when reading Code 11 (USD-8) barcodes (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Code11</see>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public Code11BarcodeCheckDigitType getCode11CheckDigitType()
public void setCode11CheckDigitType(Code11BarcodeCheckDigitType value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTCode11BarcodeCheckDigitType code11CheckDigitType;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.MSIModuloType">
      <summary>
            Gets or sets a value that indicates the check digit type to use when reading MSI (Pulse Width Modulated) barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType" /> enumeration member that indicates the check digit type to use when reading Code 11 
            barcodes. The default value is
            <see cref="T:Leadtools.Barcode.MSIBarcodeModuloType">MSIBarcodeModuloType.Modulo10</see>.</value>
      <remarks>
        <para>This property is only valid when reading Pulse Width Modulated barcodes (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.MSI</see>).</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public MSIBarcodeModuloType getMSIModuloType()
public void setMSIModuloType(MSIBarcodeModuloType value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTMSIBarcodeModuloType msiModuloType;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code39Extended">
      <summary>
            Gets or sets a value that indicates whether to decode extended characters when reading code 3 of 9 symbols or not.
            </summary>
      <value>
        <strong>true</strong> to decode extended characters. Otherwise, <strong>false</strong>.
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.OneDBarcodeReadOptions.Code39Extended" /> is set to <strong>true</strong>, then extended characters could be decoded.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.OneDBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getCode39Extended()
public void setCode39Extended(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL Code39Extended;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions">
      <summary>
             Contains extra options to use when reading Patch Code barcodes.
             </summary>
      <keywords>Barcode,PatchCode|Barcode, Patch Code</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> class is used to control the options when reading 
             Patch Code barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology 
             (or group of common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method 
             passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see>
              </para>
            </description>
          </item>
        </list>
        <para>Then change the members of the returned <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
        <para>Also create an instance of the <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accepts 
             a single or array of options as an input
             parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing 
                  the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see></para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> contains these Patch Code barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>The number of scanned lines per column to skip when reading a barcode</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <example>
             This example will write and Patch Code barcode to/from an image.
             <!--PatchCodeBarcodeReadOptions--></example>
      <java>
        <pre>public class PatchCodeBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPatchCodeBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>9</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public PatchCodeBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" /> method created by this method, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of the this <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be 
            called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PatchCodeBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use 
            when searching for barcodes. The default value is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">
            BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. 
            By default, the reader will only search for barcodes in horizontal mode for performance reasons. 
            Alter this by changing the appropriate read barcode options to specify vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeReadOptions.Granularity">
      <summary>
            Gets or sets a value that indicates the number of scanned lines per column to skip when reading a barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicate the number of scanned lines per column to skip when reading a barcode. 
            Must be a value greater to or equal to 1. The default value is 9.</value>
      <remarks>
        <para>A value of 9 means that each tenth line will be scanned when looking for a barcode. 
            Scanning every line will slow the search process while skipping too many lines
            may skip over the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGranularity()
public void setGranularity(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int granularity;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions">
      <summary>
             Contains extra options to use when writing Patch Code barcodes.
             </summary>
      <keywords>Barcode,PatchCode|Barcode, Patch Code</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> class is used to control the options 
             when writing Patch Code barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology 
             (or group of common symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, passing one of 
             the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see>
              </para>
            </description>
          </item>
        </list>.
             <para>Then change the members of the returned <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />, by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />.</para><para>You can also create an instance of the <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> class and use it 
             directly in the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts 
             the options as an input parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to use when writing 
                  a barcode to an image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) to use when writing a 
                  barcode to an image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see></para></description></item></list><para>In addition to these features and members, <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> contains these 
             Patch Code barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule" /></term><description><para>Use the XModule when writing barcodes of this type</para></description></item><item><term><see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule" /></term><description><para>The size of the smallest module when writing a Patch Code barcode</para></description></item></list></remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public class PatchCodeBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPatchCodeBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">
            BarcodeWriteOptions()</see>, the members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public PatchCodeBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by 
            this write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PatchCode</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called 
            directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule">
      <summary>
            Gets or sets a value that indicates whether to use the XModule when writing barcodes of this type.
            </summary>
      <value>
        <strong>true</strong> to use <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule" /> when writing barcodes of this type. 
            Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule" /> is set to <strong>false</strong>, then the smallest 
            module size is calculated from the size of the barcode data
            (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, 
            then the smallest module size is set in <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule" /> and the barcode data size may
            be used as a "clipping" boundary.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseXModule()
public void setUseXModule(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useXModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a Patch Code barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a Patch Code barcode 
            in a thousandths of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>Only used if the value of <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, otherwise, 
            the module size is calculated from the data size
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in <see cref="P:Leadtools.Barcode.PatchCodeBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PatchCodeBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PDF417BarcodeWriteOptions">
      <summary>
             Contains extra options to use when writing PDF417 barcodes.
             </summary>
      <keywords>Barcode,PDF417 (2D)|PDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> class is used to control the options for writing PDF417 barcodes using LEADTOOLS. 
             Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
             These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, by passing <see cref="T:Leadtools.Barcode.BarcodeSymbology">
             BarcodeSymbology.PDF417</see>. Then
             change the members of the returned <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to 
             <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a barcode 
                  to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a barcode to an 
                  image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> contains these PDF417 barcode 
             specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>Horizontal alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>Vertical alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Truncated" />
            </term>
            <description>
              <para>Write truncated PDF417 symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode" />
            </term>
            <description>
              <para>Enable group mode when writing PDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" />
            </term>
            <description>
              <para>The width part of the aspect ratio for the symbol.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" />
            </term>
            <description>
              <para>The height part of the aspect ratio for the symbol.
             </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" />
            </term>
            <description>
              <para>Use the Rows and Columns values as limits when writing the symbol.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" />
            </term>
            <description>
              <para>The maximum number of columns to use when writing PDF417 symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" />
            </term>
            <description>
              <para>The maximum number of Rows to use when writing PDF417 symbols.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>The size of the smallest module when writing a PDF417 barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModuleAspectRatio" />
            </term>
            <description>
              <para>The ratio between the width of the smallest element (XModule) to the height of a row of the PDF417 symbol 
             to use when writing PDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel" />
            </term>
            <description>
              <para>The ECC (Error Correction) level to use when writing PDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage" />
            </term>
            <description>
              <para>Indicates the percentage of ECC characters to use when writing PDF417 barcodes.
             </para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public class PDF417BarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPDF417BarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Truncated" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" />
            </term>
            <description>
              <para>2</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" />
            </term>
            <description>
              <para>1</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModuleAspectRatio" />
            </term>
            <description>
              <para>3</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel">PDF417BarcodeECCLevel.Level0</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public PDF417BarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this write 
            options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PDF417BarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.HorizontalAlignment">
      <summary>
            Gets or sets a value indicating the horizontal alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicating the horizontal alignment to use when fitting 
            this barcode inside the destination bounds.
            Default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output 
            rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a 
            special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds are used, an alignment value can be set to determine whether the resulting barcode 
            is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getHorizontalAlignment()
public void setHorizontalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment horizontalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.VerticalAlignment">
      <summary>
            Gets or sets a value indicating the vertical alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the vertical alignment to use when fitting 
            this barcode inside the destination bounds.
            The default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the output 
            rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a 
            special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can be set to determine whether the resulting 
            barcode is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getVerticalAlignment()
public void setVerticalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment verticalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Truncated">
      <summary>
            Gets or sets a value indicating whether to write truncated PDF417 symbols.
            </summary>
      <value>
        <strong>true</strong> to write truncated PDF417 symbols. Otherwise, <strong>false</strong>. The default value is 
            <strong>false</strong>.</value>
      <remarks>
        <para>Truncated PDF417 are symbols that are missing one data crossword and the stop bars. Not all scanners will read 
            Truncated PDF417, however LEADTOOLS will read these symbols normally.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getTruncated()
public void setTruncated(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL truncated;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode">
      <summary>
            Gets or sets a value that indicate whether to enable group mode when writing PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to enable group mode when writing PDF417 barcodes. Otherwise, <strong>false.</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>To enable group mode, set the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode" /> to <strong>true</strong> and set the group 
            code required in <see cref="P:Leadtools.Barcode.PDF417BarcodeData.Group">PDF417BarcodeData.Group</see> before writing the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableGroupMode()
public void setEnableGroupMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableGroupMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio">
      <summary>
            Gets or sets a value that indicates the width part of the aspect ratio for the symbol.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicate the width part of the aspect ratio for the symbol. Must be a value greater 
            than or equal to 1. The default value is 2.</value>
      <remarks>
        <para>Aspect ratio to use when writing PDF417 symbols is "Symbol height aspect ratio" divided by "Symbol width aspect ratio" 
            or <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" />/
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" />. The default values for these properties is 1 and 2 respectively. Therefore, the default 
            aspect ratio is 1/2 or 0.5</para>
        <para>Only used when the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is <strong>false</strong>.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getSymbolWidthAspectRatio()
public void setSymbolWidthAspectRatio(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int symbolWidthAspectRatio;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio">
      <summary>
            Gets or sets a value that indicates the height part of the aspect ratio for the symbol.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the height part of the aspect ratio for the symbol. Must be value greater 
            than or equal to 1. The default value is 1.</value>
      <remarks>
        <para>Aspect ratio to use when writing PDF417 symbols is "Symbol height aspect ratio" divided by "Symbol width aspect ratio" 
            or <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" />/
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" />. The default values for these properties is 1 and 2 respectively, hence, the default 
            aspect ratio is 1/2 or 0.5</para>
        <para>Only used when the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is <strong>false</strong>.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getSymbolHeightAspectRatio()
public void setSymbolHeightAspectRatio(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int symbolHeightAspectRatio;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns">
      <summary>
            Gets or sets a value that indicates whether to use the <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> values as limits 
            when writing the symbol.
            </summary>
      <value>
        <strong>true</strong> to use the <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> values as limits when writing the symbol. 
            Otherwise, <strong>false</strong>.
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is set to <strong>false</strong> (the default), then the number of 
            rows and columns to use is determined by the total symbol size and the ratio of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" /> divided by 
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" />. <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> are not used.</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is set to <strong>true</strong>, then the number of rows and columns 
            to be used is determined by the limit set in <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" />. <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" /> and 
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" /> are not used.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getLimitByRowsAndColumns()
public void setLimitByRowsAndColumns(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL limitByRowsAndColumns;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows">
      <summary>
            Gets or sets a value that indicate the maximum number of rows to use when writing PDF417 symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicate the maximum number of rows to use when writing PDF417 symbols. Must be a value between 0 and 90. The default value is 0.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> are only used when the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> is <strong>true</strong>, otherwise,
            these values are not used and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" /> are used instead.</para>
        <para>A value of 0 for <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> or <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> means calculate the smallest rows and columns size required to write the data stored in
            <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getRows()
public void setRows(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int rows;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns">
      <summary>
            Gets or sets a value that indicates the maximum number of columns to use when writing PDF417 symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the maximum number of columns to use when writing PDF417 symbols. 
            Must be a value between 0 and 30. The default value is 0.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> are only used when the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.LimitByRowsAndColumns" /> 
            is <strong>true</strong>, otherwise, these values are not used and <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolHeightAspectRatio" /> and 
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.SymbolWidthAspectRatio" /> are used instead.</para>
        <para>A value of 0 for <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Rows" /> or <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.Columns" /> means calculate the smallest rows and columns size required to 
            write the data stored in
            <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getColumns()
public void setColumns(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int columns;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicate the size of the smallest module when writing a PDF417 barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicate the size of the smallest module when writing a PDF417 barcode in a thousands of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.XModuleAspectRatio">
      <summary>
            Gets or sets a value that indicates the ratio between the width of the smallest element (XModule) to the height of a row of the 
            PDF417 symbol to use when writing PDF417 barcodes.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the ratio between the width of the smallest element (XModule) to the height of a row 
            of the PDF417 symbol to use when writing. Must be a value greater than or equal to 1. The default value is 3.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModuleAspectRatio()
public void setXModuleAspectRatio(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModuleAspectRatio;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel">
      <summary>
            Gets or sets a value that indicates the ECC (Error Correction) level to use when writing PDF417 barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel" /> enumeration member that determines the ECC (Error Correction) level to use 
            when writing PDF417 barcodes. The default value
            is <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel">PDF417BarcodeECCLevel.Level0</see>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel" /> is <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel">PDF417BarcodeECCLevel.UsePercentage</see>, 
            then the ECC level is determined by the value set in <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage" /> instead of using one of the predefined number 
            of words.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public PDF417BarcodeECCLevel getECCLevel()
public void setECCLevel(PDF417BarcodeECCLevel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTPDF417BarcodeECCLevel eccLevel;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage">
      <summary>
            Gets or sets a value that indicates the percentage of ECC characters to use when writing PDF417 barcodes.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the percentage of ECC characters to use when writing PDF417 barcodes. 
            The ECC level will be chosen from this percentage. Must be a value between 0 and 100. The default value is 0.</value>
      <remarks>
        <para>The value of <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage" /> will only be used when <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel" /> is set to 
            <see cref="T:Leadtools.Barcode.PDF417BarcodeECCLevel">PDF417BarcodeECCLevel.UsePercentage</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getECCPercentage()
public void setECCPercentage(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int eccPercentage;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PDF417BarcodeReadOptions">
      <summary>
             Contains extra options to use when reading PDF417 barcodes.
             </summary>
      <keywords>Barcode,PDF417 (2D)|PDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> class is used to control the options when reading PDF417 
             barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common symbologies).
             These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method passing <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>. 
             Then change the members of the returned <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> 
             to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept 
             a single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                  from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, the <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> contains these PDF417 barcodes 
             specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>Enable internal auto preprocessing of the image data if no PDF417 barcode was found</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>Enable or disable fast PDF417 reading mode</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadMode" />
            </term>
            <description>
              <para>The channel mode to use when reading PDF417 barcodes.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReturnCorruptedSymbolArea" />
            </term>
            <description>
              <para>Instruct the engine to return the area where an un-readable PDF417 symbol is located (with no data).</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileNameField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroTimestampField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSenderField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField" />,
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroChecksumField" /> and
                  <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField" /></term>
            <description>
              <para>Retrieve an optional macro field when reading PDF417 barcodes.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 Barcodes in LEADTOOLS</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public class PDF417BarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPDF417BarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableFastMode" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadMode" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.PDF417BarcodeReadMode">PDF417BarcodeReadMode.Mode0</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReturnCorruptedSymbolArea" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileNameField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroTimestampField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSenderField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroChecksumField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public PDF417BarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) this <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PDF417BarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use when searching for barcodes. 
            The default value is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. By default, 
            the reader will only search for the barcodes horizontally due to performance reasons. Alter this, by changing the appropriate read 
            barcode options to specify vertical or both (horizontal and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableDoublePass">
      <summary>
            Gets or sets a value indicating whether to use double pass when reading PDF417 symbols.
            </summary>
      <value>
        <strong>true</strong> to use double pass when reading PDF417 symbols. Otherwise, <strong>false</strong>. 
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When reading 2D barcodes, LEADTOOLS can perform internal auto pre-processing on the image and try again if the engine 
            cannot detect the required barcode . This may take extra processing and increase the barcode detection time. Therefore, it is not 
            recommended to always have it enabled except in certain situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is reading barcodes of this type exclusively. For example, a dedicated PDF417 reader. 
              When always reading barcodes is more important than recognition speed.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The application uses barcode detection on a server. In this case, the time spent on the actual barcode 
              detection is most probably less than the time required to send the image to the server and get the result back due to network latency. 
              Hence, it makes sense to turn this feature on in this situation.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The images provided may have a small resolution (DPI) or known to come from a source that does not provide clean
              images always, for example, a Fax machine or a Scanner. Enabling double pass here ensures that you can read the barcodes regardless on 
              the quality of the input image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The LEADTOOLS .NET C# and VB Barcode Demo leaves the option disabled by default. 
              When the user tries to read a barcode of this type and the engine
            cannot find it, it will then ask the user if they want to turn this feature on and try again. 
            An approach like that (or an automated one: read, if fails, enable and read again) can
            also be used.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableDoublePass()
public void setEnableDoublePass(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableDoublePass;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.EnableFastMode">
      <summary>
            Gets or sets a value indicating whether fast PDF417 reading mode is enabled.
            </summary>
      <value>
        <strong>true</strong> when fast PDF417 reading mode is enabled. Otherwise, <strong>false</strong>. The default value is 
            <strong>false</strong>.</value>
      <remarks>
        <para>Disabling fast mode can sometimes help recognize broken or not very clear PDF417 symbols.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableFastMode()
public void setEnableFastMode(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableFastMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadMode">
      <summary>
            Gets or sets a value that indicates the channel mode to use when reading PDF417 barcodes.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.PDF417BarcodeReadMode" /> enumeration member that specifies the channel mode to use when reading PDF417 barcodes. 
            Default value is <see cref="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode0" /></value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadMode" /> for more information.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public PDF417BarcodeReadMode getReadMode()
public void setReadMode(PDF417BarcodeReadMode value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTPDF417BarcodeReadMode readMode;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReturnCorruptedSymbolArea">
      <summary>
            Gets or sets a value that indicates whether the engine returns the area where an un-readable PDF417 symbol is located.
            </summary>
      <value>
        <strong>true</strong> to return the area that an un-readable PDF417 symbol is located". Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of this property is set to the default of <strong>false</strong>, the <see cref="T:Leadtools.Barcode.BarcodeReader" /> will throw an 
            exception of type <see cref="T:Leadtools.Barcode.BarcodeException" /> with an error code of <see cref="T:Leadtools.Barcode.BarcodeExceptionCode">BarcodeExceptionCode.FoundCorrupt</see>. If you set the value to
            <strong>true</strong> however, then the reader will return the barcode data object with only the 
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>
            member as valid. i.e., with no data.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReturnCorruptedSymbolArea()
public void setReturnCorruptedSymbolArea(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL returnCorruptedSymbolArea;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileNameField">
      <summary>
            Gets or sets a value that indicates whether optional macro 'File Name' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'File Name' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroFileNameField()
public void setReadOptionalMacroFileNameField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroFileNameField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSegmentCountField">
      <summary>
            Gets or sets a value that indicates whether optional macro 'Segment Count' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Segment Count' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroSegmentCountField()
public void setReadOptionalMacroSegmentCountField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroSegmentCountField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroTimestampField">
      <summary>
            Gets or sets a value that indicates whether optional macro 'Time Stamp' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Time Stamp' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroTimestampField()
public void setReadOptionalMacroTimestampField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroTimestampField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroSenderField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'Sender' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Sender' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroSenderField()
public void setReadOptionalMacroSenderField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroSenderField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroAddresseeField">
      <summary>
            Gets or sets a value that indicate whether optional macro 'Addressee' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'Addressee' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroAddresseeField()
public void setReadOptionalMacroAddresseeField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroAddresseeField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroFileSizeField">
      <summary>
            Gets or sets a value that indicates whether the optional macro 'File Size' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro 'File Size' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroFileSizeField()
public void setReadOptionalMacroFileSizeField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroFileSizeField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacroChecksumField">
      <summary>
            Gets or sets a value that indicates whether optional macro 'Checksum' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve optional macro 'Checksum' field when reading PDF417 barcodes. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacroChecksumField()
public void setReadOptionalMacroChecksumField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacroChecksumField;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadOptionalMacro79AndAZField">
      <summary>
            Gets or sets a value that indicates whether the optional macro '7 to 9 and A to Z' field is retrieved when reading PDF417 barcodes.
            </summary>
      <value>
        <strong>true</strong> to retrieve the optional macro '7 to 9 and A to Z' field when reading PDF417 barcodes. Otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getReadOptionalMacro79AndAZField()
public void setReadOptionalMacro79AndAZField(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL readOptionalMacro79AndAZField;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PDF417BarcodeData">
      <summary>
             Contains the data for a single MicroPDF417 barcode.
             </summary>
      <keywords>Barcode,MicroPDF417 (2D)|MicroPDF417</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add specific data that 
             can be read or written when using MicroPDF417 barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a MicroPDF417 (<see cref="T:Leadtools.Barcode.BarcodeSymbology">
             BarcodeSymbology.MicroPDF417</see>), the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will return the 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>Perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> and then examine the extra data 
             properties associated with it.</para>
        <para>In addition to all the data members returned as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, this class adds 
             the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.DataCode" /> - The MicroPDF417 barcode function code word for Code 128 emulation.</para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.MicroPDF417BarcodeData.IsLinked" /> - Indicates that the MicroPDF417 barcode is linked to a linear symbol printed below it.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other MicroPDF417 read options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is used to write 
             a barcode to an image. This method accept the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object. 
             To write a MicroPDF417 barcode, create an instance of <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
             and fill the required parameters then pass this object as the <i>data</i> parameter to <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>In addition to all the data members that must be set as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, 
             you must also specify the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.PDF417BarcodeData.Group" /> - The group number if this PDF417 barcode symbol is a member of a 
               group of symbols</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other MicroPDF417 write options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" /> class.</para>
        <para>Use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">BarcodeData.CreateDefaultBarcodeData</see>
             method to create a new instance of <see cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" /> that contains default parameters ready for writing to an image:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim microPDF417Data As MicroPDF417BarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroPDF417), MicroPDF417BarcodeData)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             MicroPDF417BarcodeData microPDF417Data = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.MicroPDF417) as MicroPDF417BarcodeData;
             </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 Barcodes In LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example writes a couple of PDF417 barcode with different options to an image and then reads them back.
             <!--PDF417BarcodeData--></example>
      <java>
        <pre>public class PDF417BarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTPDF417BarcodeData : LTBarcodeData&lt;LTBarcodeDataDelegate&gt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PDF417BarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PDF417BarcodeData.Group" />
            </term>
            <description>0</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>public PDF417BarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PDF417BarcodeData.Clone">
      <summary>
            Creates an exact copy of this PDF417 barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PDF417BarcodeData" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> 
            to clone the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) associated with this
            <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> and 
            will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PDF417</see>. Attempting to set this property to any 
            other symbology value is illegal and will result in an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PDF417BarcodeData.Group">
      <summary>
            Gets or sets a value that specifies whether this PDF417 barcode symbol is a member of a group of symbols.
            </summary>
      <value>An <see cref="T:System.Int32" /> that specifies whether this PDF417 barcode symbol is a member of a group of symbols. 
            Default value is 0.</value>
      <remarks>
        <para>This property is set by the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object when a PDF417 symbol is read.</para>
        <para>To use this value when writing PDF417 symbols you must set the value of
            <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.EnableGroupMode">PDF417BarcodeWriteOptions.EnableGroupMode</see> to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeData" />.</para>
      </example>
      <java>
        <pre>
public int getGroup()
public void setGroup(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int group;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PDF417BarcodeReadMode">
      <summary>
             PDF417 read modes.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PDF417BarcodeReadMode" /> enumeration is used as the type for the 
             <see cref="P:Leadtools.Barcode.PDF417BarcodeReadOptions.ReadMode">PDF417BarcodeReadOptions.ReadMode</see> property
             and can be used to control which mode to use when reading the PDF417 data.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeReadOptions" />.</para>
      </example>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 Barcodes in LEADTOOLS</seealso>
      <java>
        <pre>public enum PDF417BarcodeReadMode</pre>
      </java>
      <objectivec>
        <pre>enum LTPDF417BarcodeReadMode</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode0">
      <summary>
        <para>Basic channel mode with no transmission of symbology. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para>
      </summary>
      <java>
        <pre>MODE0</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeReadMode_Mode0</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode1">
      <summary>
        <para>Basic channel mode with transmit L1 symbology. Escape doubling. Macro PDF is transmitted. 
            ECI is transmitted. Reserved code words are transmitted.</para>
      </summary>
      <java>
        <pre>MODE1</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeReadMode_Mode1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode2">
      <summary>
        <para>Basic channel mode with transmit L2 symbology. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para>
      </summary>
      <java>
        <pre>MODE2</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeReadMode_Mode2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode3Basic">
      <summary>
        <para>Basic channel mode with transmit L0 symbology. No escape doubling. Macro PDF is illegal. 
            ECI is illegal. Reserved code words are illegal.</para>
      </summary>
      <java>
        <pre>MODE3_BASIC</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeReadMode_Mode3Basic</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeReadMode.Mode3Extended">
      <summary>
        <para>Basic channel mode with transmit L0 symbology. Escape doubling. Macro PDF is transmitted. 
            ECI is transmitted in GLI format. Reserved code words transmitted.</para>
      </summary>
      <java>
        <pre>MODE3_EXTENDED</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeReadMode_Mode3Extended</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PDF417BarcodeECCLevel">
      <summary>
            Specifies the PDF417 symbol ECC level.
            </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCLevel">PDF417BarcodeWriteOptions.ECCLevel</see> 
            property to specify the PDF417 barcode ECC (Error Correction) level.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PDF417BarcodeWriteOptions" />.</para>
      </example>
      <seealso cref="T:BA.Topics.PDF417BarcodeInLEADTOOLS">PDF417 Barcodes In LEADTOOLS</seealso>
      <java>
        <pre>public enum PDF417BarcodeECCLevel</pre>
      </java>
      <objectivec>
        <pre>enum LTPDF417BarcodeECCLevel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level0">
      <summary>
            (0)<para>Use 2 code words for error correction</para></summary>
      <java>
        <pre>LEVEL0</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level0</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level1">
      <summary>
            (1)<para>Use 4 code words for error correction</para></summary>
      <java>
        <pre>LEVEL1</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level2">
      <summary>
            (2)<para>Use 8 code words for error correction</para></summary>
      <java>
        <pre>LEVEL2</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level3">
      <summary>
            (3)<para>Use 16 code words for error correction</para></summary>
      <java>
        <pre>LEVEL3</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level4">
      <summary>
            (4)<para>Use 32 code words for error correction</para></summary>
      <java>
        <pre>LEVEL4</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level5">
      <summary>
            (5)<para>Use 54 code words for error correction</para></summary>
      <java>
        <pre>LEVEL5</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level6">
      <summary>
            (6)<para>Use 128 code words for error correction</para></summary>
      <java>
        <pre>LEVEL6</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level6</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level7">
      <summary>
            (7)<para>Use 256 code words for error correction</para></summary>
      <java>
        <pre>LEVEL7</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level7</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.Level8">
      <summary>
            (8)<para>Use 512 code words for error correction</para></summary>
      <java>
        <pre>LEVEL8</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_Level8</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.PDF417BarcodeECCLevel.UsePercentage">
      <summary>
            (9)<para>Use the percentage value set in <see cref="P:Leadtools.Barcode.PDF417BarcodeWriteOptions.ECCPercentage">PDF417BarcodeWriteOptions.ECCPercentage</see></para></summary>
      <java>
        <pre>USE_PERCENTAGE</pre>
      </java>
      <objectivec>
        <pre>LTPDF417BarcodeECCLevel_UsePercentage</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions">
      <summary>
             Contains the extra options to use when writing POSTNET and PLANET barcodes.
             </summary>
      <keywords>Barcode,POSTNET|Barcode,PLANET</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> class is used to control the options when writing POSTNET and PLANET 
             barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common symbologies). 
             These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, 
             passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see>
              </para>
            </description>
          </item>
        </list>.
             <para>Then change the members of the returned <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />.</para><para>You can also create an instance of the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a barcode 
                  to an image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) to use when 
                  writing a barcode to an image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see></para></description></item></list><para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> contains these 
             POSTNET and PLANET barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule" /></term><description><para>Uses the XModule when writing barcodes of this type</para></description></item><item><term><see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule" /></term><description><para>The size of the smallest module when writing a POSTNET and PLANET barcode</para></description></item></list></remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public class PostNetPlanetBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPostNetPlanetBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">BarcodeWriteOptions()</see>, 
            the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public PostNetPlanetBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this write options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) of this <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule">
      <summary>
            Gets or sets a value that indicates whether to use the XModule when writing barcodes of this type.
            </summary>
      <value>
        <strong>true</strong> to use <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule" /> when writing barcodes of this type. Otherwise, 
            <strong>false</strong>. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule" /> is set to <strong>false</strong>, then the smallest module 
            size is calculated from the size of the barcode data
            (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>When the value of <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, then the smallest module 
            size is set in <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule" /> and the barcode data size may
            be used as a "clipping" boundary.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getUseXModule()
public void setUseXModule(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL useXModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a POSTNET/PLANET barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a POSTNET/PLANET barcode in  
            thousandths of an inch. Must be a value greater than or equal to 0.
            The default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>Only used if the value of <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.UseXModule" /> is set to <strong>true</strong>, otherwise, the module size is calculated 
            from the data size
            <see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>).</para>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions">
      <summary>
             Contains the extra options to use when reading POSTNET and PLANET barcodes.
             </summary>
      <keywords>Barcode,POSTNET|Barcode,PLANET</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> class is used to control the options when reading 
             POSTNET and PLANET barcodes using LEADTOOLS. Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">
             BarcodeReader.GetDefaultOptions</see> method passing one of the following:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see>
              </para>
            </description>
          </item>
          <item>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see>
              </para>
            </description>
          </item>
        </list>
        <para>Change the members of the returned <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> by casting it from 
             <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> class and use it directly 
             in the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept a 
             single or array of options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when reading a 
                  barcode from a colored image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following symbologies:
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see> and
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see></para>
            </description>
          </item>
        </list>
        <para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> 
             contains these POSTNET/PLANET barcodes specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>The direction to use when searching for barcodes (horizontal, vertical or both)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>The number of scanned lines per column to skip when reading a barcode</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.WhiteLinesNumber" />
            </term>
            <description>
              <para>The minimum number of lines of white space above and below the barcode symbol</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>The error check digit is returned as part of the barcode data</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.USPSAnd4StateBarcodeInLEADTOOLS">USPS and 4-State Barcodes in LEADTOOLS</seealso>
      <example>
             This example writes a POSTNET and a PLANET barcodes to an image and then reads them back.
             <!--PostNetPlanetBarcodeReadOptions--></example>
      <java>
        <pre>public class PostNetPlanetBarcodeReadOptions extends BarcodeReadOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTPostNetPlanetBarcodeReadOptions : LTBarcodeReadOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.SearchDirection" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.Granularity" />
            </term>
            <description>
              <para>9</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.WhiteLinesNumber" />
            </term>
            <description>
              <para>3</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.ReturnCheckDigit" />
            </term>
            <description>
              <para>
                <strong>
                  <see cref="T:Leadtools.Barcode.BarcodeReturnCheckDigit">BarcodeReturnCheckDigit.Default</see>
                </strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public PostNetPlanetBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> class will return an array containing the following 
            symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.PostNet</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.Planet</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) of this <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived typed and should not be called directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.SearchDirection">
      <summary>
            Gets or sets a value that indicates the direction to use when searching for barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSearchDirection" /> enumeration member that indicates the direction to use when 
            searching for barcodes. The default value is <see cref="T:Leadtools.Barcode.BarcodeSearchDirection">BarcodeSearchDirection.Horizontal</see>.
            </value>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class can search for barcodes in the image horizontally or vertically. 
            By default, the reader will only search for the barcodes horizontally due to performance reasons. Alter this, by changing 
            the appropriate read barcode options to specify vertical or both (horizontal
            and vertical) search direction.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> and 
            <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeSearchDirection getSearchDirection()
public void setSearchDirection(BarcodeSearchDirection value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSearchDirection searchDirection;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.Granularity">
      <summary>
            Gets or sets a value that indicates the number of scanned lines per column to skip when reading a barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the number of scanned lines per column to skip when reading a barcode. 
            Must be a value greater than or equal to 1. The default value is 9.</value>
      <remarks>
        <para>A value of 9 means that each tenth line will be scanned when looking for a barcode. Scanning every line 
            will slow the search process while skipping too many lines may skip over the barcode.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGranularity()
public void setGranularity(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign int granularity;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.WhiteLinesNumber">
      <summary>
            Gets or sets a value that indicate the minimum number of lines of white space above and below the barcode symbol.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the minimum number of lines of white space above and below the barcode 
            symbol to use when reading a barcode. Must be a value greater than or equal to 0. The default value is 3.</value>
      <remarks>
        <para>A barcode on an image usually has white space around it. This value defines the minimum number of white space 
            lines (in pixels) that must exist around the barcode before it can be read. The default value of 3 means 3 pixels on 
            the top and bottom of the barcode.</para>
        <para>Change this value when the barcode is adjacent to another object on the image.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public int getWhiteLinesNumber()
public void setWhiteLinesNumber(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int whiteLinesNumber;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.ReturnCheckDigit">
      <summary>
            Gets or sets a value that indicates whether the error check digit is returned as part of the barcode data.
            </summary>
      <value>Value indicating whether the error check digit is returned as part of the barcode data. The default value is <strong>Default</strong>.</value>
      <remarks>
        <para>If you set the value of <see cref="P:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions.ReturnCheckDigit" /> to <strong>Yes</strong>, then this digit is 
            returned as part of barcode data (can be retrieved with
            <see cref="M:Leadtools.Barcode.BarcodeData.GetData">BarcodeData.GetData</see> or <see cref="P:Leadtools.Barcode.BarcodeData.Value">BarcodeData.Value</see>). 
            Then parse the data and extract the error-check digit from the rest of the data based on the barcode symbology standard.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.PostNetPlanetBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public BarcodeReturnCheckDigit getReturnCheckDigit()
public void setReturnCheckDigit(BarcodeReturnCheckDigit value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeReturnCheckDigit returnCheckDigit;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.QRBarcodeWriteOptions">
      <summary>
             Contains extra options to use when writing QR barcodes.
             </summary>
      <keywords>Barcode,QR|2D Barcode (QR)|QR|QR (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> class is used to control the options when writing QR barcodes using LEADTOOLS. 
             Set the options in two ways:</para>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeWriter.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeWriter.GetDefaultOptions</see> method, 
             passing <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>. Then
             change the members of the returned <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> by casting it from <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> 
             to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
        <para>You can also create an instance of the <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</see> method which accepts the options as an input parameter.</para>
        <para>The base <see cref="T:Leadtools.Barcode.BarcodeWriteOptions" /> contains the following members and features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor">BarcodeWriteOptions.ForeColor</see>
            </term>
            <description>
              <para>Controls the barcode foreground color (color of the bars or symbols) to use when writing a 
                  barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor">BarcodeWriteOptions.BackColor</see>
            </term>
            <description>
              <para>Controls the barcode background color (color of the spaces) to use when writing a 
                  barcode to an image.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Load">BarcodeWriteOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.Save">BarcodeWriteOptions.Save</see></term>
            <description>
              <para>Can be used to save or load the options to/from an XML file or stream.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeWriteOptions.GetSupportedSymbologies</see>
            </term>
            <description>
              <para>This class overrides the base class method to return an array containing the following 
                  symbologies: <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see></para>
            </description>
          </item>
        </list>
        <para>In addition to these features and members, the <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> contains these QR barcodes 
             specific features:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>Horizontal alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>Vertical alignment for the barcode inside the destination bounds.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupNumber" />
            </term>
            <description>
              <para>The group number to use when writing QR barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupTotal" />
            </term>
            <description>
              <para>The group total to use when writing QR barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>The size of the smallest module when writing a QR barcode.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.ECCLevel" />
            </term>
            <description>
              <para>The ECC (Error Correction) level to use when writing QR barcodes.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.QRBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <java>
        <pre>public class QRBarcodeWriteOptions extends BarcodeWriteOptions</pre>
      </java>
      <objectivec>
        <pre>@interface LTQRBarcodeWriteOptions : LTBarcodeWriteOptions</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in 
            <see cref="M:Leadtools.Barcode.BarcodeWriteOptions.#ctor">BarcodeWriteOptions()</see>, the following members are
            initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.HorizontalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.VerticalAlignment" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>
              </para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupNumber" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupTotal" />
            </term>
            <description>
              <para>0</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.XModule" />
            </term>
            <description>
              <para>30</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.ECCLevel" />
            </term>
            <description>
              <para>
                <see cref="T:Leadtools.Barcode.QRBarcodeECCLevel">QRBarcodeECCLevel.LevelL</see>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>public QRBarcodeWriteOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this write 
            options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, use 
            <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> cone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method clones (creates a new object) this <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called directly 
            by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeWriteOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.QRBarcodeWriteOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeWriteOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.HorizontalAlignment">
      <summary>
            Gets or sets a value indicating the horizontal alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicating the horizontal alignment to use when 
            fitting this barcode inside the destination bounds.
            Default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all the area defined by the 
            output rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have a 
            special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds is used, an alignment value can set to determine whether the result barcode 
            is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getHorizontalAlignment()
public void setHorizontalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment horizontalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.VerticalAlignment">
      <summary>
            Gets or sets a value indicating the vertical alignment to use when fitting this barcode inside the destination bounds.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration member that indicates the vertical alignment to use when 
            fitting this barcode inside the destination bounds.
            The default value is <see cref="T:Leadtools.Barcode.BarcodeAlignment">BarcodeAlignment.Near</see>.</value>
      <remarks>
        <para>When writing barcodes, the <see cref="T:Leadtools.Barcode.BarcodeWriter" /> object may not use all of the area defined by the output 
            rectangle (<see cref="P:Leadtools.Barcode.BarcodeData.Bounds">BarcodeData.Bounds</see>)
            since not all sizes can be used when writing a barcode and the value of the width and height of the bounds can have 
            a special meaning. For more information,
            refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</see>.</para>
        <para>In cases where not all of the bounds are used, an alignment value can be set to determine whether the resulting 
            barcode is left, top, right, bottom or center aligned to the rectangle.
            For these, you can use the <see cref="T:Leadtools.Barcode.BarcodeAlignment" /> enumeration to control how the barcode is written.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.BarcodeAlignment" />.</para>
      </example>
      <java>
        <pre>
public BarcodeAlignment getVerticalAlignment()
public void setVerticalAlignment(BarcodeAlignment value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeAlignment verticalAlignment;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupNumber">
      <summary>
            Gets or sets a value that indicates the group number to use when writing QR barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the group number to use when writing QR barcode. Must be a 
            value between 0 and 16. The default value is 0.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupTotal" /> to set the total number of groups.</para>
        <para>Use only if this QR barcode is part of a group of symbols, otherwise, leave this value as the default of 0.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGroupNumber()
public void setGroupNumber(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int groupNumber;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupTotal">
      <summary>
            Gets or sets a value that indicates the group total to use when writing QR barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the group total to use when writing QR barcode. 
            Must be a value between 0 and 16. The default value is 0.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.GroupNumber" /> to set the group number.</para>
        <para>Use only if this QR barcode is part of a group of symbols, otherwise, leave this value as the default of 0.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getGroupTotal()
public void setGroupTotal(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int groupTotal;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.XModule">
      <summary>
            Gets or sets a value that indicates the size of the smallest module when writing a QR barcode.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the size of the smallest module when writing a QR barcode in a thousandths 
            of an inch. Must be a value greater to or equal to 0.
            Default value is 30 (0.03 of an inch).</value>
      <remarks>
        <para>If the value is too small, a minimum of 2 pixels will be used regardless of the value set in <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.XModule" />.</para>
        <para>For more information, refer to <see cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">
            Writing Barcodes - Bounds and XModule</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public int getXModule()
public void setXModule(int value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) int xModule;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeWriteOptions.ECCLevel">
      <summary>
            Gets or sets a value that indicates the ECC (Error Correction) level to use when writing QR barcodes.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.QRBarcodeECCLevel" /> enumeration member that determine the ECC (Error Correction) level 
            to use when writing QR barcodes. Default value
            is <see cref="T:Leadtools.Barcode.QRBarcodeECCLevel">QRBarcodeECCLevel.LevelL</see>.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Barcode.QRBarcodeECCLevel" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <java>
        <pre>
public QRBarcodeECCLevel getECCLevel()
public void setECCLevel(QRBarcodeECCLevel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTQRBarcodeECCLevel eccLevel;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.QRBarcodeData">
      <summary>
             Contains the data for a single QR barcode.
             </summary>
      <keywords>Barcode,QR|2D Barcode (QR)|QR|QR (2D) Barcodes</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.QRBarcodeData" /> class derives from the base <see cref="T:Leadtools.Barcode.BarcodeData" /> to add specific data that 
             can be read or written when using QR barcodes.</para>
        <h3>Reading Barcodes</h3>
        <para>When the <see cref="T:Leadtools.Barcode.BarcodeReader" /> object detects and reads a QR (<see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR
             </see>), the <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods will 
             return the <see cref="T:Leadtools.Barcode.QRBarcodeData" />
             object for each barcode cast down to the base <see cref="T:Leadtools.Barcode.BarcodeData" /> class.</para>
        <para>Perform standard .NET casting to get the object as <see cref="T:Leadtools.Barcode.QRBarcodeData" /> and then examine the extra data 
             properties associated with it.</para>
        <para>In addition to all the data members returned as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, this class adds 
             the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel" /> - An 
               <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies
             the symbol model and version of the QR barcode.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other QR read options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> class.</para>
        <h3>Writing Barcodes</h3>
        <para>The <see cref="T:Leadtools.Barcode.BarcodeWriter" /> class contains the <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" /> method that is used to 
             write a barcode to an image. This method accepts the data parameter as the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object. 
             To write a QR barcode, create an instance of <see cref="T:Leadtools.Barcode.QRBarcodeData" />
             and fill the required parameters then pass this object as the <i>data</i> parameter to 
             <see cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)" />.</para>
        <para>In addition to all the data members that must be set as usual in the base <see cref="T:Leadtools.Barcode.BarcodeData" /> object, 
             specify the following members:</para>
        <list type="bullet">
          <item>
            <description>
              <para>
                <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel" /> - An 
               <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies
             the symbol model and version of the QR barcode.</para>
            </description>
          </item>
        </list>
        <para>In addition to the members above, other QR write options not related to the barcode data can be set using the 
             <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" /> class.</para>
        <para>Use the static (or Shared in Visual Basic) <see cref="M:Leadtools.Barcode.BarcodeData.CreateDefaultBarcodeData(Leadtools.Barcode.BarcodeSymbology)">BarcodeData.CreateDefaultBarcodeData</see>
             method to create a new instance of <see cref="T:Leadtools.Barcode.QRBarcodeData" /> that contains default parameters ready for writing to an image:</para>
        <para>
          <strong>[Visual Basic]</strong>
          <pre>
            <code inline="true">
             Dim qrData As QRBarcodeData = DirectCast(BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.QR), QRBarcodeData)
             </code>
          </pre>
        </para>
        <para>
          <strong>[C#]</strong>
          <pre>
            <code inline="true">
             QRBarcodeData qrData = BarcodeData.CreateDefaultBarcodeData(BarcodeSymbology.QR) as QRBarcodeData;
             </code>
          </pre>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Barcode.BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.BarcodeReader" />
      <seealso cref="T:Leadtools.Barcode.BarcodeWriter" />
      <seealso cref="T:Leadtools.Barcode.BarcodeSymbology" />
      <seealso cref="T:Leadtools.Barcode.BarcodeEngine" />
      <seealso cref="T:Leadtools.Barcode.MicroPDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.PDF417BarcodeData" />
      <seealso cref="T:Leadtools.Barcode.DatamatrixBarcodeData" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />
      <seealso cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso>
      <seealso cref="M:Leadtools.Barcode.BarcodeWriter.WriteBarcode(Leadtools.RasterImage,Leadtools.Barcode.BarcodeData,Leadtools.Barcode.BarcodeWriteOptions)">BarcodeWriter.WriteBarcode</seealso>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes In LEADTOOLS</seealso>
      <seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso>
      <seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso>
      <seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso>
      <seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodes">Writing Barcodes Tutorial</seealso>
      <seealso cref="T:BA.Topics.WritingBarcodesBoundsAndXModule">Writing Barcodes - Bounds and XModule</seealso>
      <example>
             This example writes a couple of QR barcode with different options to an image and then reads them back.
             <!--QRBarcodeData--></example>
      <java>
        <pre>public class QRBarcodeData extends BarcodeData</pre>
      </java>
      <objectivec>
        <pre>@interface LTQRBarcodeData : LTBarcodeData&gt;LTBarcodeDataDelegate&lt;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.QRBarcodeData" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeData.#ctor">BarcodeData()</see>, 
            the following members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeData.Symbology" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel" />
            </term>
            <description>
              <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.AutoSize</see>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <java>
        <pre>public QRBarcodeData()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeData.Clone">
      <summary>
            Creates an exact copy of this QR barcode.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.QRBarcodeData" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This method overrides the base class <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see> to clone 
            the extra members of this class.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="M:Leadtools.Barcode.BarcodeData.Clone">BarcodeData.Clone</see>.</para>
      </example>
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeData.Symbology">
      <summary>
            Gets or sets the barcode symbology (type) associated with this <see cref="T:Leadtools.Barcode.QRBarcodeData" />.
            </summary>
      <value>An <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> enumeration member that specifies the barcode symbology (type) 
            associated with this <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</value>
      <remarks>
        <para>This property overrides the base <see cref="P:Leadtools.Barcode.BarcodeData.Symbology">BarcodeData.Symbology</see> 
            and will always return <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>. Attempting to set this 
            property to any other symbology value is illegal and will result in
            an <see cref="T:System.ArgumentException" /> being thrown.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <java>
        <pre>
@Override public BarcodeSymbology getSymbology()
@Override public void setSymbology(BarcodeSymbology value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTBarcodeSymbology symbology;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeData.SymbolModel">
      <summary>
            Gets or sets the QR barcode symbol model and version.
            </summary>
      <value>A <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> enumeration member that specifies the QR barcode symbol model and version. 
            Default value is <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model2AutoSize</see>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel" /> of a QR barcode controls how much data the barcode can hold.</para>
        <para>The QR standard specifies 40 different sizes for the QR barcode. The maximum data capacity varies, 
            depending on the size of the barcode and its Error Correction level.</para>
        <para>Generally, you should only be concerned with the value of this property when writing barcodes, 
            since LEADTOOLS will automatically find the correct symbol and data size
            from the barcode itself and populate this property and the data with the correct value. Refer to
            <see cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</see>
            for QR barcodes and how <see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel" /> affects the data size.</para>
        <para>In addition to the above, the following symbol sizes can be used when writing a QR barcode:</para>
        <list type="table">
          <listheader>
            <term>Symbol Model</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Model 1 Auto size (<see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model1AutoSize</see>)</term>
            <description>
              <para>Use model 1 and the minimum required size based on the data inside the barcode (the data set using 
            <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
          <item>
            <term>Model 2 Auto size (<see cref="T:Leadtools.Barcode.QRBarcodeSymbolModel">QRBarcodeSymbolModel.Model2AutoSize</see>)</term>
            <description>
              <para>Use model 2 and the minimum required size based on the data inside the barcode (the data set using <see cref="M:Leadtools.Barcode.BarcodeData.SetData(System.Byte[])">BarcodeData.SetData</see>)</para>
            </description>
          </item>
        </list>
        <para>Use the above special QR barcode symbol sizes when writing a barcode, when reading the QR barcode back,
            <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel" /> will be set to one of the other constant values.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <java>
        <pre>
public QRBarcodeSymbolModel getSymbolModel()
public void setSymbolModel(QRBarcodeSymbolModel value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) LTQRBarcodeSymbolModel symbolModel;</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.QRBarcodeSymbolModel">
      <summary>
             Specifies the QR symbol size.
             </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.QRBarcodeData.SymbolModel">QRBarcodeData.SymbolModel</see> property to specify 
             the QR barcode's symbol size.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para>
      </example>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes In LEADTOOLS</seealso>
      <java>
        <pre>public enum QRBarcodeSymbolModel</pre>
      </java>
      <objectivec>
        <pre>enum LTQRBarcodeSymbolModel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2AutoSize">
      <summary>
            (0)<para>QR Model 2 Auto size</para></summary>
      <java>
        <pre>MODEL2_AUTOSIZE</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2AutoSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version1">
      <summary>
            (1)<para>QR Model 2 Version 1</para></summary>
      <java>
        <pre>MODEL2_VERSION1</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version2">
      <summary>
            (2)<para>QR Model 2 Version 2</para></summary>
      <java>
        <pre>MODEL2_VERSION2</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version3">
      <summary>
            (3)<para>QR Model 2 Version 3</para></summary>
      <java>
        <pre>MODEL2_VERSION3</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version4">
      <summary>
            (4)<para>QR Model 2 Version 4</para></summary>
      <java>
        <pre>MODEL2_VERSION4</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version5">
      <summary>
            (5)<para>QR Model 2 Version 5</para></summary>
      <java>
        <pre>MODEL2_VERSION5</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version6">
      <summary>
            (6)<para>QR Model 2 Version 6</para></summary>
      <java>
        <pre>MODEL2_VERSION6</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version6</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version7">
      <summary>
        <para>QR Model 2 Version 7</para>
            (7)</summary>
      <java>
        <pre>MODEL2_VERSION7</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version7</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version8">
      <summary>
            (8)<para>QR Model 2 Version 8</para></summary>
      <java>
        <pre>MODEL2_VERSION8</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version8</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version9">
      <summary>
            (9)<para>QR Model 2 Version 9</para></summary>
      <java>
        <pre>MODEL2_VERSION9</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version9</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version10">
      <summary>
            (10)<para>QR Model 2 Version 10</para></summary>
      <java>
        <pre>MODEL2_VERSION10</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version11">
      <summary>
            (11)<para>QR Model 2 Version 11</para></summary>
      <java>
        <pre>MODEL2_VERSION11</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version11</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version12">
      <summary>
            (12)<para>QR Model 2 Version 12</para></summary>
      <java>
        <pre>MODEL2_VERSION12</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version12</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version13">
      <summary>
            (13)<para>QR Model 2 Version 13</para></summary>
      <java>
        <pre>MODEL2_VERSION13</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version13</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version14">
      <summary>
            (14)<para>QR Model 2 Version 14</para></summary>
      <java>
        <pre>MODEL2_VERSION14</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version14</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version15">
      <summary>
            (15)<para>QR Model 2 Version 15</para></summary>
      <java>
        <pre>MODEL2_VERSION15</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version15</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version16">
      <summary>
            (16)<para>QR Model 2 Version 16</para></summary>
      <java>
        <pre>MODEL2_VERSION16</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version16</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version17">
      <summary>
            (17)<para>QR Model 2 Version 17</para></summary>
      <java>
        <pre>MODEL2_VERSION17</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version17</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version18">
      <summary>
            (18)<para>QR Model 2 Version 18</para></summary>
      <java>
        <pre>MODEL2_VERSION18</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version18</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version19">
      <summary>
            (19)<para>QR Model 2 Version 19</para></summary>
      <java>
        <pre>MODEL2_VERSION19</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version19</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version20">
      <summary>
            (20)<para>QR Model 2 Version 20</para></summary>
      <java>
        <pre>MODEL2_VERSION20</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version20</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version21">
      <summary>
            (21)<para>QR Model 2 Version 21</para></summary>
      <java>
        <pre>MODEL2_VERSION21</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version21</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version22">
      <summary>
            (22)<para>QR Model 2 Version 22</para></summary>
      <java>
        <pre>MODEL2_VERSION22</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version22</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version23">
      <summary>
            (23)<para>QR Model 2 Version 23</para></summary>
      <java>
        <pre>MODEL2_VERSION23</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version23</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version24">
      <summary>
            (24)<para>QR Model 2 Version 24</para></summary>
      <java>
        <pre>MODEL2_VERSION24</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version24</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version25">
      <summary>
            (25)<para>QR Model 2 Version 25</para></summary>
      <java>
        <pre>MODEL2_VERSION25</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version25</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version26">
      <summary>
            (26)<para>QR Model 2 Version 26</para></summary>
      <java>
        <pre>MODEL2_VERSION26</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version26</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version27">
      <summary>
            (27)<para>QR Model 2 Version 27</para></summary>
      <java>
        <pre>MODEL2_VERSION27</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version27</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version28">
      <summary>
            (28)<para>QR Model 2 Version 28</para></summary>
      <java>
        <pre>MODEL2_VERSION28</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version28</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version29">
      <summary>
            (29)<para>QR Model 2 Version 29</para></summary>
      <java>
        <pre>MODEL2_VERSION29</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version29</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version30">
      <summary>
            (30)<para>QR Model 2 Version 30</para></summary>
      <java>
        <pre>MODEL2_VERSION30</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version30</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version31">
      <summary>
            (31)<para>QR Model 2 Version 31</para></summary>
      <java>
        <pre>MODEL2_VERSION31</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version31</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version32">
      <summary>
            (32)<para>QR Model 2 Version 32</para></summary>
      <java>
        <pre>MODEL2_VERSION32</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version32</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version33">
      <summary>
            (33)<para>QR Model 2 Version 33</para></summary>
      <java>
        <pre>MODEL2_VERSION33</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version33</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version34">
      <summary>
            (34)<para>QR Model 2 Version 34</para></summary>
      <java>
        <pre>MODEL2_VERSION34</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version34</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version35">
      <summary>
            (35)<para>QR Model 2 Version 35</para></summary>
      <java>
        <pre>MODEL2_VERSION35</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version35</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version36">
      <summary>
            (36)<para>QR Model 2 Version 36</para></summary>
      <java>
        <pre>MODEL2_VERSION36</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version36</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version37">
      <summary>
            (37)<para>QR Model 2 Version 37</para></summary>
      <java>
        <pre>MODEL2_VERSION37</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version37</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version38">
      <summary>
            (38)<para>QR Model 2 Version 38</para></summary>
      <java>
        <pre>MODEL2_VERSION38</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version38</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version39">
      <summary>
            (39)<para>QR Model 2 Version 39</para></summary>
      <java>
        <pre>MODEL2_VERSION39</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version39</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model2Version40">
      <summary>
            (40)<para>QR Model 2 Version 40</para></summary>
      <java>
        <pre>MODEL2_VERSION40</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model2Version40</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1AutoSize">
      <summary>
            (41)<para>QR Model 1 Auto size</para></summary>
      <java>
        <pre>MODEL1_AUTOSIZE</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1AutoSize</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version1">
      <summary>
            (42)<para>QR Model 1 Version 1</para></summary>
      <java>
        <pre>MODEL1_VERSION1</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version1</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version2">
      <summary>
            (43)<para>QR Model 1 Version 2</para></summary>
      <java>
        <pre>MODEL1_VERSION2</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version2</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version3">
      <summary>
            (44)<para>QR Model 1 Version 3</para></summary>
      <java>
        <pre>MODEL1_VERSION3</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version3</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version4">
      <summary>
            (45)<para>QR Model 1 Version 4</para></summary>
      <java>
        <pre>MODEL1_VERSION4</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version4</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version5">
      <summary>
            (46)<para>QR Model 1 Version 5</para></summary>
      <java>
        <pre>MODEL1_VERSION5</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version5</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version6">
      <summary>
            (47)<para>QR Model 1 Version 6</para></summary>
      <java>
        <pre>MODEL1_VERSION6</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version6</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version7">
      <summary>
            (48)<para>QR Model 1 Version 7</para></summary>
      <java>
        <pre>MODEL1_VERSION7</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version7</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version8">
      <summary>
            (49)<para>QR Model 1 Version 8</para></summary>
      <java>
        <pre>MODEL1_VERSION8</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version8</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version9">
      <summary>
            (50)<para>QR Model 1 Version 9</para></summary>
      <java>
        <pre>MODEL1_VERSION9</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version9</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version10">
      <summary>
            (51)<para>QR Model 1 Version 10</para></summary>
      <java>
        <pre>MODEL1_VERSION10</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version10</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version11">
      <summary>
            (52)<para>QR Model 1 Version 11</para></summary>
      <java>
        <pre>MODEL1_VERSION11</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version11</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version12">
      <summary>
            (53)<para>QR Model 1 Version 12</para></summary>
      <java>
        <pre>MODEL1_VERSION12</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version12</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version13">
      <summary>
            (54)<para>QR Model 1 Version 13</para></summary>
      <java>
        <pre>MODEL1_VERSION13</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version13</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeSymbolModel.Model1Version14">
      <summary>
            (55)<para>QR Model 1 Version 14</para></summary>
      <java>
        <pre>MODEL1_VERSION14</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeSymbolModel_Model1Version14</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.QRBarcodeECCLevel">
      <summary>
            Specifies the QR symbol ECC level.
            </summary>
      <remarks>
        <para>Used as the type for the <see cref="P:Leadtools.Barcode.QRBarcodeWriteOptions.ECCLevel">QRBarcodeWriteOptions.ECCLevel</see> 
            property to specify the QR barcode ECC (Error Correction) level.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeWriteOptions" />.</para>
      </example>
      <seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes In LEADTOOLS</seealso>
      <java>
        <pre>public enum QRBarcodeECCLevel</pre>
      </java>
      <objectivec>
        <pre>enum LTQRBarcodeECCLevel</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeECCLevel.LevelL">
      <summary>
            (0)<para>QR Level L - Lowest reliability</para></summary>
      <java>
        <pre>LEVEL_L</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeECCLevel_LevelL</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeECCLevel.LevelM">
      <summary>
            (1)<para>QR Level M - Standard reliability</para></summary>
      <java>
        <pre>LEVEL_M</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeECCLevel_LevelM</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeECCLevel.LevelQ">
      <summary>
            (2)<para>QR Level Q - High reliability</para></summary>
      <java>
        <pre>LEVEL_Q</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeECCLevel_LevelQ</pre>
      </objectivec>
    </member>
    <member name="F:Leadtools.Barcode.QRBarcodeECCLevel.LevelH">
      <summary>
            (3)<para>QR Level H - Maximum reliability</para></summary>
      <java>
        <pre>LEVEL_H</pre>
      </java>
      <objectivec>
        <pre>LTQRBarcodeECCLevel_LevelH</pre>
      </objectivec>
    </member>
    <member name="T:Leadtools.Barcode.QRBarcodeReadOptions">
      <summary>
             Contains extra options to use when reading QR barcodes.
             </summary>
      <keywords>Barcode,QR|2D Barcode (QR)|QR|QR (2D) Barcodes</keywords>s
             <remarks><para>The <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> class is used to control the options when reading QR barcodes 
             using LEADTOOLS. Set the options in two ways:</para><para>The <see cref="T:Leadtools.Barcode.BarcodeReader" /> class contains default options for each barcode symbology (or group of common 
             symbologies). These options can be retrieved using
             the <see cref="M:Leadtools.Barcode.BarcodeReader.GetDefaultOptions(Leadtools.Barcode.BarcodeSymbology)">BarcodeReader.GetDefaultOptions</see> method, passing 
             <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>. Change the members of the returned <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> 
             by casting it from <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> to <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />.</para><para>You can also create an instance of the <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> class and use it directly in the
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</see> methods that accept a 
             single or array of options as an input parameter.</para><para>The base <see cref="T:Leadtools.Barcode.BarcodeReadOptions" /> contains the following members and features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor">BarcodeReadOptions.ForeColor</see></term><description><para>Controls the barcode foreground color (color of the bars or symbols) to use when reading a 
                  barcode from a colored image.</para></description></item><item><term><see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor">BarcodeReadOptions.BackColor</see></term><description><para>Controls the barcode background color (color of the spaces) to use when reading a barcode 
                  from a colored image.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeReadOptions.Load">BarcodeReadOptions.Load</see> and
             <see cref="M:Leadtools.Barcode.BarcodeReadOptions.Save">BarcodeReadOptions.Save</see></term><description><para>Can be used to save or load the options to/from an XML file or stream.</para></description></item><item><term><see cref="M:Leadtools.Barcode.BarcodeOptions.GetSupportedSymbologies">BarcodeReadOptions.GetSupportedSymbologies</see></term><description><para>This class overrides the base class method to return an array containing the following symbologies: 
                  <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see></para></description></item></list><para>In addition to the features features and members, the <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> contains 
             these QR barcodes specific features:</para><list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Barcode.QRBarcodeReadOptions.EnableDoublePass" /></term><description><para>Enable internal auto pre-processing of the image data if no QR barcode was found</para></description></item></list></remarks><seealso cref="T:Leadtools.Barcode.QRBarcodeData" /><seealso cref="T:Leadtools.Barcode.BarcodeReader" /><seealso cref="T:Leadtools.Barcode.BarcodeSymbology" /><seealso cref="T:Leadtools.Barcode.BarcodeEngine" /><seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcode">BarcodeReader.ReadBarcode</seealso><seealso cref="M:Leadtools.Barcode.BarcodeReader.ReadBarcodes">BarcodeReader.ReadBarcodes</seealso><seealso cref="T:BA.Topics.ProgrammingWithLEADTOOLSBarcode">Programming with LEADTOOLS Barcode</seealso><seealso cref="T:BA.Topics.SupportedBarcodeSymbologies">Supported Barcode Symbologies</seealso><seealso cref="T:BA.Topics.UnlockingBarcodeSupport">Unlocking Barcode Support</seealso><seealso cref="T:BA.Topics.ReadingBarcodes">Reading Barcodes Tutorial</seealso><seealso cref="T:BA.Topics.QRBarcodeInLEADTOOLS">QR Barcodes in LEADTOOLS</seealso><example><para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeData" />.</para></example><java><pre>public class QRBarcodeReadOptions extends BarcodeReadOptions</pre></java><objectivec><pre>@interface LTQRBarcodeReadOptions : LTBarcodeReadOptions</pre></objectivec></member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> class with default values.
            </summary>
      <remarks>
        <para>In addition to setting the base class members as specified in <see cref="M:Leadtools.Barcode.BarcodeReadOptions.#ctor">BarcodeReadOptions()</see>, 
            the members are initialized as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Barcode.QRBarcodeReadOptions.EnableDoublePass" />
            </term>
            <description>
              <para>
                <strong>false</strong>
              </para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>public QRBarcodeReadOptions()</pre>
      </java>
      <objectivec>
        <pre>- (id)init;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.GetSupportedSymbologies">
      <summary>
            Returns the barcode symbologies supported by this class.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Barcode.BarcodeSymbology" /> that specifies the barcode symbologies supported by this 
            read options class.</returns>
      <remarks>
        <para>The <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> class will return an array containing the following symbologies:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Barcode.BarcodeSymbology">BarcodeSymbology.QR</see>
            </description>
          </item>
        </list>
        <para>To check if a symbology is supported by this options class, 
            use <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public BarcodeSymbology[] getSupportedSymbologies()</pre>
      </java>
      <objectivec>
        <pre>
- (void)getSupportedSymbologies:(LTBarcodeSymbology**)supportedSymbologies 
      supportedSymbologiesCount:(unsigned int*)supportedSymbologiesCount;            </pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.IsSupportedSymbology_WinRT(Leadtools.Barcode.BarcodeSymbology)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.BarcodeOptions.IsSupportedSymbology(Leadtools.Barcode.BarcodeSymbology)" />.</para>
      </summary>
      <param name="symbology">The symbology to check.</param>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.Clone">
      <summary>
            Creates an exact copy of this barcode write options.
            </summary>
      <returns>The <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" /> clone this method creates, cast as an object.</returns>
      <remarks>
        <para>This methods clones (creates a new object) this <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public Object clone()</pre>
      </java>
      <objectivec>
        <pre>- (id)copy;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)">
      <summary>
            Copies the members of this options class to the specified object.
            </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeOptions" /> object.</param>
      <remarks>
        <para>This method is intended to be used by the LEADTOOLS derived type and should not be called 
            directly by the user.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public void copyTo(BarcodeOptions options)</pre>
      </java>
      <objectivec>
        <pre>- (void)copyTo:(NSObject*)options;</pre>
      </objectivec>
    </member>
    <member name="M:Leadtools.Barcode.QRBarcodeReadOptions.CopyTo_WinRT(Leadtools.Barcode.IBarcodeOptions)">
      <summary>
        <para>For information about this method please see <see cref="M:Leadtools.Barcode.QRBarcodeReadOptions.CopyTo(Leadtools.Barcode.BarcodeOptions)" />.</para>
      </summary>
      <param name="options">Destination <see cref="T:Leadtools.Barcode.BarcodeData" /> object.</param>
      <remarks>
        <para>Note: In LEADTOOLS for .NET, the equivalent to <see cref="T:Leadtools.Barcode.IBarcodeOptions" /> is <see cref="T:Leadtools.Barcode.BarcodeOptions" />.</para>
      </remarks>
      <winrt />
      <noexample />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeReadOptions.FriendlyName">
      <summary>
            Gets the friendly name of this class.
            </summary>
      <value>A <see cref="T:System.String" /> that contains a friendly name of this class.</value>
      <remarks>
        <para>The returned value can be used in an application user-interface component. 
            The C# and VB Barcode demos use <see cref="P:Leadtools.Barcode.QRBarcodeReadOptions.FriendlyName" />.</para>
      </remarks>
      <noexample />
      <java>
        <pre>@Override public String getFriendlyName()</pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, copy, readonly) NSString* friendlyName;</pre>
      </objectivec>
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeReadOptions.BackColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.BackColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode background (spaces) color to use when 
            searching for barcodes. The default value is "White" (RGB of #FFFFFF).</value>
      <noremarks />
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeReadOptions.ForeColor_WinRT">
      <summary>
        <para>For information about this property please see <see cref="P:Leadtools.Barcode.BarcodeReadOptions.ForeColor" />.</para>
      </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> that specifies the barcode foreground (bars or symbol) color 
            to use when searching for barcodes. The default value is "Black" (RGB of #000000).</value>
      <noremarks />
      <example>
            This example reads a barcode from an image with specific colors.
            <!--BarcodeReadOptions.ForeColor--></example>
      <winrt />
    </member>
    <member name="P:Leadtools.Barcode.QRBarcodeReadOptions.EnableDoublePass">
      <summary>
            Gets or sets a value indicating whether to use double pass when reading QR symbols.
            </summary>
      <value>
        <strong>true</strong> to use double pass when reading QR symbols. Otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When reading 2D barcodes, LEADTOOLS can perform internal auto preprocessing on the image and try again 
            if the engine cannot detect the barcode required. This may take extra processing and increase the barcode 
            detection time. Hence, it is not recommended to always have it enabled, except in certain situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>The application is reading barcodes of this type exclusively. For example, a dedicated 
              QR reader. Always reading the barcodes is more important than recognition speed.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The application uses barcode detection on a server. In this case, the time spent on the 
              actual barcode detection is most probably less than the time required to send the image to the server and get 
              the result back due to network latency. Therefore, it makes sense to turn this feature on in this situation.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The images provided may have a small resolution (DPI) or known to come from a source 
              that does not always provide clean images, for example, a Fax machine or a Scanner. Enabling double pass here 
              ensures that you can read the barcodes regardless of the quality of the input image.</para>
            </description>
          </item>
          <item>
            <description>
              <para>The LEADTOOLS .NET C# and VB Barcode Demo leaves the option disabled by default. When the 
              user tries to read a barcode of this type and the engine
            cannot find it, it will then ask the user if they want to turn this feature on and try again. An approach like that 
            (or an automated one: read, if fails, enable and read again) can
            also be used.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Barcode.QRBarcodeReadOptions" />.</para>
      </example>
      <java>
        <pre>
public boolean getEnableDoublePass()
public void setEnableDoublePass(boolean value)            </pre>
      </java>
      <objectivec>
        <pre>@property (nonatomic, assign) BOOL enableDoublePass;</pre>
      </objectivec>
    </member>
  </members>
</doc>